{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/hexo.xcworkspace/contents.xcworkspacedata","path":"hexo.xcworkspace/contents.xcworkspacedata","modified":0,"renderable":0},{"_id":"source/images/fastImageCache2.png","path":"images/fastImageCache2.png","modified":0,"renderable":0},{"_id":"source/images/swiftc.png","path":"images/swiftc.png","modified":0,"renderable":0},{"_id":"source/images/unownedbig.png","path":"images/unownedbig.png","modified":0,"renderable":0},{"_id":"source/images/fastImageCache3.png","path":"images/fastImageCache3.png","modified":0,"renderable":0},{"_id":"source/images/fastImageCache1.png","path":"images/fastImageCache1.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"source/hexo.xcworkspace/xcuserdata/Madordie.xcuserdatad/UserInterfaceState.xcuserstate","path":"hexo.xcworkspace/xcuserdata/Madordie.xcuserdatad/UserInterfaceState.xcuserstate","modified":1,"renderable":0},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/project.pbxproj","path":"hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/project.pbxproj","modified":0,"renderable":0},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools/main.swift","path":"hexo.xcworkspace/CommandLineTools/CommandLineTools/main.swift","modified":0,"renderable":0},{"_id":"source/hexo.xcworkspace/CommandLineTools/Location/main.swift","path":"hexo.xcworkspace/CommandLineTools/Location/main.swift","modified":0,"renderable":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/project.xcworkspace/contents.xcworkspacedata","path":"hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/project.xcworkspace/contents.xcworkspacedata","modified":0,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcuserdata/Madordie.xcuserdatad/xcschemes/xcschememanagement.plist","path":"hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcuserdata/Madordie.xcuserdatad/xcschemes/xcschememanagement.plist","modified":0,"renderable":0},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/project.xcworkspace/xcuserdata/Madordie.xcuserdatad/UserInterfaceState.xcuserstate","path":"hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/project.xcworkspace/xcuserdata/Madordie.xcuserdatad/UserInterfaceState.xcuserstate","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/hexo.xcworkspace/CommandLineTools/Backup/main.swift","path":"hexo.xcworkspace/CommandLineTools/Backup/main.swift","modified":0,"renderable":0},{"_id":"source/hexo.xcworkspace/CommandLineTools/Public/main.swift","path":"hexo.xcworkspace/CommandLineTools/Public/main.swift","modified":0,"renderable":0},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcshareddata/xcschemes/Backup.xcscheme","path":"hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcshareddata/xcschemes/Backup.xcscheme","modified":0,"renderable":0},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcshareddata/xcschemes/Location.xcscheme","path":"hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcshareddata/xcschemes/Location.xcscheme","modified":0,"renderable":0},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcshareddata/xcschemes/Public.xcscheme","path":"hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcshareddata/xcschemes/Public.xcscheme","modified":0,"renderable":0},{"_id":"source/hexo.xcworkspace/CommandLineTools/Update Theme/main.swift","path":"hexo.xcworkspace/CommandLineTools/Update Theme/main.swift","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"8f4d90032029fc648629ff7b5ad55cff852de2e2","modified":1502457166000},{"_id":"source/_config.yml","hash":"e0706b2af34490175dfed00051062e7bdfb424f0","modified":1491633819000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1469338903000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1491634131000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1491634131000},{"_id":"themes/next/.DS_Store","hash":"e0d0d954d3bc91b5d09c11b5cb3e63700240b24f","modified":1491638824000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1502554656000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1491634131000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1469338903000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1491634131000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1502554656000},{"_id":"themes/next/_config.yml","hash":"c32b38f6a67be7c06d072d740f69ee1cfebb0b8a","modified":1502633996000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1502554656000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1469338903000},{"_id":"themes/next/.travis.yml","hash":"1a69a0b3ae010b10080069332829205573c64371","modified":1502555038000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1502554656000},{"_id":"themes/next/README.md","hash":"0876b7c79aea2a15f35d467a1fb2b98a8a16d447","modified":1502555038000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1491634131000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1502554656000},{"_id":"source/404/index.md","hash":"51ec3c7e60dd78507f21f33dfa33b9627f828ad8","modified":1501066059000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1488812640000},{"_id":"source/_posts/about-change-blog.md","hash":"ce131343e6daeb19f786e0a52eb523c63dd146eb","modified":1469405391000},{"_id":"source/_posts/about-me.md","hash":"2073e6e5a46e95f513d831644babddaa590979ca","modified":1502558418000},{"_id":"source/_posts/about-project-tableview.md","hash":"86e635fad78647355332f156a566e6742d352ca4","modified":1494908588000},{"_id":"source/_posts/about-reprint-article.md","hash":"12b54293fce2c4f5c593918cfb141c9fc6c457ec","modified":1490415140000},{"_id":"source/_posts/bandwagonhost-note.md","hash":"c57142c789d54ec349e8715a4d02bcdbf488e402","modified":1500365390000},{"_id":"source/_posts/bang-fastimagecache.md","hash":"cf134f349a071c253955d335b675477a4b0150f3","modified":1494999467000},{"_id":"source/_posts/bruch-up-regular-expressions.md","hash":"c5ea6fc6bb18d239ddbe548accf44edb7d9f80fb","modified":1483096325000},{"_id":"source/_posts/debug-SwiftValue-unsignedIntegerValue.md","hash":"85d4ce7e62475862c49ab9c77223b6a3ce17826b","modified":1494908617000},{"_id":"source/_posts/build-ipa-sh.md","hash":"ac30240b87b2f12598da6336707c38c2445bf9fb","modified":1500710125000},{"_id":"source/_posts/debug-swift-notifa-frame.md","hash":"b0b404fbdb703a4961fe0747dbbc5debc219c08e","modified":1483096709000},{"_id":"source/_posts/debug-xcode8-analysis-crash-file.md","hash":"953c4508ddb1529b0781727a20b8c8accc0b03f7","modified":1483096697000},{"_id":"source/_posts/elegant-to-use-swiftlint.md","hash":"f98fd949e2cf48aaa19d4471a1d204e93aa24208","modified":1494908894000},{"_id":"source/_posts/debug-uiview-m-190.md","hash":"4dbeb67ac741e7c251ee8917b1593c35ab4d788c","modified":1483096769000},{"_id":"source/_posts/fastlane-note.md","hash":"5ad5f79be894b125e5c4e7a904b591a1a4155fd8","modified":1500710126000},{"_id":"source/_posts/format-sketchplugin.md","hash":"1fb14e63bc77e307202ee081aa87b2714cbe2548","modified":1500276824000},{"_id":"source/_posts/ios11-beta.md","hash":"b97abaafcb47b6eedfe27cf2b07e8c2cd7add950","modified":1497503332000},{"_id":"source/_posts/note.md","hash":"f36882af5334d8e2d1b4e3543475a8edf4b11f9c","modified":1495005407000},{"_id":"source/_posts/push-pop-navigation-bar-hidden.md","hash":"7f3c8ab359da53374088bbd7f47b89335492711b","modified":1495099009000},{"_id":"source/_posts/reactivecocoa-ready-to-use.md","hash":"d89eb49ef38b8be3d0d1abb5a4eb6fdcd17a23e6","modified":1494908897000},{"_id":"source/_posts/reverse-ios-dump-decrypted.md","hash":"bf53fccdc3550334802ef6581e8cd3e07f8f147b","modified":1502360838000},{"_id":"source/_posts/real-world-swift-performance.md","hash":"f90f31eb8d7e78213ecf4eae5120ad2c82a6bcec","modified":1494908664000},{"_id":"source/_posts/reverse-ios-ssh.md","hash":"fd55147ccd40219ff34a02df49bd02bf85fa3110","modified":1502267798000},{"_id":"source/_posts/reverse-ios-class-dump.md","hash":"4f94a57467b006a71f74fda8e54f26c7823cd3f4","modified":1502362573000},{"_id":"source/_posts/swiftgg-unowned-or-weak-lifetime-and-performance.md","hash":"20ce8e0897c7b925cf509a88a90d6404a05c8b7b","modified":1502345520000},{"_id":"source/_posts/sonarqube-note.md","hash":"cc09902dec29c729bb33aa58e12af045bfabcec3","modified":1494908679000},{"_id":"source/_posts/rx-dictionary.md","hash":"cb4ba5d986ea4726ee1a536ef302b2d4128d5da4","modified":1494908670000},{"_id":"source/_posts/swift-build-times.md","hash":"e0e5df24b21e6754f87d5aefd3578e4b8bfd4f76","modified":1494908841000},{"_id":"source/_posts/ui-source-and-code-decoupling.md","hash":"9308f036941a3a34448eec33ed92d3bbf942dbb3","modified":1494908691000},{"_id":"source/_posts/uitextkit-ellipsis-sth-at-the-end.md","hash":"81ef343a5461e9994cc4c6e30f51bc8d96bdc54f","modified":1494908694000},{"_id":"source/_posts/use-hexo-setup-blog.md","hash":"5db812ca3a007815ee5adfaad4b04c7a477ffa18","modified":1477144562000},{"_id":"source/about/index.md","hash":"b9fb5e943b817496d56c052462727108be9b5ee8","modified":1500710121000},{"_id":"source/about/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1488812687000},{"_id":"source/categories/index.md","hash":"bbff6e3714fbd02943df6c95da107ab7ba7c661b","modified":1490415657000},{"_id":"source/hexo.xcworkspace/contents.xcworkspacedata","hash":"9ce8d3e79471178c49ed92d830ddadf96721a119","modified":1502338655000},{"_id":"source/images/fastImageCache2.png","hash":"35dc3c1ef89f5c330457caad6b7839e9379f11cf","modified":1494907980000},{"_id":"source/images/swiftc.png","hash":"cb97db78a9fe182cfb0c7d0bc2dd477810066107","modified":1495157163000},{"_id":"source/tags/index.md","hash":"e3c461d62957e2da657e9cacc03925de0b3a2834","modified":1469403457000},{"_id":"source/images/unownedbig.png","hash":"2ac92bdc43556d1726bf6a1ef8ea82f5a989b746","modified":1495112460000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1491634131000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1502554656000},{"_id":"themes/next/_git/FETCH_HEAD","hash":"5edf80fb533334cec0953a37890c65fdc4f4a23f","modified":1502505369000},{"_id":"themes/next/_git/COMMIT_EDITMSG","hash":"0296c61bf5d0ac3ae2ff3621f4105587f51039d4","modified":1502505518000},{"_id":"themes/next/_git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1502505558000},{"_id":"themes/next/_git/ORIG_HEAD","hash":"24a379b9eef2539a489723858edc8744347ff6bc","modified":1502505558000},{"_id":"themes/next/_git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1469338903000},{"_id":"themes/next/_git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1469338287000},{"_id":"themes/next/_git/index","hash":"6c53afa0f12d9d03a7f252044d52c236fd2656da","modified":1502505558000},{"_id":"themes/next/_git/packed-refs","hash":"4466857f1a41f86e8a1c29bc9088bff54a5c90d1","modified":1469338903000},{"_id":"themes/next/layout/_layout.swig","hash":"e3c40f48ffbe19e7a2a54e72c8bb273630c37633","modified":1502555038000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1502554656000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1502554656000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1502554656000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1502554656000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1502554656000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1502554656000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1502554656000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1491634131000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1491634131000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1491634131000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1491634131000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1491634131000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1491634131000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1491634131000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1491634131000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1491634131000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1491634131000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1491634131000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1491634131000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1502554656000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1491634131000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1491634131000},{"_id":"source/images/fastImageCache3.png","hash":"032eb6b1b4d707cdafc5d90d910aa46aff267702","modified":1494907984000},{"_id":"source/images/fastImageCache1.png","hash":"8a0753cf45c21c60f30bf21b9c81ad99299175b0","modified":1494907969000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1469338903000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1469338903000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1469338903000},{"_id":"themes/next/_git/rebase-apply/apply-opt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/rebasing","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/scissors","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491634131000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469338903000},{"_id":"source/hexo.xcworkspace/CommandLineTools/.DS_Store","hash":"76a6407193c24fd362f671da2fde870047d4525d","modified":1502457155000},{"_id":"themes/next/_git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1469338287000},{"_id":"themes/next/_git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1469338287000},{"_id":"themes/next/_git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1469338287000},{"_id":"themes/next/_git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1469338287000},{"_id":"themes/next/_git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1469338287000},{"_id":"themes/next/_git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1469338287000},{"_id":"themes/next/_git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1469338287000},{"_id":"themes/next/_git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1469338287000},{"_id":"themes/next/_git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1469338287000},{"_id":"themes/next/_git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1469338287000},{"_id":"themes/next/_git/logs/HEAD","hash":"6ddc1efaeb509e110d989282d41c9f335559f882","modified":1502505558000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1491634131000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/abort-safety","hash":"929f0a39f61901b4b7ead241fc06f16e4584928a","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/final-commit","hash":"8c42a99f2faf0570422e0e4403e0ff44a64f1fcc","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/head-name","hash":"140296a356533b1771f9a72539a40a0ec81903d9","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/author-script","hash":"bca1666d67114daa3b30c8f8d607bbb9409a5062","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/last","hash":"e5fa44f2b31c1fb553b6021e7360d07d5d91ff5e","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/keep","hash":"a9fcd54b25e7e863d72cd47c08af46e61b74b561","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/orig-head","hash":"8a33fa3a76deae66b2039973715aa1d47cef90a2","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/onto","hash":"929f0a39f61901b4b7ead241fc06f16e4584928a","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/original-commit","hash":"8a33fa3a76deae66b2039973715aa1d47cef90a2","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/messageid","hash":"a9fcd54b25e7e863d72cd47c08af46e61b74b561","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/sign","hash":"a9fcd54b25e7e863d72cd47c08af46e61b74b561","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/quiet","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/next","hash":"e5fa44f2b31c1fb553b6021e7360d07d5d91ff5e","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/threeway","hash":"34fc7a11cb38cf4911763696a41698c68e5ddbbe","modified":1491634131000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1502554656000},{"_id":"themes/next/_git/rebase-apply/patch-merge-index","hash":"ef8b42d1eec0b92d2b772c717a29b493f179a778","modified":1491634131000},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1502554656000},{"_id":"themes/next/_git/rebase-apply/utf8","hash":"34fc7a11cb38cf4911763696a41698c68e5ddbbe","modified":1491634131000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1502554656000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1502554656000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1491634131000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1491634131000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1502554656000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1491634131000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1502554656000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1491634131000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1502554656000},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1502554656000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1491634131000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1491634131000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1469338903000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1491634131000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1491634131000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1469338903000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1469338903000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1502554656000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1469338903000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1491634131000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1491634131000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1491634131000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1469338903000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1502554656000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1469338903000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1502554657000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1469338903000},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1469339541000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1469338903000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1469338903000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1469338903000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1469338903000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1469338903000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469338903000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469338903000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1469338903000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1469338903000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1469338903000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1469338903000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469338903000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469338903000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469338903000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469338903000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469338903000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469338903000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469338903000},{"_id":"source/hexo.xcworkspace/xcuserdata/Madordie.xcuserdatad/UserInterfaceState.xcuserstate","hash":"b2e136158fdba14a4fef4cbf9b12a67916901fbc","modified":1502634762000},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/project.pbxproj","hash":"37ab853dc6f9733ed3b77e95aead398836929bfb","modified":1502554451000},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools/main.swift","hash":"d96a6512f9a734dcb85d4c18c7ae39e16418f814","modified":1502262321000},{"_id":"source/hexo.xcworkspace/CommandLineTools/Location/main.swift","hash":"363d46c7be1eedafa5128712cf4f2939245d2963","modified":1502262398000},{"_id":"source/uploads/avatar.png","hash":"c219003cac089b0b74a184c915003f257ec1ec21","modified":1467803963000},{"_id":"themes/next/_git/objects/38/52c5af02e253b73d4f1e060e90162651aeb4f6","hash":"0a2ec453ef941b059cd54293c205c5d56e35efe2","modified":1491634131000},{"_id":"themes/next/_git/objects/3f/a54777cb4fe7f830c193b0b1cc76620aa34079","hash":"4eaf341c8b17b571b10c7da253ea658217edd5f0","modified":1491634131000},{"_id":"themes/next/_git/objects/0e/052d97ab5cacf365a3a34e9230b47d35d07c2d","hash":"5eec87422aefe4069809e9ba8572a73c6171afcb","modified":1491634131000},{"_id":"themes/next/_git/objects/44/6b9ede224d0331d1e64a667134459ad6157c31","hash":"2c464454c6e9974959e63c5a0f10a1bd8fc028f9","modified":1491634067000},{"_id":"themes/next/_git/objects/99/137db8eb0871978d8bf0b79414aec3e4aa4f37","hash":"d4bebc43c4072ea5792da6ca49c3feaf44a60e95","modified":1491634131000},{"_id":"themes/next/_git/objects/56/15d6cc4bdbae3080bdd9f7aa7f964b0ae3fd3f","hash":"8f7971aa10ced8d0ec890ed468b5dfae24102a9b","modified":1491634075000},{"_id":"themes/next/_git/objects/5b/0d4cc569dee835596d0238dbc70b5ea1fefb15","hash":"3e86522856632990606e06837e1eda3e8dd4fab1","modified":1491634131000},{"_id":"themes/next/_git/objects/a0/7b2fae080ca32947ebbda0dd75c63f5723d44f","hash":"de27628a528ae7d3416fc65d0e9819f5a8474fb3","modified":1491634067000},{"_id":"themes/next/_git/objects/ab/ced23e2ad343d5a71d259795d1e73c2734fa8d","hash":"ee0135e107fe6d917efa541bbedbf98b2fde5fa3","modified":1491634131000},{"_id":"themes/next/_git/objects/e0/e563df1af0af2fb997259c88d522e77682ab89","hash":"01953f6553b9598453d8d65c678a969a6b55d05c","modified":1491634131000},{"_id":"themes/next/_git/objects/d4/7bddb0e28d722859c35d061d3e81ec5e411c72","hash":"efb61ae105297a35913737585811b737944ecbf4","modified":1491634067000},{"_id":"themes/next/_git/objects/f5/582c38546f1805d0cf55ec331249e3cf7f612a","hash":"1eadd06eb2991c835c28efdb9c7c83eb809a0df9","modified":1491634131000},{"_id":"themes/next/_git/refs/heads/master","hash":"24a379b9eef2539a489723858edc8744347ff6bc","modified":1502505558000},{"_id":"themes/next/_git/refs/tags/v5.1.0","hash":"7ec0539e56966d1eaf8b88c1d27165c1f7dfacf5","modified":1491634125000},{"_id":"themes/next/_git/refs/tags/v5.1.1","hash":"3caf2cc30e2bc17ce7c8decb48064104d4845453","modified":1491634125000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1491634131000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1491634131000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1491634131000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1491634131000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1502554656000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1502554656000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1491634131000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1502554656000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1491634131000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1502554656000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1491634131000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1491634131000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1491634131000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1491634131000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1491634131000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1491634131000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1502554656000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1491634131000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1502555038000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1502554656000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1491634131000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1502554656000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1491634131000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1491634131000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1469338903000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1469338903000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1469338903000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1502554656000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1491634131000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1491634131000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1469338903000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"fd65b0d38d4a8b8306de815c48caad20b84ba4cb","modified":1502555038000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1469338903000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1469338903000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1469338903000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1502555038000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1502554657000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1469338903000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1502554657000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1502554657000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1491634131000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1491634131000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1469338903000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1491634131000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1502554657000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1491634131000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1469338903000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1502554657000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1502554657000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1469338903000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1491634131000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1502554657000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1491634131000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1491634131000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1491634131000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1491634131000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1491634131000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1502554657000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1491634131000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1491634131000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1491634131000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1491634131000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1491634131000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1491634131000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1491634131000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1491634131000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1491634131000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1491634131000},{"_id":"themes/next/_git/objects/pack/pack-9c68b1bc8f77ff23034f0e1f16b6501cb5270b9d.idx","hash":"0a7fa18dadd5418b0da5d1dad22e75e25a612a43","modified":1491634125000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1491634131000},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/project.xcworkspace/contents.xcworkspacedata","hash":"ebfaf55744920b68916bd6556cc7d09672f350c0","modified":1502262321000},{"_id":"themes/next/_git/logs/refs/heads/master","hash":"f7c7ea9f591e5e7794be8669cbee25ca43dc1691","modified":1502505558000},{"_id":"themes/next/_git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1469338903000},{"_id":"themes/next/_git/refs/remotes/origin/dev","hash":"9d2c0a9ea0a9e1d5378f6aff74f50a11fe3bd73e","modified":1502505369000},{"_id":"themes/next/_git/refs/remotes/origin/servant","hash":"ee903ee2112907f4498fdb13674a640c685e95fb","modified":1491634125000},{"_id":"themes/next/_git/refs/remotes/origin/master","hash":"3232e8ff3ebf9a32940c9ca4a92ac4d6ce3a07b7","modified":1502505369000},{"_id":"themes/next/_git/refs/remotes/origin/testing","hash":"15660a56eaab85fc3fd3324de8d61dbc2b09b42a","modified":1491634125000},{"_id":"themes/next/_git/objects/pack/pack-adcffcdf0fcd56ff3adf9ee5e2e97ce9c03b1c4f.idx","hash":"4af6e2fb7304b0b3bc26d5aefbd4b319e97bc562","modified":1469338903000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1491634131000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1491634131000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1469338903000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1491634131000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"a9c6355d6516af2e13254ec89e33e5b7dcf8ceb4","modified":1502555038000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1469338903000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1469338903000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1469338903000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1469338903000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1469338903000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1469338903000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1491634131000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1469338903000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469338903000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1469338903000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1491634131000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1491634131000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1469338903000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1491634131000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1491634131000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1491634131000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1469338903000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"f00d0a9ff02f6814011e0b613a2d9020911b5c58","modified":1502555038000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1491634131000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469338903000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1469338903000},{"_id":"themes/next/source/images/avatar.gif","hash":"c219003cac089b0b74a184c915003f257ec1ec21","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1491634131000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1491634131000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1491634131000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1491634131000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1491634131000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/0001","hash":"91309d5c771672efd3bb815201483da64ff1e421","modified":1491634131000},{"_id":"themes/next/_git/rebase-apply/patch","hash":"e8ff1c2557a7abdce1128cb0121844635cbfb43c","modified":1491634131000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1491634131000},{"_id":"themes/next/_git/logs/refs/remotes/origin/HEAD","hash":"802e264e3c99af3e571933b47897965466da2225","modified":1469338903000},{"_id":"themes/next/_git/logs/refs/remotes/origin/servant","hash":"0fdae62d07a4ae03d7bb00264759540fbb8ddc2b","modified":1491634125000},{"_id":"themes/next/_git/logs/refs/remotes/origin/dev","hash":"7182cb51a9a623dfb70db863edda464a52b6077b","modified":1502505369000},{"_id":"themes/next/_git/logs/refs/remotes/origin/testing","hash":"25b40415139b4b95aaa98e554aff9cee865adc58","modified":1491634125000},{"_id":"themes/next/_git/logs/refs/remotes/origin/master","hash":"d3982ebc74490c25ba6adec653e4575b596faa33","modified":1502505369000},{"_id":"themes/next/_git/objects/37/48fac6ae0a7df0dc841c59bb4f9b3058d913e0","hash":"b9f82fbc766a037332df3a8a085b8b4b849f26aa","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1502555038000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1491634131000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1469338903000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1469338903000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1491634131000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1469338903000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1491634131000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1491634131000},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcuserdata/Madordie.xcuserdatad/xcschemes/CommandLineTools.xcscheme","hash":"3b1efab66b230baee17d83bf0252443785001570","modified":1502262362000},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcuserdata/Madordie.xcuserdatad/xcschemes/xcschememanagement.plist","hash":"f38d0fe6627a3c9ed8b1c026c0608200e1078387","modified":1502560412000},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/project.xcworkspace/xcuserdata/Madordie.xcuserdatad/UserInterfaceState.xcuserstate","hash":"c50911f6006dc898a46cf84fb3d239a86b2bfb81","modified":1502262325000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1491634131000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1491634131000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1491634131000},{"_id":"themes/next/_git/objects/pack/pack-9c68b1bc8f77ff23034f0e1f16b6501cb5270b9d.pack","hash":"724b5f17b249c72d9b620d2820465b6f5600b32e","modified":1491634125000},{"_id":"themes/next/_git/objects/pack/pack-adcffcdf0fcd56ff3adf9ee5e2e97ce9c03b1c4f.pack","hash":"a4dca228bc044f942f1a8bbf5aecee5e5e88fcf2","modified":1469338903000},{"_id":"public/baidusitemap.xml","hash":"72244e4488779feffeddedfa8dbb5bb503f064e1","modified":1502558557260},{"_id":"public/atom.xml","hash":"24ed8ed1152d2e47604e24e6272859fabf0b9ca3","modified":1502362581424},{"_id":"public/sitemap.xml","hash":"0f81ed6a08ff9dd409f7a60d20bef1fc347d43b6","modified":1502558557295},{"_id":"public/search.xml","hash":"c822e584eefdc6a079b13cdf0a3d52e30be6e4b8","modified":1502634772695},{"_id":"public/404.html","hash":"8a699507f81620f819cddebb6d20d938d1b55199","modified":1502634005913},{"_id":"public/about/index.html","hash":"59911b2671d64e32a23ccea1cd54740d4c3f82f9","modified":1502634005913},{"_id":"public/categories/index.html","hash":"171dc127bdd74b0df070768bcd192659ea85709b","modified":1502634005913},{"_id":"public/tags/index.html","hash":"e67d399eda9bb926a3dfc6953aa01d14f4e201e4","modified":1502634005913},{"_id":"public/about-me/index.html","hash":"51d6d41d08fb16b03ea1cdb2696978681db27a17","modified":1502634005916},{"_id":"public/about-change-blog/index.html","hash":"b57ab0ba8edd5766c04b1cc62ab2b8e31a996d6c","modified":1502634005916},{"_id":"public/use-hexo-setup-blog/index.html","hash":"7551d40c65b40188736290aea9a3d939687bc281","modified":1502634005916},{"_id":"public/reactivecocoa-ready-to-use/index.html","hash":"8835a3db1fde7e7fc11d0920395eb52eb34dd7e3","modified":1502634005916},{"_id":"public/about-reprint-article/index.html","hash":"72a02746d3c7703efd7e56cb6626a2c94a5bf414","modified":1502634005916},{"_id":"public/about-project-tableview/index.html","hash":"00aaa97edf83709e51cef754819f02c8014a9727","modified":1502634005916},{"_id":"public/note/index.html","hash":"145f463e5d10dccb653bdedd6b7e38b1887930be","modified":1502634005916},{"_id":"public/ui-source-and-code-decoupling/index.html","hash":"860e6df225a829f7941d8b740d0fc91aeb5cc644","modified":1502634005916},{"_id":"public/build-ipa-sh/index.html","hash":"e3e54162fc85b55cab5fd1f8e13f643915dc9562","modified":1502634005916},{"_id":"public/debug-uiview-m-190/index.html","hash":"044d0b3d1ed060d279199a3756a14ce5f1f9ef60","modified":1502634005916},{"_id":"public/debug-xcode8-analysis-crash-file/index.html","hash":"8e8a368e5f153c1c4840b59440ca0a303f660417","modified":1502634005917},{"_id":"public/debug-swift-notifa-frame/index.html","hash":"7c2dc2090ffa1ddd0cc8e20ea81e86ba67f6bdd2","modified":1502634005917},{"_id":"public/bruch-up-regular-expressions/index.html","hash":"0b30441fbe9b8d000beb317e8e51ab507dac3369","modified":1502634005917},{"_id":"public/bandwagonhost-note/index.html","hash":"f48ba88dc570339ba4cb41e493e4af69a22286ad","modified":1502634005917},{"_id":"public/elegant-to-use-swiftlint/index.html","hash":"135099612a28a1859d16c9b3a17fab494a801152","modified":1502634005917},{"_id":"public/uitextkit-ellipsis-sth-at-the-end/index.html","hash":"1024a7e4e006860a6c4e84364f1ac20ca4523a6e","modified":1502634005917},{"_id":"public/fastlane-note/index.html","hash":"56450812702fd5a02d10070c0423a32886290c17","modified":1502634005917},{"_id":"public/swift-build-times/index.html","hash":"d2868dfc4849cc42a076e8bcbaa6eab6497c193f","modified":1502634005917},{"_id":"public/real-world-swift-performance/index.html","hash":"7e1dd3a54a1e66b1c76fee317322937b1cf97109","modified":1502634005917},{"_id":"public/sonarqube-note/index.html","hash":"a418a9249619bd48132feace293a6f0a9a2b7598","modified":1502634005917},{"_id":"public/rx-dictionary/index.html","hash":"05d507da41d44829d4ba892860a7108d4a784b67","modified":1502634005917},{"_id":"public/debug-SwiftValue-unsignedIntegerValue/index.html","hash":"ffdc207f2d75ec291a24a1513dbfcb51833191a6","modified":1502634005917},{"_id":"public/bang-fastimagecache/index.html","hash":"245955373cc69565a8a7a57b7c30d0bd102a551b","modified":1502634005918},{"_id":"public/push-pop-navigation-bar-hidden/index.html","hash":"50e09c17a643e73e5067399205720b1431103152","modified":1502634005918},{"_id":"public/swiftgg-unowned-or-weak-lifetime-and-performance/index.html","hash":"d8c01b801433fa3907c541907bf906a765c367e5","modified":1502634005918},{"_id":"public/ios11-beta/index.html","hash":"569ebfc7bf46b4ea533d9a96611993915e1ff1da","modified":1502634005918},{"_id":"public/format-sketchplugin/index.html","hash":"33a115ddba7e8ea78fdee657345b3271d241272f","modified":1502634005918},{"_id":"public/reverse-ios-ssh/index.html","hash":"4bb70ddfc8b7e9b15c829d82b79387e7d6062964","modified":1502634005918},{"_id":"public/reverse-ios-dump-decrypted/index.html","hash":"6babdaed5081dc7ae9b435a264b845d910888f6a","modified":1502634005918},{"_id":"public/archives/index.html","hash":"12fa0dba08410f9bce5436e1c377d313a737473c","modified":1502634005918},{"_id":"public/archives/page/2/index.html","hash":"0716b932c799b236d54638af3d582c6da2a36bf8","modified":1502634005918},{"_id":"public/archives/2016/index.html","hash":"3730157616ef013c19132408158fade3984f7ce1","modified":1502634005918},{"_id":"public/archives/2016/07/index.html","hash":"bb2eabdcaaf4dd0408522a56212b2917b2500e55","modified":1502634005918},{"_id":"public/archives/2016/08/index.html","hash":"1fde3feb7dd714c13087303f37ffb1024f7247e8","modified":1502634005916},{"_id":"public/archives/2016/09/index.html","hash":"b433f06bba46479348120d31669132cdfb624ace","modified":1502634005916},{"_id":"public/archives/2016/10/index.html","hash":"2b6bcd157c5950bf8168daafabf1e7a755a11a10","modified":1502634005916},{"_id":"public/archives/2016/11/index.html","hash":"1b10c42bf4c7f6b74b4dd931c3fbf9c256f11003","modified":1502634005916},{"_id":"public/archives/2016/12/index.html","hash":"9087385813509a7c4a20fbee97ead266aa1ad41c","modified":1502634005916},{"_id":"public/archives/2017/index.html","hash":"9361943944a068e177fa5014a76b6dcbd2d238b2","modified":1502634005918},{"_id":"public/archives/2017/01/index.html","hash":"f47d99481c242dd9179cdd6f93caf0ad83a2b425","modified":1502634005916},{"_id":"public/archives/2017/02/index.html","hash":"de78b2467b46f35c0578b4495e48b9ae08ab5b5e","modified":1502634005916},{"_id":"public/archives/2017/04/index.html","hash":"e2a5ad1653b864ba031ef02bd38de46a02694af6","modified":1502634005916},{"_id":"public/archives/2017/05/index.html","hash":"9c1399aa73e77a2f33d282b72857e3956289eaaf","modified":1502634005916},{"_id":"public/archives/2017/06/index.html","hash":"f5a8e625781bdd9245e713764008c599520470a9","modified":1502634005916},{"_id":"public/archives/2017/07/index.html","hash":"ef2aab9f80fda723d735d743d12c7ed64d02e37a","modified":1502634005916},{"_id":"public/archives/2017/08/index.html","hash":"3f0527597fd6d059a03065c7e25d2377a0427409","modified":1502634005916},{"_id":"public/categories/公告/index.html","hash":"b090c29b703d02458fddf3abae3a39d4d8fea444","modified":1502634005913},{"_id":"public/categories/iOS/index.html","hash":"b9279ef04881954d95d94d59baedd9bc0b03da51","modified":1502634005913},{"_id":"public/categories/iOS/page/2/index.html","hash":"0cee4f580892f8145226b71d307ec3f769e18588","modified":1502634005913},{"_id":"public/categories/牢骚/index.html","hash":"e59124d9ee5085ff657dc3a25037ac5479b0795e","modified":1502634005914},{"_id":"public/categories/正则表达式/index.html","hash":"9e791c2b76699e526795ec8f516f066c966f8cd4","modified":1502634005915},{"_id":"public/categories/iOS/牢骚/index.html","hash":"ba40581353a94b5af2b1b3d9b85dc297a2e69832","modified":1502634005915},{"_id":"public/categories/DEBUG/index.html","hash":"b33d7d0d4317b7736bab51211ba008e5ab069244","modified":1502634005915},{"_id":"public/categories/工具/index.html","hash":"0eb91126918a5c4263d1ad03e42e08ae5fd25c59","modified":1502634005915},{"_id":"public/categories/Fastlane/index.html","hash":"813991d745188b5803c169de50b5807d681c9e6f","modified":1502634005915},{"_id":"public/categories/笔记/index.html","hash":"bc77b21f5f305e1d12b6f0171c7543eb365dbb97","modified":1502634005915},{"_id":"public/categories/iOS/DEBUG/index.html","hash":"759387dfbc9781a80e515b88d04f8b571057f071","modified":1502634005916},{"_id":"public/categories/iOS/ReactiveCocoa/index.html","hash":"b76fe571f2f549a9d0e4b438c840997f54b6609b","modified":1502634005916},{"_id":"public/categories/iOS/逆向/index.html","hash":"dfa28f25763ae455d86609aa0048eb83bdd8ce77","modified":1502634005916},{"_id":"public/categories/Swift/index.html","hash":"bca0a401af1d7b82b4010b6f7fefd7fca7ee7f28","modified":1502634005916},{"_id":"public/categories/教程/index.html","hash":"ae3e0e25743c2d1666a7f52f6bf3b4bb2eaf7a1f","modified":1502634005916},{"_id":"public/index.html","hash":"cd847e1020e73d6ac56a282fe5380e070c393ae5","modified":1502634005918},{"_id":"public/page/2/index.html","hash":"9c8ec6e7f9c288d40d4d501a384d6ad6d6466e26","modified":1502634005918},{"_id":"public/page/3/index.html","hash":"17ab738d3c107fc48bf53c9cf3732996b6981b09","modified":1502634005918},{"_id":"public/page/4/index.html","hash":"b0d4520a82015abfdb56aa866408a1edf87bd947","modified":1502634005918},{"_id":"public/categories/swift/index.html","hash":"e1414b373a71a47a74acff3cc8d0942ac4fee94a","modified":1502634005916},{"_id":"public/categories/swift/RxSwift/index.html","hash":"55d771b1a44f81afdacc686706da6282da78cc78","modified":1502634005916},{"_id":"public/page/5/index.html","hash":"8d1480007b3e5084c39aa79325b9ee00a2627e37","modified":1502634005918},{"_id":"public/page/6/index.html","hash":"68f94d1f3fad71a1099f3b7afa4dfe351e06e785","modified":1502634005918},{"_id":"public/tags/sketchplugin/index.html","hash":"76e56159f933a762e32a06a9c6ef84006f375154","modified":1502634005916},{"_id":"public/tags/hexo/index.html","hash":"53718054c057d9c528b6c78c0214ad00b97b2daa","modified":1502634005916},{"_id":"public/reverse-ios-class-dump/index.html","hash":"ad7b748e8a991bdbeaf48272f0773dbd1e9232e1","modified":1502634005918},{"_id":"public/hexo.xcworkspace/xcuserdata/Madordie.xcuserdatad/UserInterfaceState.xcuserstate","hash":"b2e136158fdba14a4fef4cbf9b12a67916901fbc","modified":1502634772747},{"_id":"source/hexo.xcworkspace/CommandLineTools/Backup/main.swift","hash":"c640ff27862630d7bf2fb1e3188b0df8d45177eb","modified":1502504442000},{"_id":"source/hexo.xcworkspace/CommandLineTools/Public/main.swift","hash":"c83b76ece24318a62443aaca4953eae2e1fe828e","modified":1502504605000},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcuserdata/Madordie.xcuserdatad/xcschemes/Location.xcscheme","hash":"d4eb7fd0122f92d85a0e1895a9d9e43b27b171e4","modified":1502457148000},{"_id":"public/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/project.pbxproj","hash":"4046bd9308d8fe53db5f68b2bde9f0b5426d6353","modified":1502510778472},{"_id":"public/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcuserdata/Madordie.xcuserdatad/xcschemes/xcschememanagement.plist","hash":"f38d0fe6627a3c9ed8b1c026c0608200e1078387","modified":1502560708579},{"_id":"public/hexo.xcworkspace/CommandLineTools/Backup/main.swift","hash":"c640ff27862630d7bf2fb1e3188b0df8d45177eb","modified":1502504692869},{"_id":"public/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcuserdata/Madordie.xcuserdatad/xcschemes/Location.xcscheme","hash":"d4eb7fd0122f92d85a0e1895a9d9e43b27b171e4","modified":1502504692869},{"_id":"public/hexo.xcworkspace/CommandLineTools/Public/main.swift","hash":"c83b76ece24318a62443aaca4953eae2e1fe828e","modified":1502504692869},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcuserdata/Madordie.xcuserdatad/xcschemes/Public.xcscheme","hash":"9fed933d4d571437fdae0c87e4d4aa4055e9858f","modified":1502504854000},{"_id":"public/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcuserdata/Madordie.xcuserdatad/xcschemes/Public.xcscheme","hash":"9fed933d4d571437fdae0c87e4d4aa4055e9858f","modified":1502504863726},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcshareddata/xcschemes/Backup.xcscheme","hash":"19d796bdca8d2fa0d29b4dd07820a0990f610d18","modified":1502504953000},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcshareddata/xcschemes/Location.xcscheme","hash":"707b031ad312469b88a9a57a4a46d77481ec9df1","modified":1502504952000},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcshareddata/xcschemes/Public.xcscheme","hash":"9f81d86eb14302deba362048f53e1c141bce66de","modified":1502510886000},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"5e1150225ca2d56fe3c7da5ed7242c8caaf1cb71","modified":1502554711000},{"_id":"themes/next/.git/FETCH_HEAD","hash":"595596e0f2eaaff2711135acc62624b6e4d547bd","modified":1502554468000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1502505558000},{"_id":"themes/next/.git/ORIG_HEAD","hash":"9b5805de5392da56e1fa13b8696304cfbf974cf1","modified":1502555941000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1469338903000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1469338287000},{"_id":"themes/next/.git/index","hash":"4b1e043437d53c38532d5e08d5f462e9c797539b","modified":1502555950000},{"_id":"themes/next/.git/packed-refs","hash":"4466857f1a41f86e8a1c29bc9088bff54a5c90d1","modified":1469338903000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1469338287000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1469338287000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1469338287000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1469338287000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1469338287000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1469338287000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1469338287000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1469338287000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1469338287000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1469338287000},{"_id":"themes/next/.git/logs/HEAD","hash":"d8b34878a30cdb55d50418d4aba28dbfcc2ee4af","modified":1502555941000},{"_id":"source/hexo.xcworkspace/CommandLineTools/Update Theme/main.swift","hash":"20d1356aad322ad001883bfdf0f701795164ee84","modified":1502505228000},{"_id":"themes/next/.git/objects/0e/052d97ab5cacf365a3a34e9230b47d35d07c2d","hash":"5eec87422aefe4069809e9ba8572a73c6171afcb","modified":1491634131000},{"_id":"themes/next/.git/objects/2d/3f1da6013a74f7d2d60bd2b02054f77f206a46","hash":"fe033ea2e84a5362eccb2500f9013d0ed620ad7e","modified":1502505504000},{"_id":"themes/next/.git/objects/38/52c5af02e253b73d4f1e060e90162651aeb4f6","hash":"0a2ec453ef941b059cd54293c205c5d56e35efe2","modified":1491634131000},{"_id":"themes/next/.git/objects/3f/a54777cb4fe7f830c193b0b1cc76620aa34079","hash":"4eaf341c8b17b571b10c7da253ea658217edd5f0","modified":1491634131000},{"_id":"themes/next/.git/objects/44/6b9ede224d0331d1e64a667134459ad6157c31","hash":"2c464454c6e9974959e63c5a0f10a1bd8fc028f9","modified":1491634067000},{"_id":"themes/next/.git/objects/56/15d6cc4bdbae3080bdd9f7aa7f964b0ae3fd3f","hash":"8f7971aa10ced8d0ec890ed468b5dfae24102a9b","modified":1491634075000},{"_id":"themes/next/.git/objects/5b/0d4cc569dee835596d0238dbc70b5ea1fefb15","hash":"3e86522856632990606e06837e1eda3e8dd4fab1","modified":1491634131000},{"_id":"themes/next/.git/objects/61/445ca9b183e54fb2cdd056bc89fcdd9208ffb3","hash":"997f52bb947aad9701f8a2bc05a570aea67b3953","modified":1502505504000},{"_id":"themes/next/.git/objects/64/9d5542aa66d19a51be15d5b99064f307fc1f09","hash":"08916ff3a06bbcfe581e5243ea3d824f742c59a2","modified":1502505518000},{"_id":"themes/next/.git/objects/99/137db8eb0871978d8bf0b79414aec3e4aa4f37","hash":"d4bebc43c4072ea5792da6ca49c3feaf44a60e95","modified":1491634131000},{"_id":"themes/next/.git/objects/a0/7b2fae080ca32947ebbda0dd75c63f5723d44f","hash":"de27628a528ae7d3416fc65d0e9819f5a8474fb3","modified":1491634067000},{"_id":"themes/next/.git/objects/ab/ced23e2ad343d5a71d259795d1e73c2734fa8d","hash":"ee0135e107fe6d917efa541bbedbf98b2fde5fa3","modified":1491634131000},{"_id":"themes/next/.git/objects/d0/ce083fcbcd8a62b150c7c56458b7d95c04df1f","hash":"1168f30a8f9c51c5bc961ef29bb973b133ebcd5d","modified":1502505504000},{"_id":"themes/next/.git/objects/ca/535879b5c099e1e462fbab17a9cf0292fa62ef","hash":"91cf9c77121181c9a5a7ca50a23e13cf2e768bf5","modified":1502505487000},{"_id":"themes/next/.git/objects/d4/7bddb0e28d722859c35d061d3e81ec5e411c72","hash":"efb61ae105297a35913737585811b737944ecbf4","modified":1491634067000},{"_id":"themes/next/.git/objects/e0/e563df1af0af2fb997259c88d522e77682ab89","hash":"01953f6553b9598453d8d65c678a969a6b55d05c","modified":1491634131000},{"_id":"themes/next/.git/objects/f5/582c38546f1805d0cf55ec331249e3cf7f612a","hash":"1eadd06eb2991c835c28efdb9c7c83eb809a0df9","modified":1491634131000},{"_id":"themes/next/.git/objects/pack/pack-2e75ea8215412d79cc97e7e14c4bac2ab2112731.idx","hash":"f8d23291c8f1fec2cbded56967104b1bfd5a895f","modified":1502505369000},{"_id":"themes/next/.git/refs/heads/master","hash":"3232e8ff3ebf9a32940c9ca4a92ac4d6ce3a07b7","modified":1502555941000},{"_id":"themes/next/.git/refs/tags/v5.1.0","hash":"7ec0539e56966d1eaf8b88c1d27165c1f7dfacf5","modified":1491634125000},{"_id":"themes/next/.git/refs/tags/v5.1.1","hash":"3caf2cc30e2bc17ce7c8decb48064104d4845453","modified":1491634125000},{"_id":"themes/next/.git/refs/tags/v5.1.2","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1502505369000},{"_id":"themes/next/.git/objects/pack/pack-9c68b1bc8f77ff23034f0e1f16b6501cb5270b9d.idx","hash":"0a7fa18dadd5418b0da5d1dad22e75e25a612a43","modified":1491634125000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"b2667faaebd4b8295e6274f9297cfbe2bcf9302b","modified":1502555941000},{"_id":"themes/next/.git/objects/pack/pack-adcffcdf0fcd56ff3adf9ee5e2e97ce9c03b1c4f.idx","hash":"4af6e2fb7304b0b3bc26d5aefbd4b319e97bc562","modified":1469338903000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1469338903000},{"_id":"themes/next/.git/refs/remotes/origin/dev","hash":"9d2c0a9ea0a9e1d5378f6aff74f50a11fe3bd73e","modified":1502505369000},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"3232e8ff3ebf9a32940c9ca4a92ac4d6ce3a07b7","modified":1502505369000},{"_id":"themes/next/.git/refs/remotes/origin/servant","hash":"ee903ee2112907f4498fdb13674a640c685e95fb","modified":1491634125000},{"_id":"themes/next/.git/refs/remotes/origin/testing","hash":"15660a56eaab85fc3fd3324de8d61dbc2b09b42a","modified":1491634125000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"802e264e3c99af3e571933b47897965466da2225","modified":1469338903000},{"_id":"themes/next/.git/logs/refs/remotes/origin/dev","hash":"7182cb51a9a623dfb70db863edda464a52b6077b","modified":1502505369000},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"d3982ebc74490c25ba6adec653e4575b596faa33","modified":1502505369000},{"_id":"themes/next/.git/logs/refs/remotes/origin/servant","hash":"0fdae62d07a4ae03d7bb00264759540fbb8ddc2b","modified":1491634125000},{"_id":"themes/next/.git/logs/refs/remotes/origin/testing","hash":"25b40415139b4b95aaa98e554aff9cee865adc58","modified":1491634125000},{"_id":"themes/next/.git/objects/37/48fac6ae0a7df0dc841c59bb4f9b3058d913e0","hash":"b9f82fbc766a037332df3a8a085b8b4b849f26aa","modified":1491634131000},{"_id":"themes/next/.git/objects/pack/pack-2e75ea8215412d79cc97e7e14c4bac2ab2112731.pack","hash":"630587f10e89867ec4612b7d14568d2f2cd0134c","modified":1502505369000},{"_id":"themes/next/.git/objects/pack/pack-9c68b1bc8f77ff23034f0e1f16b6501cb5270b9d.pack","hash":"724b5f17b249c72d9b620d2820465b6f5600b32e","modified":1502505504000},{"_id":"themes/next/.git/objects/pack/pack-adcffcdf0fcd56ff3adf9ee5e2e97ce9c03b1c4f.pack","hash":"a4dca228bc044f942f1a8bbf5aecee5e5e88fcf2","modified":1502505504000},{"_id":"public/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcshareddata/xcschemes/Public.xcscheme","hash":"9f81d86eb14302deba362048f53e1c141bce66de","modified":1502510893507},{"_id":"themes/next/_git/objects/2d/3f1da6013a74f7d2d60bd2b02054f77f206a46","hash":"fe033ea2e84a5362eccb2500f9013d0ed620ad7e","modified":1502505504000},{"_id":"themes/next/_git/objects/61/445ca9b183e54fb2cdd056bc89fcdd9208ffb3","hash":"997f52bb947aad9701f8a2bc05a570aea67b3953","modified":1502505504000},{"_id":"themes/next/_git/objects/64/9d5542aa66d19a51be15d5b99064f307fc1f09","hash":"08916ff3a06bbcfe581e5243ea3d824f742c59a2","modified":1502505518000},{"_id":"themes/next/_git/objects/ca/535879b5c099e1e462fbab17a9cf0292fa62ef","hash":"91cf9c77121181c9a5a7ca50a23e13cf2e768bf5","modified":1502505487000},{"_id":"themes/next/_git/objects/d0/ce083fcbcd8a62b150c7c56458b7d95c04df1f","hash":"1168f30a8f9c51c5bc961ef29bb973b133ebcd5d","modified":1502505504000},{"_id":"themes/next/_git/objects/pack/pack-2e75ea8215412d79cc97e7e14c4bac2ab2112731.idx","hash":"f8d23291c8f1fec2cbded56967104b1bfd5a895f","modified":1502505369000},{"_id":"themes/next/_git/refs/tags/v5.1.2","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1502505369000},{"_id":"themes/next/_git/objects/pack/pack-2e75ea8215412d79cc97e7e14c4bac2ab2112731.pack","hash":"630587f10e89867ec4612b7d14568d2f2cd0134c","modified":1502505369000},{"_id":"source/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcuserdata/Madordie.xcuserdatad/xcschemes/Update Theme.xcscheme","hash":"038bf225b314062324862e73a9302bfda73720b1","modified":1502511195000},{"_id":"public/hexo.xcworkspace/CommandLineTools/CommandLineTools.xcodeproj/xcuserdata/Madordie.xcuserdatad/xcschemes/Update Theme.xcscheme","hash":"038bf225b314062324862e73a9302bfda73720b1","modified":1502511453483},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1502554656000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1502555038000},{"_id":"themes/next/.git/refs/stash","hash":"63f9ebac1a037439185b7dedcb262920f17feda6","modified":1502554531000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1502554656000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1502554656000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1502554656000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1502554656000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1502554656000},{"_id":"themes/next/.git/logs/refs/stash","hash":"e33c4e441523fa7eebb71d12fcfad192f124e027","modified":1502554531000},{"_id":"themes/next/.git/objects/2d/615b3485b512b010e1db379045a76dc96fb5cc","hash":"60386349f6a42004fdd392cd438f5d15b3732186","modified":1502554698000},{"_id":"themes/next/.git/objects/4b/2e49feda20a102b7917fcebe2be8c745be5cc5","hash":"3f7acf50ebd10f12a87adf8a7647aefbd0d1bcfb","modified":1502555038000},{"_id":"themes/next/.git/objects/4e/eda09b936056fb6c4c55cafee92809b5ab93a6","hash":"8d05d1d2291e763752e6ed37fe476bf3b6bc3891","modified":1502555038000},{"_id":"themes/next/.git/objects/54/4319f8eb041376db42bb5df55b3d61ea31e6c8","hash":"59db4f71af85edad723360e60e37c5cd4b20fa24","modified":1502554443000},{"_id":"themes/next/.git/objects/6c/790326d5290654220a7d474efbe97ade03b060","hash":"4f5b3d3d3757f7692c773b644cfbb22fc167ec90","modified":1502554531000},{"_id":"themes/next/.git/objects/79/a4ba8de56ab3687a2bd863c2d4a359d77bd632","hash":"0a4b52e9977d303adc00c809a3c2a10f7d3be993","modified":1502554530000},{"_id":"themes/next/.git/objects/8b/c2a9c082a7b7609c26a4e2752d923510ac0ad2","hash":"a98bbaabdcb0ca4046c3a00f7c9b8d6f6a5baf6e","modified":1502555038000},{"_id":"themes/next/.git/objects/a0/e8db3916c5827c93461049d7684eeb403e57b8","hash":"bfa90dde76b315a408edb9cabeb4cb65d10320b9","modified":1502554706000},{"_id":"themes/next/.git/objects/ad/d9aed7de87dc293216965fa213fd1358711a98","hash":"1b0a7810acc7849231e233f2b2ed8f904af35412","modified":1502555038000},{"_id":"themes/next/.git/objects/b5/35a2a730eca6826eeb6ffec207fc650f3d2e23","hash":"5f4fa5d7dad28a18fd764470abe69cf1f2e2a328","modified":1502554530000},{"_id":"themes/next/.git/objects/c8/014306ab68235a915498db04fb6bbdf714d9b4","hash":"ce7b1bee08629c4a133d6ca20d1fe824a54110c0","modified":1502554530000},{"_id":"themes/next/.git/objects/ce/3d591fe82c161c0624e909afc7471d3dbc4183","hash":"2bc00ee6d37503450364d712d2107eacecc0de8c","modified":1502554711000},{"_id":"themes/next/.git/objects/eb/7f76989e31d2db56b65e430b35236c68a4be4d","hash":"dda492281a024603e98cf3081eb539d2cbc8eb83","modified":1502554706000},{"_id":"themes/next/.git/objects/ee/6877c1afabe529b253413e138e681fbdbdd934","hash":"31314f4e643d27da8298f414fc0067b9cc5ad620","modified":1502555038000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1502554656000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1502555038000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1502554657000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1502554657000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1502554657000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1502554657000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1502554657000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1502554657000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1502554657000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1502554657000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1502554656000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1502554657000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1502554657000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1502554657000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1502554657000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1502554657000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1502554656000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1502554656000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1502554657000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1502554657000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1502554657000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1502554657000},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"92428f64fc29c5562c9851962c8386c440872d6a","modified":1502560406696},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"1a096d39b4d1c08b6611e091d83e272ccb74fbae","modified":1502560406696},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"25dc310709b892a204fd7950bf2347a532329daf","modified":1502560406698},{"_id":"public/assets/algolia/algoliasearch.js","hash":"11d2a3e70c8aa42310bba169d79ecf7ce907010a","modified":1502560406701}],"Category":[{"name":"公告","_id":"cj661pfma0004khuvys72nikv"},{"name":"iOS","_id":"cj661pfmz000akhuvvla56w57"},{"name":"牢骚","_id":"cj661pfn7000ekhuv74wkm6ov"},{"name":"正则表达式","_id":"cj661pfnb000hkhuvfccgaqzx"},{"name":"牢骚","parent":"cj661pfmz000akhuvvla56w57","_id":"cj661pfnh000mkhuv0muthwxq"},{"name":"DEBUG","_id":"cj661pfnm000rkhuve71qcuca"},{"name":"工具","_id":"cj661pfnt000vkhuvtfvhqpqi"},{"name":"Fastlane","_id":"cj661pfoj001ikhuvld8p8mpi"},{"name":"笔记","_id":"cj661pfoq001nkhuv3t6nm4n0"},{"name":"DEBUG","parent":"cj661pfmz000akhuvvla56w57","_id":"cj661pfov001rkhuvbhb5d107"},{"name":"ReactiveCocoa","parent":"cj661pfmz000akhuvvla56w57","_id":"cj661pfow001vkhuv2r2oa10z"},{"name":"逆向","parent":"cj661pfmz000akhuvvla56w57","_id":"cj661pfox001zkhuvutueh1f0"},{"name":"Swift","_id":"cj661pfoy0022khuvrlbqr4lc"},{"name":"swift","_id":"cj661pfp6002dkhuvt7w8a17o"},{"name":"教程","_id":"cj661pfp8002hkhuvgdz3oriv"},{"name":"RxSwift","parent":"cj661pfp6002dkhuvt7w8a17o","_id":"cj661pfp8002jkhuv1wgro17o"}],"Data":[],"Page":[{"title":"404","date":"2016-07-01T07:17:26.000Z","toc":false,"comments":0,"_content":"sorry ~~~\n\n改过一次文章链接，去掉日期再试试？\n\n您要找的内容可能在火星，点击 <keith_127@126.com> 告诉我，马上帮你找回来！！！\n","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2016-07-01 15:17:26\ntoc: false\ncomments: false\npermalink: /404\n---\nsorry ~~~\n\n改过一次文章链接，去掉日期再试试？\n\n您要找的内容可能在火星，点击 <keith_127@126.com> 告诉我，马上帮你找回来！！！\n","updated":"2017-07-26T10:47:39.000Z","path":"/404.html","layout":"page","_id":"cj661pfly0000khuvkmx2s3fg","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>sorry ~~~</p>\n<p>改过一次文章链接，去掉日期再试试？</p>\n<p>您要找的内容可能在火星，点击 <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x6b;&#x65;&#105;&#116;&#104;&#95;&#x31;&#50;&#55;&#x40;&#49;&#x32;&#54;&#x2e;&#x63;&#111;&#x6d;\">&#x6b;&#x65;&#105;&#116;&#104;&#95;&#x31;&#50;&#55;&#x40;&#49;&#x32;&#54;&#x2e;&#x63;&#111;&#x6d;</a> 告诉我，马上帮你找回来！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>sorry ~~~</p>\n<p>改过一次文章链接，去掉日期再试试？</p>\n<p>您要找的内容可能在火星，点击 <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x6b;&#x65;&#105;&#116;&#104;&#95;&#x31;&#50;&#55;&#x40;&#49;&#x32;&#54;&#x2e;&#x63;&#111;&#x6d;\">&#x6b;&#x65;&#105;&#116;&#104;&#95;&#x31;&#50;&#55;&#x40;&#49;&#x32;&#54;&#x2e;&#x63;&#111;&#x6d;</a> 告诉我，马上帮你找回来！！！</p>\n"},{"title":"关于我","date":"2016-07-01T07:17:20.000Z","_content":"# 关于我\n\n上海，男，已婚。\n\niOS 开发者，嵌入式爱好者，喜欢研究，热衷于技术。\n\n**QQ**: [453870736](tencent://QQInterLive/?Cmd=2&Uin=495939026)\n\n**email**: <keith_127@126.com>\n\n**Github**: [https://github.com/madordie](https://github.com/madordie)\n\n**个人资料页**: [传送门](https://madordie.github.io/about-me/)\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-07-01 15:17:20\n---\n# 关于我\n\n上海，男，已婚。\n\niOS 开发者，嵌入式爱好者，喜欢研究，热衷于技术。\n\n**QQ**: [453870736](tencent://QQInterLive/?Cmd=2&Uin=495939026)\n\n**email**: <keith_127@126.com>\n\n**Github**: [https://github.com/madordie](https://github.com/madordie)\n\n**个人资料页**: [传送门](https://madordie.github.io/about-me/)\n","updated":"2017-07-22T07:55:21.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj661pfm40002khuvvirpz63t","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>上海，男，已婚。</p>\n<p>iOS 开发者，嵌入式爱好者，喜欢研究，热衷于技术。</p>\n<p><strong>QQ</strong>: <a href=\"tencent://QQInterLive/?Cmd=2&amp;Uin=495939026\" target=\"_blank\" rel=\"external\">453870736</a></p>\n<p><strong>email</strong>: <a href=\"&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#107;&#101;&#105;&#x74;&#x68;&#x5f;&#49;&#50;&#55;&#x40;&#x31;&#50;&#54;&#46;&#99;&#x6f;&#x6d;\">&#107;&#101;&#105;&#x74;&#x68;&#x5f;&#49;&#50;&#55;&#x40;&#x31;&#50;&#54;&#46;&#99;&#x6f;&#x6d;</a></p>\n<p><strong>Github</strong>: <a href=\"https://github.com/madordie\" target=\"_blank\" rel=\"external\">https://github.com/madordie</a></p>\n<p><strong>个人资料页</strong>: <a href=\"https://madordie.github.io/about-me/\">传送门</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>上海，男，已婚。</p>\n<p>iOS 开发者，嵌入式爱好者，喜欢研究，热衷于技术。</p>\n<p><strong>QQ</strong>: <a href=\"tencent://QQInterLive/?Cmd=2&amp;Uin=495939026\">453870736</a></p>\n<p><strong>email</strong>: <a href=\"&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#107;&#101;&#105;&#x74;&#x68;&#x5f;&#49;&#50;&#55;&#x40;&#x31;&#50;&#54;&#46;&#99;&#x6f;&#x6d;\">&#107;&#101;&#105;&#x74;&#x68;&#x5f;&#49;&#50;&#55;&#x40;&#x31;&#50;&#54;&#46;&#99;&#x6f;&#x6d;</a></p>\n<p><strong>Github</strong>: <a href=\"https://github.com/madordie\">https://github.com/madordie</a></p>\n<p><strong>个人资料页</strong>: <a href=\"https://madordie.github.io/about-me/\">传送门</a></p>\n"},{"title":"分类","date":"2016-07-24T06:17:20.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-07-24 14:17:20\ntype: \"categories\"\n---\n","updated":"2017-03-25T04:20:57.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj661pfme0005khuv4zg94pbd","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"标签云","date":"2016-07-24T23:23:39.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签云\ndate: 2016-07-25 07:23:39\ntype: \"tags\"\n---\n","updated":"2016-07-24T23:37:37.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj661pfmn0007khuvd6fmgdlh","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"博客迁移公告","date":"2016-07-05T05:43:36.000Z","_content":"\n你敢信！我又搬家了。。\n\n之前在[博客园](http://www.cnblogs.com/madordie/)后来又去了[蚂蚁笔记](http://madordie.leanote.com)，最后吧，我就到了[这里](https://madordie.github.io)。\n\n说下大体感受：\n\n[博客园](http://www.cnblogs.com)挺好的，不过不喜欢其编码方式，真的不喜欢。博客园的主题什么的都是可以定制，但是总归是写起来比较费劲的。\n\n[蚂蚁笔记](https://leanote.com)不错，我开始时候logo还不是这个<img src=\"http://7xvzwi.com1.z0.glb.clouddn.com/leanote_new_logo.png\" width=35 alt=\"新logo\">原来logo是<img src=\"http://7xvzwi.com1.z0.glb.clouddn.com/leanote_old_logo.png\" width=35 alt=\"旧logo\" >😂,不过现在已经很厉害了，开始了各种业务。期待会走得更好更远。\n\n我是看了[巧哥](http://blog.devtang.com)的[这个博文](http://blog.devtang.com/2012/02/10/setup-blog-based-on-github/)才开始准备转到Github的。。赶脚markdown很好玩，虽然出来很早了，但是并没有仔细的去学习这个语法，于是乎这个博客就用[hexo](https://hexo.io)进行搭建。\n\n虽然我还不知道怎么让百度收录我的Github，但是主要的是能尝试着自己想试试确没有尝试的事情！","source":"_posts/about-change-blog.md","raw":"---\ntitle: 博客迁移公告\ndate: 2016-07-05 13:43:36\ncategories: 公告\n---\n\n你敢信！我又搬家了。。\n\n之前在[博客园](http://www.cnblogs.com/madordie/)后来又去了[蚂蚁笔记](http://madordie.leanote.com)，最后吧，我就到了[这里](https://madordie.github.io)。\n\n说下大体感受：\n\n[博客园](http://www.cnblogs.com)挺好的，不过不喜欢其编码方式，真的不喜欢。博客园的主题什么的都是可以定制，但是总归是写起来比较费劲的。\n\n[蚂蚁笔记](https://leanote.com)不错，我开始时候logo还不是这个<img src=\"http://7xvzwi.com1.z0.glb.clouddn.com/leanote_new_logo.png\" width=35 alt=\"新logo\">原来logo是<img src=\"http://7xvzwi.com1.z0.glb.clouddn.com/leanote_old_logo.png\" width=35 alt=\"旧logo\" >😂,不过现在已经很厉害了，开始了各种业务。期待会走得更好更远。\n\n我是看了[巧哥](http://blog.devtang.com)的[这个博文](http://blog.devtang.com/2012/02/10/setup-blog-based-on-github/)才开始准备转到Github的。。赶脚markdown很好玩，虽然出来很早了，但是并没有仔细的去学习这个语法，于是乎这个博客就用[hexo](https://hexo.io)进行搭建。\n\n虽然我还不知道怎么让百度收录我的Github，但是主要的是能尝试着自己想试试确没有尝试的事情！","slug":"about-change-blog","published":1,"updated":"2016-07-25T00:09:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfm00001khuv6h3h104i","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>你敢信！我又搬家了。。</p>\n<p>之前在<a href=\"http://www.cnblogs.com/madordie/\" target=\"_blank\" rel=\"external\">博客园</a>后来又去了<a href=\"http://madordie.leanote.com\" target=\"_blank\" rel=\"external\">蚂蚁笔记</a>，最后吧，我就到了<a href=\"https://madordie.github.io\">这里</a>。</p>\n<p>说下大体感受：</p>\n<p><a href=\"http://www.cnblogs.com\" target=\"_blank\" rel=\"external\">博客园</a>挺好的，不过不喜欢其编码方式，真的不喜欢。博客园的主题什么的都是可以定制，但是总归是写起来比较费劲的。</p>\n<p><a href=\"https://leanote.com\" target=\"_blank\" rel=\"external\">蚂蚁笔记</a>不错，我开始时候logo还不是这个<img src=\"http://7xvzwi.com1.z0.glb.clouddn.com/leanote_new_logo.png\" width=\"35\" alt=\"新logo\">原来logo是<img src=\"http://7xvzwi.com1.z0.glb.clouddn.com/leanote_old_logo.png\" width=\"35\" alt=\"旧logo\">😂,不过现在已经很厉害了，开始了各种业务。期待会走得更好更远。</p>\n<p>我是看了<a href=\"http://blog.devtang.com\" target=\"_blank\" rel=\"external\">巧哥</a>的<a href=\"http://blog.devtang.com/2012/02/10/setup-blog-based-on-github/\" target=\"_blank\" rel=\"external\">这个博文</a>才开始准备转到Github的。。赶脚markdown很好玩，虽然出来很早了，但是并没有仔细的去学习这个语法，于是乎这个博客就用<a href=\"https://hexo.io\" target=\"_blank\" rel=\"external\">hexo</a>进行搭建。</p>\n<p>虽然我还不知道怎么让百度收录我的Github，但是主要的是能尝试着自己想试试确没有尝试的事情！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>你敢信！我又搬家了。。</p>\n<p>之前在<a href=\"http://www.cnblogs.com/madordie/\">博客园</a>后来又去了<a href=\"http://madordie.leanote.com\">蚂蚁笔记</a>，最后吧，我就到了<a href=\"https://madordie.github.io\">这里</a>。</p>\n<p>说下大体感受：</p>\n<p><a href=\"http://www.cnblogs.com\">博客园</a>挺好的，不过不喜欢其编码方式，真的不喜欢。博客园的主题什么的都是可以定制，但是总归是写起来比较费劲的。</p>\n<p><a href=\"https://leanote.com\">蚂蚁笔记</a>不错，我开始时候logo还不是这个<img src=\"http://7xvzwi.com1.z0.glb.clouddn.com/leanote_new_logo.png\" width=35 alt=\"新logo\">原来logo是<img src=\"http://7xvzwi.com1.z0.glb.clouddn.com/leanote_old_logo.png\" width=35 alt=\"旧logo\" >😂,不过现在已经很厉害了，开始了各种业务。期待会走得更好更远。</p>\n<p>我是看了<a href=\"http://blog.devtang.com\">巧哥</a>的<a href=\"http://blog.devtang.com/2012/02/10/setup-blog-based-on-github/\">这个博文</a>才开始准备转到Github的。。赶脚markdown很好玩，虽然出来很早了，但是并没有仔细的去学习这个语法，于是乎这个博客就用<a href=\"https://hexo.io\">hexo</a>进行搭建。</p>\n<p>虽然我还不知道怎么让百度收录我的Github，但是主要的是能尝试着自己想试试确没有尝试的事情！</p>\n"},{"title":"个人资料页","date":"2016-07-04T16:00:00.000Z","_content":"\n## 基本资料\n\n__孙继刚__\n男/ 1992-9/ 党员/ 汉族\nQQ: 453870736\n博客：https://madordie.github.io\nGitHub：https://github.com/madordie\nE-mail: [keith_127@126.com](mailto:keith_127@126.com)\n\n## 教育背景\n\n2011.09-2015.06     南阳理工学院   软件工程(移动设备应用开发方向)       本科\n\n简介：移动设备应用开发主要面向移动设备所培养的软件工程师。主要分为嵌入式、安卓、iOS三个分支。其中嵌入式系统为主要发展方向，为快速适应市场的需求，同时开设安卓、iOS基础课程。所学课程涵盖软件工程、嵌入式系统等方面。\n\n## 专业技能\n\n- 擅长C、Objective-C、Swift开发，有较为扎实的iOS环境开发经验。\n- 熟悉shell、ruby、python、等语言。\n- 有良好的编程习惯，较强的分析问题、解决问题的能力，并能积极总结所遇到的问题及解决方案。\n- 对项目整体架构有一定的认识和把控，能够搭建较为适合当前项目发展的架构。\n- 能够搭建gitlab、Jenkins服务器，并熟练使用Jenkins进行打包、自定义操作、更新iconfont等操作。\n- 善于制作工具组件提高开发效率，比如：Jenkins打不同环境包、统一更新iconfont、制作sketch自定义填充插件等。\n- 熟练使用AutoLayout进行代码、IB适配，以及frame的适配。\n- 熟练使用Cocoapods进行项目拆分、并能够编写部分ruby脚本进行一些自定义操作。\n- 熟练使用MVVM、MVC、等模式。\n- 能够使用RxSwift进行响应式编程。\n- 熟练掌握GCD、NSThread等多线程编程技术。\n- 熟练掌握SwiftLint的配置以及规则定制。\n- 熟悉iOS核心动画、CALayer的开发。\n- 对cocos2d游戏开发有一定的了解。\n\n## 工作经验\n\n### 房多多\n\n2015.08-至今          深圳房好多网络科技有限公司（上海分公司）\n新房、二手房交易服务平台。\n工作职责：（团队项目）\n\n- 主要业务模块的开发(比如：大首页、筛选、IM基础框架、等)。\n- 创建sketch自动填充文本、图片素材插件生成工具。\n- 创建iconfont自动更新组件。\n- 开辟CocoaPods的组件化道路。\n- 创建Jenkins的自动化。\n- 顽固crash的研究修复。\n- 开发语言：C、OC、Swift\n\n### 淘股吧\n\n2015.05-2015.08   福州淘股网络技术有限公司\n一个有逼格的股票社区。\n工作职责：（团队项目）\n- 项目的基础结构重新设计。\n- 多主题的插件开发。\n- K线图根据数据自动绘制组件。\n- 开发语言：OC、C\n\n### 肌肤管家\n\n2014.10-2015.05   上海商路网络科技有限公司\n使用自主研发的肌肤测试仪进行水、油、脂肪的参数的测量、分享、交流社区类APP。\n工作职责：(个人项目)\n- 项目2.x的所有版本迭代，包括社区、IM、活动等。\n- 一代硬件肌肤测试仪功能开发。\n- 主要采用IB+autolayout进行页面适配布局。\n开发语言：OC、C\n\n### eTalk\n\n2014.04-2014.06\n大学毕设。局域网的自定义协议聊天工具。自己搭建C的服务+iOS的客户端。\n工作职责：(个人项目)\n- 基于TCP进行多iOS端链接C的服务端。\n- 采用自定义协议进行通信。\n- 完成联系人的增、删、查、改功能；用户的自定义表情、头像、单点／多点登录等功能\n开发语言：OC、C、shell\n\n## 个人特质\n\n热衷于技术。一个典型处女座强迫症重度患者。并伴有代码洁癖。\n思维活跃、知识面广、具有很强的接受和学习新知识的能力。\n做事认真负责， 善与人交流、有团队意识，为人积极乐观。\n","source":"_posts/about-me.md","raw":"---\ntitle: 个人资料页\ndate: 2016-07-05\ntags:\n---\n\n## 基本资料\n\n__孙继刚__\n男/ 1992-9/ 党员/ 汉族\nQQ: 453870736\n博客：https://madordie.github.io\nGitHub：https://github.com/madordie\nE-mail: [keith_127@126.com](mailto:keith_127@126.com)\n\n## 教育背景\n\n2011.09-2015.06     南阳理工学院   软件工程(移动设备应用开发方向)       本科\n\n简介：移动设备应用开发主要面向移动设备所培养的软件工程师。主要分为嵌入式、安卓、iOS三个分支。其中嵌入式系统为主要发展方向，为快速适应市场的需求，同时开设安卓、iOS基础课程。所学课程涵盖软件工程、嵌入式系统等方面。\n\n## 专业技能\n\n- 擅长C、Objective-C、Swift开发，有较为扎实的iOS环境开发经验。\n- 熟悉shell、ruby、python、等语言。\n- 有良好的编程习惯，较强的分析问题、解决问题的能力，并能积极总结所遇到的问题及解决方案。\n- 对项目整体架构有一定的认识和把控，能够搭建较为适合当前项目发展的架构。\n- 能够搭建gitlab、Jenkins服务器，并熟练使用Jenkins进行打包、自定义操作、更新iconfont等操作。\n- 善于制作工具组件提高开发效率，比如：Jenkins打不同环境包、统一更新iconfont、制作sketch自定义填充插件等。\n- 熟练使用AutoLayout进行代码、IB适配，以及frame的适配。\n- 熟练使用Cocoapods进行项目拆分、并能够编写部分ruby脚本进行一些自定义操作。\n- 熟练使用MVVM、MVC、等模式。\n- 能够使用RxSwift进行响应式编程。\n- 熟练掌握GCD、NSThread等多线程编程技术。\n- 熟练掌握SwiftLint的配置以及规则定制。\n- 熟悉iOS核心动画、CALayer的开发。\n- 对cocos2d游戏开发有一定的了解。\n\n## 工作经验\n\n### 房多多\n\n2015.08-至今          深圳房好多网络科技有限公司（上海分公司）\n新房、二手房交易服务平台。\n工作职责：（团队项目）\n\n- 主要业务模块的开发(比如：大首页、筛选、IM基础框架、等)。\n- 创建sketch自动填充文本、图片素材插件生成工具。\n- 创建iconfont自动更新组件。\n- 开辟CocoaPods的组件化道路。\n- 创建Jenkins的自动化。\n- 顽固crash的研究修复。\n- 开发语言：C、OC、Swift\n\n### 淘股吧\n\n2015.05-2015.08   福州淘股网络技术有限公司\n一个有逼格的股票社区。\n工作职责：（团队项目）\n- 项目的基础结构重新设计。\n- 多主题的插件开发。\n- K线图根据数据自动绘制组件。\n- 开发语言：OC、C\n\n### 肌肤管家\n\n2014.10-2015.05   上海商路网络科技有限公司\n使用自主研发的肌肤测试仪进行水、油、脂肪的参数的测量、分享、交流社区类APP。\n工作职责：(个人项目)\n- 项目2.x的所有版本迭代，包括社区、IM、活动等。\n- 一代硬件肌肤测试仪功能开发。\n- 主要采用IB+autolayout进行页面适配布局。\n开发语言：OC、C\n\n### eTalk\n\n2014.04-2014.06\n大学毕设。局域网的自定义协议聊天工具。自己搭建C的服务+iOS的客户端。\n工作职责：(个人项目)\n- 基于TCP进行多iOS端链接C的服务端。\n- 采用自定义协议进行通信。\n- 完成联系人的增、删、查、改功能；用户的自定义表情、头像、单点／多点登录等功能\n开发语言：OC、C、shell\n\n## 个人特质\n\n热衷于技术。一个典型处女座强迫症重度患者。并伴有代码洁癖。\n思维活跃、知识面广、具有很强的接受和学习新知识的能力。\n做事认真负责， 善与人交流、有团队意识，为人积极乐观。\n","slug":"about-me","published":1,"updated":"2017-08-12T17:20:18.000Z","_id":"cj661pfm70003khuv0j33pmbl","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"基本资料\"><a href=\"#基本资料\" class=\"headerlink\" title=\"基本资料\"></a>基本资料</h2><p><strong>孙继刚</strong><br>男/ 1992-9/ 党员/ 汉族<br>QQ: 453870736<br>博客：<a href=\"https://madordie.github.io\">https://madordie.github.io</a><br>GitHub：<a href=\"https://github.com/madordie\" target=\"_blank\" rel=\"external\">https://github.com/madordie</a><br>E-mail: <a href=\"mailto:keith_127@126.com\" target=\"_blank\" rel=\"external\">keith_127@126.com</a></p>\n<h2 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h2><p>2011.09-2015.06     南阳理工学院   软件工程(移动设备应用开发方向)       本科</p>\n<p>简介：移动设备应用开发主要面向移动设备所培养的软件工程师。主要分为嵌入式、安卓、iOS三个分支。其中嵌入式系统为主要发展方向，为快速适应市场的需求，同时开设安卓、iOS基础课程。所学课程涵盖软件工程、嵌入式系统等方面。</p>\n<h2 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h2><ul>\n<li>擅长C、Objective-C、Swift开发，有较为扎实的iOS环境开发经验。</li>\n<li>熟悉shell、ruby、python、等语言。</li>\n<li>有良好的编程习惯，较强的分析问题、解决问题的能力，并能积极总结所遇到的问题及解决方案。</li>\n<li>对项目整体架构有一定的认识和把控，能够搭建较为适合当前项目发展的架构。</li>\n<li>能够搭建gitlab、Jenkins服务器，并熟练使用Jenkins进行打包、自定义操作、更新iconfont等操作。</li>\n<li>善于制作工具组件提高开发效率，比如：Jenkins打不同环境包、统一更新iconfont、制作sketch自定义填充插件等。</li>\n<li>熟练使用AutoLayout进行代码、IB适配，以及frame的适配。</li>\n<li>熟练使用Cocoapods进行项目拆分、并能够编写部分ruby脚本进行一些自定义操作。</li>\n<li>熟练使用MVVM、MVC、等模式。</li>\n<li>能够使用RxSwift进行响应式编程。</li>\n<li>熟练掌握GCD、NSThread等多线程编程技术。</li>\n<li>熟练掌握SwiftLint的配置以及规则定制。</li>\n<li>熟悉iOS核心动画、CALayer的开发。</li>\n<li>对cocos2d游戏开发有一定的了解。</li>\n</ul>\n<h2 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h2><h3 id=\"房多多\"><a href=\"#房多多\" class=\"headerlink\" title=\"房多多\"></a>房多多</h3><p>2015.08-至今          深圳房好多网络科技有限公司（上海分公司）<br>新房、二手房交易服务平台。<br>工作职责：（团队项目）</p>\n<ul>\n<li>主要业务模块的开发(比如：大首页、筛选、IM基础框架、等)。</li>\n<li>创建sketch自动填充文本、图片素材插件生成工具。</li>\n<li>创建iconfont自动更新组件。</li>\n<li>开辟CocoaPods的组件化道路。</li>\n<li>创建Jenkins的自动化。</li>\n<li>顽固crash的研究修复。</li>\n<li>开发语言：C、OC、Swift</li>\n</ul>\n<h3 id=\"淘股吧\"><a href=\"#淘股吧\" class=\"headerlink\" title=\"淘股吧\"></a>淘股吧</h3><p>2015.05-2015.08   福州淘股网络技术有限公司<br>一个有逼格的股票社区。<br>工作职责：（团队项目）</p>\n<ul>\n<li>项目的基础结构重新设计。</li>\n<li>多主题的插件开发。</li>\n<li>K线图根据数据自动绘制组件。</li>\n<li>开发语言：OC、C</li>\n</ul>\n<h3 id=\"肌肤管家\"><a href=\"#肌肤管家\" class=\"headerlink\" title=\"肌肤管家\"></a>肌肤管家</h3><p>2014.10-2015.05   上海商路网络科技有限公司<br>使用自主研发的肌肤测试仪进行水、油、脂肪的参数的测量、分享、交流社区类APP。<br>工作职责：(个人项目)</p>\n<ul>\n<li>项目2.x的所有版本迭代，包括社区、IM、活动等。</li>\n<li>一代硬件肌肤测试仪功能开发。</li>\n<li>主要采用IB+autolayout进行页面适配布局。<br>开发语言：OC、C</li>\n</ul>\n<h3 id=\"eTalk\"><a href=\"#eTalk\" class=\"headerlink\" title=\"eTalk\"></a>eTalk</h3><p>2014.04-2014.06<br>大学毕设。局域网的自定义协议聊天工具。自己搭建C的服务+iOS的客户端。<br>工作职责：(个人项目)</p>\n<ul>\n<li>基于TCP进行多iOS端链接C的服务端。</li>\n<li>采用自定义协议进行通信。</li>\n<li>完成联系人的增、删、查、改功能；用户的自定义表情、头像、单点／多点登录等功能<br>开发语言：OC、C、shell</li>\n</ul>\n<h2 id=\"个人特质\"><a href=\"#个人特质\" class=\"headerlink\" title=\"个人特质\"></a>个人特质</h2><p>热衷于技术。一个典型处女座强迫症重度患者。并伴有代码洁癖。<br>思维活跃、知识面广、具有很强的接受和学习新知识的能力。<br>做事认真负责， 善与人交流、有团队意识，为人积极乐观。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本资料\"><a href=\"#基本资料\" class=\"headerlink\" title=\"基本资料\"></a>基本资料</h2><p><strong>孙继刚</strong><br>男/ 1992-9/ 党员/ 汉族<br>QQ: 453870736<br>博客：<a href=\"https://madordie.github.io\">https://madordie.github.io</a><br>GitHub：<a href=\"https://github.com/madordie\">https://github.com/madordie</a><br>E-mail: <a href=\"mailto:keith_127@126.com\">keith_127@126.com</a></p>\n<h2 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h2><p>2011.09-2015.06     南阳理工学院   软件工程(移动设备应用开发方向)       本科</p>\n<p>简介：移动设备应用开发主要面向移动设备所培养的软件工程师。主要分为嵌入式、安卓、iOS三个分支。其中嵌入式系统为主要发展方向，为快速适应市场的需求，同时开设安卓、iOS基础课程。所学课程涵盖软件工程、嵌入式系统等方面。</p>\n<h2 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h2><ul>\n<li>擅长C、Objective-C、Swift开发，有较为扎实的iOS环境开发经验。</li>\n<li>熟悉shell、ruby、python、等语言。</li>\n<li>有良好的编程习惯，较强的分析问题、解决问题的能力，并能积极总结所遇到的问题及解决方案。</li>\n<li>对项目整体架构有一定的认识和把控，能够搭建较为适合当前项目发展的架构。</li>\n<li>能够搭建gitlab、Jenkins服务器，并熟练使用Jenkins进行打包、自定义操作、更新iconfont等操作。</li>\n<li>善于制作工具组件提高开发效率，比如：Jenkins打不同环境包、统一更新iconfont、制作sketch自定义填充插件等。</li>\n<li>熟练使用AutoLayout进行代码、IB适配，以及frame的适配。</li>\n<li>熟练使用Cocoapods进行项目拆分、并能够编写部分ruby脚本进行一些自定义操作。</li>\n<li>熟练使用MVVM、MVC、等模式。</li>\n<li>能够使用RxSwift进行响应式编程。</li>\n<li>熟练掌握GCD、NSThread等多线程编程技术。</li>\n<li>熟练掌握SwiftLint的配置以及规则定制。</li>\n<li>熟悉iOS核心动画、CALayer的开发。</li>\n<li>对cocos2d游戏开发有一定的了解。</li>\n</ul>\n<h2 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h2><h3 id=\"房多多\"><a href=\"#房多多\" class=\"headerlink\" title=\"房多多\"></a>房多多</h3><p>2015.08-至今          深圳房好多网络科技有限公司（上海分公司）<br>新房、二手房交易服务平台。<br>工作职责：（团队项目）</p>\n<ul>\n<li>主要业务模块的开发(比如：大首页、筛选、IM基础框架、等)。</li>\n<li>创建sketch自动填充文本、图片素材插件生成工具。</li>\n<li>创建iconfont自动更新组件。</li>\n<li>开辟CocoaPods的组件化道路。</li>\n<li>创建Jenkins的自动化。</li>\n<li>顽固crash的研究修复。</li>\n<li>开发语言：C、OC、Swift</li>\n</ul>\n<h3 id=\"淘股吧\"><a href=\"#淘股吧\" class=\"headerlink\" title=\"淘股吧\"></a>淘股吧</h3><p>2015.05-2015.08   福州淘股网络技术有限公司<br>一个有逼格的股票社区。<br>工作职责：（团队项目）</p>\n<ul>\n<li>项目的基础结构重新设计。</li>\n<li>多主题的插件开发。</li>\n<li>K线图根据数据自动绘制组件。</li>\n<li>开发语言：OC、C</li>\n</ul>\n<h3 id=\"肌肤管家\"><a href=\"#肌肤管家\" class=\"headerlink\" title=\"肌肤管家\"></a>肌肤管家</h3><p>2014.10-2015.05   上海商路网络科技有限公司<br>使用自主研发的肌肤测试仪进行水、油、脂肪的参数的测量、分享、交流社区类APP。<br>工作职责：(个人项目)</p>\n<ul>\n<li>项目2.x的所有版本迭代，包括社区、IM、活动等。</li>\n<li>一代硬件肌肤测试仪功能开发。</li>\n<li>主要采用IB+autolayout进行页面适配布局。<br>开发语言：OC、C</li>\n</ul>\n<h3 id=\"eTalk\"><a href=\"#eTalk\" class=\"headerlink\" title=\"eTalk\"></a>eTalk</h3><p>2014.04-2014.06<br>大学毕设。局域网的自定义协议聊天工具。自己搭建C的服务+iOS的客户端。<br>工作职责：(个人项目)</p>\n<ul>\n<li>基于TCP进行多iOS端链接C的服务端。</li>\n<li>采用自定义协议进行通信。</li>\n<li>完成联系人的增、删、查、改功能；用户的自定义表情、头像、单点／多点登录等功能<br>开发语言：OC、C、shell</li>\n</ul>\n<h2 id=\"个人特质\"><a href=\"#个人特质\" class=\"headerlink\" title=\"个人特质\"></a>个人特质</h2><p>热衷于技术。一个典型处女座强迫症重度患者。并伴有代码洁癖。<br>思维活跃、知识面广、具有很强的接受和学习新知识的能力。<br>做事认真负责， 善与人交流、有团队意识，为人积极乐观。</p>\n"},{"title":"项目中的UITableView","_content":"\n前两天听到有人说多人合作的项目并不需要处理很多事情，只需要处理好自己的那部分业务逻辑就好了。感觉这是一个很不负责任的说法。\n\n作为一个APP的开发者，自己负责的事其中的一个模块，但是都是这个APP的开发者，也要往里面塞代码，如果每个人都用不同的逻辑风格去组织代码。那么整个项目就是一坨坨坨，这个坨会影响项目的演进、日后的发展。\n\n当然有的是看不出来的，比如说：当一个请假的人写的代码出现一个BUG，需要修复上线的时候，对于不同的代码风格，需要找到问题的关键代码，这个过程是撕心裂肺的，但是如果同一套代码风格，心中就会有一个大致的位置，去修改时候就会比较快速的定位问题。\n\n<!--more-->\n\n# 从协议入手\n\n`UITableView`是项目中非常常见的iOS高级控件，在页面中所有相似的页面几乎都是由该控件进行完成。其广泛运用的不止是使用方便，最主要的是内部的复用优化也是相当给力的。\n\n\n## 协议模式下的UITableView\n\n`UITableView`是典型的 __协议-代理模式__ ，比例`id <UITableViewDataSource> dataSource`和`id <UITableViewDelegate> delegate`，所以使用对于这种比较规整的列表来说把协议继续扩展到下一级也是可以的。\n\n为了统一`UITableView.dataSource`和`UITableView.delegate`，构建如下协议：\n```objc\n//  直接填充Cell的cellModel\n@protocol CellModelProtocol <NSObject>\n\n- (NSString *)cellClassName;  //  cellModel绑定的类名\n- (void)cellModelForCell:(UITableViewCell *)cell; //  cellModel填充上面绑定的cell\n\n@end\n\n```\n\n\n那么只需要在代理中做如下设置:\n\n```objc\n#pragma mark <UITableViewDelegate, UITableViewDataSource>\n- (NSInteger)numberOfSectionsInTableView:(UITableView*)tableView\n{\n    return 1;\n}\n- (NSInteger)tableView:(UITableView*)tableView numberOfRowsInSection:(NSInteger)section\n{\n    return self.viewModel.dataSource.count;\n}\n- (UITableViewCell*)tableView:(UITableView*)tableView cellForRowAtIndexPath:(NSIndexPath*)indexPath\n{\n      id<CellModelProtocol> cellModel = self.viewModel.dataSource[indexPath.row];\n      UITableViewCell* cell = [tableView dequeueReusableCellWithIdentifier:[cellModel cellClassName]];\n      cell.frame = tableView.bounds;\n      [cellModel cellModelForCell:cell];\n      [cell sizeToFit];\n      return cell;\n}\n- (CGFloat)tableView:(UITableView*)tableView heightForRowAtIndexPath:(NSIndexPath*)indexPath\n{\n      id<CellModelProtocol> cellModel = self.viewModel.dataSource[indexPath.row];\n      UITableViewCell* cell = [tableView ktj_cacheHeightCellForReuseIDFA:[cellModel cellClassName]];\n      [cellModel cellModelForCell:cell];\n      return [cell sizeThatFits:tableView.bounds.size].height;\n}\n\n```\n\n而在cell中，默认在`sizeThatFits:`中进行布局的设置和算高即可。如下：\n\n```objc\n//  xxxCell.m\n\n- (CGSize)sizeThatFits:(CGSize)size {\n    \n    CGRect frame = CGRectZero;\n    //  根据Cell的实际内容进行布局并设置高度\n    frame.origin = CGPointMake(10, 15);\n    frame.size = [self.infoLabel sizeThatFits:CGSizeMake(size.width-frame.origin.x*2, size.height)];\n    self.infoLabel.frame = frame;\n    \n    size.height = CGRectGetMaxY(self.infoLabel.frame)+frame.origin.y;\n    return size;\n}\n\n```\n\n如果cell采用autolayout，则计算采用[UITableView-FDTemplateLayoutCell](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/e3ee86ce419d18d3ff735056f1474f2863e43003/Classes/UITableView%2BFDTemplateLayoutCell.m)的计算方法。\n\n```objc\n@implementation UITableViewCell (KTJCellAutoLayoutForSize)\n//  autolout布局计算高度\n- (CGSize)ktj_ALCellSizeThatFits:(CGSize)size {\n    // Add a hard width constraint to make dynamic content views (like labels) expand vertically instead\n    // of growing horizontally, in a flow-layout manner.\n    NSLayoutConstraint *tempWidthConstraint =\n    [NSLayoutConstraint constraintWithItem:self.contentView\n                                 attribute:NSLayoutAttributeWidth\n                                 relatedBy:NSLayoutRelationEqual\n                                    toItem:nil\n                                 attribute:NSLayoutAttributeNotAnAttribute\n                                multiplier:1.0\n                                  constant:size.width];\n    [self.contentView addConstraint:tempWidthConstraint];\n    // Auto layout engine does its math\n    size = [self.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];\n    size.height += 1;\n    [self.contentView removeConstraint:tempWidthConstraint];\n    return size;\n}\n@end\n\n```\n\n另外在`<UITableViewDelegate, UITableViewDataSource>`中只写了1组，只有cell，没有header、footer的情况，如果需要，炮制即可。\n\n说一下这个其中的`ktj_cacheHeightCellForReuseIDFA:`类别方法。这个方法是为了算高进行缓存的一个cell，这个cell保存在 `NSCache`中。所以为了统一，需要在数据初始化时候注册所有的cell。当然你也可以根据类名直接生成，这个自主决定。\n\n说到算高，需要说一下这其中的`dequeueReusableCellWithIdentifier:`方法。该方法是从tableView的缓存池中取出指定ID的cell。请注意是 __取出__ ，并且`UITableView`并没有暴露出如何放进缓存池，也没有必要暴露出放进缓存池的方法。\n\n而且`UITableView`只有一个地方能够接收Cell那就是`tableView:cellForRowAtIndexPath:`。所以请保证`dequeueReusableCellWithIdentifier:`取出的方法 __需要通过`tableView:cellForRowAtIndexPath:`返回给`UITableView`__ 。这就是我上面说的`ktj_cacheHeightCellForReuseIDFA:`方法为何要做一个 cache去缓存我取出的cell，目的是为了减少cell的浪费。\n\n\n同理，对于`UITableView`的`headerView`、`footerView`来说，可以炮制以上协议、方法。不再赘述\n\n\nPS.\n  1. [UITableView-FDTemplateLayoutCell](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell): [sunnyxx](https://github.com/sunnyxx)打造的优化UITableView的一个库，6000的star，很赞。\n  \n\n# 规范化的代码风格\n\n对于多人开发，最崩溃的事情就要数去读别人的代码。就算不是多人开发，接手别人的代码也是让人最崩溃的事情。如果有不用考虑这件事的叫我！\n\n不同的公司可以有不同的代码风格，但是一个公司的代码风格需要保持一致，这样就不会出现一人请假，无人能接受项目的尴尬局面，就算能接，也是需要为了加一个逻辑判断，需要花费很大的精力去处理。\n\n至于其中的代码不统一的坑，恐怕要等踩过才知道吧😂。\n\n\n# 业务逻辑的拆分\n\n对于复杂的业务逻辑，对其拆分是非常重要的，不拆分很可能写出来的代码一个文件 >1000 行。复杂的业务逻辑对于写出来需要一气呵成，修改起来也就出现了牵一发动全身(虽然拆分完成之后可能也会关键逻辑代码不可拆分，但是会好很多)。\n\n\n## 筛选重构\n\n筛选主要处理的是筛选项，针对众多筛选条件拆分为不同的业务逻辑模块是必须的。遵照拆分的原则，于是乎根据UI划分出来位置、价格、户型、筛选、排序这么几个模块。针对每个模块自行处理选中数据、UI展示。对外只暴露选中项输入和选中回调。\n\n对于每个数据大致都可分为一个列表，然后可选中1项或多项。于是乎，这个代码如果不拉出来是要写好多次的，拉出来，但是选中需要把选中的逻辑扔出来，方便自定义。\n","source":"_posts/about-project-tableview.md","raw":"---\ntitle: 项目中的UITableView\ntags:\ncategories:\n  - iOS\n  - 牢骚\n---\n\n前两天听到有人说多人合作的项目并不需要处理很多事情，只需要处理好自己的那部分业务逻辑就好了。感觉这是一个很不负责任的说法。\n\n作为一个APP的开发者，自己负责的事其中的一个模块，但是都是这个APP的开发者，也要往里面塞代码，如果每个人都用不同的逻辑风格去组织代码。那么整个项目就是一坨坨坨，这个坨会影响项目的演进、日后的发展。\n\n当然有的是看不出来的，比如说：当一个请假的人写的代码出现一个BUG，需要修复上线的时候，对于不同的代码风格，需要找到问题的关键代码，这个过程是撕心裂肺的，但是如果同一套代码风格，心中就会有一个大致的位置，去修改时候就会比较快速的定位问题。\n\n<!--more-->\n\n# 从协议入手\n\n`UITableView`是项目中非常常见的iOS高级控件，在页面中所有相似的页面几乎都是由该控件进行完成。其广泛运用的不止是使用方便，最主要的是内部的复用优化也是相当给力的。\n\n\n## 协议模式下的UITableView\n\n`UITableView`是典型的 __协议-代理模式__ ，比例`id <UITableViewDataSource> dataSource`和`id <UITableViewDelegate> delegate`，所以使用对于这种比较规整的列表来说把协议继续扩展到下一级也是可以的。\n\n为了统一`UITableView.dataSource`和`UITableView.delegate`，构建如下协议：\n```objc\n//  直接填充Cell的cellModel\n@protocol CellModelProtocol <NSObject>\n\n- (NSString *)cellClassName;  //  cellModel绑定的类名\n- (void)cellModelForCell:(UITableViewCell *)cell; //  cellModel填充上面绑定的cell\n\n@end\n\n```\n\n\n那么只需要在代理中做如下设置:\n\n```objc\n#pragma mark <UITableViewDelegate, UITableViewDataSource>\n- (NSInteger)numberOfSectionsInTableView:(UITableView*)tableView\n{\n    return 1;\n}\n- (NSInteger)tableView:(UITableView*)tableView numberOfRowsInSection:(NSInteger)section\n{\n    return self.viewModel.dataSource.count;\n}\n- (UITableViewCell*)tableView:(UITableView*)tableView cellForRowAtIndexPath:(NSIndexPath*)indexPath\n{\n      id<CellModelProtocol> cellModel = self.viewModel.dataSource[indexPath.row];\n      UITableViewCell* cell = [tableView dequeueReusableCellWithIdentifier:[cellModel cellClassName]];\n      cell.frame = tableView.bounds;\n      [cellModel cellModelForCell:cell];\n      [cell sizeToFit];\n      return cell;\n}\n- (CGFloat)tableView:(UITableView*)tableView heightForRowAtIndexPath:(NSIndexPath*)indexPath\n{\n      id<CellModelProtocol> cellModel = self.viewModel.dataSource[indexPath.row];\n      UITableViewCell* cell = [tableView ktj_cacheHeightCellForReuseIDFA:[cellModel cellClassName]];\n      [cellModel cellModelForCell:cell];\n      return [cell sizeThatFits:tableView.bounds.size].height;\n}\n\n```\n\n而在cell中，默认在`sizeThatFits:`中进行布局的设置和算高即可。如下：\n\n```objc\n//  xxxCell.m\n\n- (CGSize)sizeThatFits:(CGSize)size {\n    \n    CGRect frame = CGRectZero;\n    //  根据Cell的实际内容进行布局并设置高度\n    frame.origin = CGPointMake(10, 15);\n    frame.size = [self.infoLabel sizeThatFits:CGSizeMake(size.width-frame.origin.x*2, size.height)];\n    self.infoLabel.frame = frame;\n    \n    size.height = CGRectGetMaxY(self.infoLabel.frame)+frame.origin.y;\n    return size;\n}\n\n```\n\n如果cell采用autolayout，则计算采用[UITableView-FDTemplateLayoutCell](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/e3ee86ce419d18d3ff735056f1474f2863e43003/Classes/UITableView%2BFDTemplateLayoutCell.m)的计算方法。\n\n```objc\n@implementation UITableViewCell (KTJCellAutoLayoutForSize)\n//  autolout布局计算高度\n- (CGSize)ktj_ALCellSizeThatFits:(CGSize)size {\n    // Add a hard width constraint to make dynamic content views (like labels) expand vertically instead\n    // of growing horizontally, in a flow-layout manner.\n    NSLayoutConstraint *tempWidthConstraint =\n    [NSLayoutConstraint constraintWithItem:self.contentView\n                                 attribute:NSLayoutAttributeWidth\n                                 relatedBy:NSLayoutRelationEqual\n                                    toItem:nil\n                                 attribute:NSLayoutAttributeNotAnAttribute\n                                multiplier:1.0\n                                  constant:size.width];\n    [self.contentView addConstraint:tempWidthConstraint];\n    // Auto layout engine does its math\n    size = [self.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];\n    size.height += 1;\n    [self.contentView removeConstraint:tempWidthConstraint];\n    return size;\n}\n@end\n\n```\n\n另外在`<UITableViewDelegate, UITableViewDataSource>`中只写了1组，只有cell，没有header、footer的情况，如果需要，炮制即可。\n\n说一下这个其中的`ktj_cacheHeightCellForReuseIDFA:`类别方法。这个方法是为了算高进行缓存的一个cell，这个cell保存在 `NSCache`中。所以为了统一，需要在数据初始化时候注册所有的cell。当然你也可以根据类名直接生成，这个自主决定。\n\n说到算高，需要说一下这其中的`dequeueReusableCellWithIdentifier:`方法。该方法是从tableView的缓存池中取出指定ID的cell。请注意是 __取出__ ，并且`UITableView`并没有暴露出如何放进缓存池，也没有必要暴露出放进缓存池的方法。\n\n而且`UITableView`只有一个地方能够接收Cell那就是`tableView:cellForRowAtIndexPath:`。所以请保证`dequeueReusableCellWithIdentifier:`取出的方法 __需要通过`tableView:cellForRowAtIndexPath:`返回给`UITableView`__ 。这就是我上面说的`ktj_cacheHeightCellForReuseIDFA:`方法为何要做一个 cache去缓存我取出的cell，目的是为了减少cell的浪费。\n\n\n同理，对于`UITableView`的`headerView`、`footerView`来说，可以炮制以上协议、方法。不再赘述\n\n\nPS.\n  1. [UITableView-FDTemplateLayoutCell](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell): [sunnyxx](https://github.com/sunnyxx)打造的优化UITableView的一个库，6000的star，很赞。\n  \n\n# 规范化的代码风格\n\n对于多人开发，最崩溃的事情就要数去读别人的代码。就算不是多人开发，接手别人的代码也是让人最崩溃的事情。如果有不用考虑这件事的叫我！\n\n不同的公司可以有不同的代码风格，但是一个公司的代码风格需要保持一致，这样就不会出现一人请假，无人能接受项目的尴尬局面，就算能接，也是需要为了加一个逻辑判断，需要花费很大的精力去处理。\n\n至于其中的代码不统一的坑，恐怕要等踩过才知道吧😂。\n\n\n# 业务逻辑的拆分\n\n对于复杂的业务逻辑，对其拆分是非常重要的，不拆分很可能写出来的代码一个文件 >1000 行。复杂的业务逻辑对于写出来需要一气呵成，修改起来也就出现了牵一发动全身(虽然拆分完成之后可能也会关键逻辑代码不可拆分，但是会好很多)。\n\n\n## 筛选重构\n\n筛选主要处理的是筛选项，针对众多筛选条件拆分为不同的业务逻辑模块是必须的。遵照拆分的原则，于是乎根据UI划分出来位置、价格、户型、筛选、排序这么几个模块。针对每个模块自行处理选中数据、UI展示。对外只暴露选中项输入和选中回调。\n\n对于每个数据大致都可分为一个列表，然后可选中1项或多项。于是乎，这个代码如果不拉出来是要写好多次的，拉出来，但是选中需要把选中的逻辑扔出来，方便自定义。\n","slug":"about-project-tableview","published":1,"date":"2016-07-27T05:30:45.000Z","updated":"2017-05-16T04:23:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfmf0006khuvd4h0ub8x","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>前两天听到有人说多人合作的项目并不需要处理很多事情，只需要处理好自己的那部分业务逻辑就好了。感觉这是一个很不负责任的说法。</p>\n<p>作为一个APP的开发者，自己负责的事其中的一个模块，但是都是这个APP的开发者，也要往里面塞代码，如果每个人都用不同的逻辑风格去组织代码。那么整个项目就是一坨坨坨，这个坨会影响项目的演进、日后的发展。</p>\n<p>当然有的是看不出来的，比如说：当一个请假的人写的代码出现一个BUG，需要修复上线的时候，对于不同的代码风格，需要找到问题的关键代码，这个过程是撕心裂肺的，但是如果同一套代码风格，心中就会有一个大致的位置，去修改时候就会比较快速的定位问题。</p>\n<a id=\"more\"></a>\n<h1 id=\"从协议入手\"><a href=\"#从协议入手\" class=\"headerlink\" title=\"从协议入手\"></a>从协议入手</h1><p><code>UITableView</code>是项目中非常常见的iOS高级控件，在页面中所有相似的页面几乎都是由该控件进行完成。其广泛运用的不止是使用方便，最主要的是内部的复用优化也是相当给力的。</p>\n<h2 id=\"协议模式下的UITableView\"><a href=\"#协议模式下的UITableView\" class=\"headerlink\" title=\"协议模式下的UITableView\"></a>协议模式下的UITableView</h2><p><code>UITableView</code>是典型的 <strong>协议-代理模式</strong> ，比例<code>id &lt;UITableViewDataSource&gt; dataSource</code>和<code>id &lt;UITableViewDelegate&gt; delegate</code>，所以使用对于这种比较规整的列表来说把协议继续扩展到下一级也是可以的。</p>\n<p>为了统一<code>UITableView.dataSource</code>和<code>UITableView.delegate</code>，构建如下协议：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//  直接填充Cell的cellModel</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">CellModelProtocol</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)cellClassName;  <span class=\"comment\">//  cellModel绑定的类名</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cellModelForCell:(<span class=\"built_in\">UITableViewCell</span> *)cell; <span class=\"comment\">//  cellModel填充上面绑定的cell</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>那么只需要在代理中做如下设置:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#pragma mark <span class=\"meta-string\">&lt;UITableViewDelegate, UITableViewDataSource&gt;</span></span></div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)numberOfSectionsInTableView:(<span class=\"built_in\">UITableView</span>*)tableView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span>*)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.viewModel.dataSource.count;</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"built_in\">UITableViewCell</span>*)tableView:(<span class=\"built_in\">UITableView</span>*)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span>*)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">      <span class=\"keyword\">id</span>&lt;CellModelProtocol&gt; cellModel = <span class=\"keyword\">self</span>.viewModel.dataSource[indexPath.row];</div><div class=\"line\">      <span class=\"built_in\">UITableViewCell</span>* cell = [tableView dequeueReusableCellWithIdentifier:[cellModel cellClassName]];</div><div class=\"line\">      cell.frame = tableView.bounds;</div><div class=\"line\">      [cellModel cellModelForCell:cell];</div><div class=\"line\">      [cell sizeToFit];</div><div class=\"line\">      <span class=\"keyword\">return</span> cell;</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"built_in\">CGFloat</span>)tableView:(<span class=\"built_in\">UITableView</span>*)tableView heightForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span>*)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">      <span class=\"keyword\">id</span>&lt;CellModelProtocol&gt; cellModel = <span class=\"keyword\">self</span>.viewModel.dataSource[indexPath.row];</div><div class=\"line\">      <span class=\"built_in\">UITableViewCell</span>* cell = [tableView ktj_cacheHeightCellForReuseIDFA:[cellModel cellClassName]];</div><div class=\"line\">      [cellModel cellModelForCell:cell];</div><div class=\"line\">      <span class=\"keyword\">return</span> [cell sizeThatFits:tableView.bounds.size].height;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而在cell中，默认在<code>sizeThatFits:</code>中进行布局的设置和算高即可。如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//  xxxCell.m</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGSize</span>)sizeThatFits:(<span class=\"built_in\">CGSize</span>)size &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGRect</span> frame = <span class=\"built_in\">CGRectZero</span>;</div><div class=\"line\">    <span class=\"comment\">//  根据Cell的实际内容进行布局并设置高度</span></div><div class=\"line\">    frame.origin = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">10</span>, <span class=\"number\">15</span>);</div><div class=\"line\">    frame.size = [<span class=\"keyword\">self</span>.infoLabel sizeThatFits:<span class=\"built_in\">CGSizeMake</span>(size.width-frame.origin.x*<span class=\"number\">2</span>, size.height)];</div><div class=\"line\">    <span class=\"keyword\">self</span>.infoLabel.frame = frame;</div><div class=\"line\">    </div><div class=\"line\">    size.height = <span class=\"built_in\">CGRectGetMaxY</span>(<span class=\"keyword\">self</span>.infoLabel.frame)+frame.origin.y;</div><div class=\"line\">    <span class=\"keyword\">return</span> size;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果cell采用autolayout，则计算采用<a href=\"https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/e3ee86ce419d18d3ff735056f1474f2863e43003/Classes/UITableView%2BFDTemplateLayoutCell.m\" target=\"_blank\" rel=\"external\">UITableView-FDTemplateLayoutCell</a>的计算方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UITableViewCell</span> (<span class=\"title\">KTJCellAutoLayoutForSize</span>)</span></div><div class=\"line\"><span class=\"comment\">//  autolout布局计算高度</span></div><div class=\"line\">- (<span class=\"built_in\">CGSize</span>)ktj_ALCellSizeThatFits:(<span class=\"built_in\">CGSize</span>)size &#123;</div><div class=\"line\">    <span class=\"comment\">// Add a hard width constraint to make dynamic content views (like labels) expand vertically instead</span></div><div class=\"line\">    <span class=\"comment\">// of growing horizontally, in a flow-layout manner.</span></div><div class=\"line\">    <span class=\"built_in\">NSLayoutConstraint</span> *tempWidthConstraint =</div><div class=\"line\">    [<span class=\"built_in\">NSLayoutConstraint</span> constraintWithItem:<span class=\"keyword\">self</span>.contentView</div><div class=\"line\">                                 attribute:<span class=\"built_in\">NSLayoutAttributeWidth</span></div><div class=\"line\">                                 relatedBy:<span class=\"built_in\">NSLayoutRelationEqual</span></div><div class=\"line\">                                    toItem:<span class=\"literal\">nil</span></div><div class=\"line\">                                 attribute:<span class=\"built_in\">NSLayoutAttributeNotAnAttribute</span></div><div class=\"line\">                                multiplier:<span class=\"number\">1.0</span></div><div class=\"line\">                                  constant:size.width];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.contentView addConstraint:tempWidthConstraint];</div><div class=\"line\">    <span class=\"comment\">// Auto layout engine does its math</span></div><div class=\"line\">    size = [<span class=\"keyword\">self</span>.contentView systemLayoutSizeFittingSize:<span class=\"built_in\">UILayoutFittingCompressedSize</span>];</div><div class=\"line\">    size.height += <span class=\"number\">1</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.contentView removeConstraint:tempWidthConstraint];</div><div class=\"line\">    <span class=\"keyword\">return</span> size;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>另外在<code>&lt;UITableViewDelegate, UITableViewDataSource&gt;</code>中只写了1组，只有cell，没有header、footer的情况，如果需要，炮制即可。</p>\n<p>说一下这个其中的<code>ktj_cacheHeightCellForReuseIDFA:</code>类别方法。这个方法是为了算高进行缓存的一个cell，这个cell保存在 <code>NSCache</code>中。所以为了统一，需要在数据初始化时候注册所有的cell。当然你也可以根据类名直接生成，这个自主决定。</p>\n<p>说到算高，需要说一下这其中的<code>dequeueReusableCellWithIdentifier:</code>方法。该方法是从tableView的缓存池中取出指定ID的cell。请注意是 <strong>取出</strong> ，并且<code>UITableView</code>并没有暴露出如何放进缓存池，也没有必要暴露出放进缓存池的方法。</p>\n<p>而且<code>UITableView</code>只有一个地方能够接收Cell那就是<code>tableView:cellForRowAtIndexPath:</code>。所以请保证<code>dequeueReusableCellWithIdentifier:</code>取出的方法 <strong>需要通过<code>tableView:cellForRowAtIndexPath:</code>返回给<code>UITableView</code></strong> 。这就是我上面说的<code>ktj_cacheHeightCellForReuseIDFA:</code>方法为何要做一个 cache去缓存我取出的cell，目的是为了减少cell的浪费。</p>\n<p>同理，对于<code>UITableView</code>的<code>headerView</code>、<code>footerView</code>来说，可以炮制以上协议、方法。不再赘述</p>\n<p>PS.</p>\n<ol>\n<li><a href=\"https://github.com/forkingdog/UITableView-FDTemplateLayoutCell\" target=\"_blank\" rel=\"external\">UITableView-FDTemplateLayoutCell</a>: <a href=\"https://github.com/sunnyxx\" target=\"_blank\" rel=\"external\">sunnyxx</a>打造的优化UITableView的一个库，6000的star，很赞。</li>\n</ol>\n<h1 id=\"规范化的代码风格\"><a href=\"#规范化的代码风格\" class=\"headerlink\" title=\"规范化的代码风格\"></a>规范化的代码风格</h1><p>对于多人开发，最崩溃的事情就要数去读别人的代码。就算不是多人开发，接手别人的代码也是让人最崩溃的事情。如果有不用考虑这件事的叫我！</p>\n<p>不同的公司可以有不同的代码风格，但是一个公司的代码风格需要保持一致，这样就不会出现一人请假，无人能接受项目的尴尬局面，就算能接，也是需要为了加一个逻辑判断，需要花费很大的精力去处理。</p>\n<p>至于其中的代码不统一的坑，恐怕要等踩过才知道吧😂。</p>\n<h1 id=\"业务逻辑的拆分\"><a href=\"#业务逻辑的拆分\" class=\"headerlink\" title=\"业务逻辑的拆分\"></a>业务逻辑的拆分</h1><p>对于复杂的业务逻辑，对其拆分是非常重要的，不拆分很可能写出来的代码一个文件 &gt;1000 行。复杂的业务逻辑对于写出来需要一气呵成，修改起来也就出现了牵一发动全身(虽然拆分完成之后可能也会关键逻辑代码不可拆分，但是会好很多)。</p>\n<h2 id=\"筛选重构\"><a href=\"#筛选重构\" class=\"headerlink\" title=\"筛选重构\"></a>筛选重构</h2><p>筛选主要处理的是筛选项，针对众多筛选条件拆分为不同的业务逻辑模块是必须的。遵照拆分的原则，于是乎根据UI划分出来位置、价格、户型、筛选、排序这么几个模块。针对每个模块自行处理选中数据、UI展示。对外只暴露选中项输入和选中回调。</p>\n<p>对于每个数据大致都可分为一个列表，然后可选中1项或多项。于是乎，这个代码如果不拉出来是要写好多次的，拉出来，但是选中需要把选中的逻辑扔出来，方便自定义。</p>\n","site":{"data":{}},"excerpt":"<p>前两天听到有人说多人合作的项目并不需要处理很多事情，只需要处理好自己的那部分业务逻辑就好了。感觉这是一个很不负责任的说法。</p>\n<p>作为一个APP的开发者，自己负责的事其中的一个模块，但是都是这个APP的开发者，也要往里面塞代码，如果每个人都用不同的逻辑风格去组织代码。那么整个项目就是一坨坨坨，这个坨会影响项目的演进、日后的发展。</p>\n<p>当然有的是看不出来的，比如说：当一个请假的人写的代码出现一个BUG，需要修复上线的时候，对于不同的代码风格，需要找到问题的关键代码，这个过程是撕心裂肺的，但是如果同一套代码风格，心中就会有一个大致的位置，去修改时候就会比较快速的定位问题。</p>","more":"<h1 id=\"从协议入手\"><a href=\"#从协议入手\" class=\"headerlink\" title=\"从协议入手\"></a>从协议入手</h1><p><code>UITableView</code>是项目中非常常见的iOS高级控件，在页面中所有相似的页面几乎都是由该控件进行完成。其广泛运用的不止是使用方便，最主要的是内部的复用优化也是相当给力的。</p>\n<h2 id=\"协议模式下的UITableView\"><a href=\"#协议模式下的UITableView\" class=\"headerlink\" title=\"协议模式下的UITableView\"></a>协议模式下的UITableView</h2><p><code>UITableView</code>是典型的 <strong>协议-代理模式</strong> ，比例<code>id &lt;UITableViewDataSource&gt; dataSource</code>和<code>id &lt;UITableViewDelegate&gt; delegate</code>，所以使用对于这种比较规整的列表来说把协议继续扩展到下一级也是可以的。</p>\n<p>为了统一<code>UITableView.dataSource</code>和<code>UITableView.delegate</code>，构建如下协议：<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//  直接填充Cell的cellModel</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@protocol</span> <span class=\"title\">CellModelProtocol</span> &lt;<span class=\"title\">NSObject</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)cellClassName;  <span class=\"comment\">//  cellModel绑定的类名</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cellModelForCell:(<span class=\"built_in\">UITableViewCell</span> *)cell; <span class=\"comment\">//  cellModel填充上面绑定的cell</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure></p>\n<p>那么只需要在代理中做如下设置:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#pragma mark <span class=\"meta-string\">&lt;UITableViewDelegate, UITableViewDataSource&gt;</span></span></div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)numberOfSectionsInTableView:(<span class=\"built_in\">UITableView</span>*)tableView</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span>*)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.viewModel.dataSource.count;</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"built_in\">UITableViewCell</span>*)tableView:(<span class=\"built_in\">UITableView</span>*)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span>*)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">      <span class=\"keyword\">id</span>&lt;CellModelProtocol&gt; cellModel = <span class=\"keyword\">self</span>.viewModel.dataSource[indexPath.row];</div><div class=\"line\">      <span class=\"built_in\">UITableViewCell</span>* cell = [tableView dequeueReusableCellWithIdentifier:[cellModel cellClassName]];</div><div class=\"line\">      cell.frame = tableView.bounds;</div><div class=\"line\">      [cellModel cellModelForCell:cell];</div><div class=\"line\">      [cell sizeToFit];</div><div class=\"line\">      <span class=\"keyword\">return</span> cell;</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"built_in\">CGFloat</span>)tableView:(<span class=\"built_in\">UITableView</span>*)tableView heightForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span>*)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">      <span class=\"keyword\">id</span>&lt;CellModelProtocol&gt; cellModel = <span class=\"keyword\">self</span>.viewModel.dataSource[indexPath.row];</div><div class=\"line\">      <span class=\"built_in\">UITableViewCell</span>* cell = [tableView ktj_cacheHeightCellForReuseIDFA:[cellModel cellClassName]];</div><div class=\"line\">      [cellModel cellModelForCell:cell];</div><div class=\"line\">      <span class=\"keyword\">return</span> [cell sizeThatFits:tableView.bounds.size].height;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而在cell中，默认在<code>sizeThatFits:</code>中进行布局的设置和算高即可。如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//  xxxCell.m</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGSize</span>)sizeThatFits:(<span class=\"built_in\">CGSize</span>)size &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGRect</span> frame = <span class=\"built_in\">CGRectZero</span>;</div><div class=\"line\">    <span class=\"comment\">//  根据Cell的实际内容进行布局并设置高度</span></div><div class=\"line\">    frame.origin = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">10</span>, <span class=\"number\">15</span>);</div><div class=\"line\">    frame.size = [<span class=\"keyword\">self</span>.infoLabel sizeThatFits:<span class=\"built_in\">CGSizeMake</span>(size.width-frame.origin.x*<span class=\"number\">2</span>, size.height)];</div><div class=\"line\">    <span class=\"keyword\">self</span>.infoLabel.frame = frame;</div><div class=\"line\">    </div><div class=\"line\">    size.height = <span class=\"built_in\">CGRectGetMaxY</span>(<span class=\"keyword\">self</span>.infoLabel.frame)+frame.origin.y;</div><div class=\"line\">    <span class=\"keyword\">return</span> size;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果cell采用autolayout，则计算采用<a href=\"https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/e3ee86ce419d18d3ff735056f1474f2863e43003/Classes/UITableView%2BFDTemplateLayoutCell.m\">UITableView-FDTemplateLayoutCell</a>的计算方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UITableViewCell</span> (<span class=\"title\">KTJCellAutoLayoutForSize</span>)</span></div><div class=\"line\"><span class=\"comment\">//  autolout布局计算高度</span></div><div class=\"line\">- (<span class=\"built_in\">CGSize</span>)ktj_ALCellSizeThatFits:(<span class=\"built_in\">CGSize</span>)size &#123;</div><div class=\"line\">    <span class=\"comment\">// Add a hard width constraint to make dynamic content views (like labels) expand vertically instead</span></div><div class=\"line\">    <span class=\"comment\">// of growing horizontally, in a flow-layout manner.</span></div><div class=\"line\">    <span class=\"built_in\">NSLayoutConstraint</span> *tempWidthConstraint =</div><div class=\"line\">    [<span class=\"built_in\">NSLayoutConstraint</span> constraintWithItem:<span class=\"keyword\">self</span>.contentView</div><div class=\"line\">                                 attribute:<span class=\"built_in\">NSLayoutAttributeWidth</span></div><div class=\"line\">                                 relatedBy:<span class=\"built_in\">NSLayoutRelationEqual</span></div><div class=\"line\">                                    toItem:<span class=\"literal\">nil</span></div><div class=\"line\">                                 attribute:<span class=\"built_in\">NSLayoutAttributeNotAnAttribute</span></div><div class=\"line\">                                multiplier:<span class=\"number\">1.0</span></div><div class=\"line\">                                  constant:size.width];</div><div class=\"line\">    [<span class=\"keyword\">self</span>.contentView addConstraint:tempWidthConstraint];</div><div class=\"line\">    <span class=\"comment\">// Auto layout engine does its math</span></div><div class=\"line\">    size = [<span class=\"keyword\">self</span>.contentView systemLayoutSizeFittingSize:<span class=\"built_in\">UILayoutFittingCompressedSize</span>];</div><div class=\"line\">    size.height += <span class=\"number\">1</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.contentView removeConstraint:tempWidthConstraint];</div><div class=\"line\">    <span class=\"keyword\">return</span> size;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>另外在<code>&lt;UITableViewDelegate, UITableViewDataSource&gt;</code>中只写了1组，只有cell，没有header、footer的情况，如果需要，炮制即可。</p>\n<p>说一下这个其中的<code>ktj_cacheHeightCellForReuseIDFA:</code>类别方法。这个方法是为了算高进行缓存的一个cell，这个cell保存在 <code>NSCache</code>中。所以为了统一，需要在数据初始化时候注册所有的cell。当然你也可以根据类名直接生成，这个自主决定。</p>\n<p>说到算高，需要说一下这其中的<code>dequeueReusableCellWithIdentifier:</code>方法。该方法是从tableView的缓存池中取出指定ID的cell。请注意是 <strong>取出</strong> ，并且<code>UITableView</code>并没有暴露出如何放进缓存池，也没有必要暴露出放进缓存池的方法。</p>\n<p>而且<code>UITableView</code>只有一个地方能够接收Cell那就是<code>tableView:cellForRowAtIndexPath:</code>。所以请保证<code>dequeueReusableCellWithIdentifier:</code>取出的方法 <strong>需要通过<code>tableView:cellForRowAtIndexPath:</code>返回给<code>UITableView</code></strong> 。这就是我上面说的<code>ktj_cacheHeightCellForReuseIDFA:</code>方法为何要做一个 cache去缓存我取出的cell，目的是为了减少cell的浪费。</p>\n<p>同理，对于<code>UITableView</code>的<code>headerView</code>、<code>footerView</code>来说，可以炮制以上协议、方法。不再赘述</p>\n<p>PS.</p>\n<ol>\n<li><a href=\"https://github.com/forkingdog/UITableView-FDTemplateLayoutCell\">UITableView-FDTemplateLayoutCell</a>: <a href=\"https://github.com/sunnyxx\">sunnyxx</a>打造的优化UITableView的一个库，6000的star，很赞。</li>\n</ol>\n<h1 id=\"规范化的代码风格\"><a href=\"#规范化的代码风格\" class=\"headerlink\" title=\"规范化的代码风格\"></a>规范化的代码风格</h1><p>对于多人开发，最崩溃的事情就要数去读别人的代码。就算不是多人开发，接手别人的代码也是让人最崩溃的事情。如果有不用考虑这件事的叫我！</p>\n<p>不同的公司可以有不同的代码风格，但是一个公司的代码风格需要保持一致，这样就不会出现一人请假，无人能接受项目的尴尬局面，就算能接，也是需要为了加一个逻辑判断，需要花费很大的精力去处理。</p>\n<p>至于其中的代码不统一的坑，恐怕要等踩过才知道吧😂。</p>\n<h1 id=\"业务逻辑的拆分\"><a href=\"#业务逻辑的拆分\" class=\"headerlink\" title=\"业务逻辑的拆分\"></a>业务逻辑的拆分</h1><p>对于复杂的业务逻辑，对其拆分是非常重要的，不拆分很可能写出来的代码一个文件 &gt;1000 行。复杂的业务逻辑对于写出来需要一气呵成，修改起来也就出现了牵一发动全身(虽然拆分完成之后可能也会关键逻辑代码不可拆分，但是会好很多)。</p>\n<h2 id=\"筛选重构\"><a href=\"#筛选重构\" class=\"headerlink\" title=\"筛选重构\"></a>筛选重构</h2><p>筛选主要处理的是筛选项，针对众多筛选条件拆分为不同的业务逻辑模块是必须的。遵照拆分的原则，于是乎根据UI划分出来位置、价格、户型、筛选、排序这么几个模块。针对每个模块自行处理选中数据、UI展示。对外只暴露选中项输入和选中回调。</p>\n<p>对于每个数据大致都可分为一个列表，然后可选中1项或多项。于是乎，这个代码如果不拉出来是要写好多次的，拉出来，但是选中需要把选中的逻辑扔出来，方便自定义。</p>"},{"title":"关于转载的文章","date":"2016-07-24T03:52:40.000Z","_content":"\n一点删除原链接的转载文章的牢骚\n\n<!--more-->\n\n# 缘由\n\n前两天看到朋友圈一个哥们转载了许多关于iOS的一些文章，很是兴奋，去围观。突然发现这文笔绝对是经过校对的。心中大喜，以为淘到宝了（因为文章并没有署名转载出处，所以应该是原创）。之后看了一下他的另一个文章，刚好我百度过这个文章的原作者的最后一个系列的，于是我又翻阅了一下看看是不是不一样，结果和我想的一样，除了删除了作者的署名之外其他的都是一样的。于是关掉了网页，心中默默的鄙视。\n\n\n# 关于转载的别人文章\n\n对于一些大神的技术文章都是喜欢的，爱不释手的那种，我也是。有的能转载的我就转载，不能转载的，我会复制下来，放在我自己的文件夹中，为的是方便查询。在转载的时候我会特意标示转载的地址。而且一般情况下我会在文章的开始写上几句简单的主要的思想（比如：[《[转]蓝牙开发》](http://www.cnblogs.com/madordie/p/5159597.html)、[《[搬运] mac下安装GDB》](http://www.cnblogs.com/madordie/p/4322044.html)、[《［搬运］MAC 下安装 brew》](http://www.cnblogs.com/madordie/p/4322042.html)），当然有时候没来得及的就忘了😂（比如：[《[搬运] iOS 7 侧滑返回手势使用和错误集》](http://www.cnblogs.com/madordie/p/4357685.html)）。\n\n还有关于文章的排版，殊不知原作者为了让读者更好的阅读会对排版做的比较好，有的人为了阅读方便会去阅读原作者的文章。比如说我这种强迫症。\n\n\n# 我对删除原链的转载文章态度\n\n然后说一下我对于那些抄袭的，然后删除了原链接的人鄙视一下。每一篇文章都是别人花费了大量的精力去完成的，有的为了让读者能够更清楚的理解，所以会在发布的时候找别人去读一读，看能不能理解其中云云。然而对文章的原链接保存是一种对别人劳动成果的尊重，对原作者最基本的尊重。\n\n别的不想多说了。转载请注明出处。谢谢！\n且行且珍惜。","source":"_posts/about-reprint-article.md","raw":"---\ntitle: 关于转载的文章\ndate: 2016-07-24 11:52:40\ncategories:\n    - 牢骚\n---\n\n一点删除原链接的转载文章的牢骚\n\n<!--more-->\n\n# 缘由\n\n前两天看到朋友圈一个哥们转载了许多关于iOS的一些文章，很是兴奋，去围观。突然发现这文笔绝对是经过校对的。心中大喜，以为淘到宝了（因为文章并没有署名转载出处，所以应该是原创）。之后看了一下他的另一个文章，刚好我百度过这个文章的原作者的最后一个系列的，于是我又翻阅了一下看看是不是不一样，结果和我想的一样，除了删除了作者的署名之外其他的都是一样的。于是关掉了网页，心中默默的鄙视。\n\n\n# 关于转载的别人文章\n\n对于一些大神的技术文章都是喜欢的，爱不释手的那种，我也是。有的能转载的我就转载，不能转载的，我会复制下来，放在我自己的文件夹中，为的是方便查询。在转载的时候我会特意标示转载的地址。而且一般情况下我会在文章的开始写上几句简单的主要的思想（比如：[《[转]蓝牙开发》](http://www.cnblogs.com/madordie/p/5159597.html)、[《[搬运] mac下安装GDB》](http://www.cnblogs.com/madordie/p/4322044.html)、[《［搬运］MAC 下安装 brew》](http://www.cnblogs.com/madordie/p/4322042.html)），当然有时候没来得及的就忘了😂（比如：[《[搬运] iOS 7 侧滑返回手势使用和错误集》](http://www.cnblogs.com/madordie/p/4357685.html)）。\n\n还有关于文章的排版，殊不知原作者为了让读者更好的阅读会对排版做的比较好，有的人为了阅读方便会去阅读原作者的文章。比如说我这种强迫症。\n\n\n# 我对删除原链的转载文章态度\n\n然后说一下我对于那些抄袭的，然后删除了原链接的人鄙视一下。每一篇文章都是别人花费了大量的精力去完成的，有的为了让读者能够更清楚的理解，所以会在发布的时候找别人去读一读，看能不能理解其中云云。然而对文章的原链接保存是一种对别人劳动成果的尊重，对原作者最基本的尊重。\n\n别的不想多说了。转载请注明出处。谢谢！\n且行且珍惜。","slug":"about-reprint-article","published":1,"updated":"2017-03-25T04:12:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfmt0008khuvc7roorh3","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>一点删除原链接的转载文章的牢骚</p>\n<a id=\"more\"></a>\n<h1 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h1><p>前两天看到朋友圈一个哥们转载了许多关于iOS的一些文章，很是兴奋，去围观。突然发现这文笔绝对是经过校对的。心中大喜，以为淘到宝了（因为文章并没有署名转载出处，所以应该是原创）。之后看了一下他的另一个文章，刚好我百度过这个文章的原作者的最后一个系列的，于是我又翻阅了一下看看是不是不一样，结果和我想的一样，除了删除了作者的署名之外其他的都是一样的。于是关掉了网页，心中默默的鄙视。</p>\n<h1 id=\"关于转载的别人文章\"><a href=\"#关于转载的别人文章\" class=\"headerlink\" title=\"关于转载的别人文章\"></a>关于转载的别人文章</h1><p>对于一些大神的技术文章都是喜欢的，爱不释手的那种，我也是。有的能转载的我就转载，不能转载的，我会复制下来，放在我自己的文件夹中，为的是方便查询。在转载的时候我会特意标示转载的地址。而且一般情况下我会在文章的开始写上几句简单的主要的思想（比如：<a href=\"http://www.cnblogs.com/madordie/p/5159597.html\" target=\"_blank\" rel=\"external\">《[转]蓝牙开发》</a>、<a href=\"http://www.cnblogs.com/madordie/p/4322044.html\" target=\"_blank\" rel=\"external\">《[搬运] mac下安装GDB》</a>、<a href=\"http://www.cnblogs.com/madordie/p/4322042.html\" target=\"_blank\" rel=\"external\">《［搬运］MAC 下安装 brew》</a>），当然有时候没来得及的就忘了😂（比如：<a href=\"http://www.cnblogs.com/madordie/p/4357685.html\" target=\"_blank\" rel=\"external\">《[搬运] iOS 7 侧滑返回手势使用和错误集》</a>）。</p>\n<p>还有关于文章的排版，殊不知原作者为了让读者更好的阅读会对排版做的比较好，有的人为了阅读方便会去阅读原作者的文章。比如说我这种强迫症。</p>\n<h1 id=\"我对删除原链的转载文章态度\"><a href=\"#我对删除原链的转载文章态度\" class=\"headerlink\" title=\"我对删除原链的转载文章态度\"></a>我对删除原链的转载文章态度</h1><p>然后说一下我对于那些抄袭的，然后删除了原链接的人鄙视一下。每一篇文章都是别人花费了大量的精力去完成的，有的为了让读者能够更清楚的理解，所以会在发布的时候找别人去读一读，看能不能理解其中云云。然而对文章的原链接保存是一种对别人劳动成果的尊重，对原作者最基本的尊重。</p>\n<p>别的不想多说了。转载请注明出处。谢谢！<br>且行且珍惜。</p>\n","site":{"data":{}},"excerpt":"<p>一点删除原链接的转载文章的牢骚</p>","more":"<h1 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h1><p>前两天看到朋友圈一个哥们转载了许多关于iOS的一些文章，很是兴奋，去围观。突然发现这文笔绝对是经过校对的。心中大喜，以为淘到宝了（因为文章并没有署名转载出处，所以应该是原创）。之后看了一下他的另一个文章，刚好我百度过这个文章的原作者的最后一个系列的，于是我又翻阅了一下看看是不是不一样，结果和我想的一样，除了删除了作者的署名之外其他的都是一样的。于是关掉了网页，心中默默的鄙视。</p>\n<h1 id=\"关于转载的别人文章\"><a href=\"#关于转载的别人文章\" class=\"headerlink\" title=\"关于转载的别人文章\"></a>关于转载的别人文章</h1><p>对于一些大神的技术文章都是喜欢的，爱不释手的那种，我也是。有的能转载的我就转载，不能转载的，我会复制下来，放在我自己的文件夹中，为的是方便查询。在转载的时候我会特意标示转载的地址。而且一般情况下我会在文章的开始写上几句简单的主要的思想（比如：<a href=\"http://www.cnblogs.com/madordie/p/5159597.html\">《[转]蓝牙开发》</a>、<a href=\"http://www.cnblogs.com/madordie/p/4322044.html\">《[搬运] mac下安装GDB》</a>、<a href=\"http://www.cnblogs.com/madordie/p/4322042.html\">《［搬运］MAC 下安装 brew》</a>），当然有时候没来得及的就忘了😂（比如：<a href=\"http://www.cnblogs.com/madordie/p/4357685.html\">《[搬运] iOS 7 侧滑返回手势使用和错误集》</a>）。</p>\n<p>还有关于文章的排版，殊不知原作者为了让读者更好的阅读会对排版做的比较好，有的人为了阅读方便会去阅读原作者的文章。比如说我这种强迫症。</p>\n<h1 id=\"我对删除原链的转载文章态度\"><a href=\"#我对删除原链的转载文章态度\" class=\"headerlink\" title=\"我对删除原链的转载文章态度\"></a>我对删除原链的转载文章态度</h1><p>然后说一下我对于那些抄袭的，然后删除了原链接的人鄙视一下。每一篇文章都是别人花费了大量的精力去完成的，有的为了让读者能够更清楚的理解，所以会在发布的时候找别人去读一读，看能不能理解其中云云。然而对文章的原链接保存是一种对别人劳动成果的尊重，对原作者最基本的尊重。</p>\n<p>别的不想多说了。转载请注明出处。谢谢！<br>且行且珍惜。</p>"},{"title":"科学上网之搬瓦工ss搭建笔记","date":"2016-12-19T12:37:11.000Z","_content":"\n原来吧，用用goagent、Lantern、XX-Net，确实，这玩意只能Google出来结果，但是有的站点打不开才是最骚的。。\n同事搞了个搬瓦工挺便宜，于是乎就也搞了一个。不过强迫症犯了，尝试了各种SS版本以及各种优化，目的是找个流畅点的版本进行__科学上网__。\n\n<!--more-->\n\n# 写在前面\n  - 红线越不得！红线越不得！红线越不得！重要的事情说3遍。\n  - 参看第一条\n  - 参看第一条\n  - 参看第一条\n  \n  2017 07 18 say goog bay !","source":"_posts/bandwagonhost-note.md","raw":"---\ntitle: 科学上网之搬瓦工ss搭建笔记\ndate: 2016-12-19 20:37:11\ntags:\n---\n\n原来吧，用用goagent、Lantern、XX-Net，确实，这玩意只能Google出来结果，但是有的站点打不开才是最骚的。。\n同事搞了个搬瓦工挺便宜，于是乎就也搞了一个。不过强迫症犯了，尝试了各种SS版本以及各种优化，目的是找个流畅点的版本进行__科学上网__。\n\n<!--more-->\n\n# 写在前面\n  - 红线越不得！红线越不得！红线越不得！重要的事情说3遍。\n  - 参看第一条\n  - 参看第一条\n  - 参看第一条\n  \n  2017 07 18 say goog bay !","slug":"bandwagonhost-note","published":1,"updated":"2017-07-18T08:09:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfmw0009khuvi8btdfq2","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>原来吧，用用goagent、Lantern、XX-Net，确实，这玩意只能Google出来结果，但是有的站点打不开才是最骚的。。<br>同事搞了个搬瓦工挺便宜，于是乎就也搞了一个。不过强迫症犯了，尝试了各种SS版本以及各种优化，目的是找个流畅点的版本进行<strong>科学上网</strong>。</p>\n<a id=\"more\"></a>\n<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><ul>\n<li>红线越不得！红线越不得！红线越不得！重要的事情说3遍。</li>\n<li>参看第一条</li>\n<li>参看第一条</li>\n<li><p>参看第一条</p>\n<p>2017 07 18 say goog bay !</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>原来吧，用用goagent、Lantern、XX-Net，确实，这玩意只能Google出来结果，但是有的站点打不开才是最骚的。。<br>同事搞了个搬瓦工挺便宜，于是乎就也搞了一个。不过强迫症犯了，尝试了各种SS版本以及各种优化，目的是找个流畅点的版本进行<strong>科学上网</strong>。</p>","more":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><ul>\n<li>红线越不得！红线越不得！红线越不得！重要的事情说3遍。</li>\n<li>参看第一条</li>\n<li>参看第一条</li>\n<li><p>参看第一条</p>\n<p>2017 07 18 say goog bay !</p>\n</li>\n</ul>"},{"title":"正则表达式学习笔记","date":"2016-12-19T07:03:09.000Z","_content":"\n正则表达式基础学习笔记。\n\n<!--more-->\n\n# 前面\n  上次找了个很好的文章，可是手残没保存。。找不到了😭，现在重新找了一个文章：[正则表达式30分钟入门教程](https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/index.html)\n  正如作者说的：\n  > # 声明\n  > 本文非原创，是改编自[《正则表达式30分钟入门教程》](http://deerchao.net/tutorials/regex/regex.htm#mission)，因为原作者的排版个人不是很喜欢，而且内容上个人觉得有些地方需要改进，所以在 gitbook 上开了一本书。\n  \n  OSC的[在线正则表达式测试](http://tool.oschina.net/regex)\n  \n# 开搞\n\n## 元字符\n  - `\\` : 转义\n  - `\\b` : 单词开始或结束\n  - `^` : 字符串开始\n  - `$` : 字符串结束\n  - `\\d` : 一个数字\n  - `\\s` : 任意空白字符：空格、制表符、换行符、中文全角空格、等\n  - `\\w` : 字母/数字/下划线/汉字 可见字符\n  - `.` : 除换行符以外的任意字符\n\n## 重复\n  - `{n}` : 前置位重复匹配 [n] 次\n  - `{n,m}` : 前置位重复匹配 [n-m] 次\n  - `{n,}` : 前置位重复匹配 [n-∞] 次\n  - `*` : 数量区间：[0-N]\n  - `+` : 数量区间：[1-N]\n  - `?` : 数量区间：[0-1]\n  \n## 字符类\n  - `[nml]` : 可以匹配到 n/m/l\n  \n## 条件\n  - `|` : __或__语句。存在逻辑短路\n  - `(m)` : __分组__语句。子式，可以指定重复什么的\n  \n## 反义\n  - `\\W` : 任意__不是__（字符、数字、下划线、汉字）\n  - `\\S` : 任意__不是__ 空白符\n  - `\\D` : 任意__不是__ 数字\n  - `\\B` : 任意__不是__ 单词开头或结尾\n  - `\\^x` : 除x以外的任意字符\n  - `[\\^abc]` : 除abc这几个字母以外的任意字符\n  \n## 后向引用\n  `(\\w+)`这样用`()`的部分称为一个分组，其匹配到的内容可以使用`\\n`来表示，`n`代表该分组为第n个分组。分组下标从`1`开始。\n  也可以自定义子表达式组名: `(?<Word>M) \\k<Word>` : 或 `(?'Word'M) \\k'Word'`，其中M为子式。\n  \n## 常用分组语法\n\n### 捕获\n  - `(exp)` : 匹配exp,并捕获文本到自动命名的组里\n  - `(?exp)` : 匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)\n  - `(?:exp)` : 匹配exp,不捕获匹配的文本，也不给此分组分配组号\n\n### 零宽断言\n  - `(?=exp)` : 匹配exp前面的位置\n  - `(?<=exp)` : 匹配exp后面的位置\n  - `(?!exp)` : 匹配后面跟的不是exp的位置\n  - `(?<!exp)` : 匹配前面不是exp的位置\n\n### 注释\n  - `(?#comment)` : 这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读\n  \n## 贪婪与懒惰\n  贪婪：匹配的尽可能长\n  懒惰：匹配的尽可能短\n  \n  - `*?` : 重复任意次，但尽可能少重复\n  - `+?` : 重复1次或更多次，但尽可能少重复\n  - `??` : 重复0次或1次，但尽可能少重复\n  - `{n,m}?` : 重复n到m次，但尽可能少重复\n  - `{n,}?` : 重复n次以上，但尽可能少重复\n  \n## 平衡组/递归匹配\n  \\# 我开始看不懂了😂\n  \n## 其他\n  - `\\a` : 报警字符(打印它的效果是电脑嘀一声)\n  - `\\b` : 通常是单词分界位置，但如果在字符类里使用代表退格\n  - `\\t` : 制表符，Tab\n  - `\\r` : 回车\n  - `\\v` : 竖向制表符\n  - `\\f` : 换页符\n  - `\\n` : 换行符\n  - `\\e` : Escape\n  - `\\0nn` : ASCII代码中八进制代码为nn的字符\n  - `\\xnn` : ASCII代码中十六进制代码为nn的字符\n  - `\\unnnn` : Unicode代码中十六进制代码为nnnn的字符\n  - `\\cN` : ASCII控制字符。比如\\cC代表Ctrl+C\n  - `\\A` : 字符串开头(类似^，但不受处理多行选项的影响)\n  - `\\Z` : 字符串结尾或行尾(不受处理多行选项的影响)\n  - `\\z` : 字符串结尾(类似$，但不受处理多行选项的影响)\n  - `\\G` : 当前搜索的开头\n  - `\\p{name}` : Unicode中命名为name的字符类，例如\\p{IsGreek}\n  - `(?>exp)` : 贪婪子表达式\n  - `(?<x>-<y>exp)` : 平衡组\n  - `(?im-nsx:exp)` : 在子表达式exp中改变处理选项\n  - `(?im-nsx)` : 为表达式后面的部分改变处理选项\n  - `(?(exp)yes|no)` : 把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no\n  - `(?(exp)yes)` : 同上，只是使用空表达式作为no\n  - `(?(name)yes|no)` : 如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no\n  - `(?(name)yes)` : 同上，只是使用空表达式作为no\n  \n  \n## 栗子\n  - 5-12位QQ：`^\\d{5,12}$`\n  - IPv4地址：`((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)`\n  - `go go`、`kitty kitty`这样的叠词：`\\b(\\w+)\\b\\s+\\1\\b`\n  - 后向引用：`\\b(\\w+)\\b\\s+\\1\\b` == `\\b(?<Word>\\w+)\\b\\s+\\k<Word>\\b` == `\\b(?'Word'\\w+)\\b\\s+\\k'Word'\\b`\n  \n# 最后\n  知识研究了一下语法，还未详细测试。思考：这玩意真心厉害😂。","source":"_posts/bruch-up-regular-expressions.md","raw":"---\ntitle: 正则表达式学习笔记\ndate: 2016-12-19 15:03:09\ntags:\ncategories:\n    - 正则表达式\n---\n\n正则表达式基础学习笔记。\n\n<!--more-->\n\n# 前面\n  上次找了个很好的文章，可是手残没保存。。找不到了😭，现在重新找了一个文章：[正则表达式30分钟入门教程](https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/index.html)\n  正如作者说的：\n  > # 声明\n  > 本文非原创，是改编自[《正则表达式30分钟入门教程》](http://deerchao.net/tutorials/regex/regex.htm#mission)，因为原作者的排版个人不是很喜欢，而且内容上个人觉得有些地方需要改进，所以在 gitbook 上开了一本书。\n  \n  OSC的[在线正则表达式测试](http://tool.oschina.net/regex)\n  \n# 开搞\n\n## 元字符\n  - `\\` : 转义\n  - `\\b` : 单词开始或结束\n  - `^` : 字符串开始\n  - `$` : 字符串结束\n  - `\\d` : 一个数字\n  - `\\s` : 任意空白字符：空格、制表符、换行符、中文全角空格、等\n  - `\\w` : 字母/数字/下划线/汉字 可见字符\n  - `.` : 除换行符以外的任意字符\n\n## 重复\n  - `{n}` : 前置位重复匹配 [n] 次\n  - `{n,m}` : 前置位重复匹配 [n-m] 次\n  - `{n,}` : 前置位重复匹配 [n-∞] 次\n  - `*` : 数量区间：[0-N]\n  - `+` : 数量区间：[1-N]\n  - `?` : 数量区间：[0-1]\n  \n## 字符类\n  - `[nml]` : 可以匹配到 n/m/l\n  \n## 条件\n  - `|` : __或__语句。存在逻辑短路\n  - `(m)` : __分组__语句。子式，可以指定重复什么的\n  \n## 反义\n  - `\\W` : 任意__不是__（字符、数字、下划线、汉字）\n  - `\\S` : 任意__不是__ 空白符\n  - `\\D` : 任意__不是__ 数字\n  - `\\B` : 任意__不是__ 单词开头或结尾\n  - `\\^x` : 除x以外的任意字符\n  - `[\\^abc]` : 除abc这几个字母以外的任意字符\n  \n## 后向引用\n  `(\\w+)`这样用`()`的部分称为一个分组，其匹配到的内容可以使用`\\n`来表示，`n`代表该分组为第n个分组。分组下标从`1`开始。\n  也可以自定义子表达式组名: `(?<Word>M) \\k<Word>` : 或 `(?'Word'M) \\k'Word'`，其中M为子式。\n  \n## 常用分组语法\n\n### 捕获\n  - `(exp)` : 匹配exp,并捕获文本到自动命名的组里\n  - `(?exp)` : 匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)\n  - `(?:exp)` : 匹配exp,不捕获匹配的文本，也不给此分组分配组号\n\n### 零宽断言\n  - `(?=exp)` : 匹配exp前面的位置\n  - `(?<=exp)` : 匹配exp后面的位置\n  - `(?!exp)` : 匹配后面跟的不是exp的位置\n  - `(?<!exp)` : 匹配前面不是exp的位置\n\n### 注释\n  - `(?#comment)` : 这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读\n  \n## 贪婪与懒惰\n  贪婪：匹配的尽可能长\n  懒惰：匹配的尽可能短\n  \n  - `*?` : 重复任意次，但尽可能少重复\n  - `+?` : 重复1次或更多次，但尽可能少重复\n  - `??` : 重复0次或1次，但尽可能少重复\n  - `{n,m}?` : 重复n到m次，但尽可能少重复\n  - `{n,}?` : 重复n次以上，但尽可能少重复\n  \n## 平衡组/递归匹配\n  \\# 我开始看不懂了😂\n  \n## 其他\n  - `\\a` : 报警字符(打印它的效果是电脑嘀一声)\n  - `\\b` : 通常是单词分界位置，但如果在字符类里使用代表退格\n  - `\\t` : 制表符，Tab\n  - `\\r` : 回车\n  - `\\v` : 竖向制表符\n  - `\\f` : 换页符\n  - `\\n` : 换行符\n  - `\\e` : Escape\n  - `\\0nn` : ASCII代码中八进制代码为nn的字符\n  - `\\xnn` : ASCII代码中十六进制代码为nn的字符\n  - `\\unnnn` : Unicode代码中十六进制代码为nnnn的字符\n  - `\\cN` : ASCII控制字符。比如\\cC代表Ctrl+C\n  - `\\A` : 字符串开头(类似^，但不受处理多行选项的影响)\n  - `\\Z` : 字符串结尾或行尾(不受处理多行选项的影响)\n  - `\\z` : 字符串结尾(类似$，但不受处理多行选项的影响)\n  - `\\G` : 当前搜索的开头\n  - `\\p{name}` : Unicode中命名为name的字符类，例如\\p{IsGreek}\n  - `(?>exp)` : 贪婪子表达式\n  - `(?<x>-<y>exp)` : 平衡组\n  - `(?im-nsx:exp)` : 在子表达式exp中改变处理选项\n  - `(?im-nsx)` : 为表达式后面的部分改变处理选项\n  - `(?(exp)yes|no)` : 把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no\n  - `(?(exp)yes)` : 同上，只是使用空表达式作为no\n  - `(?(name)yes|no)` : 如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no\n  - `(?(name)yes)` : 同上，只是使用空表达式作为no\n  \n  \n## 栗子\n  - 5-12位QQ：`^\\d{5,12}$`\n  - IPv4地址：`((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)`\n  - `go go`、`kitty kitty`这样的叠词：`\\b(\\w+)\\b\\s+\\1\\b`\n  - 后向引用：`\\b(\\w+)\\b\\s+\\1\\b` == `\\b(?<Word>\\w+)\\b\\s+\\k<Word>\\b` == `\\b(?'Word'\\w+)\\b\\s+\\k'Word'\\b`\n  \n# 最后\n  知识研究了一下语法，还未详细测试。思考：这玩意真心厉害😂。","slug":"bruch-up-regular-expressions","published":1,"updated":"2016-12-30T11:12:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfn0000bkhuvzfmq48gx","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>正则表达式基础学习笔记。</p>\n<a id=\"more\"></a>\n<h1 id=\"前面\"><a href=\"#前面\" class=\"headerlink\" title=\"前面\"></a>前面</h1><p>  上次找了个很好的文章，可是手残没保存。。找不到了😭，现在重新找了一个文章：<a href=\"https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/index.html\" target=\"_blank\" rel=\"external\">正则表达式30分钟入门教程</a><br>  正如作者说的：</p>\n<blockquote>\n<h1 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h1><p>本文非原创，是改编自<a href=\"http://deerchao.net/tutorials/regex/regex.htm#mission\" target=\"_blank\" rel=\"external\">《正则表达式30分钟入门教程》</a>，因为原作者的排版个人不是很喜欢，而且内容上个人觉得有些地方需要改进，所以在 gitbook 上开了一本书。</p>\n</blockquote>\n<p>  OSC的<a href=\"http://tool.oschina.net/regex\" target=\"_blank\" rel=\"external\">在线正则表达式测试</a></p>\n<h1 id=\"开搞\"><a href=\"#开搞\" class=\"headerlink\" title=\"开搞\"></a>开搞</h1><h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><ul>\n<li><code>\\</code> : 转义</li>\n<li><code>\\b</code> : 单词开始或结束</li>\n<li><code>^</code> : 字符串开始</li>\n<li><code>$</code> : 字符串结束</li>\n<li><code>\\d</code> : 一个数字</li>\n<li><code>\\s</code> : 任意空白字符：空格、制表符、换行符、中文全角空格、等</li>\n<li><code>\\w</code> : 字母/数字/下划线/汉字 可见字符</li>\n<li><code>.</code> : 除换行符以外的任意字符</li>\n</ul>\n<h2 id=\"重复\"><a href=\"#重复\" class=\"headerlink\" title=\"重复\"></a>重复</h2><ul>\n<li><code>{n}</code> : 前置位重复匹配 [n] 次</li>\n<li><code>{n,m}</code> : 前置位重复匹配 [n-m] 次</li>\n<li><code>{n,}</code> : 前置位重复匹配 [n-∞] 次</li>\n<li><code>*</code> : 数量区间：[0-N]</li>\n<li><code>+</code> : 数量区间：[1-N]</li>\n<li><code>?</code> : 数量区间：[0-1]</li>\n</ul>\n<h2 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h2><ul>\n<li><code>[nml]</code> : 可以匹配到 n/m/l</li>\n</ul>\n<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2><ul>\n<li><code>|</code> : <strong>或</strong>语句。存在逻辑短路</li>\n<li><code>(m)</code> : <strong>分组</strong>语句。子式，可以指定重复什么的</li>\n</ul>\n<h2 id=\"反义\"><a href=\"#反义\" class=\"headerlink\" title=\"反义\"></a>反义</h2><ul>\n<li><code>\\W</code> : 任意<strong>不是</strong>（字符、数字、下划线、汉字）</li>\n<li><code>\\S</code> : 任意<strong>不是</strong> 空白符</li>\n<li><code>\\D</code> : 任意<strong>不是</strong> 数字</li>\n<li><code>\\B</code> : 任意<strong>不是</strong> 单词开头或结尾</li>\n<li><code>\\^x</code> : 除x以外的任意字符</li>\n<li><code>[\\^abc]</code> : 除abc这几个字母以外的任意字符</li>\n</ul>\n<h2 id=\"后向引用\"><a href=\"#后向引用\" class=\"headerlink\" title=\"后向引用\"></a>后向引用</h2><p>  <code>(\\w+)</code>这样用<code>()</code>的部分称为一个分组，其匹配到的内容可以使用<code>\\n</code>来表示，<code>n</code>代表该分组为第n个分组。分组下标从<code>1</code>开始。<br>  也可以自定义子表达式组名: <code>(?&lt;Word&gt;M) \\k&lt;Word&gt;</code> : 或 <code>(?&#39;Word&#39;M) \\k&#39;Word&#39;</code>，其中M为子式。</p>\n<h2 id=\"常用分组语法\"><a href=\"#常用分组语法\" class=\"headerlink\" title=\"常用分组语法\"></a>常用分组语法</h2><h3 id=\"捕获\"><a href=\"#捕获\" class=\"headerlink\" title=\"捕获\"></a>捕获</h3><ul>\n<li><code>(exp)</code> : 匹配exp,并捕获文本到自动命名的组里</li>\n<li><code>(?exp)</code> : 匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</li>\n<li><code>(?:exp)</code> : 匹配exp,不捕获匹配的文本，也不给此分组分配组号</li>\n</ul>\n<h3 id=\"零宽断言\"><a href=\"#零宽断言\" class=\"headerlink\" title=\"零宽断言\"></a>零宽断言</h3><ul>\n<li><code>(?=exp)</code> : 匹配exp前面的位置</li>\n<li><code>(?&lt;=exp)</code> : 匹配exp后面的位置</li>\n<li><code>(?!exp)</code> : 匹配后面跟的不是exp的位置</li>\n<li><code>(?&lt;!exp)</code> : 匹配前面不是exp的位置</li>\n</ul>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li><code>(?#comment)</code> : 这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</li>\n</ul>\n<h2 id=\"贪婪与懒惰\"><a href=\"#贪婪与懒惰\" class=\"headerlink\" title=\"贪婪与懒惰\"></a>贪婪与懒惰</h2><p>  贪婪：匹配的尽可能长<br>  懒惰：匹配的尽可能短</p>\n<ul>\n<li><code>*?</code> : 重复任意次，但尽可能少重复</li>\n<li><code>+?</code> : 重复1次或更多次，但尽可能少重复</li>\n<li><code>??</code> : 重复0次或1次，但尽可能少重复</li>\n<li><code>{n,m}?</code> : 重复n到m次，但尽可能少重复</li>\n<li><code>{n,}?</code> : 重复n次以上，但尽可能少重复</li>\n</ul>\n<h2 id=\"平衡组-递归匹配\"><a href=\"#平衡组-递归匹配\" class=\"headerlink\" title=\"平衡组/递归匹配\"></a>平衡组/递归匹配</h2><p>  # 我开始看不懂了😂</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li><code>\\a</code> : 报警字符(打印它的效果是电脑嘀一声)</li>\n<li><code>\\b</code> : 通常是单词分界位置，但如果在字符类里使用代表退格</li>\n<li><code>\\t</code> : 制表符，Tab</li>\n<li><code>\\r</code> : 回车</li>\n<li><code>\\v</code> : 竖向制表符</li>\n<li><code>\\f</code> : 换页符</li>\n<li><code>\\n</code> : 换行符</li>\n<li><code>\\e</code> : Escape</li>\n<li><code>\\0nn</code> : ASCII代码中八进制代码为nn的字符</li>\n<li><code>\\xnn</code> : ASCII代码中十六进制代码为nn的字符</li>\n<li><code>\\unnnn</code> : Unicode代码中十六进制代码为nnnn的字符</li>\n<li><code>\\cN</code> : ASCII控制字符。比如\\cC代表Ctrl+C</li>\n<li><code>\\A</code> : 字符串开头(类似^，但不受处理多行选项的影响)</li>\n<li><code>\\Z</code> : 字符串结尾或行尾(不受处理多行选项的影响)</li>\n<li><code>\\z</code> : 字符串结尾(类似$，但不受处理多行选项的影响)</li>\n<li><code>\\G</code> : 当前搜索的开头</li>\n<li><code>\\p{name}</code> : Unicode中命名为name的字符类，例如\\p{IsGreek}</li>\n<li><code>(?&gt;exp)</code> : 贪婪子表达式</li>\n<li><code>(?&lt;x&gt;-&lt;y&gt;exp)</code> : 平衡组</li>\n<li><code>(?im-nsx:exp)</code> : 在子表达式exp中改变处理选项</li>\n<li><code>(?im-nsx)</code> : 为表达式后面的部分改变处理选项</li>\n<li><code>(?(exp)yes|no)</code> : 把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no</li>\n<li><code>(?(exp)yes)</code> : 同上，只是使用空表达式作为no</li>\n<li><code>(?(name)yes|no)</code> : 如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no</li>\n<li><code>(?(name)yes)</code> : 同上，只是使用空表达式作为no</li>\n</ul>\n<h2 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h2><ul>\n<li>5-12位QQ：<code>^\\d{5,12}$</code></li>\n<li>IPv4地址：<code>((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)</code></li>\n<li><code>go go</code>、<code>kitty kitty</code>这样的叠词：<code>\\b(\\w+)\\b\\s+\\1\\b</code></li>\n<li>后向引用：<code>\\b(\\w+)\\b\\s+\\1\\b</code> == <code>\\b(?&lt;Word&gt;\\w+)\\b\\s+\\k&lt;Word&gt;\\b</code> == <code>\\b(?&#39;Word&#39;\\w+)\\b\\s+\\k&#39;Word&#39;\\b</code></li>\n</ul>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>  知识研究了一下语法，还未详细测试。思考：这玩意真心厉害😂。</p>\n","site":{"data":{}},"excerpt":"<p>正则表达式基础学习笔记。</p>","more":"<h1 id=\"前面\"><a href=\"#前面\" class=\"headerlink\" title=\"前面\"></a>前面</h1><p>  上次找了个很好的文章，可是手残没保存。。找不到了😭，现在重新找了一个文章：<a href=\"https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/index.html\">正则表达式30分钟入门教程</a><br>  正如作者说的：</p>\n<blockquote>\n<h1 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h1><p>本文非原创，是改编自<a href=\"http://deerchao.net/tutorials/regex/regex.htm#mission\">《正则表达式30分钟入门教程》</a>，因为原作者的排版个人不是很喜欢，而且内容上个人觉得有些地方需要改进，所以在 gitbook 上开了一本书。</p>\n</blockquote>\n<p>  OSC的<a href=\"http://tool.oschina.net/regex\">在线正则表达式测试</a></p>\n<h1 id=\"开搞\"><a href=\"#开搞\" class=\"headerlink\" title=\"开搞\"></a>开搞</h1><h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><ul>\n<li><code>\\</code> : 转义</li>\n<li><code>\\b</code> : 单词开始或结束</li>\n<li><code>^</code> : 字符串开始</li>\n<li><code>$</code> : 字符串结束</li>\n<li><code>\\d</code> : 一个数字</li>\n<li><code>\\s</code> : 任意空白字符：空格、制表符、换行符、中文全角空格、等</li>\n<li><code>\\w</code> : 字母/数字/下划线/汉字 可见字符</li>\n<li><code>.</code> : 除换行符以外的任意字符</li>\n</ul>\n<h2 id=\"重复\"><a href=\"#重复\" class=\"headerlink\" title=\"重复\"></a>重复</h2><ul>\n<li><code>{n}</code> : 前置位重复匹配 [n] 次</li>\n<li><code>{n,m}</code> : 前置位重复匹配 [n-m] 次</li>\n<li><code>{n,}</code> : 前置位重复匹配 [n-∞] 次</li>\n<li><code>*</code> : 数量区间：[0-N]</li>\n<li><code>+</code> : 数量区间：[1-N]</li>\n<li><code>?</code> : 数量区间：[0-1]</li>\n</ul>\n<h2 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h2><ul>\n<li><code>[nml]</code> : 可以匹配到 n/m/l</li>\n</ul>\n<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2><ul>\n<li><code>|</code> : <strong>或</strong>语句。存在逻辑短路</li>\n<li><code>(m)</code> : <strong>分组</strong>语句。子式，可以指定重复什么的</li>\n</ul>\n<h2 id=\"反义\"><a href=\"#反义\" class=\"headerlink\" title=\"反义\"></a>反义</h2><ul>\n<li><code>\\W</code> : 任意<strong>不是</strong>（字符、数字、下划线、汉字）</li>\n<li><code>\\S</code> : 任意<strong>不是</strong> 空白符</li>\n<li><code>\\D</code> : 任意<strong>不是</strong> 数字</li>\n<li><code>\\B</code> : 任意<strong>不是</strong> 单词开头或结尾</li>\n<li><code>\\^x</code> : 除x以外的任意字符</li>\n<li><code>[\\^abc]</code> : 除abc这几个字母以外的任意字符</li>\n</ul>\n<h2 id=\"后向引用\"><a href=\"#后向引用\" class=\"headerlink\" title=\"后向引用\"></a>后向引用</h2><p>  <code>(\\w+)</code>这样用<code>()</code>的部分称为一个分组，其匹配到的内容可以使用<code>\\n</code>来表示，<code>n</code>代表该分组为第n个分组。分组下标从<code>1</code>开始。<br>  也可以自定义子表达式组名: <code>(?&lt;Word&gt;M) \\k&lt;Word&gt;</code> : 或 <code>(?&#39;Word&#39;M) \\k&#39;Word&#39;</code>，其中M为子式。</p>\n<h2 id=\"常用分组语法\"><a href=\"#常用分组语法\" class=\"headerlink\" title=\"常用分组语法\"></a>常用分组语法</h2><h3 id=\"捕获\"><a href=\"#捕获\" class=\"headerlink\" title=\"捕获\"></a>捕获</h3><ul>\n<li><code>(exp)</code> : 匹配exp,并捕获文本到自动命名的组里</li>\n<li><code>(?exp)</code> : 匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</li>\n<li><code>(?:exp)</code> : 匹配exp,不捕获匹配的文本，也不给此分组分配组号</li>\n</ul>\n<h3 id=\"零宽断言\"><a href=\"#零宽断言\" class=\"headerlink\" title=\"零宽断言\"></a>零宽断言</h3><ul>\n<li><code>(?=exp)</code> : 匹配exp前面的位置</li>\n<li><code>(?&lt;=exp)</code> : 匹配exp后面的位置</li>\n<li><code>(?!exp)</code> : 匹配后面跟的不是exp的位置</li>\n<li><code>(?&lt;!exp)</code> : 匹配前面不是exp的位置</li>\n</ul>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li><code>(?#comment)</code> : 这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</li>\n</ul>\n<h2 id=\"贪婪与懒惰\"><a href=\"#贪婪与懒惰\" class=\"headerlink\" title=\"贪婪与懒惰\"></a>贪婪与懒惰</h2><p>  贪婪：匹配的尽可能长<br>  懒惰：匹配的尽可能短</p>\n<ul>\n<li><code>*?</code> : 重复任意次，但尽可能少重复</li>\n<li><code>+?</code> : 重复1次或更多次，但尽可能少重复</li>\n<li><code>??</code> : 重复0次或1次，但尽可能少重复</li>\n<li><code>{n,m}?</code> : 重复n到m次，但尽可能少重复</li>\n<li><code>{n,}?</code> : 重复n次以上，但尽可能少重复</li>\n</ul>\n<h2 id=\"平衡组-递归匹配\"><a href=\"#平衡组-递归匹配\" class=\"headerlink\" title=\"平衡组/递归匹配\"></a>平衡组/递归匹配</h2><p>  # 我开始看不懂了😂</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li><code>\\a</code> : 报警字符(打印它的效果是电脑嘀一声)</li>\n<li><code>\\b</code> : 通常是单词分界位置，但如果在字符类里使用代表退格</li>\n<li><code>\\t</code> : 制表符，Tab</li>\n<li><code>\\r</code> : 回车</li>\n<li><code>\\v</code> : 竖向制表符</li>\n<li><code>\\f</code> : 换页符</li>\n<li><code>\\n</code> : 换行符</li>\n<li><code>\\e</code> : Escape</li>\n<li><code>\\0nn</code> : ASCII代码中八进制代码为nn的字符</li>\n<li><code>\\xnn</code> : ASCII代码中十六进制代码为nn的字符</li>\n<li><code>\\unnnn</code> : Unicode代码中十六进制代码为nnnn的字符</li>\n<li><code>\\cN</code> : ASCII控制字符。比如\\cC代表Ctrl+C</li>\n<li><code>\\A</code> : 字符串开头(类似^，但不受处理多行选项的影响)</li>\n<li><code>\\Z</code> : 字符串结尾或行尾(不受处理多行选项的影响)</li>\n<li><code>\\z</code> : 字符串结尾(类似$，但不受处理多行选项的影响)</li>\n<li><code>\\G</code> : 当前搜索的开头</li>\n<li><code>\\p{name}</code> : Unicode中命名为name的字符类，例如\\p{IsGreek}</li>\n<li><code>(?&gt;exp)</code> : 贪婪子表达式</li>\n<li><code>(?&lt;x&gt;-&lt;y&gt;exp)</code> : 平衡组</li>\n<li><code>(?im-nsx:exp)</code> : 在子表达式exp中改变处理选项</li>\n<li><code>(?im-nsx)</code> : 为表达式后面的部分改变处理选项</li>\n<li><code>(?(exp)yes|no)</code> : 把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no</li>\n<li><code>(?(exp)yes)</code> : 同上，只是使用空表达式作为no</li>\n<li><code>(?(name)yes|no)</code> : 如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no</li>\n<li><code>(?(name)yes)</code> : 同上，只是使用空表达式作为no</li>\n</ul>\n<h2 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子\"></a>栗子</h2><ul>\n<li>5-12位QQ：<code>^\\d{5,12}$</code></li>\n<li>IPv4地址：<code>((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)</code></li>\n<li><code>go go</code>、<code>kitty kitty</code>这样的叠词：<code>\\b(\\w+)\\b\\s+\\1\\b</code></li>\n<li>后向引用：<code>\\b(\\w+)\\b\\s+\\1\\b</code> == <code>\\b(?&lt;Word&gt;\\w+)\\b\\s+\\k&lt;Word&gt;\\b</code> == <code>\\b(?&#39;Word&#39;\\w+)\\b\\s+\\k&#39;Word&#39;\\b</code></li>\n</ul>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>  知识研究了一下语法，还未详细测试。思考：这玩意真心厉害😂。</p>"},{"title":"debug-_SwiftValue-unsignedIntegerValue","date":"2017-04-17T06:05:09.000Z","_content":"\ncrash:\n```\nlet attr = try? NSMutableAttributedString(data: data,\n                                          options: [NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType,\n                                                    NSCharacterEncodingDocumentAttribute: String.Encoding.utf8],\n                                          documentAttributes:nil)\n// log:\n2017-04-17 14:04:38.140 [41275:463875] -[_SwiftValue unsignedIntegerValue]: unrecognized selector sent to instance 0x608000256620\n```\n\n<!--more-->\n\n\n\nWTF! 这个方法启动时不能直接调用，要异步？","source":"_posts/debug-SwiftValue-unsignedIntegerValue.md","raw":"---\ntitle: debug-_SwiftValue-unsignedIntegerValue\ndate: 2017-04-17 14:05:09\ntags:\ncategories:\n\t- DEBUG\n---\n\ncrash:\n```\nlet attr = try? NSMutableAttributedString(data: data,\n                                          options: [NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType,\n                                                    NSCharacterEncodingDocumentAttribute: String.Encoding.utf8],\n                                          documentAttributes:nil)\n// log:\n2017-04-17 14:04:38.140 [41275:463875] -[_SwiftValue unsignedIntegerValue]: unrecognized selector sent to instance 0x608000256620\n```\n\n<!--more-->\n\n\n\nWTF! 这个方法启动时不能直接调用，要异步？","slug":"debug-SwiftValue-unsignedIntegerValue","published":1,"updated":"2017-05-16T04:23:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfn4000dkhuvsktmz76s","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>crash:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">let attr = try? NSMutableAttributedString(data: data,</div><div class=\"line\">                                          options: [NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType,</div><div class=\"line\">                                                    NSCharacterEncodingDocumentAttribute: String.Encoding.utf8],</div><div class=\"line\">                                          documentAttributes:nil)</div><div class=\"line\">// log:</div><div class=\"line\">2017-04-17 14:04:38.140 [41275:463875] -[_SwiftValue unsignedIntegerValue]: unrecognized selector sent to instance 0x608000256620</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>WTF! 这个方法启动时不能直接调用，要异步？</p>\n","site":{"data":{}},"excerpt":"<p>crash:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">let attr = try? NSMutableAttributedString(data: data,</div><div class=\"line\">                                          options: [NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType,</div><div class=\"line\">                                                    NSCharacterEncodingDocumentAttribute: String.Encoding.utf8],</div><div class=\"line\">                                          documentAttributes:nil)</div><div class=\"line\">// log:</div><div class=\"line\">2017-04-17 14:04:38.140 [41275:463875] -[_SwiftValue unsignedIntegerValue]: unrecognized selector sent to instance 0x608000256620</div></pre></td></tr></table></figure></p>","more":"<p>WTF! 这个方法启动时不能直接调用，要异步？</p>"},{"title":"「转」iOS图片加载速度极限优化—FastImageCache解析","date":"2017-05-16T02:55:00.000Z","_content":"\n原文：[iOS图片加载速度极限优化—FastImageCache解析](http://blog.cnbang.net/tech/2578/)\n\n[FastImageCache](https://github.com/path/FastImageCache)是Path团队开发的一个开源库，用于提升图片的加载和渲染速度，让基于图片的列表滑动起来更顺畅，来看看它是怎么做的。\n\n<!--more-->\n\n## 优化点\n\niOS从磁盘加载一张图片，使用UIImageVIew显示在屏幕上，需要经过以下步骤：\n\n1. 从磁盘拷贝数据到内核缓冲区\n2. 从内核缓冲区复制数据到用户空间\n3. 生成UIImageView，把图像数据赋值给UIImageView\n4. 如果图像数据为未解码的PNG/JPG，解码为位图数据\n5. CATransaction捕获到UIImageView layer树的变化\n6. 主线程Runloop提交CATransaction，开始进行图像渲染\n\t6.1 如果数据没有字节对齐，Core Animation会再拷贝一份数据，进行字节对齐。\n\t6.2 GPU处理位图数据，进行渲染。\n\nFastImageCache分别优化了2,4,6.1三个步骤：\n\n1. 使用mmap内存映射，省去了上述第2步数据从内核空间拷贝到用户空间的操作。\n2. 缓存解码后的位图数据到磁盘，下次从磁盘读取时省去第4步解码的操作。\n3. 生成字节对齐的数据，防止上述第6.1步CoreAnimation在渲染时再拷贝一份数据。\n\n接下来具体介绍这三个优化点以及它的实现。\n\n### 内存映射\n\n平常我们读取磁盘上的一个文件，上层API调用到最后会使用系统方法read()读取数据，内核把磁盘数据读入内核缓冲区，用户再从内核缓冲区读取数据复制到用户内存空间，这里有一次内存拷贝的时间消耗，并且读取后整个文件数据就已经存在于用户内存中，占用了进程的内存空间。\n\nFastImageCache采用了另一种读写文件的方法，就是用mmap把文件映射到用户空间里的虚拟内存，文件中的位置在虚拟内存中有了对应的地址，可以像操作内存一样操作这个文件，相当于已经把整个文件放入内存，但在真正使用到这些数据前却不会消耗物理内存，也不会有读写磁盘的操作，只有真正使用这些数据时，也就是图像准备渲染在屏幕上时，虚拟内存管理系统VMS才根据缺页加载的机制从磁盘加载对应的数据块到物理内存，再进行渲染。这样的文件读写文件方式少了数据从内核缓存到用户空间的拷贝，效率很高。\n\n### 解码图像\n\n一般我们使用的图像是JPG/PNG，这些图像数据不是位图，而是是经过编码压缩后的数据，使用它渲染到屏幕之前需要进行解码转成位图数据，这个解码操作是比较耗时的，并且没有GPU硬解码，只能通过CPU，iOS默认会在主线程对图像进行解码。很多库都解决了图像解码的问题，不过由于解码后的图像太大，一般不会缓存到磁盘，SDWebImage的做法是把解码操作从主线程移到子线程，让耗时的解码操作不占用主线程的时间。\n\nFastImageCache也是在子线程解码图像，不同的是它会缓存解码后的图像到磁盘。因为解码后的图像体积很大，FastImageCache对这些图像数据做了系列缓存管理，详见下文实现部分。另外缓存的图像体积大也是使用内存映射读取文件的原因，小文件使用内存映射无优势，内存拷贝的量少，拷贝后占用用户内存也不高，文件越大内存映射优势越大。\n\n### 字节对齐\n\nCore Animation在图像数据非字节对齐的情况下渲染前会先拷贝一份图像数据，官方文档没有对这次拷贝行为作说明，模拟器和Instrument里有高亮显示“copied images”的功能，但似乎它有bug，即使某张图片没有被高亮显示出渲染时被copy，从调用堆栈上也还是能看到调用了CA::Render::copy_image方法：\n\n![fastImageCache1](/images/fastImageCache1.png)\n\n那什么是字节对齐呢，按我的理解，为了性能，底层渲染图像时不是一个像素一个像素渲染，而是一块一块渲染，数据是一块块地取，就可能遇到这一块连续的内存数据里结尾的数据不是图像的内容，是内存里其他的数据，可能越界读取导致一些奇怪的东西混入，所以在渲染之前CoreAnimation要把数据拷贝一份进行处理，确保每一块都是图像数据，对于不足一块的数据置空。大致图示：(pixel是图像像素数据，data是内存里其他数据)\n\n![fastImageCache2](/images/fastImageCache2.png)\n\n块的大小应该是跟CPU cache line有关，ARMv7是32byte，A9是64byte，在A9下CoreAnimation应该是按64byte作为一块数据去读取和渲染，让图像数据对齐64byte就可以避免CoreAnimation再拷贝一份数据进行修补。FastImageCache做的字节对齐就是这个事情。\n\n## 实现\n\nFastImageCache把同个类型和尺寸的图像都放在一个文件里，根据文件偏移取单张图片，类似web的css雪碧图，这里称为ImageTable。这样做主要是为了方便统一管理图片缓存，控制缓存的大小，整个FastImageCache就是在管理一个个ImageTable的数据。整体实现的数据结构如图：\n\n![fastImageCache3](/images/fastImageCache3.png)\n\n一些补充和说明：\n\n### ImageTable\n\n1. 一个ImageFormat对应一个ImageTable，ImageFormat指定了ImageTable里图像渲染格式/大小等信息，ImageTable里的图像数据都由ImageFormat规定了统一的尺寸，每张图像大小都是一样的。\n2. 一个ImageTable一个实体文件，并有另一个文件保存这个ImageTable的meta信息。\n3. 图像使用entityUUID作为唯一标示符，由用户定义，通常是图像url的hash值。ImageTable Meta的indexMap记录了entityUUID->entryIndex的映射，通过indexMap就可以用图像的entityUUID找到缓存数据在ImageTable对应的位置。\n\n### ImageTableEntry\n\n1. ImageTable的实体数据是ImageTableEntry，每个entry有两部分数据，一部分是对齐后的图像数据，另一部分是meta信息，meta保存这张图像的UUID和原图UUID，用于校验图像数据的正确性。\n2. Entry数据是按内存分页大小对齐的，数据大小是内存分页大小的整数倍，这样可以保证虚拟内存缺页加载时使用最少的内存页加载一张图像。\n3. 图像数据做了字节对齐处理，CoreAnimation使用时无需再处理拷贝。具体做法是CGBitmapContextCreate创建位图画布时bytesPerRow参数传64倍数。\n\n### Chunk\n\n- ImageTable和实体数据Entry间多了层Chunk，Chunk是逻辑上的数据划分，N个Entry作为一个Chunk，内存映射mmap操作是以chunk为单位的，每一个chunk执行一次mmap把这个chunk的内容映射到虚拟内存。为什么要多一层chunk呢，按我的理解，这样做是为了灵活控制mmap的大小和调用次数，若对整个ImageTable执行mmap，载入虚拟内存的文件过大，若对每个Entry做mmap，调用次数会太多。\n\n### 缓存管理\n\n- 用户可以定义整个ImageTable里最大缓存的图像数量，在有新图像需要缓存时，如果缓存没有超过限制，会以chunk为单位扩展文件大小，顺序写下去。如果已超过最大缓存限制，会把最少使用的缓存替换掉，实现方法是每次使用图像都会把UUID插入到MRUEntries数组的开头，MRUEntries按最近使用顺序排列了图像UUID，数组里最后一个图像就是最少使用的。被替换掉的图片下次需要再使用时，再走一次取原图—解压—存储的流程。\n\n## 使用\n\nFastImageCache适合用于tableView里缓存每个cell上同样规格的图像，优点是能极大加快第一次从磁盘加载这些图像的速度。但它有两个明显的缺点：一是占空间大。因为缓存了解码后的位图到磁盘，位图是很大的，宽高100*100的图像在2x的高清屏设备下就需要200*200*4byte/pixel=156KB，这也是为什么FastImageCache要大费周章限制缓存大小。二是接口不友好，需预定义好缓存的图像尺寸。FastImageCache无法像SDWebImage那样无缝接入UIImageView，使用它需要配置ImageTable，定义好尺寸，手动提供的原图，每种实体图像要定义一个FICEntity模型，使逻辑变复杂。\n\nFastImageCache已经属于极限优化，做图像加载/渲染优化时应该优先考虑一些低代价高回报的优化点，例如CALayer代替UIImageVIew，减少GPU计算（去透明/像素对齐），图像子线程解码，避免Offscreen-Render等。在其他优化都做到位，图像的渲染还是有性能问题的前提下才考虑使用FastImageCache进一步提升首次加载的性能，不过字节对齐的优化倒是可以脱离FastImageCache直接运用在项目上，只需要在解码图像时bitmap画布的bytesPerRow设为64的倍数即可。","source":"_posts/bang-fastimagecache.md","raw":"---\ntitle: 「转」iOS图片加载速度极限优化—FastImageCache解析\ndate: 2017-05-16 10:55:00\ntags:\ncategories:\n\t- iOS\n---\n\n原文：[iOS图片加载速度极限优化—FastImageCache解析](http://blog.cnbang.net/tech/2578/)\n\n[FastImageCache](https://github.com/path/FastImageCache)是Path团队开发的一个开源库，用于提升图片的加载和渲染速度，让基于图片的列表滑动起来更顺畅，来看看它是怎么做的。\n\n<!--more-->\n\n## 优化点\n\niOS从磁盘加载一张图片，使用UIImageVIew显示在屏幕上，需要经过以下步骤：\n\n1. 从磁盘拷贝数据到内核缓冲区\n2. 从内核缓冲区复制数据到用户空间\n3. 生成UIImageView，把图像数据赋值给UIImageView\n4. 如果图像数据为未解码的PNG/JPG，解码为位图数据\n5. CATransaction捕获到UIImageView layer树的变化\n6. 主线程Runloop提交CATransaction，开始进行图像渲染\n\t6.1 如果数据没有字节对齐，Core Animation会再拷贝一份数据，进行字节对齐。\n\t6.2 GPU处理位图数据，进行渲染。\n\nFastImageCache分别优化了2,4,6.1三个步骤：\n\n1. 使用mmap内存映射，省去了上述第2步数据从内核空间拷贝到用户空间的操作。\n2. 缓存解码后的位图数据到磁盘，下次从磁盘读取时省去第4步解码的操作。\n3. 生成字节对齐的数据，防止上述第6.1步CoreAnimation在渲染时再拷贝一份数据。\n\n接下来具体介绍这三个优化点以及它的实现。\n\n### 内存映射\n\n平常我们读取磁盘上的一个文件，上层API调用到最后会使用系统方法read()读取数据，内核把磁盘数据读入内核缓冲区，用户再从内核缓冲区读取数据复制到用户内存空间，这里有一次内存拷贝的时间消耗，并且读取后整个文件数据就已经存在于用户内存中，占用了进程的内存空间。\n\nFastImageCache采用了另一种读写文件的方法，就是用mmap把文件映射到用户空间里的虚拟内存，文件中的位置在虚拟内存中有了对应的地址，可以像操作内存一样操作这个文件，相当于已经把整个文件放入内存，但在真正使用到这些数据前却不会消耗物理内存，也不会有读写磁盘的操作，只有真正使用这些数据时，也就是图像准备渲染在屏幕上时，虚拟内存管理系统VMS才根据缺页加载的机制从磁盘加载对应的数据块到物理内存，再进行渲染。这样的文件读写文件方式少了数据从内核缓存到用户空间的拷贝，效率很高。\n\n### 解码图像\n\n一般我们使用的图像是JPG/PNG，这些图像数据不是位图，而是是经过编码压缩后的数据，使用它渲染到屏幕之前需要进行解码转成位图数据，这个解码操作是比较耗时的，并且没有GPU硬解码，只能通过CPU，iOS默认会在主线程对图像进行解码。很多库都解决了图像解码的问题，不过由于解码后的图像太大，一般不会缓存到磁盘，SDWebImage的做法是把解码操作从主线程移到子线程，让耗时的解码操作不占用主线程的时间。\n\nFastImageCache也是在子线程解码图像，不同的是它会缓存解码后的图像到磁盘。因为解码后的图像体积很大，FastImageCache对这些图像数据做了系列缓存管理，详见下文实现部分。另外缓存的图像体积大也是使用内存映射读取文件的原因，小文件使用内存映射无优势，内存拷贝的量少，拷贝后占用用户内存也不高，文件越大内存映射优势越大。\n\n### 字节对齐\n\nCore Animation在图像数据非字节对齐的情况下渲染前会先拷贝一份图像数据，官方文档没有对这次拷贝行为作说明，模拟器和Instrument里有高亮显示“copied images”的功能，但似乎它有bug，即使某张图片没有被高亮显示出渲染时被copy，从调用堆栈上也还是能看到调用了CA::Render::copy_image方法：\n\n![fastImageCache1](/images/fastImageCache1.png)\n\n那什么是字节对齐呢，按我的理解，为了性能，底层渲染图像时不是一个像素一个像素渲染，而是一块一块渲染，数据是一块块地取，就可能遇到这一块连续的内存数据里结尾的数据不是图像的内容，是内存里其他的数据，可能越界读取导致一些奇怪的东西混入，所以在渲染之前CoreAnimation要把数据拷贝一份进行处理，确保每一块都是图像数据，对于不足一块的数据置空。大致图示：(pixel是图像像素数据，data是内存里其他数据)\n\n![fastImageCache2](/images/fastImageCache2.png)\n\n块的大小应该是跟CPU cache line有关，ARMv7是32byte，A9是64byte，在A9下CoreAnimation应该是按64byte作为一块数据去读取和渲染，让图像数据对齐64byte就可以避免CoreAnimation再拷贝一份数据进行修补。FastImageCache做的字节对齐就是这个事情。\n\n## 实现\n\nFastImageCache把同个类型和尺寸的图像都放在一个文件里，根据文件偏移取单张图片，类似web的css雪碧图，这里称为ImageTable。这样做主要是为了方便统一管理图片缓存，控制缓存的大小，整个FastImageCache就是在管理一个个ImageTable的数据。整体实现的数据结构如图：\n\n![fastImageCache3](/images/fastImageCache3.png)\n\n一些补充和说明：\n\n### ImageTable\n\n1. 一个ImageFormat对应一个ImageTable，ImageFormat指定了ImageTable里图像渲染格式/大小等信息，ImageTable里的图像数据都由ImageFormat规定了统一的尺寸，每张图像大小都是一样的。\n2. 一个ImageTable一个实体文件，并有另一个文件保存这个ImageTable的meta信息。\n3. 图像使用entityUUID作为唯一标示符，由用户定义，通常是图像url的hash值。ImageTable Meta的indexMap记录了entityUUID->entryIndex的映射，通过indexMap就可以用图像的entityUUID找到缓存数据在ImageTable对应的位置。\n\n### ImageTableEntry\n\n1. ImageTable的实体数据是ImageTableEntry，每个entry有两部分数据，一部分是对齐后的图像数据，另一部分是meta信息，meta保存这张图像的UUID和原图UUID，用于校验图像数据的正确性。\n2. Entry数据是按内存分页大小对齐的，数据大小是内存分页大小的整数倍，这样可以保证虚拟内存缺页加载时使用最少的内存页加载一张图像。\n3. 图像数据做了字节对齐处理，CoreAnimation使用时无需再处理拷贝。具体做法是CGBitmapContextCreate创建位图画布时bytesPerRow参数传64倍数。\n\n### Chunk\n\n- ImageTable和实体数据Entry间多了层Chunk，Chunk是逻辑上的数据划分，N个Entry作为一个Chunk，内存映射mmap操作是以chunk为单位的，每一个chunk执行一次mmap把这个chunk的内容映射到虚拟内存。为什么要多一层chunk呢，按我的理解，这样做是为了灵活控制mmap的大小和调用次数，若对整个ImageTable执行mmap，载入虚拟内存的文件过大，若对每个Entry做mmap，调用次数会太多。\n\n### 缓存管理\n\n- 用户可以定义整个ImageTable里最大缓存的图像数量，在有新图像需要缓存时，如果缓存没有超过限制，会以chunk为单位扩展文件大小，顺序写下去。如果已超过最大缓存限制，会把最少使用的缓存替换掉，实现方法是每次使用图像都会把UUID插入到MRUEntries数组的开头，MRUEntries按最近使用顺序排列了图像UUID，数组里最后一个图像就是最少使用的。被替换掉的图片下次需要再使用时，再走一次取原图—解压—存储的流程。\n\n## 使用\n\nFastImageCache适合用于tableView里缓存每个cell上同样规格的图像，优点是能极大加快第一次从磁盘加载这些图像的速度。但它有两个明显的缺点：一是占空间大。因为缓存了解码后的位图到磁盘，位图是很大的，宽高100*100的图像在2x的高清屏设备下就需要200*200*4byte/pixel=156KB，这也是为什么FastImageCache要大费周章限制缓存大小。二是接口不友好，需预定义好缓存的图像尺寸。FastImageCache无法像SDWebImage那样无缝接入UIImageView，使用它需要配置ImageTable，定义好尺寸，手动提供的原图，每种实体图像要定义一个FICEntity模型，使逻辑变复杂。\n\nFastImageCache已经属于极限优化，做图像加载/渲染优化时应该优先考虑一些低代价高回报的优化点，例如CALayer代替UIImageVIew，减少GPU计算（去透明/像素对齐），图像子线程解码，避免Offscreen-Render等。在其他优化都做到位，图像的渲染还是有性能问题的前提下才考虑使用FastImageCache进一步提升首次加载的性能，不过字节对齐的优化倒是可以脱离FastImageCache直接运用在项目上，只需要在解码图像时bitmap画布的bytesPerRow设为64的倍数即可。","slug":"bang-fastimagecache","published":1,"updated":"2017-05-17T05:37:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfn8000fkhuv18ioddhn","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>原文：<a href=\"http://blog.cnbang.net/tech/2578/\" target=\"_blank\" rel=\"external\">iOS图片加载速度极限优化—FastImageCache解析</a></p>\n<p><a href=\"https://github.com/path/FastImageCache\" target=\"_blank\" rel=\"external\">FastImageCache</a>是Path团队开发的一个开源库，用于提升图片的加载和渲染速度，让基于图片的列表滑动起来更顺畅，来看看它是怎么做的。</p>\n<a id=\"more\"></a>\n<h2 id=\"优化点\"><a href=\"#优化点\" class=\"headerlink\" title=\"优化点\"></a>优化点</h2><p>iOS从磁盘加载一张图片，使用UIImageVIew显示在屏幕上，需要经过以下步骤：</p>\n<ol>\n<li>从磁盘拷贝数据到内核缓冲区</li>\n<li>从内核缓冲区复制数据到用户空间</li>\n<li>生成UIImageView，把图像数据赋值给UIImageView</li>\n<li>如果图像数据为未解码的PNG/JPG，解码为位图数据</li>\n<li>CATransaction捕获到UIImageView layer树的变化</li>\n<li>主线程Runloop提交CATransaction，开始进行图像渲染<br> 6.1 如果数据没有字节对齐，Core Animation会再拷贝一份数据，进行字节对齐。<br> 6.2 GPU处理位图数据，进行渲染。</li>\n</ol>\n<p>FastImageCache分别优化了2,4,6.1三个步骤：</p>\n<ol>\n<li>使用mmap内存映射，省去了上述第2步数据从内核空间拷贝到用户空间的操作。</li>\n<li>缓存解码后的位图数据到磁盘，下次从磁盘读取时省去第4步解码的操作。</li>\n<li>生成字节对齐的数据，防止上述第6.1步CoreAnimation在渲染时再拷贝一份数据。</li>\n</ol>\n<p>接下来具体介绍这三个优化点以及它的实现。</p>\n<h3 id=\"内存映射\"><a href=\"#内存映射\" class=\"headerlink\" title=\"内存映射\"></a>内存映射</h3><p>平常我们读取磁盘上的一个文件，上层API调用到最后会使用系统方法read()读取数据，内核把磁盘数据读入内核缓冲区，用户再从内核缓冲区读取数据复制到用户内存空间，这里有一次内存拷贝的时间消耗，并且读取后整个文件数据就已经存在于用户内存中，占用了进程的内存空间。</p>\n<p>FastImageCache采用了另一种读写文件的方法，就是用mmap把文件映射到用户空间里的虚拟内存，文件中的位置在虚拟内存中有了对应的地址，可以像操作内存一样操作这个文件，相当于已经把整个文件放入内存，但在真正使用到这些数据前却不会消耗物理内存，也不会有读写磁盘的操作，只有真正使用这些数据时，也就是图像准备渲染在屏幕上时，虚拟内存管理系统VMS才根据缺页加载的机制从磁盘加载对应的数据块到物理内存，再进行渲染。这样的文件读写文件方式少了数据从内核缓存到用户空间的拷贝，效率很高。</p>\n<h3 id=\"解码图像\"><a href=\"#解码图像\" class=\"headerlink\" title=\"解码图像\"></a>解码图像</h3><p>一般我们使用的图像是JPG/PNG，这些图像数据不是位图，而是是经过编码压缩后的数据，使用它渲染到屏幕之前需要进行解码转成位图数据，这个解码操作是比较耗时的，并且没有GPU硬解码，只能通过CPU，iOS默认会在主线程对图像进行解码。很多库都解决了图像解码的问题，不过由于解码后的图像太大，一般不会缓存到磁盘，SDWebImage的做法是把解码操作从主线程移到子线程，让耗时的解码操作不占用主线程的时间。</p>\n<p>FastImageCache也是在子线程解码图像，不同的是它会缓存解码后的图像到磁盘。因为解码后的图像体积很大，FastImageCache对这些图像数据做了系列缓存管理，详见下文实现部分。另外缓存的图像体积大也是使用内存映射读取文件的原因，小文件使用内存映射无优势，内存拷贝的量少，拷贝后占用用户内存也不高，文件越大内存映射优势越大。</p>\n<h3 id=\"字节对齐\"><a href=\"#字节对齐\" class=\"headerlink\" title=\"字节对齐\"></a>字节对齐</h3><p>Core Animation在图像数据非字节对齐的情况下渲染前会先拷贝一份图像数据，官方文档没有对这次拷贝行为作说明，模拟器和Instrument里有高亮显示“copied images”的功能，但似乎它有bug，即使某张图片没有被高亮显示出渲染时被copy，从调用堆栈上也还是能看到调用了CA::Render::copy_image方法：</p>\n<p><img src=\"/images/fastImageCache1.png\" alt=\"fastImageCache1\"></p>\n<p>那什么是字节对齐呢，按我的理解，为了性能，底层渲染图像时不是一个像素一个像素渲染，而是一块一块渲染，数据是一块块地取，就可能遇到这一块连续的内存数据里结尾的数据不是图像的内容，是内存里其他的数据，可能越界读取导致一些奇怪的东西混入，所以在渲染之前CoreAnimation要把数据拷贝一份进行处理，确保每一块都是图像数据，对于不足一块的数据置空。大致图示：(pixel是图像像素数据，data是内存里其他数据)</p>\n<p><img src=\"/images/fastImageCache2.png\" alt=\"fastImageCache2\"></p>\n<p>块的大小应该是跟CPU cache line有关，ARMv7是32byte，A9是64byte，在A9下CoreAnimation应该是按64byte作为一块数据去读取和渲染，让图像数据对齐64byte就可以避免CoreAnimation再拷贝一份数据进行修补。FastImageCache做的字节对齐就是这个事情。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>FastImageCache把同个类型和尺寸的图像都放在一个文件里，根据文件偏移取单张图片，类似web的css雪碧图，这里称为ImageTable。这样做主要是为了方便统一管理图片缓存，控制缓存的大小，整个FastImageCache就是在管理一个个ImageTable的数据。整体实现的数据结构如图：</p>\n<p><img src=\"/images/fastImageCache3.png\" alt=\"fastImageCache3\"></p>\n<p>一些补充和说明：</p>\n<h3 id=\"ImageTable\"><a href=\"#ImageTable\" class=\"headerlink\" title=\"ImageTable\"></a>ImageTable</h3><ol>\n<li>一个ImageFormat对应一个ImageTable，ImageFormat指定了ImageTable里图像渲染格式/大小等信息，ImageTable里的图像数据都由ImageFormat规定了统一的尺寸，每张图像大小都是一样的。</li>\n<li>一个ImageTable一个实体文件，并有另一个文件保存这个ImageTable的meta信息。</li>\n<li>图像使用entityUUID作为唯一标示符，由用户定义，通常是图像url的hash值。ImageTable Meta的indexMap记录了entityUUID-&gt;entryIndex的映射，通过indexMap就可以用图像的entityUUID找到缓存数据在ImageTable对应的位置。</li>\n</ol>\n<h3 id=\"ImageTableEntry\"><a href=\"#ImageTableEntry\" class=\"headerlink\" title=\"ImageTableEntry\"></a>ImageTableEntry</h3><ol>\n<li>ImageTable的实体数据是ImageTableEntry，每个entry有两部分数据，一部分是对齐后的图像数据，另一部分是meta信息，meta保存这张图像的UUID和原图UUID，用于校验图像数据的正确性。</li>\n<li>Entry数据是按内存分页大小对齐的，数据大小是内存分页大小的整数倍，这样可以保证虚拟内存缺页加载时使用最少的内存页加载一张图像。</li>\n<li>图像数据做了字节对齐处理，CoreAnimation使用时无需再处理拷贝。具体做法是CGBitmapContextCreate创建位图画布时bytesPerRow参数传64倍数。</li>\n</ol>\n<h3 id=\"Chunk\"><a href=\"#Chunk\" class=\"headerlink\" title=\"Chunk\"></a>Chunk</h3><ul>\n<li>ImageTable和实体数据Entry间多了层Chunk，Chunk是逻辑上的数据划分，N个Entry作为一个Chunk，内存映射mmap操作是以chunk为单位的，每一个chunk执行一次mmap把这个chunk的内容映射到虚拟内存。为什么要多一层chunk呢，按我的理解，这样做是为了灵活控制mmap的大小和调用次数，若对整个ImageTable执行mmap，载入虚拟内存的文件过大，若对每个Entry做mmap，调用次数会太多。</li>\n</ul>\n<h3 id=\"缓存管理\"><a href=\"#缓存管理\" class=\"headerlink\" title=\"缓存管理\"></a>缓存管理</h3><ul>\n<li>用户可以定义整个ImageTable里最大缓存的图像数量，在有新图像需要缓存时，如果缓存没有超过限制，会以chunk为单位扩展文件大小，顺序写下去。如果已超过最大缓存限制，会把最少使用的缓存替换掉，实现方法是每次使用图像都会把UUID插入到MRUEntries数组的开头，MRUEntries按最近使用顺序排列了图像UUID，数组里最后一个图像就是最少使用的。被替换掉的图片下次需要再使用时，再走一次取原图—解压—存储的流程。</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>FastImageCache适合用于tableView里缓存每个cell上同样规格的图像，优点是能极大加快第一次从磁盘加载这些图像的速度。但它有两个明显的缺点：一是占空间大。因为缓存了解码后的位图到磁盘，位图是很大的，宽高100<em>100的图像在2x的高清屏设备下就需要200</em>200*4byte/pixel=156KB，这也是为什么FastImageCache要大费周章限制缓存大小。二是接口不友好，需预定义好缓存的图像尺寸。FastImageCache无法像SDWebImage那样无缝接入UIImageView，使用它需要配置ImageTable，定义好尺寸，手动提供的原图，每种实体图像要定义一个FICEntity模型，使逻辑变复杂。</p>\n<p>FastImageCache已经属于极限优化，做图像加载/渲染优化时应该优先考虑一些低代价高回报的优化点，例如CALayer代替UIImageVIew，减少GPU计算（去透明/像素对齐），图像子线程解码，避免Offscreen-Render等。在其他优化都做到位，图像的渲染还是有性能问题的前提下才考虑使用FastImageCache进一步提升首次加载的性能，不过字节对齐的优化倒是可以脱离FastImageCache直接运用在项目上，只需要在解码图像时bitmap画布的bytesPerRow设为64的倍数即可。</p>\n","site":{"data":{}},"excerpt":"<p>原文：<a href=\"http://blog.cnbang.net/tech/2578/\">iOS图片加载速度极限优化—FastImageCache解析</a></p>\n<p><a href=\"https://github.com/path/FastImageCache\">FastImageCache</a>是Path团队开发的一个开源库，用于提升图片的加载和渲染速度，让基于图片的列表滑动起来更顺畅，来看看它是怎么做的。</p>","more":"<h2 id=\"优化点\"><a href=\"#优化点\" class=\"headerlink\" title=\"优化点\"></a>优化点</h2><p>iOS从磁盘加载一张图片，使用UIImageVIew显示在屏幕上，需要经过以下步骤：</p>\n<ol>\n<li>从磁盘拷贝数据到内核缓冲区</li>\n<li>从内核缓冲区复制数据到用户空间</li>\n<li>生成UIImageView，把图像数据赋值给UIImageView</li>\n<li>如果图像数据为未解码的PNG/JPG，解码为位图数据</li>\n<li>CATransaction捕获到UIImageView layer树的变化</li>\n<li>主线程Runloop提交CATransaction，开始进行图像渲染<br> 6.1 如果数据没有字节对齐，Core Animation会再拷贝一份数据，进行字节对齐。<br> 6.2 GPU处理位图数据，进行渲染。</li>\n</ol>\n<p>FastImageCache分别优化了2,4,6.1三个步骤：</p>\n<ol>\n<li>使用mmap内存映射，省去了上述第2步数据从内核空间拷贝到用户空间的操作。</li>\n<li>缓存解码后的位图数据到磁盘，下次从磁盘读取时省去第4步解码的操作。</li>\n<li>生成字节对齐的数据，防止上述第6.1步CoreAnimation在渲染时再拷贝一份数据。</li>\n</ol>\n<p>接下来具体介绍这三个优化点以及它的实现。</p>\n<h3 id=\"内存映射\"><a href=\"#内存映射\" class=\"headerlink\" title=\"内存映射\"></a>内存映射</h3><p>平常我们读取磁盘上的一个文件，上层API调用到最后会使用系统方法read()读取数据，内核把磁盘数据读入内核缓冲区，用户再从内核缓冲区读取数据复制到用户内存空间，这里有一次内存拷贝的时间消耗，并且读取后整个文件数据就已经存在于用户内存中，占用了进程的内存空间。</p>\n<p>FastImageCache采用了另一种读写文件的方法，就是用mmap把文件映射到用户空间里的虚拟内存，文件中的位置在虚拟内存中有了对应的地址，可以像操作内存一样操作这个文件，相当于已经把整个文件放入内存，但在真正使用到这些数据前却不会消耗物理内存，也不会有读写磁盘的操作，只有真正使用这些数据时，也就是图像准备渲染在屏幕上时，虚拟内存管理系统VMS才根据缺页加载的机制从磁盘加载对应的数据块到物理内存，再进行渲染。这样的文件读写文件方式少了数据从内核缓存到用户空间的拷贝，效率很高。</p>\n<h3 id=\"解码图像\"><a href=\"#解码图像\" class=\"headerlink\" title=\"解码图像\"></a>解码图像</h3><p>一般我们使用的图像是JPG/PNG，这些图像数据不是位图，而是是经过编码压缩后的数据，使用它渲染到屏幕之前需要进行解码转成位图数据，这个解码操作是比较耗时的，并且没有GPU硬解码，只能通过CPU，iOS默认会在主线程对图像进行解码。很多库都解决了图像解码的问题，不过由于解码后的图像太大，一般不会缓存到磁盘，SDWebImage的做法是把解码操作从主线程移到子线程，让耗时的解码操作不占用主线程的时间。</p>\n<p>FastImageCache也是在子线程解码图像，不同的是它会缓存解码后的图像到磁盘。因为解码后的图像体积很大，FastImageCache对这些图像数据做了系列缓存管理，详见下文实现部分。另外缓存的图像体积大也是使用内存映射读取文件的原因，小文件使用内存映射无优势，内存拷贝的量少，拷贝后占用用户内存也不高，文件越大内存映射优势越大。</p>\n<h3 id=\"字节对齐\"><a href=\"#字节对齐\" class=\"headerlink\" title=\"字节对齐\"></a>字节对齐</h3><p>Core Animation在图像数据非字节对齐的情况下渲染前会先拷贝一份图像数据，官方文档没有对这次拷贝行为作说明，模拟器和Instrument里有高亮显示“copied images”的功能，但似乎它有bug，即使某张图片没有被高亮显示出渲染时被copy，从调用堆栈上也还是能看到调用了CA::Render::copy_image方法：</p>\n<p><img src=\"/images/fastImageCache1.png\" alt=\"fastImageCache1\"></p>\n<p>那什么是字节对齐呢，按我的理解，为了性能，底层渲染图像时不是一个像素一个像素渲染，而是一块一块渲染，数据是一块块地取，就可能遇到这一块连续的内存数据里结尾的数据不是图像的内容，是内存里其他的数据，可能越界读取导致一些奇怪的东西混入，所以在渲染之前CoreAnimation要把数据拷贝一份进行处理，确保每一块都是图像数据，对于不足一块的数据置空。大致图示：(pixel是图像像素数据，data是内存里其他数据)</p>\n<p><img src=\"/images/fastImageCache2.png\" alt=\"fastImageCache2\"></p>\n<p>块的大小应该是跟CPU cache line有关，ARMv7是32byte，A9是64byte，在A9下CoreAnimation应该是按64byte作为一块数据去读取和渲染，让图像数据对齐64byte就可以避免CoreAnimation再拷贝一份数据进行修补。FastImageCache做的字节对齐就是这个事情。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>FastImageCache把同个类型和尺寸的图像都放在一个文件里，根据文件偏移取单张图片，类似web的css雪碧图，这里称为ImageTable。这样做主要是为了方便统一管理图片缓存，控制缓存的大小，整个FastImageCache就是在管理一个个ImageTable的数据。整体实现的数据结构如图：</p>\n<p><img src=\"/images/fastImageCache3.png\" alt=\"fastImageCache3\"></p>\n<p>一些补充和说明：</p>\n<h3 id=\"ImageTable\"><a href=\"#ImageTable\" class=\"headerlink\" title=\"ImageTable\"></a>ImageTable</h3><ol>\n<li>一个ImageFormat对应一个ImageTable，ImageFormat指定了ImageTable里图像渲染格式/大小等信息，ImageTable里的图像数据都由ImageFormat规定了统一的尺寸，每张图像大小都是一样的。</li>\n<li>一个ImageTable一个实体文件，并有另一个文件保存这个ImageTable的meta信息。</li>\n<li>图像使用entityUUID作为唯一标示符，由用户定义，通常是图像url的hash值。ImageTable Meta的indexMap记录了entityUUID-&gt;entryIndex的映射，通过indexMap就可以用图像的entityUUID找到缓存数据在ImageTable对应的位置。</li>\n</ol>\n<h3 id=\"ImageTableEntry\"><a href=\"#ImageTableEntry\" class=\"headerlink\" title=\"ImageTableEntry\"></a>ImageTableEntry</h3><ol>\n<li>ImageTable的实体数据是ImageTableEntry，每个entry有两部分数据，一部分是对齐后的图像数据，另一部分是meta信息，meta保存这张图像的UUID和原图UUID，用于校验图像数据的正确性。</li>\n<li>Entry数据是按内存分页大小对齐的，数据大小是内存分页大小的整数倍，这样可以保证虚拟内存缺页加载时使用最少的内存页加载一张图像。</li>\n<li>图像数据做了字节对齐处理，CoreAnimation使用时无需再处理拷贝。具体做法是CGBitmapContextCreate创建位图画布时bytesPerRow参数传64倍数。</li>\n</ol>\n<h3 id=\"Chunk\"><a href=\"#Chunk\" class=\"headerlink\" title=\"Chunk\"></a>Chunk</h3><ul>\n<li>ImageTable和实体数据Entry间多了层Chunk，Chunk是逻辑上的数据划分，N个Entry作为一个Chunk，内存映射mmap操作是以chunk为单位的，每一个chunk执行一次mmap把这个chunk的内容映射到虚拟内存。为什么要多一层chunk呢，按我的理解，这样做是为了灵活控制mmap的大小和调用次数，若对整个ImageTable执行mmap，载入虚拟内存的文件过大，若对每个Entry做mmap，调用次数会太多。</li>\n</ul>\n<h3 id=\"缓存管理\"><a href=\"#缓存管理\" class=\"headerlink\" title=\"缓存管理\"></a>缓存管理</h3><ul>\n<li>用户可以定义整个ImageTable里最大缓存的图像数量，在有新图像需要缓存时，如果缓存没有超过限制，会以chunk为单位扩展文件大小，顺序写下去。如果已超过最大缓存限制，会把最少使用的缓存替换掉，实现方法是每次使用图像都会把UUID插入到MRUEntries数组的开头，MRUEntries按最近使用顺序排列了图像UUID，数组里最后一个图像就是最少使用的。被替换掉的图片下次需要再使用时，再走一次取原图—解压—存储的流程。</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>FastImageCache适合用于tableView里缓存每个cell上同样规格的图像，优点是能极大加快第一次从磁盘加载这些图像的速度。但它有两个明显的缺点：一是占空间大。因为缓存了解码后的位图到磁盘，位图是很大的，宽高100<em>100的图像在2x的高清屏设备下就需要200</em>200*4byte/pixel=156KB，这也是为什么FastImageCache要大费周章限制缓存大小。二是接口不友好，需预定义好缓存的图像尺寸。FastImageCache无法像SDWebImage那样无缝接入UIImageView，使用它需要配置ImageTable，定义好尺寸，手动提供的原图，每种实体图像要定义一个FICEntity模型，使逻辑变复杂。</p>\n<p>FastImageCache已经属于极限优化，做图像加载/渲染优化时应该优先考虑一些低代价高回报的优化点，例如CALayer代替UIImageVIew，减少GPU计算（去透明/像素对齐），图像子线程解码，避免Offscreen-Render等。在其他优化都做到位，图像的渲染还是有性能问题的前提下才考虑使用FastImageCache进一步提升首次加载的性能，不过字节对齐的优化倒是可以脱离FastImageCache直接运用在项目上，只需要在解码图像时bitmap画布的bytesPerRow设为64的倍数即可。</p>"},{"title":"Xcode8打包脚本","date":"2016-09-26T06:55:09.000Z","_content":"\nJenkins自动构建脚本解决方案。\n\n<!--more-->\n\n## 写在前面\n  2017.1.13更新：\n  好吧，其实有更加强悍的打包工具，虽然早有耳闻但是没弄。然后最近搭建了一下，这打包脚本也不用了，毕竟有成套工具嘛。嘿嘿\n  不过最后上传osc的脚本还是很可以的。\n  传送门：[Fastlane自动化笔记](https://madordie.github.io/fastlane-note/#more)\n\n  2017.6.14更新:\n  [xcpretty](https://github.com/supermarin/xcpretty)格式化输出日志。很溜，输出效果和 `fastlane` 差不多哈哈\n\n## Xcode8\n\n  好悲催，Xcode8更新之后Jenkins打包失败了。。由于代码库中使用了swift3语法，故必须使用Xcode8。。\n  \n  先来重点：可用脚本：\n\n  ```bash\n  #!/bin/bash\n\n  #   追上fir API token 自动上传\n  #   基于当前代码进行打包打包目录：MyProject/build/MyProject_ent.ipa\n\n  cd MyProject\n\n  rm -rf ./build/*\n\n  xcodebuild -archivePath \"./build/xxx.xcarchive\" -workspace MyProject.xcworkspace -sdk iphoneos -scheme \"MyProject_ent\" -configuration \"Release Inhouse\" archive\n\n  echo \"<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict><key>method</key><string>enterprise</string><key>compileBitcode</key><string>YES</string></dict></plist>\" > ./build/exportOptionsPlist.plist\n\n  xcodebuild -exportArchive -archivePath \"./build/xxx.xcarchive\" -exportPath \"./build/\" -exportOptionsPlist ./build/exportOptionsPlist.plist\n\n\n  cd build/\n\n  fir i ./MyProject_ent.ipa\n\n\n  if [ -n \"$1\" ]; then\n      git log -10 > git.log\n      fir p ./MyProject_ent.ipa -T $1 -c git.log\n  fi\n\n  ```\n  \n  之前漏掉了一个错误：`The flag -exportFormat cannot be specified along with -exportOptionsPlist` 导致了最终包签名错误，而无法安装。\n\n  exportOptionsPlist参考的[iOS 打包总结](https://testerhome.com/topics/4619)\n\n\n## 手动上传\n  ```\n  #!/bin/bash\n\n  #   追上fir API token 自动上传\n  #   基于当前代码进行打包打包目录：xxxx/build/xxxx_ent.ipa\n\n  workspace_name=xxxx\n  scheme_name=xxxx_ent\n\n\n  cd $workspace_name\n\n  rm -rf ./build/*\n\n  xcodebuild -archivePath \"./build/xxx.xcarchive\" -workspace $workspace_name.xcworkspace -sdk iphoneos -scheme $scheme_name -configuration \"Release Inhouse\" archive\n\n\n  cat << EOF > ./build/exportOptionsPlist.plist\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n  <plist version=\"1.0\">\n      <dict>\n          <key>method</key>\n          <string>enterprise</string>\n          <key>compileBitcode</key>\n              <false/>\n      </dict>\n  </plist>\n  EOF\n\n  xcodebuild -exportArchive -archivePath \"./build/xxx.xcarchive\" -exportOptionsPlist \"./build/exportOptionsPlist.plist\" -exportPath \"./build/\"\n\n  cd build/\n\n\n  git log -10 > git.log\n\n  #拷贝ipa到临时文件夹中\n  cp ./$scheme_name.ipa ./tmp.zip\n  #将ipa解压\n  unzip tmp.zip\n\n  #app文件中Info.plist文件路径\n  app_infoplist_path=$(pwd)/Payload/*.app/Info.plist\n  #取bundleIdentifier\n  bundleIdentifier=$(/usr/libexec/PlistBuddy -c \"print CFBundleIdentifier\" ${app_infoplist_path})\n  #取build值\n  bundleVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleVersion\" ${app_infoplist_path})\n  #显示名称\n  ipa_name=$workspace_name\n\n  #ipa下载url\n  ipa_download_url=\"https://***/install_ipa/raw/master/xxxx_ent.ipa\"\n  #itms-services协议串\n  ios_install_url=\"itms-services://?action=download-manifest&url=https://***/install_ipa/raw/master/xxxx_ent.plist\"\n\n  #生成install.html文件\n\n  cat << EOF > index.html\n  <!DOCTYPE HTML>\n  <html>\n    <head>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <title>安装</title>\n    </head>\n    <body>\n      <br>\n      <br>\n      <br>\n      <br>\n      <p align=center>\n          <font size=\"8\">\n              <a href=\"${ios_install_url}\">点击这里安装</a>\n          </font>\n      </p>\n\n      </div>\n    </body>\n  </html>\n  EOF\n\n  #生成plist文件\n  cat << EOF > ${workspace_name}.plist\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n  <plist version=\"1.0\">\n  <dict>\n     <key>items</key>\n     <array>\n         <dict>\n             <key>assets</key>\n             <array>\n                 <dict>\n                     <key>kind</key>\n                     <string>software-package</string>\n                     <key>url</key>\n                     <string>${ipa_download_url}</string>\n                 </dict>\n                 <dict>\n                     <key>kind</key>\n                     <string>display-image</string>\n                     <key>needs-shine</key>\n                     <true/>\n                     <key>url</key>\n                     <string>http://git.oschina.net/logo.svg</string>\n                 </dict>\n             <dict>\n                     <key>kind</key>\n                     <string>full-size-image</string>\n                     <key>needs-shine</key>\n                     <true/>\n                     <key>url</key>\n                     <string>http://git.oschina.net/logo.svg</string>\n                 </dict>\n             </array><key>metadata</key>\n             <dict>\n                 <key>bundle-identifier</key>\n                 <string>${bundleIdentifier}</string>\n                 <key>bundle-version</key>\n                 <string>${bundleVersion}</string>\n                 <key>kind</key>\n                 <string>software</string>\n                 <key>subtitle</key>\n                 <string>${ipa_name}</string>\n                 <key>title</key>\n                 <string>${ipa_name}</string>\n             </dict>\n         </dict>\n     </array>\n  </dict>\n  </plist>\n  EOF\n\n  fir i $scheme_name.ipa\n  ```\n\n## 手动上传到OSC脚本\n  ```\n  #!/bin/bash\n\n  root_path=$(pwd)\n  workspace_name=Fangduoduo\n  scheme_name=XXX\n\n  # 编译\n  cd $root_path\n  cd $workspace_name\n\n  rm -rf ./build/*\n\n  xcodebuild -archivePath ./build/$scheme_name.xcarchive -workspace $workspace_name.xcworkspace -sdk iphoneos -scheme $scheme_name -configuration \"Release Inhouse\" archive\n\n  echo \"<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict><key>method</key><string>enterprise</string><key>compileBitcode</key><false/></dict></plist>\" > ./build/exportOptionsPlist.plist\n\n  xcodebuild -exportArchive -archivePath ./build/$scheme_name.xcarchive -exportOptionsPlist \"./build/exportOptionsPlist.plist\" -exportPath \"./build/\"\n\n\n  cd build/\n\n  if [ ! -f $scheme_name.ipa ]; then\n      echo \"*** 无法打包 ***\"\n      exit -1\n  fi\n\n  fir i ./$scheme_name.ipa\n\n  git log -10 > git.log\n  git_log=$(cat git.log)\n  # fir 上传\n  if [ -n \"$1\" ]; then\n      fir p ./$scheme_name.ipa -T $1 -c git.log\n  fi\n\n\n  # 校验HTML并上传\n\n  public_git_path=$root_path/public_ipa_tmp/\n  public_git_root=\"install_ipa\"\n  public_git=\"https://***/install_ipa.git\"\n  #ipa下载url\n  ipa_download_url=\"https://***/install_ipa/raw/master/XXX.ipa\"\n  #itms-services协议串\n  ios_install_url=\"itms-services://?action=download-manifest&url=https://***/install_ipa/raw/master/XXX.plist\"\n\n\n  cd $root_path/\n  # checkout path is OK\n  if [ ! -e $public_git_path ]; then\n      mkdir $public_git_path\n  fi\n\n  if [ -n $public_git_path ]; then\n      rm -rf $public_git_path\n  fi\n  mkdir $public_git_path\n  cd $public_git_path\n  git init\n  git remote add origin $public_git\n\n\n  cd $root_path/$workspace_name/build/\n\n  #拷贝ipa到临时文件夹中\n  cp ./$scheme_name.ipa ./tmp.zip\n  rm -rf Payload\n  #将ipa解压\n  unzip tmp.zip\n\n  #app文件中Info.plist文件路径\n  app_infoplist_path=$(pwd)/Payload/*.app/Info.plist\n  #取bundleIdentifier\n  bundleIdentifier=$(/usr/libexec/PlistBuddy -c \"print CFBundleIdentifier\" ${app_infoplist_path})\n  #取build值\n  bundleVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleVersion\" ${app_infoplist_path})\n  #取shortVersionbuild值\n  shortVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleShortVersionString\" ${app_infoplist_path})\n  #显示名称\n  ipa_name=$(/usr/libexec/PlistBuddy -c \"print CFBundleDisplayName\" ${app_infoplist_path})\n  nowTime=$(date +%Y-%m-%d\\ %H:%M)\n  log_url=\"https://madordie.github.io/uploads/avatar.png\"\n\n  #生成install.html文件\n\n  cat << EOF > index.html\n  <!DOCTYPE HTML>\n  <html>\n  <head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=0\">\n  <title>${ipa_name}安装</title>\n  <style>\n  .containor {\n      position: relative;\n      top: 0;\n      left: 0;\n      right: 0;\n      margin: 0 auto;\n      width: 100%;\n      max-width: 640px;\n      text-align: center;\n  }\n  .logo {\n      width: 120px;\n      margin-top: 30px;\n  }\n  .title,\n  .version_history,\n  .update_time {\n      text-align: center;\n      color: #999;\n      font-size: 16px;\n  }\n  .title {\n      margin-top: 10px;\n  }\n  .version_history,\n  .update_time {\n      margin-top: 5px;\n  }\n  .download {\n      display: block;\n      width: 150px;\n      height: 30px;\n      line-height: 30px;\n      margin: 0 auto;\n      margin-top: 20px;\n      border: 1px solid #eee;\n      border-radius: 20px;\n      text-decoration: none;\n      color: #999;\n  }\n  .log_title {\n      margin-top: 20px;\n      font-size: 18px;\n      color: #333;\n  }\n  .log {\n      color: #aaa;\n      padding: 20px;\n      text-align: left;\n      font-size: 12px;\n      line-height: 15px;\n      white-space: pre-wrap;\n      word-wrap: break-word;\n      overflow: hidden;\n  }\n  </style>\n  </head>\n  <body>\n  <div class=\"containor\">\n      <img class=\"logo\" src=${log_url} />\n      <div class=\"title\">$ipa_name</div>\n      <div class=\"version_history\">${shortVersion}(bundle:${bundleVersion})</div>\n      <div></div>\n      <div class=\"update_time\">${nowTime}</div>\n      <a class=\"download\" href=\"${ios_install_url}\">点击这里安装</a>\n      <div class=\"log_title\">更新日志</div>\n      <div class=\"log\"> ${git_log} </div>\n  </div>\n  </body>\n  </html>\n  EOF\n\n  #生成plist文件\n  cat << EOF > ${scheme_name}.plist\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n  <plist version=\"1.0\">\n  <dict>\n     <key>items</key>\n     <array>\n         <dict>\n             <key>assets</key>\n             <array>\n                 <dict>\n                     <key>kind</key>\n                     <string>software-package</string>\n                     <key>url</key>\n                     <string>${ipa_download_url}</string>\n                 </dict>\n                 <dict>\n                     <key>kind</key>\n                     <string>display-image</string>\n                     <key>needs-shine</key>\n                     <true/>\n                     <key>url</key>\n                     <string>http://git.oschina.net/logo.svg</string>\n                 </dict>\n             <dict>\n                     <key>kind</key>\n                     <string>full-size-image</string>\n                     <key>needs-shine</key>\n                     <true/>\n                     <key>url</key>\n                     <string>http://git.oschina.net/logo.svg</string>\n                 </dict>\n             </array><key>metadata</key>\n             <dict>\n                 <key>bundle-identifier</key>\n                 <string>${bundleIdentifier}</string>\n                 <key>bundle-version</key>\n                 <string>${bundleVersion}</string>\n                 <key>kind</key>\n                 <string>software</string>\n                 <key>subtitle</key>\n                 <string>${ipa_name}</string>\n                 <key>title</key>\n                 <string>${ipa_name}</string>\n             </dict>\n         </dict>\n     </array>\n  </dict>\n  </plist>\n  EOF\n\n  #fir i $scheme_name.ipa\n  cp $scheme_name.ipa $public_git_path\n  cp $scheme_name.plist $public_git_path\n  cp index.html $public_git_path\n\n  cd $public_git_path\n  ls -l > README.md\n  if [ ! -e \"./.git/\" ]; then\n      echo \"*** OSC的git目录不完整，无法上传，请联系开发! ***\"\n      exit -1\n  fi\n  echo \"commit and pushing ...\"\n  git add .\n  git commit -am $bundleVersion\n  git push -f origin master\n  ```\n","source":"_posts/build-ipa-sh.md","raw":"---\ntitle: Xcode8打包脚本\ndate: 2016-09-26 14:55:09\ntags:\ncategories:\n    - 工具\n---\n\nJenkins自动构建脚本解决方案。\n\n<!--more-->\n\n## 写在前面\n  2017.1.13更新：\n  好吧，其实有更加强悍的打包工具，虽然早有耳闻但是没弄。然后最近搭建了一下，这打包脚本也不用了，毕竟有成套工具嘛。嘿嘿\n  不过最后上传osc的脚本还是很可以的。\n  传送门：[Fastlane自动化笔记](https://madordie.github.io/fastlane-note/#more)\n\n  2017.6.14更新:\n  [xcpretty](https://github.com/supermarin/xcpretty)格式化输出日志。很溜，输出效果和 `fastlane` 差不多哈哈\n\n## Xcode8\n\n  好悲催，Xcode8更新之后Jenkins打包失败了。。由于代码库中使用了swift3语法，故必须使用Xcode8。。\n  \n  先来重点：可用脚本：\n\n  ```bash\n  #!/bin/bash\n\n  #   追上fir API token 自动上传\n  #   基于当前代码进行打包打包目录：MyProject/build/MyProject_ent.ipa\n\n  cd MyProject\n\n  rm -rf ./build/*\n\n  xcodebuild -archivePath \"./build/xxx.xcarchive\" -workspace MyProject.xcworkspace -sdk iphoneos -scheme \"MyProject_ent\" -configuration \"Release Inhouse\" archive\n\n  echo \"<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict><key>method</key><string>enterprise</string><key>compileBitcode</key><string>YES</string></dict></plist>\" > ./build/exportOptionsPlist.plist\n\n  xcodebuild -exportArchive -archivePath \"./build/xxx.xcarchive\" -exportPath \"./build/\" -exportOptionsPlist ./build/exportOptionsPlist.plist\n\n\n  cd build/\n\n  fir i ./MyProject_ent.ipa\n\n\n  if [ -n \"$1\" ]; then\n      git log -10 > git.log\n      fir p ./MyProject_ent.ipa -T $1 -c git.log\n  fi\n\n  ```\n  \n  之前漏掉了一个错误：`The flag -exportFormat cannot be specified along with -exportOptionsPlist` 导致了最终包签名错误，而无法安装。\n\n  exportOptionsPlist参考的[iOS 打包总结](https://testerhome.com/topics/4619)\n\n\n## 手动上传\n  ```\n  #!/bin/bash\n\n  #   追上fir API token 自动上传\n  #   基于当前代码进行打包打包目录：xxxx/build/xxxx_ent.ipa\n\n  workspace_name=xxxx\n  scheme_name=xxxx_ent\n\n\n  cd $workspace_name\n\n  rm -rf ./build/*\n\n  xcodebuild -archivePath \"./build/xxx.xcarchive\" -workspace $workspace_name.xcworkspace -sdk iphoneos -scheme $scheme_name -configuration \"Release Inhouse\" archive\n\n\n  cat << EOF > ./build/exportOptionsPlist.plist\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n  <plist version=\"1.0\">\n      <dict>\n          <key>method</key>\n          <string>enterprise</string>\n          <key>compileBitcode</key>\n              <false/>\n      </dict>\n  </plist>\n  EOF\n\n  xcodebuild -exportArchive -archivePath \"./build/xxx.xcarchive\" -exportOptionsPlist \"./build/exportOptionsPlist.plist\" -exportPath \"./build/\"\n\n  cd build/\n\n\n  git log -10 > git.log\n\n  #拷贝ipa到临时文件夹中\n  cp ./$scheme_name.ipa ./tmp.zip\n  #将ipa解压\n  unzip tmp.zip\n\n  #app文件中Info.plist文件路径\n  app_infoplist_path=$(pwd)/Payload/*.app/Info.plist\n  #取bundleIdentifier\n  bundleIdentifier=$(/usr/libexec/PlistBuddy -c \"print CFBundleIdentifier\" ${app_infoplist_path})\n  #取build值\n  bundleVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleVersion\" ${app_infoplist_path})\n  #显示名称\n  ipa_name=$workspace_name\n\n  #ipa下载url\n  ipa_download_url=\"https://***/install_ipa/raw/master/xxxx_ent.ipa\"\n  #itms-services协议串\n  ios_install_url=\"itms-services://?action=download-manifest&url=https://***/install_ipa/raw/master/xxxx_ent.plist\"\n\n  #生成install.html文件\n\n  cat << EOF > index.html\n  <!DOCTYPE HTML>\n  <html>\n    <head>\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <title>安装</title>\n    </head>\n    <body>\n      <br>\n      <br>\n      <br>\n      <br>\n      <p align=center>\n          <font size=\"8\">\n              <a href=\"${ios_install_url}\">点击这里安装</a>\n          </font>\n      </p>\n\n      </div>\n    </body>\n  </html>\n  EOF\n\n  #生成plist文件\n  cat << EOF > ${workspace_name}.plist\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n  <plist version=\"1.0\">\n  <dict>\n     <key>items</key>\n     <array>\n         <dict>\n             <key>assets</key>\n             <array>\n                 <dict>\n                     <key>kind</key>\n                     <string>software-package</string>\n                     <key>url</key>\n                     <string>${ipa_download_url}</string>\n                 </dict>\n                 <dict>\n                     <key>kind</key>\n                     <string>display-image</string>\n                     <key>needs-shine</key>\n                     <true/>\n                     <key>url</key>\n                     <string>http://git.oschina.net/logo.svg</string>\n                 </dict>\n             <dict>\n                     <key>kind</key>\n                     <string>full-size-image</string>\n                     <key>needs-shine</key>\n                     <true/>\n                     <key>url</key>\n                     <string>http://git.oschina.net/logo.svg</string>\n                 </dict>\n             </array><key>metadata</key>\n             <dict>\n                 <key>bundle-identifier</key>\n                 <string>${bundleIdentifier}</string>\n                 <key>bundle-version</key>\n                 <string>${bundleVersion}</string>\n                 <key>kind</key>\n                 <string>software</string>\n                 <key>subtitle</key>\n                 <string>${ipa_name}</string>\n                 <key>title</key>\n                 <string>${ipa_name}</string>\n             </dict>\n         </dict>\n     </array>\n  </dict>\n  </plist>\n  EOF\n\n  fir i $scheme_name.ipa\n  ```\n\n## 手动上传到OSC脚本\n  ```\n  #!/bin/bash\n\n  root_path=$(pwd)\n  workspace_name=Fangduoduo\n  scheme_name=XXX\n\n  # 编译\n  cd $root_path\n  cd $workspace_name\n\n  rm -rf ./build/*\n\n  xcodebuild -archivePath ./build/$scheme_name.xcarchive -workspace $workspace_name.xcworkspace -sdk iphoneos -scheme $scheme_name -configuration \"Release Inhouse\" archive\n\n  echo \"<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict><key>method</key><string>enterprise</string><key>compileBitcode</key><false/></dict></plist>\" > ./build/exportOptionsPlist.plist\n\n  xcodebuild -exportArchive -archivePath ./build/$scheme_name.xcarchive -exportOptionsPlist \"./build/exportOptionsPlist.plist\" -exportPath \"./build/\"\n\n\n  cd build/\n\n  if [ ! -f $scheme_name.ipa ]; then\n      echo \"*** 无法打包 ***\"\n      exit -1\n  fi\n\n  fir i ./$scheme_name.ipa\n\n  git log -10 > git.log\n  git_log=$(cat git.log)\n  # fir 上传\n  if [ -n \"$1\" ]; then\n      fir p ./$scheme_name.ipa -T $1 -c git.log\n  fi\n\n\n  # 校验HTML并上传\n\n  public_git_path=$root_path/public_ipa_tmp/\n  public_git_root=\"install_ipa\"\n  public_git=\"https://***/install_ipa.git\"\n  #ipa下载url\n  ipa_download_url=\"https://***/install_ipa/raw/master/XXX.ipa\"\n  #itms-services协议串\n  ios_install_url=\"itms-services://?action=download-manifest&url=https://***/install_ipa/raw/master/XXX.plist\"\n\n\n  cd $root_path/\n  # checkout path is OK\n  if [ ! -e $public_git_path ]; then\n      mkdir $public_git_path\n  fi\n\n  if [ -n $public_git_path ]; then\n      rm -rf $public_git_path\n  fi\n  mkdir $public_git_path\n  cd $public_git_path\n  git init\n  git remote add origin $public_git\n\n\n  cd $root_path/$workspace_name/build/\n\n  #拷贝ipa到临时文件夹中\n  cp ./$scheme_name.ipa ./tmp.zip\n  rm -rf Payload\n  #将ipa解压\n  unzip tmp.zip\n\n  #app文件中Info.plist文件路径\n  app_infoplist_path=$(pwd)/Payload/*.app/Info.plist\n  #取bundleIdentifier\n  bundleIdentifier=$(/usr/libexec/PlistBuddy -c \"print CFBundleIdentifier\" ${app_infoplist_path})\n  #取build值\n  bundleVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleVersion\" ${app_infoplist_path})\n  #取shortVersionbuild值\n  shortVersion=$(/usr/libexec/PlistBuddy -c \"print CFBundleShortVersionString\" ${app_infoplist_path})\n  #显示名称\n  ipa_name=$(/usr/libexec/PlistBuddy -c \"print CFBundleDisplayName\" ${app_infoplist_path})\n  nowTime=$(date +%Y-%m-%d\\ %H:%M)\n  log_url=\"https://madordie.github.io/uploads/avatar.png\"\n\n  #生成install.html文件\n\n  cat << EOF > index.html\n  <!DOCTYPE HTML>\n  <html>\n  <head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=0\">\n  <title>${ipa_name}安装</title>\n  <style>\n  .containor {\n      position: relative;\n      top: 0;\n      left: 0;\n      right: 0;\n      margin: 0 auto;\n      width: 100%;\n      max-width: 640px;\n      text-align: center;\n  }\n  .logo {\n      width: 120px;\n      margin-top: 30px;\n  }\n  .title,\n  .version_history,\n  .update_time {\n      text-align: center;\n      color: #999;\n      font-size: 16px;\n  }\n  .title {\n      margin-top: 10px;\n  }\n  .version_history,\n  .update_time {\n      margin-top: 5px;\n  }\n  .download {\n      display: block;\n      width: 150px;\n      height: 30px;\n      line-height: 30px;\n      margin: 0 auto;\n      margin-top: 20px;\n      border: 1px solid #eee;\n      border-radius: 20px;\n      text-decoration: none;\n      color: #999;\n  }\n  .log_title {\n      margin-top: 20px;\n      font-size: 18px;\n      color: #333;\n  }\n  .log {\n      color: #aaa;\n      padding: 20px;\n      text-align: left;\n      font-size: 12px;\n      line-height: 15px;\n      white-space: pre-wrap;\n      word-wrap: break-word;\n      overflow: hidden;\n  }\n  </style>\n  </head>\n  <body>\n  <div class=\"containor\">\n      <img class=\"logo\" src=${log_url} />\n      <div class=\"title\">$ipa_name</div>\n      <div class=\"version_history\">${shortVersion}(bundle:${bundleVersion})</div>\n      <div></div>\n      <div class=\"update_time\">${nowTime}</div>\n      <a class=\"download\" href=\"${ios_install_url}\">点击这里安装</a>\n      <div class=\"log_title\">更新日志</div>\n      <div class=\"log\"> ${git_log} </div>\n  </div>\n  </body>\n  </html>\n  EOF\n\n  #生成plist文件\n  cat << EOF > ${scheme_name}.plist\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n  <plist version=\"1.0\">\n  <dict>\n     <key>items</key>\n     <array>\n         <dict>\n             <key>assets</key>\n             <array>\n                 <dict>\n                     <key>kind</key>\n                     <string>software-package</string>\n                     <key>url</key>\n                     <string>${ipa_download_url}</string>\n                 </dict>\n                 <dict>\n                     <key>kind</key>\n                     <string>display-image</string>\n                     <key>needs-shine</key>\n                     <true/>\n                     <key>url</key>\n                     <string>http://git.oschina.net/logo.svg</string>\n                 </dict>\n             <dict>\n                     <key>kind</key>\n                     <string>full-size-image</string>\n                     <key>needs-shine</key>\n                     <true/>\n                     <key>url</key>\n                     <string>http://git.oschina.net/logo.svg</string>\n                 </dict>\n             </array><key>metadata</key>\n             <dict>\n                 <key>bundle-identifier</key>\n                 <string>${bundleIdentifier}</string>\n                 <key>bundle-version</key>\n                 <string>${bundleVersion}</string>\n                 <key>kind</key>\n                 <string>software</string>\n                 <key>subtitle</key>\n                 <string>${ipa_name}</string>\n                 <key>title</key>\n                 <string>${ipa_name}</string>\n             </dict>\n         </dict>\n     </array>\n  </dict>\n  </plist>\n  EOF\n\n  #fir i $scheme_name.ipa\n  cp $scheme_name.ipa $public_git_path\n  cp $scheme_name.plist $public_git_path\n  cp index.html $public_git_path\n\n  cd $public_git_path\n  ls -l > README.md\n  if [ ! -e \"./.git/\" ]; then\n      echo \"*** OSC的git目录不完整，无法上传，请联系开发! ***\"\n      exit -1\n  fi\n  echo \"commit and pushing ...\"\n  git add .\n  git commit -am $bundleVersion\n  git push -f origin master\n  ```\n","slug":"build-ipa-sh","published":1,"updated":"2017-07-22T07:55:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfn9000gkhuvyw50vjia","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>Jenkins自动构建脚本解决方案。</p>\n<a id=\"more\"></a>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>  2017.1.13更新：<br>  好吧，其实有更加强悍的打包工具，虽然早有耳闻但是没弄。然后最近搭建了一下，这打包脚本也不用了，毕竟有成套工具嘛。嘿嘿<br>  不过最后上传osc的脚本还是很可以的。<br>  传送门：<a href=\"https://madordie.github.io/fastlane-note/#more\">Fastlane自动化笔记</a></p>\n<p>  2017.6.14更新:<br>  <a href=\"https://github.com/supermarin/xcpretty\" target=\"_blank\" rel=\"external\">xcpretty</a>格式化输出日志。很溜，输出效果和 <code>fastlane</code> 差不多哈哈</p>\n<h2 id=\"Xcode8\"><a href=\"#Xcode8\" class=\"headerlink\" title=\"Xcode8\"></a>Xcode8</h2><p>  好悲催，Xcode8更新之后Jenkins打包失败了。。由于代码库中使用了swift3语法，故必须使用Xcode8。。</p>\n<p>  先来重点：可用脚本：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#   追上fir API token 自动上传</span></div><div class=\"line\"><span class=\"comment\">#   基于当前代码进行打包打包目录：MyProject/build/MyProject_ent.ipa</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> MyProject</div><div class=\"line\"></div><div class=\"line\">rm -rf ./build/*</div><div class=\"line\"></div><div class=\"line\">xcodebuild -archivePath <span class=\"string\">\"./build/xxx.xcarchive\"</span> -workspace MyProject.xcworkspace -sdk iphoneos -scheme <span class=\"string\">\"MyProject_ent\"</span> -configuration <span class=\"string\">\"Release Inhouse\"</span> archive</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"&lt;?xml version=\"</span>1.0<span class=\"string\">\" encoding=\"</span>UTF-8<span class=\"string\">\"?&gt;&lt;!DOCTYPE plist PUBLIC \"</span>-//Apple//DTD PLIST 1.0//EN<span class=\"string\">\" \"</span>http://www.apple.com/DTDs/PropertyList-1.0.dtd<span class=\"string\">\"&gt;&lt;plist version=\"</span>1.0<span class=\"string\">\"&gt;&lt;dict&gt;&lt;key&gt;method&lt;/key&gt;&lt;string&gt;enterprise&lt;/string&gt;&lt;key&gt;compileBitcode&lt;/key&gt;&lt;string&gt;YES&lt;/string&gt;&lt;/dict&gt;&lt;/plist&gt;\"</span> &gt; ./build/<span class=\"built_in\">export</span>OptionsPlist.plist</div><div class=\"line\"></div><div class=\"line\">xcodebuild -exportArchive -archivePath <span class=\"string\">\"./build/xxx.xcarchive\"</span> -exportPath <span class=\"string\">\"./build/\"</span> -exportOptionsPlist ./build/<span class=\"built_in\">export</span>OptionsPlist.plist</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> build/</div><div class=\"line\"></div><div class=\"line\">fir i ./MyProject_ent.ipa</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">    git <span class=\"built_in\">log</span> -10 &gt; git.log</div><div class=\"line\">    fir p ./MyProject_ent.ipa -T <span class=\"variable\">$1</span> -c git.log</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<p>  之前漏掉了一个错误：<code>The flag -exportFormat cannot be specified along with -exportOptionsPlist</code> 导致了最终包签名错误，而无法安装。</p>\n<p>  exportOptionsPlist参考的<a href=\"https://testerhome.com/topics/4619\" target=\"_blank\" rel=\"external\">iOS 打包总结</a></p>\n<h2 id=\"手动上传\"><a href=\"#手动上传\" class=\"headerlink\" title=\"手动上传\"></a>手动上传</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\">#   追上fir API token 自动上传</div><div class=\"line\">#   基于当前代码进行打包打包目录：xxxx/build/xxxx_ent.ipa</div><div class=\"line\"></div><div class=\"line\">workspace_name=xxxx</div><div class=\"line\">scheme_name=xxxx_ent</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">cd $workspace_name</div><div class=\"line\"></div><div class=\"line\">rm -rf ./build/*</div><div class=\"line\"></div><div class=\"line\">xcodebuild -archivePath &quot;./build/xxx.xcarchive&quot; -workspace $workspace_name.xcworkspace -sdk iphoneos -scheme $scheme_name -configuration &quot;Release Inhouse&quot; archive</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">cat &lt;&lt; EOF &gt; ./build/exportOptionsPlist.plist</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</div><div class=\"line\">    &lt;dict&gt;</div><div class=\"line\">        &lt;key&gt;method&lt;/key&gt;</div><div class=\"line\">        &lt;string&gt;enterprise&lt;/string&gt;</div><div class=\"line\">        &lt;key&gt;compileBitcode&lt;/key&gt;</div><div class=\"line\">            &lt;false/&gt;</div><div class=\"line\">    &lt;/dict&gt;</div><div class=\"line\">&lt;/plist&gt;</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">xcodebuild -exportArchive -archivePath &quot;./build/xxx.xcarchive&quot; -exportOptionsPlist &quot;./build/exportOptionsPlist.plist&quot; -exportPath &quot;./build/&quot;</div><div class=\"line\"></div><div class=\"line\">cd build/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">git log -10 &gt; git.log</div><div class=\"line\"></div><div class=\"line\">#拷贝ipa到临时文件夹中</div><div class=\"line\">cp ./$scheme_name.ipa ./tmp.zip</div><div class=\"line\">#将ipa解压</div><div class=\"line\">unzip tmp.zip</div><div class=\"line\"></div><div class=\"line\">#app文件中Info.plist文件路径</div><div class=\"line\">app_infoplist_path=$(pwd)/Payload/*.app/Info.plist</div><div class=\"line\">#取bundleIdentifier</div><div class=\"line\">bundleIdentifier=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleIdentifier&quot; $&#123;app_infoplist_path&#125;)</div><div class=\"line\">#取build值</div><div class=\"line\">bundleVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleVersion&quot; $&#123;app_infoplist_path&#125;)</div><div class=\"line\">#显示名称</div><div class=\"line\">ipa_name=$workspace_name</div><div class=\"line\"></div><div class=\"line\">#ipa下载url</div><div class=\"line\">ipa_download_url=&quot;https://***/install_ipa/raw/master/xxxx_ent.ipa&quot;</div><div class=\"line\">#itms-services协议串</div><div class=\"line\">ios_install_url=&quot;itms-services://?action=download-manifest&amp;url=https://***/install_ipa/raw/master/xxxx_ent.plist&quot;</div><div class=\"line\"></div><div class=\"line\">#生成install.html文件</div><div class=\"line\"></div><div class=\"line\">cat &lt;&lt; EOF &gt; index.html</div><div class=\"line\">&lt;!DOCTYPE HTML&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</div><div class=\"line\">    &lt;title&gt;安装&lt;/title&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;br&gt;</div><div class=\"line\">    &lt;br&gt;</div><div class=\"line\">    &lt;br&gt;</div><div class=\"line\">    &lt;br&gt;</div><div class=\"line\">    &lt;p align=center&gt;</div><div class=\"line\">        &lt;font size=&quot;8&quot;&gt;</div><div class=\"line\">            &lt;a href=&quot;$&#123;ios_install_url&#125;&quot;&gt;点击这里安装&lt;/a&gt;</div><div class=\"line\">        &lt;/font&gt;</div><div class=\"line\">    &lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">#生成plist文件</div><div class=\"line\">cat &lt;&lt; EOF &gt; $&#123;workspace_name&#125;.plist</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</div><div class=\"line\">&lt;dict&gt;</div><div class=\"line\">   &lt;key&gt;items&lt;/key&gt;</div><div class=\"line\">   &lt;array&gt;</div><div class=\"line\">       &lt;dict&gt;</div><div class=\"line\">           &lt;key&gt;assets&lt;/key&gt;</div><div class=\"line\">           &lt;array&gt;</div><div class=\"line\">               &lt;dict&gt;</div><div class=\"line\">                   &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;software-package&lt;/string&gt;</div><div class=\"line\">                   &lt;key&gt;url&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;$&#123;ipa_download_url&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;/dict&gt;</div><div class=\"line\">               &lt;dict&gt;</div><div class=\"line\">                   &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;display-image&lt;/string&gt;</div><div class=\"line\">                   &lt;key&gt;needs-shine&lt;/key&gt;</div><div class=\"line\">                   &lt;true/&gt;</div><div class=\"line\">                   &lt;key&gt;url&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;http://git.oschina.net/logo.svg&lt;/string&gt;</div><div class=\"line\">               &lt;/dict&gt;</div><div class=\"line\">           &lt;dict&gt;</div><div class=\"line\">                   &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;full-size-image&lt;/string&gt;</div><div class=\"line\">                   &lt;key&gt;needs-shine&lt;/key&gt;</div><div class=\"line\">                   &lt;true/&gt;</div><div class=\"line\">                   &lt;key&gt;url&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;http://git.oschina.net/logo.svg&lt;/string&gt;</div><div class=\"line\">               &lt;/dict&gt;</div><div class=\"line\">           &lt;/array&gt;&lt;key&gt;metadata&lt;/key&gt;</div><div class=\"line\">           &lt;dict&gt;</div><div class=\"line\">               &lt;key&gt;bundle-identifier&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;bundleIdentifier&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;bundle-version&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;bundleVersion&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;software&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;subtitle&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;ipa_name&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;title&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;ipa_name&#125;&lt;/string&gt;</div><div class=\"line\">           &lt;/dict&gt;</div><div class=\"line\">       &lt;/dict&gt;</div><div class=\"line\">   &lt;/array&gt;</div><div class=\"line\">&lt;/dict&gt;</div><div class=\"line\">&lt;/plist&gt;</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">fir i $scheme_name.ipa</div></pre></td></tr></table></figure>\n<h2 id=\"手动上传到OSC脚本\"><a href=\"#手动上传到OSC脚本\" class=\"headerlink\" title=\"手动上传到OSC脚本\"></a>手动上传到OSC脚本</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\">root_path=$(pwd)</div><div class=\"line\">workspace_name=Fangduoduo</div><div class=\"line\">scheme_name=XXX</div><div class=\"line\"></div><div class=\"line\"># 编译</div><div class=\"line\">cd $root_path</div><div class=\"line\">cd $workspace_name</div><div class=\"line\"></div><div class=\"line\">rm -rf ./build/*</div><div class=\"line\"></div><div class=\"line\">xcodebuild -archivePath ./build/$scheme_name.xcarchive -workspace $workspace_name.xcworkspace -sdk iphoneos -scheme $scheme_name -configuration &quot;Release Inhouse&quot; archive</div><div class=\"line\"></div><div class=\"line\">echo &quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt;&lt;key&gt;method&lt;/key&gt;&lt;string&gt;enterprise&lt;/string&gt;&lt;key&gt;compileBitcode&lt;/key&gt;&lt;false/&gt;&lt;/dict&gt;&lt;/plist&gt;&quot; &gt; ./build/exportOptionsPlist.plist</div><div class=\"line\"></div><div class=\"line\">xcodebuild -exportArchive -archivePath ./build/$scheme_name.xcarchive -exportOptionsPlist &quot;./build/exportOptionsPlist.plist&quot; -exportPath &quot;./build/&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">cd build/</div><div class=\"line\"></div><div class=\"line\">if [ ! -f $scheme_name.ipa ]; then</div><div class=\"line\">    echo &quot;*** 无法打包 ***&quot;</div><div class=\"line\">    exit -1</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">fir i ./$scheme_name.ipa</div><div class=\"line\"></div><div class=\"line\">git log -10 &gt; git.log</div><div class=\"line\">git_log=$(cat git.log)</div><div class=\"line\"># fir 上传</div><div class=\"line\">if [ -n &quot;$1&quot; ]; then</div><div class=\"line\">    fir p ./$scheme_name.ipa -T $1 -c git.log</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 校验HTML并上传</div><div class=\"line\"></div><div class=\"line\">public_git_path=$root_path/public_ipa_tmp/</div><div class=\"line\">public_git_root=&quot;install_ipa&quot;</div><div class=\"line\">public_git=&quot;https://***/install_ipa.git&quot;</div><div class=\"line\">#ipa下载url</div><div class=\"line\">ipa_download_url=&quot;https://***/install_ipa/raw/master/XXX.ipa&quot;</div><div class=\"line\">#itms-services协议串</div><div class=\"line\">ios_install_url=&quot;itms-services://?action=download-manifest&amp;url=https://***/install_ipa/raw/master/XXX.plist&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">cd $root_path/</div><div class=\"line\"># checkout path is OK</div><div class=\"line\">if [ ! -e $public_git_path ]; then</div><div class=\"line\">    mkdir $public_git_path</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ -n $public_git_path ]; then</div><div class=\"line\">    rm -rf $public_git_path</div><div class=\"line\">fi</div><div class=\"line\">mkdir $public_git_path</div><div class=\"line\">cd $public_git_path</div><div class=\"line\">git init</div><div class=\"line\">git remote add origin $public_git</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">cd $root_path/$workspace_name/build/</div><div class=\"line\"></div><div class=\"line\">#拷贝ipa到临时文件夹中</div><div class=\"line\">cp ./$scheme_name.ipa ./tmp.zip</div><div class=\"line\">rm -rf Payload</div><div class=\"line\">#将ipa解压</div><div class=\"line\">unzip tmp.zip</div><div class=\"line\"></div><div class=\"line\">#app文件中Info.plist文件路径</div><div class=\"line\">app_infoplist_path=$(pwd)/Payload/*.app/Info.plist</div><div class=\"line\">#取bundleIdentifier</div><div class=\"line\">bundleIdentifier=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleIdentifier&quot; $&#123;app_infoplist_path&#125;)</div><div class=\"line\">#取build值</div><div class=\"line\">bundleVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleVersion&quot; $&#123;app_infoplist_path&#125;)</div><div class=\"line\">#取shortVersionbuild值</div><div class=\"line\">shortVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleShortVersionString&quot; $&#123;app_infoplist_path&#125;)</div><div class=\"line\">#显示名称</div><div class=\"line\">ipa_name=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleDisplayName&quot; $&#123;app_infoplist_path&#125;)</div><div class=\"line\">nowTime=$(date +%Y-%m-%d\\ %H:%M)</div><div class=\"line\">log_url=&quot;https://madordie.github.io/uploads/avatar.png&quot;</div><div class=\"line\"></div><div class=\"line\">#生成install.html文件</div><div class=\"line\"></div><div class=\"line\">cat &lt;&lt; EOF &gt; index.html</div><div class=\"line\">&lt;!DOCTYPE HTML&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</div><div class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=0&quot;&gt;</div><div class=\"line\">&lt;title&gt;$&#123;ipa_name&#125;安装&lt;/title&gt;</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.containor &#123;</div><div class=\"line\">    position: relative;</div><div class=\"line\">    top: 0;</div><div class=\"line\">    left: 0;</div><div class=\"line\">    right: 0;</div><div class=\"line\">    margin: 0 auto;</div><div class=\"line\">    width: 100%;</div><div class=\"line\">    max-width: 640px;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">&#125;</div><div class=\"line\">.logo &#123;</div><div class=\"line\">    width: 120px;</div><div class=\"line\">    margin-top: 30px;</div><div class=\"line\">&#125;</div><div class=\"line\">.title,</div><div class=\"line\">.version_history,</div><div class=\"line\">.update_time &#123;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">    color: #999;</div><div class=\"line\">    font-size: 16px;</div><div class=\"line\">&#125;</div><div class=\"line\">.title &#123;</div><div class=\"line\">    margin-top: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\">.version_history,</div><div class=\"line\">.update_time &#123;</div><div class=\"line\">    margin-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">.download &#123;</div><div class=\"line\">    display: block;</div><div class=\"line\">    width: 150px;</div><div class=\"line\">    height: 30px;</div><div class=\"line\">    line-height: 30px;</div><div class=\"line\">    margin: 0 auto;</div><div class=\"line\">    margin-top: 20px;</div><div class=\"line\">    border: 1px solid #eee;</div><div class=\"line\">    border-radius: 20px;</div><div class=\"line\">    text-decoration: none;</div><div class=\"line\">    color: #999;</div><div class=\"line\">&#125;</div><div class=\"line\">.log_title &#123;</div><div class=\"line\">    margin-top: 20px;</div><div class=\"line\">    font-size: 18px;</div><div class=\"line\">    color: #333;</div><div class=\"line\">&#125;</div><div class=\"line\">.log &#123;</div><div class=\"line\">    color: #aaa;</div><div class=\"line\">    padding: 20px;</div><div class=\"line\">    text-align: left;</div><div class=\"line\">    font-size: 12px;</div><div class=\"line\">    line-height: 15px;</div><div class=\"line\">    white-space: pre-wrap;</div><div class=\"line\">    word-wrap: break-word;</div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div class=&quot;containor&quot;&gt;</div><div class=\"line\">    &lt;img class=&quot;logo&quot; src=$&#123;log_url&#125; /&gt;</div><div class=\"line\">    &lt;div class=&quot;title&quot;&gt;$ipa_name&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;version_history&quot;&gt;$&#123;shortVersion&#125;(bundle:$&#123;bundleVersion&#125;)&lt;/div&gt;</div><div class=\"line\">    &lt;div&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;update_time&quot;&gt;$&#123;nowTime&#125;&lt;/div&gt;</div><div class=\"line\">    &lt;a class=&quot;download&quot; href=&quot;$&#123;ios_install_url&#125;&quot;&gt;点击这里安装&lt;/a&gt;</div><div class=\"line\">    &lt;div class=&quot;log_title&quot;&gt;更新日志&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;log&quot;&gt; $&#123;git_log&#125; &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">#生成plist文件</div><div class=\"line\">cat &lt;&lt; EOF &gt; $&#123;scheme_name&#125;.plist</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</div><div class=\"line\">&lt;dict&gt;</div><div class=\"line\">   &lt;key&gt;items&lt;/key&gt;</div><div class=\"line\">   &lt;array&gt;</div><div class=\"line\">       &lt;dict&gt;</div><div class=\"line\">           &lt;key&gt;assets&lt;/key&gt;</div><div class=\"line\">           &lt;array&gt;</div><div class=\"line\">               &lt;dict&gt;</div><div class=\"line\">                   &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;software-package&lt;/string&gt;</div><div class=\"line\">                   &lt;key&gt;url&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;$&#123;ipa_download_url&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;/dict&gt;</div><div class=\"line\">               &lt;dict&gt;</div><div class=\"line\">                   &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;display-image&lt;/string&gt;</div><div class=\"line\">                   &lt;key&gt;needs-shine&lt;/key&gt;</div><div class=\"line\">                   &lt;true/&gt;</div><div class=\"line\">                   &lt;key&gt;url&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;http://git.oschina.net/logo.svg&lt;/string&gt;</div><div class=\"line\">               &lt;/dict&gt;</div><div class=\"line\">           &lt;dict&gt;</div><div class=\"line\">                   &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;full-size-image&lt;/string&gt;</div><div class=\"line\">                   &lt;key&gt;needs-shine&lt;/key&gt;</div><div class=\"line\">                   &lt;true/&gt;</div><div class=\"line\">                   &lt;key&gt;url&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;http://git.oschina.net/logo.svg&lt;/string&gt;</div><div class=\"line\">               &lt;/dict&gt;</div><div class=\"line\">           &lt;/array&gt;&lt;key&gt;metadata&lt;/key&gt;</div><div class=\"line\">           &lt;dict&gt;</div><div class=\"line\">               &lt;key&gt;bundle-identifier&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;bundleIdentifier&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;bundle-version&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;bundleVersion&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;software&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;subtitle&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;ipa_name&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;title&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;ipa_name&#125;&lt;/string&gt;</div><div class=\"line\">           &lt;/dict&gt;</div><div class=\"line\">       &lt;/dict&gt;</div><div class=\"line\">   &lt;/array&gt;</div><div class=\"line\">&lt;/dict&gt;</div><div class=\"line\">&lt;/plist&gt;</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">#fir i $scheme_name.ipa</div><div class=\"line\">cp $scheme_name.ipa $public_git_path</div><div class=\"line\">cp $scheme_name.plist $public_git_path</div><div class=\"line\">cp index.html $public_git_path</div><div class=\"line\"></div><div class=\"line\">cd $public_git_path</div><div class=\"line\">ls -l &gt; README.md</div><div class=\"line\">if [ ! -e &quot;./.git/&quot; ]; then</div><div class=\"line\">    echo &quot;*** OSC的git目录不完整，无法上传，请联系开发! ***&quot;</div><div class=\"line\">    exit -1</div><div class=\"line\">fi</div><div class=\"line\">echo &quot;commit and pushing ...&quot;</div><div class=\"line\">git add .</div><div class=\"line\">git commit -am $bundleVersion</div><div class=\"line\">git push -f origin master</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Jenkins自动构建脚本解决方案。</p>","more":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>  2017.1.13更新：<br>  好吧，其实有更加强悍的打包工具，虽然早有耳闻但是没弄。然后最近搭建了一下，这打包脚本也不用了，毕竟有成套工具嘛。嘿嘿<br>  不过最后上传osc的脚本还是很可以的。<br>  传送门：<a href=\"https://madordie.github.io/fastlane-note/#more\">Fastlane自动化笔记</a></p>\n<p>  2017.6.14更新:<br>  <a href=\"https://github.com/supermarin/xcpretty\">xcpretty</a>格式化输出日志。很溜，输出效果和 <code>fastlane</code> 差不多哈哈</p>\n<h2 id=\"Xcode8\"><a href=\"#Xcode8\" class=\"headerlink\" title=\"Xcode8\"></a>Xcode8</h2><p>  好悲催，Xcode8更新之后Jenkins打包失败了。。由于代码库中使用了swift3语法，故必须使用Xcode8。。</p>\n<p>  先来重点：可用脚本：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</div><div class=\"line\"></span></div><div class=\"line\"><span class=\"comment\">#   追上fir API token 自动上传</span></div><div class=\"line\"><span class=\"comment\">#   基于当前代码进行打包打包目录：MyProject/build/MyProject_ent.ipa</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> MyProject</div><div class=\"line\"></div><div class=\"line\">rm -rf ./build/*</div><div class=\"line\"></div><div class=\"line\">xcodebuild -archivePath <span class=\"string\">\"./build/xxx.xcarchive\"</span> -workspace MyProject.xcworkspace -sdk iphoneos -scheme <span class=\"string\">\"MyProject_ent\"</span> -configuration <span class=\"string\">\"Release Inhouse\"</span> archive</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"&lt;?xml version=\"</span>1.0<span class=\"string\">\" encoding=\"</span>UTF-8<span class=\"string\">\"?&gt;&lt;!DOCTYPE plist PUBLIC \"</span>-//Apple//DTD PLIST 1.0//EN<span class=\"string\">\" \"</span>http://www.apple.com/DTDs/PropertyList-1.0.dtd<span class=\"string\">\"&gt;&lt;plist version=\"</span>1.0<span class=\"string\">\"&gt;&lt;dict&gt;&lt;key&gt;method&lt;/key&gt;&lt;string&gt;enterprise&lt;/string&gt;&lt;key&gt;compileBitcode&lt;/key&gt;&lt;string&gt;YES&lt;/string&gt;&lt;/dict&gt;&lt;/plist&gt;\"</span> &gt; ./build/<span class=\"built_in\">export</span>OptionsPlist.plist</div><div class=\"line\"></div><div class=\"line\">xcodebuild -exportArchive -archivePath <span class=\"string\">\"./build/xxx.xcarchive\"</span> -exportPath <span class=\"string\">\"./build/\"</span> -exportOptionsPlist ./build/<span class=\"built_in\">export</span>OptionsPlist.plist</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> build/</div><div class=\"line\"></div><div class=\"line\">fir i ./MyProject_ent.ipa</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">    git <span class=\"built_in\">log</span> -10 &gt; git.log</div><div class=\"line\">    fir p ./MyProject_ent.ipa -T <span class=\"variable\">$1</span> -c git.log</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<p>  之前漏掉了一个错误：<code>The flag -exportFormat cannot be specified along with -exportOptionsPlist</code> 导致了最终包签名错误，而无法安装。</p>\n<p>  exportOptionsPlist参考的<a href=\"https://testerhome.com/topics/4619\">iOS 打包总结</a></p>\n<h2 id=\"手动上传\"><a href=\"#手动上传\" class=\"headerlink\" title=\"手动上传\"></a>手动上传</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\">#   追上fir API token 自动上传</div><div class=\"line\">#   基于当前代码进行打包打包目录：xxxx/build/xxxx_ent.ipa</div><div class=\"line\"></div><div class=\"line\">workspace_name=xxxx</div><div class=\"line\">scheme_name=xxxx_ent</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">cd $workspace_name</div><div class=\"line\"></div><div class=\"line\">rm -rf ./build/*</div><div class=\"line\"></div><div class=\"line\">xcodebuild -archivePath &quot;./build/xxx.xcarchive&quot; -workspace $workspace_name.xcworkspace -sdk iphoneos -scheme $scheme_name -configuration &quot;Release Inhouse&quot; archive</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">cat &lt;&lt; EOF &gt; ./build/exportOptionsPlist.plist</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</div><div class=\"line\">    &lt;dict&gt;</div><div class=\"line\">        &lt;key&gt;method&lt;/key&gt;</div><div class=\"line\">        &lt;string&gt;enterprise&lt;/string&gt;</div><div class=\"line\">        &lt;key&gt;compileBitcode&lt;/key&gt;</div><div class=\"line\">            &lt;false/&gt;</div><div class=\"line\">    &lt;/dict&gt;</div><div class=\"line\">&lt;/plist&gt;</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">xcodebuild -exportArchive -archivePath &quot;./build/xxx.xcarchive&quot; -exportOptionsPlist &quot;./build/exportOptionsPlist.plist&quot; -exportPath &quot;./build/&quot;</div><div class=\"line\"></div><div class=\"line\">cd build/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">git log -10 &gt; git.log</div><div class=\"line\"></div><div class=\"line\">#拷贝ipa到临时文件夹中</div><div class=\"line\">cp ./$scheme_name.ipa ./tmp.zip</div><div class=\"line\">#将ipa解压</div><div class=\"line\">unzip tmp.zip</div><div class=\"line\"></div><div class=\"line\">#app文件中Info.plist文件路径</div><div class=\"line\">app_infoplist_path=$(pwd)/Payload/*.app/Info.plist</div><div class=\"line\">#取bundleIdentifier</div><div class=\"line\">bundleIdentifier=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleIdentifier&quot; $&#123;app_infoplist_path&#125;)</div><div class=\"line\">#取build值</div><div class=\"line\">bundleVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleVersion&quot; $&#123;app_infoplist_path&#125;)</div><div class=\"line\">#显示名称</div><div class=\"line\">ipa_name=$workspace_name</div><div class=\"line\"></div><div class=\"line\">#ipa下载url</div><div class=\"line\">ipa_download_url=&quot;https://***/install_ipa/raw/master/xxxx_ent.ipa&quot;</div><div class=\"line\">#itms-services协议串</div><div class=\"line\">ios_install_url=&quot;itms-services://?action=download-manifest&amp;url=https://***/install_ipa/raw/master/xxxx_ent.plist&quot;</div><div class=\"line\"></div><div class=\"line\">#生成install.html文件</div><div class=\"line\"></div><div class=\"line\">cat &lt;&lt; EOF &gt; index.html</div><div class=\"line\">&lt;!DOCTYPE HTML&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</div><div class=\"line\">    &lt;title&gt;安装&lt;/title&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;br&gt;</div><div class=\"line\">    &lt;br&gt;</div><div class=\"line\">    &lt;br&gt;</div><div class=\"line\">    &lt;br&gt;</div><div class=\"line\">    &lt;p align=center&gt;</div><div class=\"line\">        &lt;font size=&quot;8&quot;&gt;</div><div class=\"line\">            &lt;a href=&quot;$&#123;ios_install_url&#125;&quot;&gt;点击这里安装&lt;/a&gt;</div><div class=\"line\">        &lt;/font&gt;</div><div class=\"line\">    &lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">#生成plist文件</div><div class=\"line\">cat &lt;&lt; EOF &gt; $&#123;workspace_name&#125;.plist</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</div><div class=\"line\">&lt;dict&gt;</div><div class=\"line\">   &lt;key&gt;items&lt;/key&gt;</div><div class=\"line\">   &lt;array&gt;</div><div class=\"line\">       &lt;dict&gt;</div><div class=\"line\">           &lt;key&gt;assets&lt;/key&gt;</div><div class=\"line\">           &lt;array&gt;</div><div class=\"line\">               &lt;dict&gt;</div><div class=\"line\">                   &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;software-package&lt;/string&gt;</div><div class=\"line\">                   &lt;key&gt;url&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;$&#123;ipa_download_url&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;/dict&gt;</div><div class=\"line\">               &lt;dict&gt;</div><div class=\"line\">                   &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;display-image&lt;/string&gt;</div><div class=\"line\">                   &lt;key&gt;needs-shine&lt;/key&gt;</div><div class=\"line\">                   &lt;true/&gt;</div><div class=\"line\">                   &lt;key&gt;url&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;http://git.oschina.net/logo.svg&lt;/string&gt;</div><div class=\"line\">               &lt;/dict&gt;</div><div class=\"line\">           &lt;dict&gt;</div><div class=\"line\">                   &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;full-size-image&lt;/string&gt;</div><div class=\"line\">                   &lt;key&gt;needs-shine&lt;/key&gt;</div><div class=\"line\">                   &lt;true/&gt;</div><div class=\"line\">                   &lt;key&gt;url&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;http://git.oschina.net/logo.svg&lt;/string&gt;</div><div class=\"line\">               &lt;/dict&gt;</div><div class=\"line\">           &lt;/array&gt;&lt;key&gt;metadata&lt;/key&gt;</div><div class=\"line\">           &lt;dict&gt;</div><div class=\"line\">               &lt;key&gt;bundle-identifier&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;bundleIdentifier&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;bundle-version&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;bundleVersion&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;software&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;subtitle&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;ipa_name&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;title&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;ipa_name&#125;&lt;/string&gt;</div><div class=\"line\">           &lt;/dict&gt;</div><div class=\"line\">       &lt;/dict&gt;</div><div class=\"line\">   &lt;/array&gt;</div><div class=\"line\">&lt;/dict&gt;</div><div class=\"line\">&lt;/plist&gt;</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">fir i $scheme_name.ipa</div></pre></td></tr></table></figure>\n<h2 id=\"手动上传到OSC脚本\"><a href=\"#手动上传到OSC脚本\" class=\"headerlink\" title=\"手动上传到OSC脚本\"></a>手动上传到OSC脚本</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\">root_path=$(pwd)</div><div class=\"line\">workspace_name=Fangduoduo</div><div class=\"line\">scheme_name=XXX</div><div class=\"line\"></div><div class=\"line\"># 编译</div><div class=\"line\">cd $root_path</div><div class=\"line\">cd $workspace_name</div><div class=\"line\"></div><div class=\"line\">rm -rf ./build/*</div><div class=\"line\"></div><div class=\"line\">xcodebuild -archivePath ./build/$scheme_name.xcarchive -workspace $workspace_name.xcworkspace -sdk iphoneos -scheme $scheme_name -configuration &quot;Release Inhouse&quot; archive</div><div class=\"line\"></div><div class=\"line\">echo &quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt;&lt;key&gt;method&lt;/key&gt;&lt;string&gt;enterprise&lt;/string&gt;&lt;key&gt;compileBitcode&lt;/key&gt;&lt;false/&gt;&lt;/dict&gt;&lt;/plist&gt;&quot; &gt; ./build/exportOptionsPlist.plist</div><div class=\"line\"></div><div class=\"line\">xcodebuild -exportArchive -archivePath ./build/$scheme_name.xcarchive -exportOptionsPlist &quot;./build/exportOptionsPlist.plist&quot; -exportPath &quot;./build/&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">cd build/</div><div class=\"line\"></div><div class=\"line\">if [ ! -f $scheme_name.ipa ]; then</div><div class=\"line\">    echo &quot;*** 无法打包 ***&quot;</div><div class=\"line\">    exit -1</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">fir i ./$scheme_name.ipa</div><div class=\"line\"></div><div class=\"line\">git log -10 &gt; git.log</div><div class=\"line\">git_log=$(cat git.log)</div><div class=\"line\"># fir 上传</div><div class=\"line\">if [ -n &quot;$1&quot; ]; then</div><div class=\"line\">    fir p ./$scheme_name.ipa -T $1 -c git.log</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 校验HTML并上传</div><div class=\"line\"></div><div class=\"line\">public_git_path=$root_path/public_ipa_tmp/</div><div class=\"line\">public_git_root=&quot;install_ipa&quot;</div><div class=\"line\">public_git=&quot;https://***/install_ipa.git&quot;</div><div class=\"line\">#ipa下载url</div><div class=\"line\">ipa_download_url=&quot;https://***/install_ipa/raw/master/XXX.ipa&quot;</div><div class=\"line\">#itms-services协议串</div><div class=\"line\">ios_install_url=&quot;itms-services://?action=download-manifest&amp;url=https://***/install_ipa/raw/master/XXX.plist&quot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">cd $root_path/</div><div class=\"line\"># checkout path is OK</div><div class=\"line\">if [ ! -e $public_git_path ]; then</div><div class=\"line\">    mkdir $public_git_path</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ -n $public_git_path ]; then</div><div class=\"line\">    rm -rf $public_git_path</div><div class=\"line\">fi</div><div class=\"line\">mkdir $public_git_path</div><div class=\"line\">cd $public_git_path</div><div class=\"line\">git init</div><div class=\"line\">git remote add origin $public_git</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">cd $root_path/$workspace_name/build/</div><div class=\"line\"></div><div class=\"line\">#拷贝ipa到临时文件夹中</div><div class=\"line\">cp ./$scheme_name.ipa ./tmp.zip</div><div class=\"line\">rm -rf Payload</div><div class=\"line\">#将ipa解压</div><div class=\"line\">unzip tmp.zip</div><div class=\"line\"></div><div class=\"line\">#app文件中Info.plist文件路径</div><div class=\"line\">app_infoplist_path=$(pwd)/Payload/*.app/Info.plist</div><div class=\"line\">#取bundleIdentifier</div><div class=\"line\">bundleIdentifier=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleIdentifier&quot; $&#123;app_infoplist_path&#125;)</div><div class=\"line\">#取build值</div><div class=\"line\">bundleVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleVersion&quot; $&#123;app_infoplist_path&#125;)</div><div class=\"line\">#取shortVersionbuild值</div><div class=\"line\">shortVersion=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleShortVersionString&quot; $&#123;app_infoplist_path&#125;)</div><div class=\"line\">#显示名称</div><div class=\"line\">ipa_name=$(/usr/libexec/PlistBuddy -c &quot;print CFBundleDisplayName&quot; $&#123;app_infoplist_path&#125;)</div><div class=\"line\">nowTime=$(date +%Y-%m-%d\\ %H:%M)</div><div class=\"line\">log_url=&quot;https://madordie.github.io/uploads/avatar.png&quot;</div><div class=\"line\"></div><div class=\"line\">#生成install.html文件</div><div class=\"line\"></div><div class=\"line\">cat &lt;&lt; EOF &gt; index.html</div><div class=\"line\">&lt;!DOCTYPE HTML&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</div><div class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=0&quot;&gt;</div><div class=\"line\">&lt;title&gt;$&#123;ipa_name&#125;安装&lt;/title&gt;</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.containor &#123;</div><div class=\"line\">    position: relative;</div><div class=\"line\">    top: 0;</div><div class=\"line\">    left: 0;</div><div class=\"line\">    right: 0;</div><div class=\"line\">    margin: 0 auto;</div><div class=\"line\">    width: 100%;</div><div class=\"line\">    max-width: 640px;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">&#125;</div><div class=\"line\">.logo &#123;</div><div class=\"line\">    width: 120px;</div><div class=\"line\">    margin-top: 30px;</div><div class=\"line\">&#125;</div><div class=\"line\">.title,</div><div class=\"line\">.version_history,</div><div class=\"line\">.update_time &#123;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">    color: #999;</div><div class=\"line\">    font-size: 16px;</div><div class=\"line\">&#125;</div><div class=\"line\">.title &#123;</div><div class=\"line\">    margin-top: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\">.version_history,</div><div class=\"line\">.update_time &#123;</div><div class=\"line\">    margin-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">.download &#123;</div><div class=\"line\">    display: block;</div><div class=\"line\">    width: 150px;</div><div class=\"line\">    height: 30px;</div><div class=\"line\">    line-height: 30px;</div><div class=\"line\">    margin: 0 auto;</div><div class=\"line\">    margin-top: 20px;</div><div class=\"line\">    border: 1px solid #eee;</div><div class=\"line\">    border-radius: 20px;</div><div class=\"line\">    text-decoration: none;</div><div class=\"line\">    color: #999;</div><div class=\"line\">&#125;</div><div class=\"line\">.log_title &#123;</div><div class=\"line\">    margin-top: 20px;</div><div class=\"line\">    font-size: 18px;</div><div class=\"line\">    color: #333;</div><div class=\"line\">&#125;</div><div class=\"line\">.log &#123;</div><div class=\"line\">    color: #aaa;</div><div class=\"line\">    padding: 20px;</div><div class=\"line\">    text-align: left;</div><div class=\"line\">    font-size: 12px;</div><div class=\"line\">    line-height: 15px;</div><div class=\"line\">    white-space: pre-wrap;</div><div class=\"line\">    word-wrap: break-word;</div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div class=&quot;containor&quot;&gt;</div><div class=\"line\">    &lt;img class=&quot;logo&quot; src=$&#123;log_url&#125; /&gt;</div><div class=\"line\">    &lt;div class=&quot;title&quot;&gt;$ipa_name&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;version_history&quot;&gt;$&#123;shortVersion&#125;(bundle:$&#123;bundleVersion&#125;)&lt;/div&gt;</div><div class=\"line\">    &lt;div&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;update_time&quot;&gt;$&#123;nowTime&#125;&lt;/div&gt;</div><div class=\"line\">    &lt;a class=&quot;download&quot; href=&quot;$&#123;ios_install_url&#125;&quot;&gt;点击这里安装&lt;/a&gt;</div><div class=\"line\">    &lt;div class=&quot;log_title&quot;&gt;更新日志&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;log&quot;&gt; $&#123;git_log&#125; &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">#生成plist文件</div><div class=\"line\">cat &lt;&lt; EOF &gt; $&#123;scheme_name&#125;.plist</div><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class=\"line\">&lt;plist version=&quot;1.0&quot;&gt;</div><div class=\"line\">&lt;dict&gt;</div><div class=\"line\">   &lt;key&gt;items&lt;/key&gt;</div><div class=\"line\">   &lt;array&gt;</div><div class=\"line\">       &lt;dict&gt;</div><div class=\"line\">           &lt;key&gt;assets&lt;/key&gt;</div><div class=\"line\">           &lt;array&gt;</div><div class=\"line\">               &lt;dict&gt;</div><div class=\"line\">                   &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;software-package&lt;/string&gt;</div><div class=\"line\">                   &lt;key&gt;url&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;$&#123;ipa_download_url&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;/dict&gt;</div><div class=\"line\">               &lt;dict&gt;</div><div class=\"line\">                   &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;display-image&lt;/string&gt;</div><div class=\"line\">                   &lt;key&gt;needs-shine&lt;/key&gt;</div><div class=\"line\">                   &lt;true/&gt;</div><div class=\"line\">                   &lt;key&gt;url&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;http://git.oschina.net/logo.svg&lt;/string&gt;</div><div class=\"line\">               &lt;/dict&gt;</div><div class=\"line\">           &lt;dict&gt;</div><div class=\"line\">                   &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;full-size-image&lt;/string&gt;</div><div class=\"line\">                   &lt;key&gt;needs-shine&lt;/key&gt;</div><div class=\"line\">                   &lt;true/&gt;</div><div class=\"line\">                   &lt;key&gt;url&lt;/key&gt;</div><div class=\"line\">                   &lt;string&gt;http://git.oschina.net/logo.svg&lt;/string&gt;</div><div class=\"line\">               &lt;/dict&gt;</div><div class=\"line\">           &lt;/array&gt;&lt;key&gt;metadata&lt;/key&gt;</div><div class=\"line\">           &lt;dict&gt;</div><div class=\"line\">               &lt;key&gt;bundle-identifier&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;bundleIdentifier&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;bundle-version&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;bundleVersion&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;kind&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;software&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;subtitle&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;ipa_name&#125;&lt;/string&gt;</div><div class=\"line\">               &lt;key&gt;title&lt;/key&gt;</div><div class=\"line\">               &lt;string&gt;$&#123;ipa_name&#125;&lt;/string&gt;</div><div class=\"line\">           &lt;/dict&gt;</div><div class=\"line\">       &lt;/dict&gt;</div><div class=\"line\">   &lt;/array&gt;</div><div class=\"line\">&lt;/dict&gt;</div><div class=\"line\">&lt;/plist&gt;</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">#fir i $scheme_name.ipa</div><div class=\"line\">cp $scheme_name.ipa $public_git_path</div><div class=\"line\">cp $scheme_name.plist $public_git_path</div><div class=\"line\">cp index.html $public_git_path</div><div class=\"line\"></div><div class=\"line\">cd $public_git_path</div><div class=\"line\">ls -l &gt; README.md</div><div class=\"line\">if [ ! -e &quot;./.git/&quot; ]; then</div><div class=\"line\">    echo &quot;*** OSC的git目录不完整，无法上传，请联系开发! ***&quot;</div><div class=\"line\">    exit -1</div><div class=\"line\">fi</div><div class=\"line\">echo &quot;commit and pushing ...&quot;</div><div class=\"line\">git add .</div><div class=\"line\">git commit -am $bundleVersion</div><div class=\"line\">git push -f origin master</div></pre></td></tr></table></figure>"},{"title":"DEBUG - swift中取出通知中的frame","date":"2016-11-30T16:00:00.000Z","_content":"\nswift中获取OC存储的Frame两种获取方案。\n\n<!--more-->\n\n# Swift下在Notification.userInfo取Frame，Debug和Release情况下还不一样。。\n  -->更新于2016.12.1\n  \n  __ Version 8.1 (8B62) __\n\n  ``` swift\n    func keyboardShow(sender: Notification) {\n        var endFrame = CGRect.zero        \n        if let frame = sender.userInfo?[UIKeyboardFrameEndUserInfoKey] as? CGRect {\n            endFrame = frame\n            //  *** Debug是可以通过的。但是Release无法通过。\n            NSLog(\"<<<INFO>>>: as CGRect\")\n        } else if let value = sender.userInfo?[UIKeyboardFrameEndUserInfoKey] as? NSValue {\n            endFrame = value.cgRectValue\n            //  *** Release会取出NSValue\n            NSLog(\"<<<INFO>>>: as NSValue\")\n        }\n\n  ```\n\n  由于Release无法调试，所以费了不少劲。首先Swift中的字典已经可以存放值类型，其本身也是值类型。所以我首先选择了第一种写法`let frame = sender.userInfo?[UIKeyboardFrameEndUserInfoKey] as? CGRect`, 但是Release情况下却发生解包失败的情况。所以采用OC的传统写法`let value = sender.userInfo?[UIKeyboardFrameEndUserInfoKey] as? NSValue`。就能解析出来。但是总感觉OC的方法不够swift😂。。。\n\n  有同事直接强制转换为NSValue是没有问题的，于是乎试了一下，发现直接校验NSValue就可以。但是swift中感觉不应该有这个转换了，毕竟本身就可以存储CGRect..\n\n  猜测原因：目前阶段Swift的字典和OC的字典数据结构还并未完全一致。。\n\n","source":"_posts/debug-swift-notifa-frame.md","raw":"---\ntitle: DEBUG - swift中取出通知中的frame\ndate: 2016-12-01\ntags: \ncategories:\n    - DEBUG\n---\n\nswift中获取OC存储的Frame两种获取方案。\n\n<!--more-->\n\n# Swift下在Notification.userInfo取Frame，Debug和Release情况下还不一样。。\n  -->更新于2016.12.1\n  \n  __ Version 8.1 (8B62) __\n\n  ``` swift\n    func keyboardShow(sender: Notification) {\n        var endFrame = CGRect.zero        \n        if let frame = sender.userInfo?[UIKeyboardFrameEndUserInfoKey] as? CGRect {\n            endFrame = frame\n            //  *** Debug是可以通过的。但是Release无法通过。\n            NSLog(\"<<<INFO>>>: as CGRect\")\n        } else if let value = sender.userInfo?[UIKeyboardFrameEndUserInfoKey] as? NSValue {\n            endFrame = value.cgRectValue\n            //  *** Release会取出NSValue\n            NSLog(\"<<<INFO>>>: as NSValue\")\n        }\n\n  ```\n\n  由于Release无法调试，所以费了不少劲。首先Swift中的字典已经可以存放值类型，其本身也是值类型。所以我首先选择了第一种写法`let frame = sender.userInfo?[UIKeyboardFrameEndUserInfoKey] as? CGRect`, 但是Release情况下却发生解包失败的情况。所以采用OC的传统写法`let value = sender.userInfo?[UIKeyboardFrameEndUserInfoKey] as? NSValue`。就能解析出来。但是总感觉OC的方法不够swift😂。。。\n\n  有同事直接强制转换为NSValue是没有问题的，于是乎试了一下，发现直接校验NSValue就可以。但是swift中感觉不应该有这个转换了，毕竟本身就可以存储CGRect..\n\n  猜测原因：目前阶段Swift的字典和OC的字典数据结构还并未完全一致。。\n\n","slug":"debug-swift-notifa-frame","published":1,"updated":"2016-12-30T11:18:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfnc000ikhuvhwq8n1h4","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>swift中获取OC存储的Frame两种获取方案。</p>\n<a id=\"more\"></a>\n<h1 id=\"Swift下在Notification-userInfo取Frame，Debug和Release情况下还不一样。。\"><a href=\"#Swift下在Notification-userInfo取Frame，Debug和Release情况下还不一样。。\" class=\"headerlink\" title=\"Swift下在Notification.userInfo取Frame，Debug和Release情况下还不一样。。\"></a>Swift下在Notification.userInfo取Frame，Debug和Release情况下还不一样。。</h1><p>  –&gt;更新于2016.12.1</p>\n<p>  <strong> Version 8.1 (8B62) </strong></p>\n  <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">keyboardShow</span><span class=\"params\">(sender: Notification)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> endFrame = <span class=\"type\">CGRect</span>.zero        </div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> frame = sender.userInfo?[<span class=\"type\">UIKeyboardFrameEndUserInfoKey</span>] <span class=\"keyword\">as</span>? <span class=\"type\">CGRect</span> &#123;</div><div class=\"line\">        endFrame = frame</div><div class=\"line\">        <span class=\"comment\">//  *** Debug是可以通过的。但是Release无法通过。</span></div><div class=\"line\">        <span class=\"type\">NSLog</span>(<span class=\"string\">\"&lt;&lt;&lt;INFO&gt;&gt;&gt;: as CGRect\"</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> value = sender.userInfo?[<span class=\"type\">UIKeyboardFrameEndUserInfoKey</span>] <span class=\"keyword\">as</span>? <span class=\"type\">NSValue</span> &#123;</div><div class=\"line\">        endFrame = value.cgRectValue</div><div class=\"line\">        <span class=\"comment\">//  *** Release会取出NSValue</span></div><div class=\"line\">        <span class=\"type\">NSLog</span>(<span class=\"string\">\"&lt;&lt;&lt;INFO&gt;&gt;&gt;: as NSValue\"</span>)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>  由于Release无法调试，所以费了不少劲。首先Swift中的字典已经可以存放值类型，其本身也是值类型。所以我首先选择了第一种写法<code>let frame = sender.userInfo?[UIKeyboardFrameEndUserInfoKey] as? CGRect</code>, 但是Release情况下却发生解包失败的情况。所以采用OC的传统写法<code>let value = sender.userInfo?[UIKeyboardFrameEndUserInfoKey] as? NSValue</code>。就能解析出来。但是总感觉OC的方法不够swift😂。。。</p>\n<p>  有同事直接强制转换为NSValue是没有问题的，于是乎试了一下，发现直接校验NSValue就可以。但是swift中感觉不应该有这个转换了，毕竟本身就可以存储CGRect..</p>\n<p>  猜测原因：目前阶段Swift的字典和OC的字典数据结构还并未完全一致。。</p>\n","site":{"data":{}},"excerpt":"<p>swift中获取OC存储的Frame两种获取方案。</p>","more":"<h1 id=\"Swift下在Notification-userInfo取Frame，Debug和Release情况下还不一样。。\"><a href=\"#Swift下在Notification-userInfo取Frame，Debug和Release情况下还不一样。。\" class=\"headerlink\" title=\"Swift下在Notification.userInfo取Frame，Debug和Release情况下还不一样。。\"></a>Swift下在Notification.userInfo取Frame，Debug和Release情况下还不一样。。</h1><p>  –&gt;更新于2016.12.1</p>\n<p>  <strong> Version 8.1 (8B62) </strong></p>\n  <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">keyboardShow</span><span class=\"params\">(sender: Notification)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> endFrame = <span class=\"type\">CGRect</span>.zero        </div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> frame = sender.userInfo?[<span class=\"type\">UIKeyboardFrameEndUserInfoKey</span>] <span class=\"keyword\">as</span>? <span class=\"type\">CGRect</span> &#123;</div><div class=\"line\">        endFrame = frame</div><div class=\"line\">        <span class=\"comment\">//  *** Debug是可以通过的。但是Release无法通过。</span></div><div class=\"line\">        <span class=\"type\">NSLog</span>(<span class=\"string\">\"&lt;&lt;&lt;INFO&gt;&gt;&gt;: as CGRect\"</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> value = sender.userInfo?[<span class=\"type\">UIKeyboardFrameEndUserInfoKey</span>] <span class=\"keyword\">as</span>? <span class=\"type\">NSValue</span> &#123;</div><div class=\"line\">        endFrame = value.cgRectValue</div><div class=\"line\">        <span class=\"comment\">//  *** Release会取出NSValue</span></div><div class=\"line\">        <span class=\"type\">NSLog</span>(<span class=\"string\">\"&lt;&lt;&lt;INFO&gt;&gt;&gt;: as NSValue\"</span>)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>  由于Release无法调试，所以费了不少劲。首先Swift中的字典已经可以存放值类型，其本身也是值类型。所以我首先选择了第一种写法<code>let frame = sender.userInfo?[UIKeyboardFrameEndUserInfoKey] as? CGRect</code>, 但是Release情况下却发生解包失败的情况。所以采用OC的传统写法<code>let value = sender.userInfo?[UIKeyboardFrameEndUserInfoKey] as? NSValue</code>。就能解析出来。但是总感觉OC的方法不够swift😂。。。</p>\n<p>  有同事直接强制转换为NSValue是没有问题的，于是乎试了一下，发现直接校验NSValue就可以。但是swift中感觉不应该有这个转换了，毕竟本身就可以存储CGRect..</p>\n<p>  猜测原因：目前阶段Swift的字典和OC的字典数据结构还并未完全一致。。</p>"},{"title":"DEBUG - Xcode8解析.crash","date":"2016-11-14T04:43:22.000Z","_content":"\n5步解析`.crash`文件\n\n<!--more-->\n\n# Xcode8中解析.crash文件\n  \n  1. 导出`x.crash`文件，放置在`目录A`下\n  2. 复制`工程名.app.dSYM`到`目录A`\n  3. 配置环境变量，运行`export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer`\n  4. 拷贝脚本文件，运行`cp /Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash 目录A`\n  5. 到`目录A`解析，运行`./symbolicatecrash x.crash 工程名.app.dSYM > 自定义输出结果文件名`\n","source":"_posts/debug-xcode8-analysis-crash-file.md","raw":"---\ntitle: DEBUG - Xcode8解析.crash\ndate: 2016-11-14 12:43:22\ntags: \ncategories:\n    - DEBUG\n---\n\n5步解析`.crash`文件\n\n<!--more-->\n\n# Xcode8中解析.crash文件\n  \n  1. 导出`x.crash`文件，放置在`目录A`下\n  2. 复制`工程名.app.dSYM`到`目录A`\n  3. 配置环境变量，运行`export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer`\n  4. 拷贝脚本文件，运行`cp /Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash 目录A`\n  5. 到`目录A`解析，运行`./symbolicatecrash x.crash 工程名.app.dSYM > 自定义输出结果文件名`\n","slug":"debug-xcode8-analysis-crash-file","published":1,"updated":"2016-12-30T11:18:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfne000kkhuv8l8ohams","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>5步解析<code>.crash</code>文件</p>\n<a id=\"more\"></a>\n<h1 id=\"Xcode8中解析-crash文件\"><a href=\"#Xcode8中解析-crash文件\" class=\"headerlink\" title=\"Xcode8中解析.crash文件\"></a>Xcode8中解析.crash文件</h1><ol>\n<li>导出<code>x.crash</code>文件，放置在<code>目录A</code>下</li>\n<li>复制<code>工程名.app.dSYM</code>到<code>目录A</code></li>\n<li>配置环境变量，运行<code>export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer</code></li>\n<li>拷贝脚本文件，运行<code>cp /Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash 目录A</code></li>\n<li>到<code>目录A</code>解析，运行<code>./symbolicatecrash x.crash 工程名.app.dSYM &gt; 自定义输出结果文件名</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>5步解析<code>.crash</code>文件</p>","more":"<h1 id=\"Xcode8中解析-crash文件\"><a href=\"#Xcode8中解析-crash文件\" class=\"headerlink\" title=\"Xcode8中解析.crash文件\"></a>Xcode8中解析.crash文件</h1><ol>\n<li>导出<code>x.crash</code>文件，放置在<code>目录A</code>下</li>\n<li>复制<code>工程名.app.dSYM</code>到<code>目录A</code></li>\n<li>配置环境变量，运行<code>export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer</code></li>\n<li>拷贝脚本文件，运行<code>cp /Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash 目录A</code></li>\n<li>到<code>目录A</code>解析，运行<code>./symbolicatecrash x.crash 工程名.app.dSYM &gt; 自定义输出结果文件名</code></li>\n</ol>"},{"title":"优雅的使用SwiftLint","date":"2016-12-23T03:59:57.000Z","_content":"\n接入了SwiftLine，修改2000+的warning、300+error的一点笔记心得。\n\n<!--more-->\n\n# SwiftLint\n\n  > ## [SwiftLint](https://github.com/realm/SwiftLint)\n  > A tool to enforce Swift style and conventions, loosely based on GitHub's Swift Style Guide.\n  SwiftLint hooks into Clang and SourceKit to use the AST representation of your source files for more accurate results.\n  SwiftLint 是一个用于强制检查 Swift 代码风格和规定的一个工具，基本上以 GitHub's Swift 代码风格指南为基础。\n  SwiftLint Hook 了 Clang 和 SourceKit 从而能够使用 AST 来表示源代码文件的更多精确结果。\n  \n## 对原有代码格式化\n\n### 自动格式化\n  ```bash\n  swiftlint autocorrect\n  ```\n\n### TrailingWhitespaceRule\n\n#### 现象\n  > xxx.swift:34: warning: Trailing Whitespace Violation: Lines should not have trailing whitespace. (trailing_whitespace)\n  \n  规则实现：[TrailingWhitespaceRule.swift](https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/TrailingWhitespaceRule.swift)\n  \n#### 原因\n  Xcode中的\"空白行\"。其实并不空白，含有空的字符。最明显的表现为git提交的时候会有明显的黄色警告。\n\n#### 解决办法\n  Xcode中有选项可以直接控制，具体路径为\n  ```\n  Xcode \n  -> Preferences\n  -> Text Editing\n  -> While editing\n  -> [V] Including whitespace-only lines\n  ```\n  \n### ColonRule\n\n#### 现象\n  > xxx.swift:13:71: warning: Colon Violation: Colons should be next to the identifier when specifying a type. (colon)\n  \n#### 原因\n  变量方法的 `: ` 的右边应该有一个空格才能识别出来，且左侧不能留空格。所以写代码的时候随手写上还是比较好的。。\n  栗子：\n  ```\n  //  OK:\n  var responseData: [String : Any]? = nil // 返回结果，请求之前为nil\n\n  //  warning: 第一个':'处左侧有空格\n  var responseData : [String : Any]? = nil // 返回结果，请求之前为nil\n  \n  //  warning: 第一个':'处右侧无空格\n  var responseData:[String : Any]? = nil // 返回结果，请求之前为nil\n  ```\n\n#### 解决办法\n  规范书写\n  \n### LineLengthRule\n\n#### 现象\n  > xxx.swift:90: warning: Line Length Violation: Line should be 100 characters or less: currently 101 characters (line_length)\n  \n#### 原因\n  行数超了呗。。\n  \n#### 解决办法\n  - 方法名字写的简单易懂\n  \n### ControlStatementRule\n\n#### 现象\n  > xxx.swift:169:21: warning: Control Statement Violation: if,for,while,do statements shouldn't wrap their conditionals in parentheses. (control_statement)\n  \n  规则实现[ControlStatementRule](https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/ControlStatementRule.swift)\n  \n#### 原因\n  swift中`if,for,while,do` 语句不应该用`()`\n\n\n### UnusedClosureParameterRule\n\n#### 现象\n  > xxx.swift:103:62: warning: Unused Closure Parameter Violation: Unused parameter \"response\" in a closure should be replaced with _. (unused_closure_parameter)\n\n  规则实现[UnusedClosureParameterRule](https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/UnusedClosureParameterRule.swift)\n\n#### 原因\n  `response` 没有使用，建议替换为 `_`。\n  \n### CyclomaticComplexityRule\n\n#### 现象\n  > xxx.swift:69:5: warning: Cyclomatic Complexity Violation: Function should have complexity 10 or less: currently complexity equals 14 (cyclomatic_complexity)\n  \n  规则实现[CyclomaticComplexityRule](https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/CyclomaticComplexityRule.swift)\n\n#### 原因\n  😂，他说你这函数写的太复杂了。看实现是说不能有过多的`if {}`\n  \n\n### OpeningBraceRule\n\n#### 现象\n  > xxx.swift:221:34: warning: Opening Brace Spacing Violation: Opening braces should be preceded by a single space and on the same line as the declaration. (opening_brace)\n  \n  规则实现[OpeningBraceRule](https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/OpeningBraceRule.swift)\n  \n#### 解决\n  `{}`的前面要有空格隔开\n","source":"_posts/elegant-to-use-swiftlint.md","raw":"---\ntitle: 优雅的使用SwiftLint\ndate: 2016-12-23 11:59:57\ntags:\ncategories:\n    - 工具\n---\n\n接入了SwiftLine，修改2000+的warning、300+error的一点笔记心得。\n\n<!--more-->\n\n# SwiftLint\n\n  > ## [SwiftLint](https://github.com/realm/SwiftLint)\n  > A tool to enforce Swift style and conventions, loosely based on GitHub's Swift Style Guide.\n  SwiftLint hooks into Clang and SourceKit to use the AST representation of your source files for more accurate results.\n  SwiftLint 是一个用于强制检查 Swift 代码风格和规定的一个工具，基本上以 GitHub's Swift 代码风格指南为基础。\n  SwiftLint Hook 了 Clang 和 SourceKit 从而能够使用 AST 来表示源代码文件的更多精确结果。\n  \n## 对原有代码格式化\n\n### 自动格式化\n  ```bash\n  swiftlint autocorrect\n  ```\n\n### TrailingWhitespaceRule\n\n#### 现象\n  > xxx.swift:34: warning: Trailing Whitespace Violation: Lines should not have trailing whitespace. (trailing_whitespace)\n  \n  规则实现：[TrailingWhitespaceRule.swift](https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/TrailingWhitespaceRule.swift)\n  \n#### 原因\n  Xcode中的\"空白行\"。其实并不空白，含有空的字符。最明显的表现为git提交的时候会有明显的黄色警告。\n\n#### 解决办法\n  Xcode中有选项可以直接控制，具体路径为\n  ```\n  Xcode \n  -> Preferences\n  -> Text Editing\n  -> While editing\n  -> [V] Including whitespace-only lines\n  ```\n  \n### ColonRule\n\n#### 现象\n  > xxx.swift:13:71: warning: Colon Violation: Colons should be next to the identifier when specifying a type. (colon)\n  \n#### 原因\n  变量方法的 `: ` 的右边应该有一个空格才能识别出来，且左侧不能留空格。所以写代码的时候随手写上还是比较好的。。\n  栗子：\n  ```\n  //  OK:\n  var responseData: [String : Any]? = nil // 返回结果，请求之前为nil\n\n  //  warning: 第一个':'处左侧有空格\n  var responseData : [String : Any]? = nil // 返回结果，请求之前为nil\n  \n  //  warning: 第一个':'处右侧无空格\n  var responseData:[String : Any]? = nil // 返回结果，请求之前为nil\n  ```\n\n#### 解决办法\n  规范书写\n  \n### LineLengthRule\n\n#### 现象\n  > xxx.swift:90: warning: Line Length Violation: Line should be 100 characters or less: currently 101 characters (line_length)\n  \n#### 原因\n  行数超了呗。。\n  \n#### 解决办法\n  - 方法名字写的简单易懂\n  \n### ControlStatementRule\n\n#### 现象\n  > xxx.swift:169:21: warning: Control Statement Violation: if,for,while,do statements shouldn't wrap their conditionals in parentheses. (control_statement)\n  \n  规则实现[ControlStatementRule](https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/ControlStatementRule.swift)\n  \n#### 原因\n  swift中`if,for,while,do` 语句不应该用`()`\n\n\n### UnusedClosureParameterRule\n\n#### 现象\n  > xxx.swift:103:62: warning: Unused Closure Parameter Violation: Unused parameter \"response\" in a closure should be replaced with _. (unused_closure_parameter)\n\n  规则实现[UnusedClosureParameterRule](https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/UnusedClosureParameterRule.swift)\n\n#### 原因\n  `response` 没有使用，建议替换为 `_`。\n  \n### CyclomaticComplexityRule\n\n#### 现象\n  > xxx.swift:69:5: warning: Cyclomatic Complexity Violation: Function should have complexity 10 or less: currently complexity equals 14 (cyclomatic_complexity)\n  \n  规则实现[CyclomaticComplexityRule](https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/CyclomaticComplexityRule.swift)\n\n#### 原因\n  😂，他说你这函数写的太复杂了。看实现是说不能有过多的`if {}`\n  \n\n### OpeningBraceRule\n\n#### 现象\n  > xxx.swift:221:34: warning: Opening Brace Spacing Violation: Opening braces should be preceded by a single space and on the same line as the declaration. (opening_brace)\n  \n  规则实现[OpeningBraceRule](https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/OpeningBraceRule.swift)\n  \n#### 解决\n  `{}`的前面要有空格隔开\n","slug":"elegant-to-use-swiftlint","published":1,"updated":"2017-05-16T04:28:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfni000nkhuv0o6mf2qi","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>接入了SwiftLine，修改2000+的warning、300+error的一点笔记心得。</p>\n<a id=\"more\"></a>\n<h1 id=\"SwiftLint\"><a href=\"#SwiftLint\" class=\"headerlink\" title=\"SwiftLint\"></a>SwiftLint</h1><blockquote>\n<h2 id=\"SwiftLint-1\"><a href=\"#SwiftLint-1\" class=\"headerlink\" title=\"SwiftLint\"></a><a href=\"https://github.com/realm/SwiftLint\" target=\"_blank\" rel=\"external\">SwiftLint</a></h2><p>A tool to enforce Swift style and conventions, loosely based on GitHub’s Swift Style Guide.<br>  SwiftLint hooks into Clang and SourceKit to use the AST representation of your source files for more accurate results.<br>  SwiftLint 是一个用于强制检查 Swift 代码风格和规定的一个工具，基本上以 GitHub’s Swift 代码风格指南为基础。<br>  SwiftLint Hook 了 Clang 和 SourceKit 从而能够使用 AST 来表示源代码文件的更多精确结果。</p>\n</blockquote>\n<h2 id=\"对原有代码格式化\"><a href=\"#对原有代码格式化\" class=\"headerlink\" title=\"对原有代码格式化\"></a>对原有代码格式化</h2><h3 id=\"自动格式化\"><a href=\"#自动格式化\" class=\"headerlink\" title=\"自动格式化\"></a>自动格式化</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">swiftlint autocorrect</div></pre></td></tr></table></figure>\n<h3 id=\"TrailingWhitespaceRule\"><a href=\"#TrailingWhitespaceRule\" class=\"headerlink\" title=\"TrailingWhitespaceRule\"></a>TrailingWhitespaceRule</h3><h4 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:34: warning: Trailing Whitespace Violation: Lines should not have trailing whitespace. (trailing_whitespace)</p>\n</blockquote>\n<p>  规则实现：<a href=\"https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/TrailingWhitespaceRule.swift\" target=\"_blank\" rel=\"external\">TrailingWhitespaceRule.swift</a></p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>  Xcode中的”空白行”。其实并不空白，含有空的字符。最明显的表现为git提交的时候会有明显的黄色警告。</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>  Xcode中有选项可以直接控制，具体路径为<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Xcode </div><div class=\"line\">-&gt; Preferences</div><div class=\"line\">-&gt; Text Editing</div><div class=\"line\">-&gt; While editing</div><div class=\"line\">-&gt; [V] Including whitespace-only lines</div></pre></td></tr></table></figure></p>\n<h3 id=\"ColonRule\"><a href=\"#ColonRule\" class=\"headerlink\" title=\"ColonRule\"></a>ColonRule</h3><h4 id=\"现象-1\"><a href=\"#现象-1\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:13:71: warning: Colon Violation: Colons should be next to the identifier when specifying a type. (colon)</p>\n</blockquote>\n<h4 id=\"原因-1\"><a href=\"#原因-1\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>  变量方法的 <code>:</code> 的右边应该有一个空格才能识别出来，且左侧不能留空格。所以写代码的时候随手写上还是比较好的。。<br>  栗子：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//  OK:</div><div class=\"line\">var responseData: [String : Any]? = nil // 返回结果，请求之前为nil</div><div class=\"line\"></div><div class=\"line\">//  warning: 第一个&apos;:&apos;处左侧有空格</div><div class=\"line\">var responseData : [String : Any]? = nil // 返回结果，请求之前为nil</div><div class=\"line\"></div><div class=\"line\">//  warning: 第一个&apos;:&apos;处右侧无空格</div><div class=\"line\">var responseData:[String : Any]? = nil // 返回结果，请求之前为nil</div></pre></td></tr></table></figure></p>\n<h4 id=\"解决办法-1\"><a href=\"#解决办法-1\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>  规范书写</p>\n<h3 id=\"LineLengthRule\"><a href=\"#LineLengthRule\" class=\"headerlink\" title=\"LineLengthRule\"></a>LineLengthRule</h3><h4 id=\"现象-2\"><a href=\"#现象-2\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:90: warning: Line Length Violation: Line should be 100 characters or less: currently 101 characters (line_length)</p>\n</blockquote>\n<h4 id=\"原因-2\"><a href=\"#原因-2\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>  行数超了呗。。</p>\n<h4 id=\"解决办法-2\"><a href=\"#解决办法-2\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><ul>\n<li>方法名字写的简单易懂</li>\n</ul>\n<h3 id=\"ControlStatementRule\"><a href=\"#ControlStatementRule\" class=\"headerlink\" title=\"ControlStatementRule\"></a>ControlStatementRule</h3><h4 id=\"现象-3\"><a href=\"#现象-3\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:169:21: warning: Control Statement Violation: if,for,while,do statements shouldn’t wrap their conditionals in parentheses. (control_statement)</p>\n</blockquote>\n<p>  规则实现<a href=\"https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/ControlStatementRule.swift\" target=\"_blank\" rel=\"external\">ControlStatementRule</a></p>\n<h4 id=\"原因-3\"><a href=\"#原因-3\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>  swift中<code>if,for,while,do</code> 语句不应该用<code>()</code></p>\n<h3 id=\"UnusedClosureParameterRule\"><a href=\"#UnusedClosureParameterRule\" class=\"headerlink\" title=\"UnusedClosureParameterRule\"></a>UnusedClosureParameterRule</h3><h4 id=\"现象-4\"><a href=\"#现象-4\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:103:62: warning: Unused Closure Parameter Violation: Unused parameter “response” in a closure should be replaced with _. (unused_closure_parameter)</p>\n</blockquote>\n<p>  规则实现<a href=\"https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/UnusedClosureParameterRule.swift\" target=\"_blank\" rel=\"external\">UnusedClosureParameterRule</a></p>\n<h4 id=\"原因-4\"><a href=\"#原因-4\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>  <code>response</code> 没有使用，建议替换为 <code>_</code>。</p>\n<h3 id=\"CyclomaticComplexityRule\"><a href=\"#CyclomaticComplexityRule\" class=\"headerlink\" title=\"CyclomaticComplexityRule\"></a>CyclomaticComplexityRule</h3><h4 id=\"现象-5\"><a href=\"#现象-5\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:69:5: warning: Cyclomatic Complexity Violation: Function should have complexity 10 or less: currently complexity equals 14 (cyclomatic_complexity)</p>\n</blockquote>\n<p>  规则实现<a href=\"https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/CyclomaticComplexityRule.swift\" target=\"_blank\" rel=\"external\">CyclomaticComplexityRule</a></p>\n<h4 id=\"原因-5\"><a href=\"#原因-5\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>  😂，他说你这函数写的太复杂了。看实现是说不能有过多的<code>if {}</code></p>\n<h3 id=\"OpeningBraceRule\"><a href=\"#OpeningBraceRule\" class=\"headerlink\" title=\"OpeningBraceRule\"></a>OpeningBraceRule</h3><h4 id=\"现象-6\"><a href=\"#现象-6\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:221:34: warning: Opening Brace Spacing Violation: Opening braces should be preceded by a single space and on the same line as the declaration. (opening_brace)</p>\n</blockquote>\n<p>  规则实现<a href=\"https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/OpeningBraceRule.swift\" target=\"_blank\" rel=\"external\">OpeningBraceRule</a></p>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>  <code>{}</code>的前面要有空格隔开</p>\n","site":{"data":{}},"excerpt":"<p>接入了SwiftLine，修改2000+的warning、300+error的一点笔记心得。</p>","more":"<h1 id=\"SwiftLint\"><a href=\"#SwiftLint\" class=\"headerlink\" title=\"SwiftLint\"></a>SwiftLint</h1><blockquote>\n<h2 id=\"SwiftLint-1\"><a href=\"#SwiftLint-1\" class=\"headerlink\" title=\"SwiftLint\"></a><a href=\"https://github.com/realm/SwiftLint\">SwiftLint</a></h2><p>A tool to enforce Swift style and conventions, loosely based on GitHub’s Swift Style Guide.<br>  SwiftLint hooks into Clang and SourceKit to use the AST representation of your source files for more accurate results.<br>  SwiftLint 是一个用于强制检查 Swift 代码风格和规定的一个工具，基本上以 GitHub’s Swift 代码风格指南为基础。<br>  SwiftLint Hook 了 Clang 和 SourceKit 从而能够使用 AST 来表示源代码文件的更多精确结果。</p>\n</blockquote>\n<h2 id=\"对原有代码格式化\"><a href=\"#对原有代码格式化\" class=\"headerlink\" title=\"对原有代码格式化\"></a>对原有代码格式化</h2><h3 id=\"自动格式化\"><a href=\"#自动格式化\" class=\"headerlink\" title=\"自动格式化\"></a>自动格式化</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">swiftlint autocorrect</div></pre></td></tr></table></figure>\n<h3 id=\"TrailingWhitespaceRule\"><a href=\"#TrailingWhitespaceRule\" class=\"headerlink\" title=\"TrailingWhitespaceRule\"></a>TrailingWhitespaceRule</h3><h4 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:34: warning: Trailing Whitespace Violation: Lines should not have trailing whitespace. (trailing_whitespace)</p>\n</blockquote>\n<p>  规则实现：<a href=\"https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/TrailingWhitespaceRule.swift\">TrailingWhitespaceRule.swift</a></p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>  Xcode中的”空白行”。其实并不空白，含有空的字符。最明显的表现为git提交的时候会有明显的黄色警告。</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>  Xcode中有选项可以直接控制，具体路径为<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Xcode </div><div class=\"line\">-&gt; Preferences</div><div class=\"line\">-&gt; Text Editing</div><div class=\"line\">-&gt; While editing</div><div class=\"line\">-&gt; [V] Including whitespace-only lines</div></pre></td></tr></table></figure></p>\n<h3 id=\"ColonRule\"><a href=\"#ColonRule\" class=\"headerlink\" title=\"ColonRule\"></a>ColonRule</h3><h4 id=\"现象-1\"><a href=\"#现象-1\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:13:71: warning: Colon Violation: Colons should be next to the identifier when specifying a type. (colon)</p>\n</blockquote>\n<h4 id=\"原因-1\"><a href=\"#原因-1\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>  变量方法的 <code>:</code> 的右边应该有一个空格才能识别出来，且左侧不能留空格。所以写代码的时候随手写上还是比较好的。。<br>  栗子：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//  OK:</div><div class=\"line\">var responseData: [String : Any]? = nil // 返回结果，请求之前为nil</div><div class=\"line\"></div><div class=\"line\">//  warning: 第一个&apos;:&apos;处左侧有空格</div><div class=\"line\">var responseData : [String : Any]? = nil // 返回结果，请求之前为nil</div><div class=\"line\"></div><div class=\"line\">//  warning: 第一个&apos;:&apos;处右侧无空格</div><div class=\"line\">var responseData:[String : Any]? = nil // 返回结果，请求之前为nil</div></pre></td></tr></table></figure></p>\n<h4 id=\"解决办法-1\"><a href=\"#解决办法-1\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>  规范书写</p>\n<h3 id=\"LineLengthRule\"><a href=\"#LineLengthRule\" class=\"headerlink\" title=\"LineLengthRule\"></a>LineLengthRule</h3><h4 id=\"现象-2\"><a href=\"#现象-2\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:90: warning: Line Length Violation: Line should be 100 characters or less: currently 101 characters (line_length)</p>\n</blockquote>\n<h4 id=\"原因-2\"><a href=\"#原因-2\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>  行数超了呗。。</p>\n<h4 id=\"解决办法-2\"><a href=\"#解决办法-2\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><ul>\n<li>方法名字写的简单易懂</li>\n</ul>\n<h3 id=\"ControlStatementRule\"><a href=\"#ControlStatementRule\" class=\"headerlink\" title=\"ControlStatementRule\"></a>ControlStatementRule</h3><h4 id=\"现象-3\"><a href=\"#现象-3\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:169:21: warning: Control Statement Violation: if,for,while,do statements shouldn’t wrap their conditionals in parentheses. (control_statement)</p>\n</blockquote>\n<p>  规则实现<a href=\"https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/ControlStatementRule.swift\">ControlStatementRule</a></p>\n<h4 id=\"原因-3\"><a href=\"#原因-3\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>  swift中<code>if,for,while,do</code> 语句不应该用<code>()</code></p>\n<h3 id=\"UnusedClosureParameterRule\"><a href=\"#UnusedClosureParameterRule\" class=\"headerlink\" title=\"UnusedClosureParameterRule\"></a>UnusedClosureParameterRule</h3><h4 id=\"现象-4\"><a href=\"#现象-4\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:103:62: warning: Unused Closure Parameter Violation: Unused parameter “response” in a closure should be replaced with _. (unused_closure_parameter)</p>\n</blockquote>\n<p>  规则实现<a href=\"https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/UnusedClosureParameterRule.swift\">UnusedClosureParameterRule</a></p>\n<h4 id=\"原因-4\"><a href=\"#原因-4\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>  <code>response</code> 没有使用，建议替换为 <code>_</code>。</p>\n<h3 id=\"CyclomaticComplexityRule\"><a href=\"#CyclomaticComplexityRule\" class=\"headerlink\" title=\"CyclomaticComplexityRule\"></a>CyclomaticComplexityRule</h3><h4 id=\"现象-5\"><a href=\"#现象-5\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:69:5: warning: Cyclomatic Complexity Violation: Function should have complexity 10 or less: currently complexity equals 14 (cyclomatic_complexity)</p>\n</blockquote>\n<p>  规则实现<a href=\"https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/CyclomaticComplexityRule.swift\">CyclomaticComplexityRule</a></p>\n<h4 id=\"原因-5\"><a href=\"#原因-5\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>  😂，他说你这函数写的太复杂了。看实现是说不能有过多的<code>if {}</code></p>\n<h3 id=\"OpeningBraceRule\"><a href=\"#OpeningBraceRule\" class=\"headerlink\" title=\"OpeningBraceRule\"></a>OpeningBraceRule</h3><h4 id=\"现象-6\"><a href=\"#现象-6\" class=\"headerlink\" title=\"现象\"></a>现象</h4><blockquote>\n<p>xxx.swift:221:34: warning: Opening Brace Spacing Violation: Opening braces should be preceded by a single space and on the same line as the declaration. (opening_brace)</p>\n</blockquote>\n<p>  规则实现<a href=\"https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/OpeningBraceRule.swift\">OpeningBraceRule</a></p>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>  <code>{}</code>的前面要有空格隔开</p>"},{"title":"DEBUG - UIView.h#190","date":"2016-10-11T04:43:22.000Z","_content":"\nCRASH:\n`void UIViewReportBrokenSuperviewChain(UIView *__strong, UIView *__strong, BOOL)()`\n\n<!--more-->\n\n# UIView.m:190 - UIViewReportBrokenSuperviewChain\n\n## 异常信息：\n  ```\n  *** Assertion failure in void UIViewReportBrokenSuperviewChain(UIView *__strong, UIView *__strong, BOOL)(), /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit/UIKit-3599.6.1/UIView.m:190\n  invalid mode 'kCFRunLoopCommonModes' provided to CFRunLoopRunSpecific - break on _CFRunLoopError_RunCalledWithInvalidMode to debug. This message will only appear once per execution.\n  libc++abi.dylib: terminate_handler unexpectedly threw an exception\n  ```\n\n## 异常分析\n  APP crash在\n  ```\n  [keyWindow addSubview:weakSelf];\n  ```\n  [错误堆栈信息](#错误堆栈)。\n\n\n  但是真正造成crash的代码为：\n\n  ```\n  [self.layer insertSublayer:xxxView.layer atIndex:0];\n  ```\n  \n  \n  解决方案：\n  ```\n  [self layoutIfNeeded];\n  [self.layer insertSublayer:xxxView.layer atIndex:0];\n  ```\n  \n  原因分析：\n  下面这个说的很在理\n  > http://stackoverflow.com/questions/39565424/swift-uiviewreportbrokensuperviewchain-cause-by-layer-manipulation\n  >\n  > I had this issue with a library when moving over to Xcode 8 (Material-Controls-For-iOS - MDTextField). I found that the problem was coming from where the layer of one view (which had no superview) was being added to another.\n  >\n  > It looks like this may be the case for yourself also - your toolbar being created has not been added to a superview first. The fix I used was to add the view as a subview of the view that the layer was being added to, so in your case adding the toolbar as a subview of myModelView should stop the error.\n  \n\n## 碰到该问题的还有\n  - [Google出来的一个，但是并未看到相关回复。。。](http://technology.ezeenow.com/Posts/119474/Unity_Prime31_prompt_for_photo_is_crashing_on_iOS_10_and_XCode_8)\n  - [IOS10上崩溃错误“View has lost track of its superview, most (并未找到原贴)](http://www.th7.cn/Program/IOS/201609/975582.shtml)\n  - [stackoverflow(这个分析的很到位)](http://stackoverflow.com/questions/39565424/swift-uiviewreportbrokensuperviewchain-cause-by-layer-manipulation)\n\n## <a name=\"错误堆栈\">错误堆栈 <脱敏></a>\n\n  ```\n  *** Assertion failure in void UIViewReportBrokenSuperviewChain(UIView *__strong, UIView *__strong, BOOL)(), /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit/UIKit-3599.6.1/UIView.m:190\n  invalid mode 'kCFRunLoopCommonModes' provided to CFRunLoopRunSpecific - break on _CFRunLoopError_RunCalledWithInvalidMode to debug. This message will only appear once per execution.\n  libc++abi.dylib: terminate_handler unexpectedly threw an exception\n\n  (lldb) bt\n  * thread #1: tid = 0x87c18, 0x000000018238c524 libobjc.A.dylib`objc_exception_throw, queue = 'com.apple.main-thread', stop reason = breakpoint 1.2\n      frame #0: 0x000000018238c524 libobjc.A.dylib`objc_exception_throw\n      frame #1: 0x0000000183954094 CoreFoundation`+[NSException raise:format:arguments:] + 104\n      frame #2: 0x00000001843de898 Foundation`-[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:] + 88\n      frame #3: 0x0000000189a7cf9c UIKit`UIViewReportBrokenSuperviewChain + 472\n      frame #4: 0x0000000189a7d658 UIKit`_UIViewTopDownSubtreeTraversal + 1496\n      frame #5: 0x000000018a0f3390 UIKit`-[UIView(UIConstraintBasedLayout_EngineDelegate) _invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel] + 232\n      frame #6: 0x00000001843832ac Foundation`-[NSISEngine tryToAddConstraintWithMarker:expression:integralizationAdjustment:mutuallyExclusiveConstraints:] + 920\n      frame #7: 0x0000000184382dcc Foundation`-[NSLayoutConstraint _addLoweredExpression:toEngine:integralizationAdjustment:lastLoweredConstantWasRounded:mutuallyExclusiveConstraints:] + 284\n      frame #8: 0x00000001843809e0 Foundation`-[NSLayoutConstraint _addToEngine:integralizationAdjustment:mutuallyExclusiveConstraints:] + 272\n      frame #9: 0x000000018989cfdc UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 396\n      frame #10: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168\n      frame #11: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564\n      frame #12: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224\n      frame #13: 0x000000018989cf14 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 196\n      frame #14: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168\n      frame #15: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564\n      frame #16: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224\n      frame #17: 0x000000018989cf14 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 196\n      frame #18: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168\n      frame #19: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564\n      frame #20: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224\n      frame #21: 0x000000018989cf14 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 196\n      frame #22: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168\n      frame #23: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564\n      frame #24: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224\n      frame #25: 0x00000001898a4bb0 UIKit`-[UIWindow(UIConstraintBasedLayout) _switchToLayoutEngine:] + 72\n      frame #26: 0x00000001898a4b04 UIKit`-[UIWindow(UIConstraintBasedLayout) _initializeLayoutEngine] + 256\n      frame #27: 0x00000001898a4910 UIKit`-[UIView(UIConstraintBasedLayout) _layoutEngine_windowDidChange] + 132\n      frame #28: 0x00000001897996dc UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 200\n      frame #29: 0x0000000189798d90 UIKit`__45-[UIView(Hierarchy) _postMovedFromSuperview:]_block_invoke + 156\n      frame #30: 0x0000000189798be8 UIKit`-[UIView(Hierarchy) _postMovedFromSuperview:] + 792\n      frame #31: 0x00000001897a4ad0 UIKit`-[UIView(Internal) _addSubview:positioned:relativeTo:] + 1788\n      frame #32: 0x00000001897a43bc UIKit`-[UIView(Hierarchy) addSubview:] + 828\n    * frame #33: 0x00000001004f78ec Project_ent`__31-[EsfCommentReportView show]_block_invoke((null)=<unavailable>) + 228 at EsfCommentReportView.m:293\n      frame #34: 0x00000001897d2b88 UIKit`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + 660\n      frame #35: 0x00000001897d28e8 UIKit`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:animations:] + 56\n      frame #36: 0x00000001004f77a0 Project_ent`-[EsfCommentReportView show](self=0x000000015fe32020, _cmd=\"show\") + 492 at EsfCommentReportView.m:291\n      frame #37: 0x0000000100858a04 Project_ent`__53-[BuyerAdviserProfileViewController reportAction:]_block_invoke((null)=<unavailable>) + 308 at BuyerAdviserProfileViewController.m:174\n      frame #38: 0x00000001003f93e4 Project_ent`+[MyLoginViewController ifShouldLoginFromViewController:sourceType:afterCheckOrLogin:cancelLogin:](self=MyLoginViewController, _cmd=\"ifShouldLoginFromViewController:sourceType:afterCheckOrLogin:cancelLogin:\", viewController=0x000000015fd2e320, sourceType=2, afterCheckOrLogin=0x00000001008588d0, cancelLogin=(null)) + 236 at MyLoginViewController.m:123\n      frame #39: 0x00000001003f92b0 Project_ent`+[MyLoginViewController ifShouldLoginFromViewController:afterCheckOrLogin:cancelLogin:](self=MyLoginViewController, _cmd=\"ifShouldLoginFromViewController:afterCheckOrLogin:cancelLogin:\", viewController=0x000000015fd2e320, afterCheckOrLogin=0x00000001008588d0, cancelLogin=(null)) + 156 at MyLoginViewController.m:114\n      frame #40: 0x00000001003f9124 Project_ent`+[MyLoginViewController ifShouldLoginFromViewController:afterCheckOrLogin:](self=MyLoginViewController, _cmd=\"ifShouldLoginFromViewController:afterCheckOrLogin:\", viewController=0x000000015fd2e320, afterCheckOrLogin=0x00000001008588d0) + 120 at MyLoginViewController.m:104\n      frame #41: 0x0000000100858870 Project_ent`-[BuyerAdviserProfileViewController reportAction:](self=0x000000015fd2e320, _cmd=\"reportAction:\", button=0x000000015fe26650) + 452 at BuyerAdviserProfileViewController.m:156\n      frame #42: 0x00000001897d27b0 UIKit`-[UIApplication sendAction:to:from:forEvent:] + 96\n      frame #43: 0x00000001897d2730 UIKit`-[UIControl sendAction:to:forEvent:] + 80\n      frame #44: 0x00000001897bcbe4 UIKit`-[UIControl _sendActionsForEvents:withEvent:] + 452\n      frame #45: 0x00000001897d201c UIKit`-[UIControl touchesEnded:withEvent:] + 584\n      frame #46: 0x00000001897d1b44 UIKit`-[UIWindow _sendTouchesForEvent:] + 2484\n      frame #47: 0x00000001897ccd8c UIKit`-[UIWindow sendEvent:] + 2988\n      frame #48: 0x000000018979d858 UIKit`-[UIApplication sendEvent:] + 340\n      frame #49: 0x0000000189f8acb8 UIKit`__dispatchPreprocessedEventFromEventQueue + 2736\n      frame #50: 0x0000000189f84720 UIKit`__handleEventQueue + 784\n      frame #51: 0x0000000183902278 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 24\n      frame #52: 0x0000000183901bc0 CoreFoundation`__CFRunLoopDoSources0 + 524\n      frame #53: 0x00000001838ff7c0 CoreFoundation`__CFRunLoopRun + 804\n      frame #54: 0x000000018382e048 CoreFoundation`CFRunLoopRunSpecific + 444\n      frame #55: 0x00000001852b1198 GraphicsServices`GSEventRunModal + 180\n      frame #56: 0x0000000189808628 UIKit`-[UIApplication _run] + 684\n      frame #57: 0x0000000189803360 UIKit`UIApplicationMain + 208\n      frame #58: 0x0000000100a3db78 Project_ent`main + 460 at main.swift:24\n      frame #59: 0x00000001828105b8 libdyld.dylib`start + 4\n  (lldb) \n  ```","source":"_posts/debug-uiview-m-190.md","raw":"---\ntitle: DEBUG - UIView.h#190\ndate: 2016-10-11 12:43:22\ntags: \ncategories:\n    - DEBUG\n\n---\n\nCRASH:\n`void UIViewReportBrokenSuperviewChain(UIView *__strong, UIView *__strong, BOOL)()`\n\n<!--more-->\n\n# UIView.m:190 - UIViewReportBrokenSuperviewChain\n\n## 异常信息：\n  ```\n  *** Assertion failure in void UIViewReportBrokenSuperviewChain(UIView *__strong, UIView *__strong, BOOL)(), /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit/UIKit-3599.6.1/UIView.m:190\n  invalid mode 'kCFRunLoopCommonModes' provided to CFRunLoopRunSpecific - break on _CFRunLoopError_RunCalledWithInvalidMode to debug. This message will only appear once per execution.\n  libc++abi.dylib: terminate_handler unexpectedly threw an exception\n  ```\n\n## 异常分析\n  APP crash在\n  ```\n  [keyWindow addSubview:weakSelf];\n  ```\n  [错误堆栈信息](#错误堆栈)。\n\n\n  但是真正造成crash的代码为：\n\n  ```\n  [self.layer insertSublayer:xxxView.layer atIndex:0];\n  ```\n  \n  \n  解决方案：\n  ```\n  [self layoutIfNeeded];\n  [self.layer insertSublayer:xxxView.layer atIndex:0];\n  ```\n  \n  原因分析：\n  下面这个说的很在理\n  > http://stackoverflow.com/questions/39565424/swift-uiviewreportbrokensuperviewchain-cause-by-layer-manipulation\n  >\n  > I had this issue with a library when moving over to Xcode 8 (Material-Controls-For-iOS - MDTextField). I found that the problem was coming from where the layer of one view (which had no superview) was being added to another.\n  >\n  > It looks like this may be the case for yourself also - your toolbar being created has not been added to a superview first. The fix I used was to add the view as a subview of the view that the layer was being added to, so in your case adding the toolbar as a subview of myModelView should stop the error.\n  \n\n## 碰到该问题的还有\n  - [Google出来的一个，但是并未看到相关回复。。。](http://technology.ezeenow.com/Posts/119474/Unity_Prime31_prompt_for_photo_is_crashing_on_iOS_10_and_XCode_8)\n  - [IOS10上崩溃错误“View has lost track of its superview, most (并未找到原贴)](http://www.th7.cn/Program/IOS/201609/975582.shtml)\n  - [stackoverflow(这个分析的很到位)](http://stackoverflow.com/questions/39565424/swift-uiviewreportbrokensuperviewchain-cause-by-layer-manipulation)\n\n## <a name=\"错误堆栈\">错误堆栈 <脱敏></a>\n\n  ```\n  *** Assertion failure in void UIViewReportBrokenSuperviewChain(UIView *__strong, UIView *__strong, BOOL)(), /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit/UIKit-3599.6.1/UIView.m:190\n  invalid mode 'kCFRunLoopCommonModes' provided to CFRunLoopRunSpecific - break on _CFRunLoopError_RunCalledWithInvalidMode to debug. This message will only appear once per execution.\n  libc++abi.dylib: terminate_handler unexpectedly threw an exception\n\n  (lldb) bt\n  * thread #1: tid = 0x87c18, 0x000000018238c524 libobjc.A.dylib`objc_exception_throw, queue = 'com.apple.main-thread', stop reason = breakpoint 1.2\n      frame #0: 0x000000018238c524 libobjc.A.dylib`objc_exception_throw\n      frame #1: 0x0000000183954094 CoreFoundation`+[NSException raise:format:arguments:] + 104\n      frame #2: 0x00000001843de898 Foundation`-[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:] + 88\n      frame #3: 0x0000000189a7cf9c UIKit`UIViewReportBrokenSuperviewChain + 472\n      frame #4: 0x0000000189a7d658 UIKit`_UIViewTopDownSubtreeTraversal + 1496\n      frame #5: 0x000000018a0f3390 UIKit`-[UIView(UIConstraintBasedLayout_EngineDelegate) _invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel] + 232\n      frame #6: 0x00000001843832ac Foundation`-[NSISEngine tryToAddConstraintWithMarker:expression:integralizationAdjustment:mutuallyExclusiveConstraints:] + 920\n      frame #7: 0x0000000184382dcc Foundation`-[NSLayoutConstraint _addLoweredExpression:toEngine:integralizationAdjustment:lastLoweredConstantWasRounded:mutuallyExclusiveConstraints:] + 284\n      frame #8: 0x00000001843809e0 Foundation`-[NSLayoutConstraint _addToEngine:integralizationAdjustment:mutuallyExclusiveConstraints:] + 272\n      frame #9: 0x000000018989cfdc UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 396\n      frame #10: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168\n      frame #11: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564\n      frame #12: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224\n      frame #13: 0x000000018989cf14 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 196\n      frame #14: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168\n      frame #15: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564\n      frame #16: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224\n      frame #17: 0x000000018989cf14 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 196\n      frame #18: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168\n      frame #19: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564\n      frame #20: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224\n      frame #21: 0x000000018989cf14 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 196\n      frame #22: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168\n      frame #23: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564\n      frame #24: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224\n      frame #25: 0x00000001898a4bb0 UIKit`-[UIWindow(UIConstraintBasedLayout) _switchToLayoutEngine:] + 72\n      frame #26: 0x00000001898a4b04 UIKit`-[UIWindow(UIConstraintBasedLayout) _initializeLayoutEngine] + 256\n      frame #27: 0x00000001898a4910 UIKit`-[UIView(UIConstraintBasedLayout) _layoutEngine_windowDidChange] + 132\n      frame #28: 0x00000001897996dc UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 200\n      frame #29: 0x0000000189798d90 UIKit`__45-[UIView(Hierarchy) _postMovedFromSuperview:]_block_invoke + 156\n      frame #30: 0x0000000189798be8 UIKit`-[UIView(Hierarchy) _postMovedFromSuperview:] + 792\n      frame #31: 0x00000001897a4ad0 UIKit`-[UIView(Internal) _addSubview:positioned:relativeTo:] + 1788\n      frame #32: 0x00000001897a43bc UIKit`-[UIView(Hierarchy) addSubview:] + 828\n    * frame #33: 0x00000001004f78ec Project_ent`__31-[EsfCommentReportView show]_block_invoke((null)=<unavailable>) + 228 at EsfCommentReportView.m:293\n      frame #34: 0x00000001897d2b88 UIKit`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + 660\n      frame #35: 0x00000001897d28e8 UIKit`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:animations:] + 56\n      frame #36: 0x00000001004f77a0 Project_ent`-[EsfCommentReportView show](self=0x000000015fe32020, _cmd=\"show\") + 492 at EsfCommentReportView.m:291\n      frame #37: 0x0000000100858a04 Project_ent`__53-[BuyerAdviserProfileViewController reportAction:]_block_invoke((null)=<unavailable>) + 308 at BuyerAdviserProfileViewController.m:174\n      frame #38: 0x00000001003f93e4 Project_ent`+[MyLoginViewController ifShouldLoginFromViewController:sourceType:afterCheckOrLogin:cancelLogin:](self=MyLoginViewController, _cmd=\"ifShouldLoginFromViewController:sourceType:afterCheckOrLogin:cancelLogin:\", viewController=0x000000015fd2e320, sourceType=2, afterCheckOrLogin=0x00000001008588d0, cancelLogin=(null)) + 236 at MyLoginViewController.m:123\n      frame #39: 0x00000001003f92b0 Project_ent`+[MyLoginViewController ifShouldLoginFromViewController:afterCheckOrLogin:cancelLogin:](self=MyLoginViewController, _cmd=\"ifShouldLoginFromViewController:afterCheckOrLogin:cancelLogin:\", viewController=0x000000015fd2e320, afterCheckOrLogin=0x00000001008588d0, cancelLogin=(null)) + 156 at MyLoginViewController.m:114\n      frame #40: 0x00000001003f9124 Project_ent`+[MyLoginViewController ifShouldLoginFromViewController:afterCheckOrLogin:](self=MyLoginViewController, _cmd=\"ifShouldLoginFromViewController:afterCheckOrLogin:\", viewController=0x000000015fd2e320, afterCheckOrLogin=0x00000001008588d0) + 120 at MyLoginViewController.m:104\n      frame #41: 0x0000000100858870 Project_ent`-[BuyerAdviserProfileViewController reportAction:](self=0x000000015fd2e320, _cmd=\"reportAction:\", button=0x000000015fe26650) + 452 at BuyerAdviserProfileViewController.m:156\n      frame #42: 0x00000001897d27b0 UIKit`-[UIApplication sendAction:to:from:forEvent:] + 96\n      frame #43: 0x00000001897d2730 UIKit`-[UIControl sendAction:to:forEvent:] + 80\n      frame #44: 0x00000001897bcbe4 UIKit`-[UIControl _sendActionsForEvents:withEvent:] + 452\n      frame #45: 0x00000001897d201c UIKit`-[UIControl touchesEnded:withEvent:] + 584\n      frame #46: 0x00000001897d1b44 UIKit`-[UIWindow _sendTouchesForEvent:] + 2484\n      frame #47: 0x00000001897ccd8c UIKit`-[UIWindow sendEvent:] + 2988\n      frame #48: 0x000000018979d858 UIKit`-[UIApplication sendEvent:] + 340\n      frame #49: 0x0000000189f8acb8 UIKit`__dispatchPreprocessedEventFromEventQueue + 2736\n      frame #50: 0x0000000189f84720 UIKit`__handleEventQueue + 784\n      frame #51: 0x0000000183902278 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 24\n      frame #52: 0x0000000183901bc0 CoreFoundation`__CFRunLoopDoSources0 + 524\n      frame #53: 0x00000001838ff7c0 CoreFoundation`__CFRunLoopRun + 804\n      frame #54: 0x000000018382e048 CoreFoundation`CFRunLoopRunSpecific + 444\n      frame #55: 0x00000001852b1198 GraphicsServices`GSEventRunModal + 180\n      frame #56: 0x0000000189808628 UIKit`-[UIApplication _run] + 684\n      frame #57: 0x0000000189803360 UIKit`UIApplicationMain + 208\n      frame #58: 0x0000000100a3db78 Project_ent`main + 460 at main.swift:24\n      frame #59: 0x00000001828105b8 libdyld.dylib`start + 4\n  (lldb) \n  ```","slug":"debug-uiview-m-190","published":1,"updated":"2016-12-30T11:19:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfnk000okhuvsrx95r5w","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>CRASH:<br><code>void UIViewReportBrokenSuperviewChain(UIView *__strong, UIView *__strong, BOOL)()</code></p>\n<a id=\"more\"></a>\n<h1 id=\"UIView-m-190-UIViewReportBrokenSuperviewChain\"><a href=\"#UIView-m-190-UIViewReportBrokenSuperviewChain\" class=\"headerlink\" title=\"UIView.m:190 - UIViewReportBrokenSuperviewChain\"></a>UIView.m:190 - UIViewReportBrokenSuperviewChain</h1><h2 id=\"异常信息：\"><a href=\"#异常信息：\" class=\"headerlink\" title=\"异常信息：\"></a>异常信息：</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*** Assertion failure in void UIViewReportBrokenSuperviewChain(UIView *__strong, UIView *__strong, BOOL)(), /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit/UIKit-3599.6.1/UIView.m:190</div><div class=\"line\">invalid mode &apos;kCFRunLoopCommonModes&apos; provided to CFRunLoopRunSpecific - break on _CFRunLoopError_RunCalledWithInvalidMode to debug. This message will only appear once per execution.</div><div class=\"line\">libc++abi.dylib: terminate_handler unexpectedly threw an exception</div></pre></td></tr></table></figure>\n<h2 id=\"异常分析\"><a href=\"#异常分析\" class=\"headerlink\" title=\"异常分析\"></a>异常分析</h2><p>  APP crash在<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[keyWindow addSubview:weakSelf];</div></pre></td></tr></table></figure></p>\n<p>  <a href=\"#错误堆栈\">错误堆栈信息</a>。</p>\n<p>  但是真正造成crash的代码为：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[self.layer insertSublayer:xxxView.layer atIndex:0];</div></pre></td></tr></table></figure>\n<p>  解决方案：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[self layoutIfNeeded];</div><div class=\"line\">[self.layer insertSublayer:xxxView.layer atIndex:0];</div></pre></td></tr></table></figure></p>\n<p>  原因分析：<br>  下面这个说的很在理</p>\n<blockquote>\n<p><a href=\"http://stackoverflow.com/questions/39565424/swift-uiviewreportbrokensuperviewchain-cause-by-layer-manipulation\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/39565424/swift-uiviewreportbrokensuperviewchain-cause-by-layer-manipulation</a></p>\n<p>I had this issue with a library when moving over to Xcode 8 (Material-Controls-For-iOS - MDTextField). I found that the problem was coming from where the layer of one view (which had no superview) was being added to another.</p>\n<p>It looks like this may be the case for yourself also - your toolbar being created has not been added to a superview first. The fix I used was to add the view as a subview of the view that the layer was being added to, so in your case adding the toolbar as a subview of myModelView should stop the error.</p>\n</blockquote>\n<h2 id=\"碰到该问题的还有\"><a href=\"#碰到该问题的还有\" class=\"headerlink\" title=\"碰到该问题的还有\"></a>碰到该问题的还有</h2><ul>\n<li><a href=\"http://technology.ezeenow.com/Posts/119474/Unity_Prime31_prompt_for_photo_is_crashing_on_iOS_10_and_XCode_8\" target=\"_blank\" rel=\"external\">Google出来的一个，但是并未看到相关回复。。。</a></li>\n<li><a href=\"http://www.th7.cn/Program/IOS/201609/975582.shtml\" target=\"_blank\" rel=\"external\">IOS10上崩溃错误“View has lost track of its superview, most (并未找到原贴)</a></li>\n<li><a href=\"http://stackoverflow.com/questions/39565424/swift-uiviewreportbrokensuperviewchain-cause-by-layer-manipulation\" target=\"_blank\" rel=\"external\">stackoverflow(这个分析的很到位)</a></li>\n</ul>\n<h2 id=\"错误堆栈-lt-脱敏-gt\"><a href=\"#错误堆栈-lt-脱敏-gt\" class=\"headerlink\" title=\"错误堆栈 &lt;脱敏&gt;\"></a><a name=\"错误堆栈\">错误堆栈 &lt;脱敏&gt;</a></h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">*** Assertion failure in void UIViewReportBrokenSuperviewChain(UIView *__strong, UIView *__strong, BOOL)(), /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit/UIKit-3599.6.1/UIView.m:190</div><div class=\"line\">invalid mode &apos;kCFRunLoopCommonModes&apos; provided to CFRunLoopRunSpecific - break on _CFRunLoopError_RunCalledWithInvalidMode to debug. This message will only appear once per execution.</div><div class=\"line\">libc++abi.dylib: terminate_handler unexpectedly threw an exception</div><div class=\"line\"></div><div class=\"line\">(lldb) bt</div><div class=\"line\">* thread #1: tid = 0x87c18, 0x000000018238c524 libobjc.A.dylib`objc_exception_throw, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.2</div><div class=\"line\">    frame #0: 0x000000018238c524 libobjc.A.dylib`objc_exception_throw</div><div class=\"line\">    frame #1: 0x0000000183954094 CoreFoundation`+[NSException raise:format:arguments:] + 104</div><div class=\"line\">    frame #2: 0x00000001843de898 Foundation`-[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:] + 88</div><div class=\"line\">    frame #3: 0x0000000189a7cf9c UIKit`UIViewReportBrokenSuperviewChain + 472</div><div class=\"line\">    frame #4: 0x0000000189a7d658 UIKit`_UIViewTopDownSubtreeTraversal + 1496</div><div class=\"line\">    frame #5: 0x000000018a0f3390 UIKit`-[UIView(UIConstraintBasedLayout_EngineDelegate) _invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel] + 232</div><div class=\"line\">    frame #6: 0x00000001843832ac Foundation`-[NSISEngine tryToAddConstraintWithMarker:expression:integralizationAdjustment:mutuallyExclusiveConstraints:] + 920</div><div class=\"line\">    frame #7: 0x0000000184382dcc Foundation`-[NSLayoutConstraint _addLoweredExpression:toEngine:integralizationAdjustment:lastLoweredConstantWasRounded:mutuallyExclusiveConstraints:] + 284</div><div class=\"line\">    frame #8: 0x00000001843809e0 Foundation`-[NSLayoutConstraint _addToEngine:integralizationAdjustment:mutuallyExclusiveConstraints:] + 272</div><div class=\"line\">    frame #9: 0x000000018989cfdc UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 396</div><div class=\"line\">    frame #10: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168</div><div class=\"line\">    frame #11: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564</div><div class=\"line\">    frame #12: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224</div><div class=\"line\">    frame #13: 0x000000018989cf14 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 196</div><div class=\"line\">    frame #14: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168</div><div class=\"line\">    frame #15: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564</div><div class=\"line\">    frame #16: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224</div><div class=\"line\">    frame #17: 0x000000018989cf14 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 196</div><div class=\"line\">    frame #18: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168</div><div class=\"line\">    frame #19: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564</div><div class=\"line\">    frame #20: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224</div><div class=\"line\">    frame #21: 0x000000018989cf14 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 196</div><div class=\"line\">    frame #22: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168</div><div class=\"line\">    frame #23: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564</div><div class=\"line\">    frame #24: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224</div><div class=\"line\">    frame #25: 0x00000001898a4bb0 UIKit`-[UIWindow(UIConstraintBasedLayout) _switchToLayoutEngine:] + 72</div><div class=\"line\">    frame #26: 0x00000001898a4b04 UIKit`-[UIWindow(UIConstraintBasedLayout) _initializeLayoutEngine] + 256</div><div class=\"line\">    frame #27: 0x00000001898a4910 UIKit`-[UIView(UIConstraintBasedLayout) _layoutEngine_windowDidChange] + 132</div><div class=\"line\">    frame #28: 0x00000001897996dc UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 200</div><div class=\"line\">    frame #29: 0x0000000189798d90 UIKit`__45-[UIView(Hierarchy) _postMovedFromSuperview:]_block_invoke + 156</div><div class=\"line\">    frame #30: 0x0000000189798be8 UIKit`-[UIView(Hierarchy) _postMovedFromSuperview:] + 792</div><div class=\"line\">    frame #31: 0x00000001897a4ad0 UIKit`-[UIView(Internal) _addSubview:positioned:relativeTo:] + 1788</div><div class=\"line\">    frame #32: 0x00000001897a43bc UIKit`-[UIView(Hierarchy) addSubview:] + 828</div><div class=\"line\">  * frame #33: 0x00000001004f78ec Project_ent`__31-[EsfCommentReportView show]_block_invoke((null)=&lt;unavailable&gt;) + 228 at EsfCommentReportView.m:293</div><div class=\"line\">    frame #34: 0x00000001897d2b88 UIKit`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + 660</div><div class=\"line\">    frame #35: 0x00000001897d28e8 UIKit`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:animations:] + 56</div><div class=\"line\">    frame #36: 0x00000001004f77a0 Project_ent`-[EsfCommentReportView show](self=0x000000015fe32020, _cmd=&quot;show&quot;) + 492 at EsfCommentReportView.m:291</div><div class=\"line\">    frame #37: 0x0000000100858a04 Project_ent`__53-[BuyerAdviserProfileViewController reportAction:]_block_invoke((null)=&lt;unavailable&gt;) + 308 at BuyerAdviserProfileViewController.m:174</div><div class=\"line\">    frame #38: 0x00000001003f93e4 Project_ent`+[MyLoginViewController ifShouldLoginFromViewController:sourceType:afterCheckOrLogin:cancelLogin:](self=MyLoginViewController, _cmd=&quot;ifShouldLoginFromViewController:sourceType:afterCheckOrLogin:cancelLogin:&quot;, viewController=0x000000015fd2e320, sourceType=2, afterCheckOrLogin=0x00000001008588d0, cancelLogin=(null)) + 236 at MyLoginViewController.m:123</div><div class=\"line\">    frame #39: 0x00000001003f92b0 Project_ent`+[MyLoginViewController ifShouldLoginFromViewController:afterCheckOrLogin:cancelLogin:](self=MyLoginViewController, _cmd=&quot;ifShouldLoginFromViewController:afterCheckOrLogin:cancelLogin:&quot;, viewController=0x000000015fd2e320, afterCheckOrLogin=0x00000001008588d0, cancelLogin=(null)) + 156 at MyLoginViewController.m:114</div><div class=\"line\">    frame #40: 0x00000001003f9124 Project_ent`+[MyLoginViewController ifShouldLoginFromViewController:afterCheckOrLogin:](self=MyLoginViewController, _cmd=&quot;ifShouldLoginFromViewController:afterCheckOrLogin:&quot;, viewController=0x000000015fd2e320, afterCheckOrLogin=0x00000001008588d0) + 120 at MyLoginViewController.m:104</div><div class=\"line\">    frame #41: 0x0000000100858870 Project_ent`-[BuyerAdviserProfileViewController reportAction:](self=0x000000015fd2e320, _cmd=&quot;reportAction:&quot;, button=0x000000015fe26650) + 452 at BuyerAdviserProfileViewController.m:156</div><div class=\"line\">    frame #42: 0x00000001897d27b0 UIKit`-[UIApplication sendAction:to:from:forEvent:] + 96</div><div class=\"line\">    frame #43: 0x00000001897d2730 UIKit`-[UIControl sendAction:to:forEvent:] + 80</div><div class=\"line\">    frame #44: 0x00000001897bcbe4 UIKit`-[UIControl _sendActionsForEvents:withEvent:] + 452</div><div class=\"line\">    frame #45: 0x00000001897d201c UIKit`-[UIControl touchesEnded:withEvent:] + 584</div><div class=\"line\">    frame #46: 0x00000001897d1b44 UIKit`-[UIWindow _sendTouchesForEvent:] + 2484</div><div class=\"line\">    frame #47: 0x00000001897ccd8c UIKit`-[UIWindow sendEvent:] + 2988</div><div class=\"line\">    frame #48: 0x000000018979d858 UIKit`-[UIApplication sendEvent:] + 340</div><div class=\"line\">    frame #49: 0x0000000189f8acb8 UIKit`__dispatchPreprocessedEventFromEventQueue + 2736</div><div class=\"line\">    frame #50: 0x0000000189f84720 UIKit`__handleEventQueue + 784</div><div class=\"line\">    frame #51: 0x0000000183902278 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 24</div><div class=\"line\">    frame #52: 0x0000000183901bc0 CoreFoundation`__CFRunLoopDoSources0 + 524</div><div class=\"line\">    frame #53: 0x00000001838ff7c0 CoreFoundation`__CFRunLoopRun + 804</div><div class=\"line\">    frame #54: 0x000000018382e048 CoreFoundation`CFRunLoopRunSpecific + 444</div><div class=\"line\">    frame #55: 0x00000001852b1198 GraphicsServices`GSEventRunModal + 180</div><div class=\"line\">    frame #56: 0x0000000189808628 UIKit`-[UIApplication _run] + 684</div><div class=\"line\">    frame #57: 0x0000000189803360 UIKit`UIApplicationMain + 208</div><div class=\"line\">    frame #58: 0x0000000100a3db78 Project_ent`main + 460 at main.swift:24</div><div class=\"line\">    frame #59: 0x00000001828105b8 libdyld.dylib`start + 4</div><div class=\"line\">(lldb)</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>CRASH:<br><code>void UIViewReportBrokenSuperviewChain(UIView *__strong, UIView *__strong, BOOL)()</code></p>","more":"<h1 id=\"UIView-m-190-UIViewReportBrokenSuperviewChain\"><a href=\"#UIView-m-190-UIViewReportBrokenSuperviewChain\" class=\"headerlink\" title=\"UIView.m:190 - UIViewReportBrokenSuperviewChain\"></a>UIView.m:190 - UIViewReportBrokenSuperviewChain</h1><h2 id=\"异常信息：\"><a href=\"#异常信息：\" class=\"headerlink\" title=\"异常信息：\"></a>异常信息：</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*** Assertion failure in void UIViewReportBrokenSuperviewChain(UIView *__strong, UIView *__strong, BOOL)(), /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit/UIKit-3599.6.1/UIView.m:190</div><div class=\"line\">invalid mode &apos;kCFRunLoopCommonModes&apos; provided to CFRunLoopRunSpecific - break on _CFRunLoopError_RunCalledWithInvalidMode to debug. This message will only appear once per execution.</div><div class=\"line\">libc++abi.dylib: terminate_handler unexpectedly threw an exception</div></pre></td></tr></table></figure>\n<h2 id=\"异常分析\"><a href=\"#异常分析\" class=\"headerlink\" title=\"异常分析\"></a>异常分析</h2><p>  APP crash在<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[keyWindow addSubview:weakSelf];</div></pre></td></tr></table></figure></p>\n<p>  <a href=\"#错误堆栈\">错误堆栈信息</a>。</p>\n<p>  但是真正造成crash的代码为：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[self.layer insertSublayer:xxxView.layer atIndex:0];</div></pre></td></tr></table></figure>\n<p>  解决方案：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[self layoutIfNeeded];</div><div class=\"line\">[self.layer insertSublayer:xxxView.layer atIndex:0];</div></pre></td></tr></table></figure></p>\n<p>  原因分析：<br>  下面这个说的很在理</p>\n<blockquote>\n<p><a href=\"http://stackoverflow.com/questions/39565424/swift-uiviewreportbrokensuperviewchain-cause-by-layer-manipulation\">http://stackoverflow.com/questions/39565424/swift-uiviewreportbrokensuperviewchain-cause-by-layer-manipulation</a></p>\n<p>I had this issue with a library when moving over to Xcode 8 (Material-Controls-For-iOS - MDTextField). I found that the problem was coming from where the layer of one view (which had no superview) was being added to another.</p>\n<p>It looks like this may be the case for yourself also - your toolbar being created has not been added to a superview first. The fix I used was to add the view as a subview of the view that the layer was being added to, so in your case adding the toolbar as a subview of myModelView should stop the error.</p>\n</blockquote>\n<h2 id=\"碰到该问题的还有\"><a href=\"#碰到该问题的还有\" class=\"headerlink\" title=\"碰到该问题的还有\"></a>碰到该问题的还有</h2><ul>\n<li><a href=\"http://technology.ezeenow.com/Posts/119474/Unity_Prime31_prompt_for_photo_is_crashing_on_iOS_10_and_XCode_8\">Google出来的一个，但是并未看到相关回复。。。</a></li>\n<li><a href=\"http://www.th7.cn/Program/IOS/201609/975582.shtml\">IOS10上崩溃错误“View has lost track of its superview, most (并未找到原贴)</a></li>\n<li><a href=\"http://stackoverflow.com/questions/39565424/swift-uiviewreportbrokensuperviewchain-cause-by-layer-manipulation\">stackoverflow(这个分析的很到位)</a></li>\n</ul>\n<h2 id=\"错误堆栈-lt-脱敏-gt\"><a href=\"#错误堆栈-lt-脱敏-gt\" class=\"headerlink\" title=\"错误堆栈 &lt;脱敏&gt;\"></a><a name=\"错误堆栈\">错误堆栈 &lt;脱敏&gt;</a></h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">*** Assertion failure in void UIViewReportBrokenSuperviewChain(UIView *__strong, UIView *__strong, BOOL)(), /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit/UIKit-3599.6.1/UIView.m:190</div><div class=\"line\">invalid mode &apos;kCFRunLoopCommonModes&apos; provided to CFRunLoopRunSpecific - break on _CFRunLoopError_RunCalledWithInvalidMode to debug. This message will only appear once per execution.</div><div class=\"line\">libc++abi.dylib: terminate_handler unexpectedly threw an exception</div><div class=\"line\"></div><div class=\"line\">(lldb) bt</div><div class=\"line\">* thread #1: tid = 0x87c18, 0x000000018238c524 libobjc.A.dylib`objc_exception_throw, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 1.2</div><div class=\"line\">    frame #0: 0x000000018238c524 libobjc.A.dylib`objc_exception_throw</div><div class=\"line\">    frame #1: 0x0000000183954094 CoreFoundation`+[NSException raise:format:arguments:] + 104</div><div class=\"line\">    frame #2: 0x00000001843de898 Foundation`-[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:] + 88</div><div class=\"line\">    frame #3: 0x0000000189a7cf9c UIKit`UIViewReportBrokenSuperviewChain + 472</div><div class=\"line\">    frame #4: 0x0000000189a7d658 UIKit`_UIViewTopDownSubtreeTraversal + 1496</div><div class=\"line\">    frame #5: 0x000000018a0f3390 UIKit`-[UIView(UIConstraintBasedLayout_EngineDelegate) _invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel] + 232</div><div class=\"line\">    frame #6: 0x00000001843832ac Foundation`-[NSISEngine tryToAddConstraintWithMarker:expression:integralizationAdjustment:mutuallyExclusiveConstraints:] + 920</div><div class=\"line\">    frame #7: 0x0000000184382dcc Foundation`-[NSLayoutConstraint _addLoweredExpression:toEngine:integralizationAdjustment:lastLoweredConstantWasRounded:mutuallyExclusiveConstraints:] + 284</div><div class=\"line\">    frame #8: 0x00000001843809e0 Foundation`-[NSLayoutConstraint _addToEngine:integralizationAdjustment:mutuallyExclusiveConstraints:] + 272</div><div class=\"line\">    frame #9: 0x000000018989cfdc UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 396</div><div class=\"line\">    frame #10: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168</div><div class=\"line\">    frame #11: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564</div><div class=\"line\">    frame #12: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224</div><div class=\"line\">    frame #13: 0x000000018989cf14 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 196</div><div class=\"line\">    frame #14: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168</div><div class=\"line\">    frame #15: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564</div><div class=\"line\">    frame #16: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224</div><div class=\"line\">    frame #17: 0x000000018989cf14 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 196</div><div class=\"line\">    frame #18: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168</div><div class=\"line\">    frame #19: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564</div><div class=\"line\">    frame #20: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224</div><div class=\"line\">    frame #21: 0x000000018989cf14 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke_2 + 196</div><div class=\"line\">    frame #22: 0x0000000184380510 Foundation`-[NSISEngine withBehaviors:performModifications:] + 168</div><div class=\"line\">    frame #23: 0x000000018989cde8 UIKit`__57-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:]_block_invoke + 564</div><div class=\"line\">    frame #24: 0x00000001897995e0 UIKit`-[UIView(AdditionalLayoutSupport) _switchToLayoutEngine:] + 224</div><div class=\"line\">    frame #25: 0x00000001898a4bb0 UIKit`-[UIWindow(UIConstraintBasedLayout) _switchToLayoutEngine:] + 72</div><div class=\"line\">    frame #26: 0x00000001898a4b04 UIKit`-[UIWindow(UIConstraintBasedLayout) _initializeLayoutEngine] + 256</div><div class=\"line\">    frame #27: 0x00000001898a4910 UIKit`-[UIView(UIConstraintBasedLayout) _layoutEngine_windowDidChange] + 132</div><div class=\"line\">    frame #28: 0x00000001897996dc UIKit`-[UIView(Internal) _didMoveFromWindow:toWindow:] + 200</div><div class=\"line\">    frame #29: 0x0000000189798d90 UIKit`__45-[UIView(Hierarchy) _postMovedFromSuperview:]_block_invoke + 156</div><div class=\"line\">    frame #30: 0x0000000189798be8 UIKit`-[UIView(Hierarchy) _postMovedFromSuperview:] + 792</div><div class=\"line\">    frame #31: 0x00000001897a4ad0 UIKit`-[UIView(Internal) _addSubview:positioned:relativeTo:] + 1788</div><div class=\"line\">    frame #32: 0x00000001897a43bc UIKit`-[UIView(Hierarchy) addSubview:] + 828</div><div class=\"line\">  * frame #33: 0x00000001004f78ec Project_ent`__31-[EsfCommentReportView show]_block_invoke((null)=&lt;unavailable&gt;) + 228 at EsfCommentReportView.m:293</div><div class=\"line\">    frame #34: 0x00000001897d2b88 UIKit`+[UIView(UIViewAnimationWithBlocks) _setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:] + 660</div><div class=\"line\">    frame #35: 0x00000001897d28e8 UIKit`+[UIView(UIViewAnimationWithBlocks) animateWithDuration:animations:] + 56</div><div class=\"line\">    frame #36: 0x00000001004f77a0 Project_ent`-[EsfCommentReportView show](self=0x000000015fe32020, _cmd=&quot;show&quot;) + 492 at EsfCommentReportView.m:291</div><div class=\"line\">    frame #37: 0x0000000100858a04 Project_ent`__53-[BuyerAdviserProfileViewController reportAction:]_block_invoke((null)=&lt;unavailable&gt;) + 308 at BuyerAdviserProfileViewController.m:174</div><div class=\"line\">    frame #38: 0x00000001003f93e4 Project_ent`+[MyLoginViewController ifShouldLoginFromViewController:sourceType:afterCheckOrLogin:cancelLogin:](self=MyLoginViewController, _cmd=&quot;ifShouldLoginFromViewController:sourceType:afterCheckOrLogin:cancelLogin:&quot;, viewController=0x000000015fd2e320, sourceType=2, afterCheckOrLogin=0x00000001008588d0, cancelLogin=(null)) + 236 at MyLoginViewController.m:123</div><div class=\"line\">    frame #39: 0x00000001003f92b0 Project_ent`+[MyLoginViewController ifShouldLoginFromViewController:afterCheckOrLogin:cancelLogin:](self=MyLoginViewController, _cmd=&quot;ifShouldLoginFromViewController:afterCheckOrLogin:cancelLogin:&quot;, viewController=0x000000015fd2e320, afterCheckOrLogin=0x00000001008588d0, cancelLogin=(null)) + 156 at MyLoginViewController.m:114</div><div class=\"line\">    frame #40: 0x00000001003f9124 Project_ent`+[MyLoginViewController ifShouldLoginFromViewController:afterCheckOrLogin:](self=MyLoginViewController, _cmd=&quot;ifShouldLoginFromViewController:afterCheckOrLogin:&quot;, viewController=0x000000015fd2e320, afterCheckOrLogin=0x00000001008588d0) + 120 at MyLoginViewController.m:104</div><div class=\"line\">    frame #41: 0x0000000100858870 Project_ent`-[BuyerAdviserProfileViewController reportAction:](self=0x000000015fd2e320, _cmd=&quot;reportAction:&quot;, button=0x000000015fe26650) + 452 at BuyerAdviserProfileViewController.m:156</div><div class=\"line\">    frame #42: 0x00000001897d27b0 UIKit`-[UIApplication sendAction:to:from:forEvent:] + 96</div><div class=\"line\">    frame #43: 0x00000001897d2730 UIKit`-[UIControl sendAction:to:forEvent:] + 80</div><div class=\"line\">    frame #44: 0x00000001897bcbe4 UIKit`-[UIControl _sendActionsForEvents:withEvent:] + 452</div><div class=\"line\">    frame #45: 0x00000001897d201c UIKit`-[UIControl touchesEnded:withEvent:] + 584</div><div class=\"line\">    frame #46: 0x00000001897d1b44 UIKit`-[UIWindow _sendTouchesForEvent:] + 2484</div><div class=\"line\">    frame #47: 0x00000001897ccd8c UIKit`-[UIWindow sendEvent:] + 2988</div><div class=\"line\">    frame #48: 0x000000018979d858 UIKit`-[UIApplication sendEvent:] + 340</div><div class=\"line\">    frame #49: 0x0000000189f8acb8 UIKit`__dispatchPreprocessedEventFromEventQueue + 2736</div><div class=\"line\">    frame #50: 0x0000000189f84720 UIKit`__handleEventQueue + 784</div><div class=\"line\">    frame #51: 0x0000000183902278 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 24</div><div class=\"line\">    frame #52: 0x0000000183901bc0 CoreFoundation`__CFRunLoopDoSources0 + 524</div><div class=\"line\">    frame #53: 0x00000001838ff7c0 CoreFoundation`__CFRunLoopRun + 804</div><div class=\"line\">    frame #54: 0x000000018382e048 CoreFoundation`CFRunLoopRunSpecific + 444</div><div class=\"line\">    frame #55: 0x00000001852b1198 GraphicsServices`GSEventRunModal + 180</div><div class=\"line\">    frame #56: 0x0000000189808628 UIKit`-[UIApplication _run] + 684</div><div class=\"line\">    frame #57: 0x0000000189803360 UIKit`UIApplicationMain + 208</div><div class=\"line\">    frame #58: 0x0000000100a3db78 Project_ent`main + 460 at main.swift:24</div><div class=\"line\">    frame #59: 0x00000001828105b8 libdyld.dylib`start + 4</div><div class=\"line\">(lldb)</div></pre></td></tr></table></figure>"},{"title":"Fastlane自动化笔记","date":"2017-01-04T10:14:07.000Z","_content":"\n之前在搭建Jenkins的时候，由于看到Fastlane的配置好复杂，那么多，而当时的需求就是自动打包。。所以没有用，现在想来好气！今天翻到InfoQ的一个文章，又详细的了解了Fastlane之后，觉得此大法甚好，解决很多痛点！决定搞通这一切！\n回看之前的[build-ipa-sh.md](https://madordie.github.io/build-ipa-sh)确实比较僵硬。自动化还是很棒的。\n\n<!--more-->\n\n# 基本知识\n  ([@icyleaf](http://icyleaf.com))在[Fastlane - iOS 和 Android 的自动化构建工具](https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android/)中说到：\n  > Fastlane 提供的流程的众多工具都是可以独立存在和使用（提供 cli 命令），也可以统一由 fastlane 来控制。它在使用中提出了两个概念：\n  >\n    - action: Fastlane 的插件，截至当前内置 165 个至多，不过每个动作的颗粒度大小不一。查看详情\n    - lane: Fastlane 的任务（或者可以理解为命令），一个可以包含多个 lanes，通过 fastlane cli 传入制定的 lane 来执行。\n\n  自我感觉这句话这个对理解和使用很重要！\n  \n\n# 配置\n  Fastlane已被Fabric收购，所以按照其安装也很随意([戳我配置](https://fabric.io/features/distribution))。\n  对于打包，\n  \n# 文章\n  - [深入浅出 Fastlane 一看你就懂](http://icyleaf.com/2016/07/fastlane-in-action/)\n  - [fir.im weekly - 「 持续集成 」实践教程合集](http://blog.fir.im/fir_im_weekly160505)\n  - [使用fastlane实现iOS持续集成](https://everettjf.github.io/2015/09/08/ios-ci-with-fastlane)\n  - [fastlane docs](https://docs.fastlane.tools)\n  - [fastlane GitHub](https://github.com/fastlane/fastlane)\n  - [Fastlane实战（一）：移动开发自动化之道](http://www.infoq.com/cn/articles/actual-combat-of-fastlane-part01)\n  - [Fastlane实战（二）：Action和Plugin机制](http://www.infoq.com/cn/articles/actual-combat-of-fastlane-part02)\n  - [Fastlane实战（三）：Fastlane在Android平台的应用](http://www.infoq.com/cn/articles/actual-combat-of-fastlane-part03)\n  - [Fastlane实战（四）：自动化测试篇](http://www.infoq.com/cn/articles/fastlane-automatic-testing)\n  - [Fastlane实战（五）：高级用法](http://www.infoq.com/cn/articles/fastlane-pro-tips)\n  \n","source":"_posts/fastlane-note.md","raw":"---\ntitle: Fastlane自动化笔记\ndate: 2017-01-04 18:14:07\ntags:\ncategories:\n  - Fastlane\n---\n\n之前在搭建Jenkins的时候，由于看到Fastlane的配置好复杂，那么多，而当时的需求就是自动打包。。所以没有用，现在想来好气！今天翻到InfoQ的一个文章，又详细的了解了Fastlane之后，觉得此大法甚好，解决很多痛点！决定搞通这一切！\n回看之前的[build-ipa-sh.md](https://madordie.github.io/build-ipa-sh)确实比较僵硬。自动化还是很棒的。\n\n<!--more-->\n\n# 基本知识\n  ([@icyleaf](http://icyleaf.com))在[Fastlane - iOS 和 Android 的自动化构建工具](https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android/)中说到：\n  > Fastlane 提供的流程的众多工具都是可以独立存在和使用（提供 cli 命令），也可以统一由 fastlane 来控制。它在使用中提出了两个概念：\n  >\n    - action: Fastlane 的插件，截至当前内置 165 个至多，不过每个动作的颗粒度大小不一。查看详情\n    - lane: Fastlane 的任务（或者可以理解为命令），一个可以包含多个 lanes，通过 fastlane cli 传入制定的 lane 来执行。\n\n  自我感觉这句话这个对理解和使用很重要！\n  \n\n# 配置\n  Fastlane已被Fabric收购，所以按照其安装也很随意([戳我配置](https://fabric.io/features/distribution))。\n  对于打包，\n  \n# 文章\n  - [深入浅出 Fastlane 一看你就懂](http://icyleaf.com/2016/07/fastlane-in-action/)\n  - [fir.im weekly - 「 持续集成 」实践教程合集](http://blog.fir.im/fir_im_weekly160505)\n  - [使用fastlane实现iOS持续集成](https://everettjf.github.io/2015/09/08/ios-ci-with-fastlane)\n  - [fastlane docs](https://docs.fastlane.tools)\n  - [fastlane GitHub](https://github.com/fastlane/fastlane)\n  - [Fastlane实战（一）：移动开发自动化之道](http://www.infoq.com/cn/articles/actual-combat-of-fastlane-part01)\n  - [Fastlane实战（二）：Action和Plugin机制](http://www.infoq.com/cn/articles/actual-combat-of-fastlane-part02)\n  - [Fastlane实战（三）：Fastlane在Android平台的应用](http://www.infoq.com/cn/articles/actual-combat-of-fastlane-part03)\n  - [Fastlane实战（四）：自动化测试篇](http://www.infoq.com/cn/articles/fastlane-automatic-testing)\n  - [Fastlane实战（五）：高级用法](http://www.infoq.com/cn/articles/fastlane-pro-tips)\n  \n","slug":"fastlane-note","published":1,"updated":"2017-07-22T07:55:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfnl000qkhuvlmgeque0","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>之前在搭建Jenkins的时候，由于看到Fastlane的配置好复杂，那么多，而当时的需求就是自动打包。。所以没有用，现在想来好气！今天翻到InfoQ的一个文章，又详细的了解了Fastlane之后，觉得此大法甚好，解决很多痛点！决定搞通这一切！<br>回看之前的<a href=\"https://madordie.github.io/build-ipa-sh\">build-ipa-sh.md</a>确实比较僵硬。自动化还是很棒的。</p>\n<a id=\"more\"></a>\n<h1 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h1><p>  (<a href=\"http://icyleaf.com\" target=\"_blank\" rel=\"external\">@icyleaf</a>)在<a href=\"https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android/\" target=\"_blank\" rel=\"external\">Fastlane - iOS 和 Android 的自动化构建工具</a>中说到：</p>\n<blockquote>\n<p>Fastlane 提供的流程的众多工具都是可以独立存在和使用（提供 cli 命令），也可以统一由 fastlane 来控制。它在使用中提出了两个概念：</p>\n<pre><code>- action: Fastlane 的插件，截至当前内置 165 个至多，不过每个动作的颗粒度大小不一。查看详情\n- lane: Fastlane 的任务（或者可以理解为命令），一个可以包含多个 lanes，通过 fastlane cli 传入制定的 lane 来执行。\n</code></pre></blockquote>\n<p>  自我感觉这句话这个对理解和使用很重要！</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>  Fastlane已被Fabric收购，所以按照其安装也很随意(<a href=\"https://fabric.io/features/distribution\" target=\"_blank\" rel=\"external\">戳我配置</a>)。<br>  对于打包，</p>\n<h1 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h1><ul>\n<li><a href=\"http://icyleaf.com/2016/07/fastlane-in-action/\" target=\"_blank\" rel=\"external\">深入浅出 Fastlane 一看你就懂</a></li>\n<li><a href=\"http://blog.fir.im/fir_im_weekly160505\" target=\"_blank\" rel=\"external\">fir.im weekly - 「 持续集成 」实践教程合集</a></li>\n<li><a href=\"https://everettjf.github.io/2015/09/08/ios-ci-with-fastlane\" target=\"_blank\" rel=\"external\">使用fastlane实现iOS持续集成</a></li>\n<li><a href=\"https://docs.fastlane.tools\" target=\"_blank\" rel=\"external\">fastlane docs</a></li>\n<li><a href=\"https://github.com/fastlane/fastlane\" target=\"_blank\" rel=\"external\">fastlane GitHub</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/actual-combat-of-fastlane-part01\" target=\"_blank\" rel=\"external\">Fastlane实战（一）：移动开发自动化之道</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/actual-combat-of-fastlane-part02\" target=\"_blank\" rel=\"external\">Fastlane实战（二）：Action和Plugin机制</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/actual-combat-of-fastlane-part03\" target=\"_blank\" rel=\"external\">Fastlane实战（三）：Fastlane在Android平台的应用</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/fastlane-automatic-testing\" target=\"_blank\" rel=\"external\">Fastlane实战（四）：自动化测试篇</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/fastlane-pro-tips\" target=\"_blank\" rel=\"external\">Fastlane实战（五）：高级用法</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>之前在搭建Jenkins的时候，由于看到Fastlane的配置好复杂，那么多，而当时的需求就是自动打包。。所以没有用，现在想来好气！今天翻到InfoQ的一个文章，又详细的了解了Fastlane之后，觉得此大法甚好，解决很多痛点！决定搞通这一切！<br>回看之前的<a href=\"https://madordie.github.io/build-ipa-sh\">build-ipa-sh.md</a>确实比较僵硬。自动化还是很棒的。</p>","more":"<h1 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h1><p>  (<a href=\"http://icyleaf.com\">@icyleaf</a>)在<a href=\"https://icyleaf.com/2016/07/intro-fastlane-automation-for-ios-and-android/\">Fastlane - iOS 和 Android 的自动化构建工具</a>中说到：</p>\n<blockquote>\n<p>Fastlane 提供的流程的众多工具都是可以独立存在和使用（提供 cli 命令），也可以统一由 fastlane 来控制。它在使用中提出了两个概念：</p>\n<pre><code>- action: Fastlane 的插件，截至当前内置 165 个至多，不过每个动作的颗粒度大小不一。查看详情\n- lane: Fastlane 的任务（或者可以理解为命令），一个可以包含多个 lanes，通过 fastlane cli 传入制定的 lane 来执行。\n</code></pre></blockquote>\n<p>  自我感觉这句话这个对理解和使用很重要！</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>  Fastlane已被Fabric收购，所以按照其安装也很随意(<a href=\"https://fabric.io/features/distribution\">戳我配置</a>)。<br>  对于打包，</p>\n<h1 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h1><ul>\n<li><a href=\"http://icyleaf.com/2016/07/fastlane-in-action/\">深入浅出 Fastlane 一看你就懂</a></li>\n<li><a href=\"http://blog.fir.im/fir_im_weekly160505\">fir.im weekly - 「 持续集成 」实践教程合集</a></li>\n<li><a href=\"https://everettjf.github.io/2015/09/08/ios-ci-with-fastlane\">使用fastlane实现iOS持续集成</a></li>\n<li><a href=\"https://docs.fastlane.tools\">fastlane docs</a></li>\n<li><a href=\"https://github.com/fastlane/fastlane\">fastlane GitHub</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/actual-combat-of-fastlane-part01\">Fastlane实战（一）：移动开发自动化之道</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/actual-combat-of-fastlane-part02\">Fastlane实战（二）：Action和Plugin机制</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/actual-combat-of-fastlane-part03\">Fastlane实战（三）：Fastlane在Android平台的应用</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/fastlane-automatic-testing\">Fastlane实战（四）：自动化测试篇</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/fastlane-pro-tips\">Fastlane实战（五）：高级用法</a></li>\n</ul>"},{"title":"自定义数据填充Sketch插件","date":"2017-07-17T06:45:12.000Z","_content":"\n## 先来个README.md\n\t\n>## [format-sketchplugin](https://github.com/madordie/format-sketchplugin)\n\n>为Sketch自动生成自定义填充数据源插件。\n \n>![预览](https://github.com/madordie/format-sketchplugin/blob/master/Images/Untitled.gif?raw=true)\n \n>## 使用方法\n\n>- 下载[Release](https://github.com/madordie/format-sketchplugin/releases)上的包，并双击打开\n- 选择要随机填充的文本数据(支持多选，文本数据按照回车进行随机，会默认删除空数据)\n- 选择随机填充的图片文件夹(只支持单选文件夹，选中文件夹内的`.png`、 `.PNG`、 `.jpg`、 `.JPG`、 `.jpeg`、 `.JPEG`、 `.gif`、 `.GIF`文件将会被识别并作为数据源)\n- 将插件生成目录拖拽至窗口即完成设置\n- 文本、图片文件夹 可在保存前重复多次选择\n- 点击`制作`，即可在生成目录看到插件生成\n\n>## 生成说明\n\n>- 文本数据按照文本文件名作为标示\n- 图片文件夹按照图片文件夹名作为标示\n- 保存时，文本数据会读取至插件内\n- 保存时，图片文件夹会复制至插件内(不识别子目录，并只拷贝可识别的素材)\n","source":"_posts/format-sketchplugin.md","raw":"---\ntitle: 自定义数据填充Sketch插件\ndate: 2017-07-17 14:45:12\ntags: \n\t- sketchplugin\n---\n\n## 先来个README.md\n\t\n>## [format-sketchplugin](https://github.com/madordie/format-sketchplugin)\n\n>为Sketch自动生成自定义填充数据源插件。\n \n>![预览](https://github.com/madordie/format-sketchplugin/blob/master/Images/Untitled.gif?raw=true)\n \n>## 使用方法\n\n>- 下载[Release](https://github.com/madordie/format-sketchplugin/releases)上的包，并双击打开\n- 选择要随机填充的文本数据(支持多选，文本数据按照回车进行随机，会默认删除空数据)\n- 选择随机填充的图片文件夹(只支持单选文件夹，选中文件夹内的`.png`、 `.PNG`、 `.jpg`、 `.JPG`、 `.jpeg`、 `.JPEG`、 `.gif`、 `.GIF`文件将会被识别并作为数据源)\n- 将插件生成目录拖拽至窗口即完成设置\n- 文本、图片文件夹 可在保存前重复多次选择\n- 点击`制作`，即可在生成目录看到插件生成\n\n>## 生成说明\n\n>- 文本数据按照文本文件名作为标示\n- 图片文件夹按照图片文件夹名作为标示\n- 保存时，文本数据会读取至插件内\n- 保存时，图片文件夹会复制至插件内(不识别子目录，并只拷贝可识别的素材)\n","slug":"format-sketchplugin","published":1,"updated":"2017-07-17T07:33:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfnn000skhuvhamy9cuv","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"先来个README-md\"><a href=\"#先来个README-md\" class=\"headerlink\" title=\"先来个README.md\"></a>先来个README.md</h2><blockquote>\n<h2 id=\"format-sketchplugin\"><a href=\"#format-sketchplugin\" class=\"headerlink\" title=\"format-sketchplugin\"></a><a href=\"https://github.com/madordie/format-sketchplugin\" target=\"_blank\" rel=\"external\">format-sketchplugin</a></h2><p>为Sketch自动生成自定义填充数据源插件。</p>\n<p><img src=\"https://github.com/madordie/format-sketchplugin/blob/master/Images/Untitled.gif?raw=true\" alt=\"预览\"></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ul>\n<li>下载<a href=\"https://github.com/madordie/format-sketchplugin/releases\" target=\"_blank\" rel=\"external\">Release</a>上的包，并双击打开</li>\n<li>选择要随机填充的文本数据(支持多选，文本数据按照回车进行随机，会默认删除空数据)</li>\n<li>选择随机填充的图片文件夹(只支持单选文件夹，选中文件夹内的<code>.png</code>、 <code>.PNG</code>、 <code>.jpg</code>、 <code>.JPG</code>、 <code>.jpeg</code>、 <code>.JPEG</code>、 <code>.gif</code>、 <code>.GIF</code>文件将会被识别并作为数据源)</li>\n<li>将插件生成目录拖拽至窗口即完成设置</li>\n<li>文本、图片文件夹 可在保存前重复多次选择</li>\n<li>点击<code>制作</code>，即可在生成目录看到插件生成</li>\n</ul>\n<h2 id=\"生成说明\"><a href=\"#生成说明\" class=\"headerlink\" title=\"生成说明\"></a>生成说明</h2><ul>\n<li>文本数据按照文本文件名作为标示</li>\n<li>图片文件夹按照图片文件夹名作为标示</li>\n<li>保存时，文本数据会读取至插件内</li>\n<li>保存时，图片文件夹会复制至插件内(不识别子目录，并只拷贝可识别的素材)</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"先来个README-md\"><a href=\"#先来个README-md\" class=\"headerlink\" title=\"先来个README.md\"></a>先来个README.md</h2><blockquote>\n<h2 id=\"format-sketchplugin\"><a href=\"#format-sketchplugin\" class=\"headerlink\" title=\"format-sketchplugin\"></a><a href=\"https://github.com/madordie/format-sketchplugin\">format-sketchplugin</a></h2><p>为Sketch自动生成自定义填充数据源插件。</p>\n<p><img src=\"https://github.com/madordie/format-sketchplugin/blob/master/Images/Untitled.gif?raw=true\" alt=\"预览\"></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ul>\n<li>下载<a href=\"https://github.com/madordie/format-sketchplugin/releases\">Release</a>上的包，并双击打开</li>\n<li>选择要随机填充的文本数据(支持多选，文本数据按照回车进行随机，会默认删除空数据)</li>\n<li>选择随机填充的图片文件夹(只支持单选文件夹，选中文件夹内的<code>.png</code>、 <code>.PNG</code>、 <code>.jpg</code>、 <code>.JPG</code>、 <code>.jpeg</code>、 <code>.JPEG</code>、 <code>.gif</code>、 <code>.GIF</code>文件将会被识别并作为数据源)</li>\n<li>将插件生成目录拖拽至窗口即完成设置</li>\n<li>文本、图片文件夹 可在保存前重复多次选择</li>\n<li>点击<code>制作</code>，即可在生成目录看到插件生成</li>\n</ul>\n<h2 id=\"生成说明\"><a href=\"#生成说明\" class=\"headerlink\" title=\"生成说明\"></a>生成说明</h2><ul>\n<li>文本数据按照文本文件名作为标示</li>\n<li>图片文件夹按照图片文件夹名作为标示</li>\n<li>保存时，文本数据会读取至插件内</li>\n<li>保存时，图片文件夹会复制至插件内(不识别子目录，并只拷贝可识别的素材)</li>\n</ul>\n</blockquote>\n"},{"title":"ios11-beta","date":"2017-06-12T09:20:58.000Z","_content":"\niOS11 预览版安装体验笔记。\n\n<!--more-->\n\n## 写在前面\n\n毕竟beta版，升级需谨慎。目前来看体验上还是有点卡的～～😂\n\n卡顿让我实在无法忍受，并与6.15号重置回iOS10.3.2 。。。\n\n## API\n\n### 失效的`automaticallyAdjustsScrollViewInsets`\n\nAPI 声明：\n\n``` swift\n@available(iOS 2.0, *)\nopen class UIViewController : UIResponder, ... {\n\t...\n\t@available(iOS, introduced: 7.0, deprecated: 11.0)\n\topen var automaticallyAdjustsScrollViewInsets: Bool // Defaults to YES\n\t...\n}\n```\n\n相应的的替换方案：\n\n```swift\n@available(iOS 2.0, *)\nopen class UIScrollView : UIView, ... {\n\t...\n    /* Configure the behavior of adjustedContentInset.\n     Default is UIScrollViewContentInsetAdjustmentAutomatic.\n     */\n    @available(iOS 11.0, *)\n    open var contentInsetAdjustmentBehavior: UIScrollViewContentInsetAdjustmentBehavior\n    ...\n}\n```\n\niOS11 版本中立即失效。","source":"_posts/ios11-beta.md","raw":"---\ntitle: ios11-beta\ndate: 2017-06-12 17:20:58\ntags:\n---\n\niOS11 预览版安装体验笔记。\n\n<!--more-->\n\n## 写在前面\n\n毕竟beta版，升级需谨慎。目前来看体验上还是有点卡的～～😂\n\n卡顿让我实在无法忍受，并与6.15号重置回iOS10.3.2 。。。\n\n## API\n\n### 失效的`automaticallyAdjustsScrollViewInsets`\n\nAPI 声明：\n\n``` swift\n@available(iOS 2.0, *)\nopen class UIViewController : UIResponder, ... {\n\t...\n\t@available(iOS, introduced: 7.0, deprecated: 11.0)\n\topen var automaticallyAdjustsScrollViewInsets: Bool // Defaults to YES\n\t...\n}\n```\n\n相应的的替换方案：\n\n```swift\n@available(iOS 2.0, *)\nopen class UIScrollView : UIView, ... {\n\t...\n    /* Configure the behavior of adjustedContentInset.\n     Default is UIScrollViewContentInsetAdjustmentAutomatic.\n     */\n    @available(iOS 11.0, *)\n    open var contentInsetAdjustmentBehavior: UIScrollViewContentInsetAdjustmentBehavior\n    ...\n}\n```\n\niOS11 版本中立即失效。","slug":"ios11-beta","published":1,"updated":"2017-06-15T05:08:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfnq000ukhuva86nqqd1","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>iOS11 预览版安装体验笔记。</p>\n<a id=\"more\"></a>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>毕竟beta版，升级需谨慎。目前来看体验上还是有点卡的～～😂</p>\n<p>卡顿让我实在无法忍受，并与6.15号重置回iOS10.3.2 。。。</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h3 id=\"失效的automaticallyAdjustsScrollViewInsets\"><a href=\"#失效的automaticallyAdjustsScrollViewInsets\" class=\"headerlink\" title=\"失效的automaticallyAdjustsScrollViewInsets\"></a>失效的<code>automaticallyAdjustsScrollViewInsets</code></h3><p>API 声明：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@available</span>(iOS <span class=\"number\">2.0</span>, *)</div><div class=\"line\">open <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UIViewController</span> : <span class=\"title\">UIResponder</span>, ... </span>&#123;</div><div class=\"line\">\t...</div><div class=\"line\">\t<span class=\"meta\">@available</span>(iOS, introduced: <span class=\"number\">7.0</span>, deprecated: <span class=\"number\">11.0</span>)</div><div class=\"line\">\topen <span class=\"keyword\">var</span> automaticallyAdjustsScrollViewInsets: <span class=\"type\">Bool</span> <span class=\"comment\">// Defaults to YES</span></div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相应的的替换方案：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@available</span>(iOS <span class=\"number\">2.0</span>, *)</div><div class=\"line\">open <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UIScrollView</span> : <span class=\"title\">UIView</span>, ... </span>&#123;</div><div class=\"line\">\t...</div><div class=\"line\">    <span class=\"comment\">/* Configure the behavior of adjustedContentInset.</span></div><div class=\"line\">     Default is UIScrollViewContentInsetAdjustmentAutomatic.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@available</span>(iOS <span class=\"number\">11.0</span>, *)</div><div class=\"line\">    open <span class=\"keyword\">var</span> contentInsetAdjustmentBehavior: <span class=\"type\">UIScrollViewContentInsetAdjustmentBehavior</span></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>iOS11 版本中立即失效。</p>\n","site":{"data":{}},"excerpt":"<p>iOS11 预览版安装体验笔记。</p>","more":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>毕竟beta版，升级需谨慎。目前来看体验上还是有点卡的～～😂</p>\n<p>卡顿让我实在无法忍受，并与6.15号重置回iOS10.3.2 。。。</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h3 id=\"失效的automaticallyAdjustsScrollViewInsets\"><a href=\"#失效的automaticallyAdjustsScrollViewInsets\" class=\"headerlink\" title=\"失效的automaticallyAdjustsScrollViewInsets\"></a>失效的<code>automaticallyAdjustsScrollViewInsets</code></h3><p>API 声明：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@available</span>(iOS <span class=\"number\">2.0</span>, *)</div><div class=\"line\">open <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UIViewController</span> : <span class=\"title\">UIResponder</span>, ... </span>&#123;</div><div class=\"line\">\t...</div><div class=\"line\">\t<span class=\"meta\">@available</span>(iOS, introduced: <span class=\"number\">7.0</span>, deprecated: <span class=\"number\">11.0</span>)</div><div class=\"line\">\topen <span class=\"keyword\">var</span> automaticallyAdjustsScrollViewInsets: <span class=\"type\">Bool</span> <span class=\"comment\">// Defaults to YES</span></div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相应的的替换方案：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@available</span>(iOS <span class=\"number\">2.0</span>, *)</div><div class=\"line\">open <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UIScrollView</span> : <span class=\"title\">UIView</span>, ... </span>&#123;</div><div class=\"line\">\t...</div><div class=\"line\">    <span class=\"comment\">/* Configure the behavior of adjustedContentInset.</div><div class=\"line\">     Default is UIScrollViewContentInsetAdjustmentAutomatic.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@available</span>(iOS <span class=\"number\">11.0</span>, *)</div><div class=\"line\">    open <span class=\"keyword\">var</span> contentInsetAdjustmentBehavior: <span class=\"type\">UIScrollViewContentInsetAdjustmentBehavior</span></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>iOS11 版本中立即失效。</p>"},{"title":"开发小记","date":"2016-07-28T06:52:22.000Z","_content":"\n\n开发中的小笔记。记录开发中的点滴滴点。\n\n<!--more-->\n\n- 获取代码执行时间\n```swift\n#import <mach/mach_time.h>\nstatic NSMutableDictionary *__times;\nstatic inline void debug_start_of(NSString *key)\n{\n    __times = __times ?: [NSMutableDictionary new];\n\n    uint64_t start = mach_absolute_time();\n    __times[key] = @(start);\n}\nstatic inline void debug_stop_of(NSString *key)\n{\n    if (__times) {\n        uint64_t end = mach_absolute_time();\n        uint64_t start = [__times[key] unsignedLongLongValue];\n        if (start != 0) {\n            uint64_t elapsed = end - start;\n            mach_timebase_info_data_t info;\n            if (mach_timebase_info(&info) != KERN_SUCCESS) {\n                printf(\"mach_timebase_info failed\\n\");\n            }\n            uint64_t nanosecs = elapsed * info.numer / info.denom;\n            uint64_t millisecs = nanosecs / 1000000;\n\n            printf(\"[DEBUG code rt] %s:%llu ms\\n\", [key cStringUsingEncoding:NSUTF8StringEncoding], millisecs);\n        } else {\n            printf(\"[DEBUG code rt] %s error: no start\\n\", [key cStringUsingEncoding:NSUTF8StringEncoding]);\n        }\n    }\n}\n```\n\n- 批量正则替换的另一种思路\n  ```\n  #!/base/sh\n  find . -name '*.swift' | while read file; do\n    perl -i -lpe 's/if \\(([^\\)].*)\\) \\{/if $1 \\{/g' $file\n  done\n  ```\n\n- 批量删除空格组成的空行中的空格\n  ```\n  #!/base/sh\n  find . -name '*.swift' | while read file; do\n    sed -i '' 's/^[[:space:]][[:space:]]*$//g' $file\n  done\n  ```\n\n- NAN\n  - `A`对`B`除余时，如果`B == 0` 则会造成NAN，`truncatingRemainder(dividingBy:)`是`swift`的方法，也会造成此问题\n  - 当`NSUInteger 0 - 1`时，运算结果为 NAN，iOS中有一个宏`isnan(x)`返回是否为nan。另外这里有一篇文章[Objective-C 中 判断 NaN](http://blog.csdn.net/toss156/article/details/7101885)大致记录了一下\n  ```objc\n  //  math.h  #56\n\n  #if defined(__GNUC__)\n  #   define    HUGE_VAL     __builtin_huge_val()\n  #   define    HUGE_VALF    __builtin_huge_valf()\n  #   define    HUGE_VALL    __builtin_huge_vall()\n  #   define    NAN          __builtin_nanf(\"0x7fc00000\")\n  #else\n  #   define    HUGE_VAL     1e500\n  #   define    HUGE_VALF    1e50f\n  #   define    HUGE_VALL    1e5000L\n  #   define    NAN          __nan()\n  #endif\n\n```\n  \n  - 另外，NAN不能直接判断 == 需要调用下面的宏。否则会发生莫名其妙的问题\n  ``` objc\n    //  math.h  #178\n\n  #define isnan(x)                                                         \\\n      ( sizeof(x) == sizeof(float)  ? __inline_isnanf((float)(x))          \\\n      : sizeof(x) == sizeof(double) ? __inline_isnand((double)(x))         \\\n                                    : __inline_isnanl((long double)(x)))\n```\n\n- 论项目架构设计的重要性 \n  - 规范化\n  - 筛选的坑 \n  - 常见布局BUG \n  - 线程安全\n  \n- 百度地图的坑\n  - 设置经纬度缓慢\n  - 刷新缓慢\n\n- 选择图片时候默认方法选择不到系统的云端图片，但是默认单张选择器却可以！\n  - 16G手机存储空间不够，图片转到了云端，会出现相册中的照片无法选择的情况\n  \n- 无埋点技术的讨论\n\n- 多个window的显示、删除、操作问题\n\n- 使用HTTP架设日志实时显示系统","source":"_posts/note.md","raw":"---\ntitle: 开发小记\ndate: 2016-07-28 14:52:22\ntags: \ncategories:\n    - 笔记\n---\n\n\n开发中的小笔记。记录开发中的点滴滴点。\n\n<!--more-->\n\n- 获取代码执行时间\n```swift\n#import <mach/mach_time.h>\nstatic NSMutableDictionary *__times;\nstatic inline void debug_start_of(NSString *key)\n{\n    __times = __times ?: [NSMutableDictionary new];\n\n    uint64_t start = mach_absolute_time();\n    __times[key] = @(start);\n}\nstatic inline void debug_stop_of(NSString *key)\n{\n    if (__times) {\n        uint64_t end = mach_absolute_time();\n        uint64_t start = [__times[key] unsignedLongLongValue];\n        if (start != 0) {\n            uint64_t elapsed = end - start;\n            mach_timebase_info_data_t info;\n            if (mach_timebase_info(&info) != KERN_SUCCESS) {\n                printf(\"mach_timebase_info failed\\n\");\n            }\n            uint64_t nanosecs = elapsed * info.numer / info.denom;\n            uint64_t millisecs = nanosecs / 1000000;\n\n            printf(\"[DEBUG code rt] %s:%llu ms\\n\", [key cStringUsingEncoding:NSUTF8StringEncoding], millisecs);\n        } else {\n            printf(\"[DEBUG code rt] %s error: no start\\n\", [key cStringUsingEncoding:NSUTF8StringEncoding]);\n        }\n    }\n}\n```\n\n- 批量正则替换的另一种思路\n  ```\n  #!/base/sh\n  find . -name '*.swift' | while read file; do\n    perl -i -lpe 's/if \\(([^\\)].*)\\) \\{/if $1 \\{/g' $file\n  done\n  ```\n\n- 批量删除空格组成的空行中的空格\n  ```\n  #!/base/sh\n  find . -name '*.swift' | while read file; do\n    sed -i '' 's/^[[:space:]][[:space:]]*$//g' $file\n  done\n  ```\n\n- NAN\n  - `A`对`B`除余时，如果`B == 0` 则会造成NAN，`truncatingRemainder(dividingBy:)`是`swift`的方法，也会造成此问题\n  - 当`NSUInteger 0 - 1`时，运算结果为 NAN，iOS中有一个宏`isnan(x)`返回是否为nan。另外这里有一篇文章[Objective-C 中 判断 NaN](http://blog.csdn.net/toss156/article/details/7101885)大致记录了一下\n  ```objc\n  //  math.h  #56\n\n  #if defined(__GNUC__)\n  #   define    HUGE_VAL     __builtin_huge_val()\n  #   define    HUGE_VALF    __builtin_huge_valf()\n  #   define    HUGE_VALL    __builtin_huge_vall()\n  #   define    NAN          __builtin_nanf(\"0x7fc00000\")\n  #else\n  #   define    HUGE_VAL     1e500\n  #   define    HUGE_VALF    1e50f\n  #   define    HUGE_VALL    1e5000L\n  #   define    NAN          __nan()\n  #endif\n\n```\n  \n  - 另外，NAN不能直接判断 == 需要调用下面的宏。否则会发生莫名其妙的问题\n  ``` objc\n    //  math.h  #178\n\n  #define isnan(x)                                                         \\\n      ( sizeof(x) == sizeof(float)  ? __inline_isnanf((float)(x))          \\\n      : sizeof(x) == sizeof(double) ? __inline_isnand((double)(x))         \\\n                                    : __inline_isnanl((long double)(x)))\n```\n\n- 论项目架构设计的重要性 \n  - 规范化\n  - 筛选的坑 \n  - 常见布局BUG \n  - 线程安全\n  \n- 百度地图的坑\n  - 设置经纬度缓慢\n  - 刷新缓慢\n\n- 选择图片时候默认方法选择不到系统的云端图片，但是默认单张选择器却可以！\n  - 16G手机存储空间不够，图片转到了云端，会出现相册中的照片无法选择的情况\n  \n- 无埋点技术的讨论\n\n- 多个window的显示、删除、操作问题\n\n- 使用HTTP架设日志实时显示系统","slug":"note","published":1,"updated":"2017-05-17T07:16:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfnu000ykhuv1lhqk1cq","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>开发中的小笔记。记录开发中的点滴滴点。</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>获取代码执行时间</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">#<span class=\"keyword\">import</span> &lt;mach/mach_time.h&gt;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">NSMutableDictionary</span> *__times;</div><div class=\"line\"><span class=\"keyword\">static</span> inline void debug_start_of(<span class=\"type\">NSString</span> *key)</div><div class=\"line\">&#123;</div><div class=\"line\">    __times = __times ?: [<span class=\"type\">NSMutableDictionary</span> new];</div><div class=\"line\"></div><div class=\"line\">    uint64_t start = mach_absolute_time();</div><div class=\"line\">    __times[key] = @(start);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">static</span> inline void debug_stop_of(<span class=\"type\">NSString</span> *key)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (__times) &#123;</div><div class=\"line\">        uint64_t end = mach_absolute_time();</div><div class=\"line\">        uint64_t start = [__times[key] unsignedLongLongValue];</div><div class=\"line\">        <span class=\"keyword\">if</span> (start != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            uint64_t elapsed = end - start;</div><div class=\"line\">            mach_timebase_info_data_t info;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mach_timebase_info(&amp;info) != <span class=\"type\">KERN_SUCCESS</span>) &#123;</div><div class=\"line\">                printf(<span class=\"string\">\"mach_timebase_info failed\\n\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            uint64_t nanosecs = elapsed * info.numer / info.denom;</div><div class=\"line\">            uint64_t millisecs = nanosecs / <span class=\"number\">1000000</span>;</div><div class=\"line\"></div><div class=\"line\">            printf(<span class=\"string\">\"[DEBUG code rt] %s:%llu ms\\n\"</span>, [key cStringUsingEncoding:<span class=\"type\">NSUTF8StringEncoding</span>], millisecs);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            printf(<span class=\"string\">\"[DEBUG code rt] %s error: no start\\n\"</span>, [key cStringUsingEncoding:<span class=\"type\">NSUTF8StringEncoding</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>批量正则替换的另一种思路</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/base/sh</div><div class=\"line\">find . -name &apos;*.swift&apos; | while read file; do</div><div class=\"line\">  perl -i -lpe &apos;s/if \\(([^\\)].*)\\) \\&#123;/if $1 \\&#123;/g&apos; $file</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n</li>\n<li><p>批量删除空格组成的空行中的空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/base/sh</div><div class=\"line\">find . -name &apos;*.swift&apos; | while read file; do</div><div class=\"line\">  sed -i &apos;&apos; &apos;s/^[[:space:]][[:space:]]*$//g&apos; $file</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n</li>\n<li><p>NAN</p>\n<ul>\n<li><code>A</code>对<code>B</code>除余时，如果<code>B == 0</code> 则会造成NAN，<code>truncatingRemainder(dividingBy:)</code>是<code>swift</code>的方法，也会造成此问题</li>\n<li>当<code>NSUInteger 0 - 1</code>时，运算结果为 NAN，iOS中有一个宏<code>isnan(x)</code>返回是否为nan。另外这里有一篇文章<a href=\"http://blog.csdn.net/toss156/article/details/7101885\" target=\"_blank\" rel=\"external\">Objective-C 中 判断 NaN</a>大致记录了一下<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//  math.h  #56</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if defined(__GNUC__)</span></div><div class=\"line\"><span class=\"meta\">#   define    HUGE_VAL     __builtin_huge_val()</span></div><div class=\"line\"><span class=\"meta\">#   define    HUGE_VALF    __builtin_huge_valf()</span></div><div class=\"line\"><span class=\"meta\">#   define    HUGE_VALL    __builtin_huge_vall()</span></div><div class=\"line\"><span class=\"meta\">#   define    NAN          __builtin_nanf(<span class=\"meta-string\">\"0x7fc00000\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#else</span></div><div class=\"line\"><span class=\"meta\">#   define    HUGE_VAL     1e500</span></div><div class=\"line\"><span class=\"meta\">#   define    HUGE_VALF    1e50f</span></div><div class=\"line\"><span class=\"meta\">#   define    HUGE_VALL    1e5000L</span></div><div class=\"line\"><span class=\"meta\">#   define    NAN          __nan()</span></div><div class=\"line\"><span class=\"meta\">#endif</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>另外，NAN不能直接判断 == 需要调用下面的宏。否则会发生莫名其妙的问题<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//  math.h  #178</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#define isnan(x)                                                         \\</span></div><div class=\"line\">    ( <span class=\"keyword\">sizeof</span>(x) == <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">float</span>)  ? __inline_isnanf((<span class=\"keyword\">float</span>)(x))          \\</div><div class=\"line\">    : <span class=\"keyword\">sizeof</span>(x) == <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">double</span>) ? __inline_isnand((<span class=\"keyword\">double</span>)(x))         \\</div><div class=\"line\">                                  : __inline_isnanl((<span class=\"keyword\">long</span> <span class=\"keyword\">double</span>)(x)))</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>论项目架构设计的重要性 </p>\n<ul>\n<li>规范化</li>\n<li>筛选的坑 </li>\n<li>常见布局BUG </li>\n<li>线程安全</li>\n</ul>\n</li>\n<li><p>百度地图的坑</p>\n<ul>\n<li>设置经纬度缓慢</li>\n<li>刷新缓慢</li>\n</ul>\n</li>\n<li><p>选择图片时候默认方法选择不到系统的云端图片，但是默认单张选择器却可以！</p>\n<ul>\n<li>16G手机存储空间不够，图片转到了云端，会出现相册中的照片无法选择的情况</li>\n</ul>\n</li>\n<li><p>无埋点技术的讨论</p>\n</li>\n<li><p>多个window的显示、删除、操作问题</p>\n</li>\n<li><p>使用HTTP架设日志实时显示系统</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>开发中的小笔记。记录开发中的点滴滴点。</p>","more":"<ul>\n<li><p>获取代码执行时间</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">#<span class=\"keyword\">import</span> &lt;mach/mach_time.h&gt;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">NSMutableDictionary</span> *__times;</div><div class=\"line\"><span class=\"keyword\">static</span> inline void debug_start_of(<span class=\"type\">NSString</span> *key)</div><div class=\"line\">&#123;</div><div class=\"line\">    __times = __times ?: [<span class=\"type\">NSMutableDictionary</span> new];</div><div class=\"line\"></div><div class=\"line\">    uint64_t start = mach_absolute_time();</div><div class=\"line\">    __times[key] = @(start);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">static</span> inline void debug_stop_of(<span class=\"type\">NSString</span> *key)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (__times) &#123;</div><div class=\"line\">        uint64_t end = mach_absolute_time();</div><div class=\"line\">        uint64_t start = [__times[key] unsignedLongLongValue];</div><div class=\"line\">        <span class=\"keyword\">if</span> (start != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            uint64_t elapsed = end - start;</div><div class=\"line\">            mach_timebase_info_data_t info;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mach_timebase_info(&amp;info) != <span class=\"type\">KERN_SUCCESS</span>) &#123;</div><div class=\"line\">                printf(<span class=\"string\">\"mach_timebase_info failed\\n\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            uint64_t nanosecs = elapsed * info.numer / info.denom;</div><div class=\"line\">            uint64_t millisecs = nanosecs / <span class=\"number\">1000000</span>;</div><div class=\"line\"></div><div class=\"line\">            printf(<span class=\"string\">\"[DEBUG code rt] %s:%llu ms\\n\"</span>, [key cStringUsingEncoding:<span class=\"type\">NSUTF8StringEncoding</span>], millisecs);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            printf(<span class=\"string\">\"[DEBUG code rt] %s error: no start\\n\"</span>, [key cStringUsingEncoding:<span class=\"type\">NSUTF8StringEncoding</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>批量正则替换的另一种思路</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/base/sh</div><div class=\"line\">find . -name &apos;*.swift&apos; | while read file; do</div><div class=\"line\">  perl -i -lpe &apos;s/if \\(([^\\)].*)\\) \\&#123;/if $1 \\&#123;/g&apos; $file</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n</li>\n<li><p>批量删除空格组成的空行中的空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/base/sh</div><div class=\"line\">find . -name &apos;*.swift&apos; | while read file; do</div><div class=\"line\">  sed -i &apos;&apos; &apos;s/^[[:space:]][[:space:]]*$//g&apos; $file</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n</li>\n<li><p>NAN</p>\n<ul>\n<li><code>A</code>对<code>B</code>除余时，如果<code>B == 0</code> 则会造成NAN，<code>truncatingRemainder(dividingBy:)</code>是<code>swift</code>的方法，也会造成此问题</li>\n<li>当<code>NSUInteger 0 - 1</code>时，运算结果为 NAN，iOS中有一个宏<code>isnan(x)</code>返回是否为nan。另外这里有一篇文章<a href=\"http://blog.csdn.net/toss156/article/details/7101885\">Objective-C 中 判断 NaN</a>大致记录了一下<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//  math.h  #56</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if defined(__GNUC__)</span></div><div class=\"line\"><span class=\"meta\">#   define    HUGE_VAL     __builtin_huge_val()</span></div><div class=\"line\"><span class=\"meta\">#   define    HUGE_VALF    __builtin_huge_valf()</span></div><div class=\"line\"><span class=\"meta\">#   define    HUGE_VALL    __builtin_huge_vall()</span></div><div class=\"line\"><span class=\"meta\">#   define    NAN          __builtin_nanf(<span class=\"meta-string\">\"0x7fc00000\"</span>)</span></div><div class=\"line\"><span class=\"meta\">#else</span></div><div class=\"line\"><span class=\"meta\">#   define    HUGE_VAL     1e500</span></div><div class=\"line\"><span class=\"meta\">#   define    HUGE_VALF    1e50f</span></div><div class=\"line\"><span class=\"meta\">#   define    HUGE_VALL    1e5000L</span></div><div class=\"line\"><span class=\"meta\">#   define    NAN          __nan()</span></div><div class=\"line\"><span class=\"meta\">#endif</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>另外，NAN不能直接判断 == 需要调用下面的宏。否则会发生莫名其妙的问题<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//  math.h  #178</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#define isnan(x)                                                         \\</span></div><div class=\"line\">    ( <span class=\"keyword\">sizeof</span>(x) == <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">float</span>)  ? __inline_isnanf((<span class=\"keyword\">float</span>)(x))          \\</div><div class=\"line\">    : <span class=\"keyword\">sizeof</span>(x) == <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">double</span>) ? __inline_isnand((<span class=\"keyword\">double</span>)(x))         \\</div><div class=\"line\">                                  : __inline_isnanl((<span class=\"keyword\">long</span> <span class=\"keyword\">double</span>)(x)))</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>论项目架构设计的重要性 </p>\n<ul>\n<li>规范化</li>\n<li>筛选的坑 </li>\n<li>常见布局BUG </li>\n<li>线程安全</li>\n</ul>\n</li>\n<li><p>百度地图的坑</p>\n<ul>\n<li>设置经纬度缓慢</li>\n<li>刷新缓慢</li>\n</ul>\n</li>\n<li><p>选择图片时候默认方法选择不到系统的云端图片，但是默认单张选择器却可以！</p>\n<ul>\n<li>16G手机存储空间不够，图片转到了云端，会出现相册中的照片无法选择的情况</li>\n</ul>\n</li>\n<li><p>无埋点技术的讨论</p>\n</li>\n<li><p>多个window的显示、删除、操作问题</p>\n</li>\n<li><p>使用HTTP架设日志实时显示系统</p>\n</li>\n</ul>"},{"title":"侧滑导航栏消失问题笔记","date":"2017-05-16T04:16:47.000Z","_content":"\n如果前页面和后页面不同，则会出现轻微侧滑时导航栏莫名其妙没了😂\n\n[Demo-PushAndPop](https://github.com/madordie/Demo-PushAndPop)\n\n<!--more-->\n\n## Demo-PushAndPop\n[已解决] 隐藏导航栏+改变状态栏样式时出现导航栏莫名其妙没了\n\n## 问题\n\n![snapshot](https://github.com/madordie/Demo-PushAndPop/blob/master/Untitled.gif?raw=true)\n\n当`ViewController.swift`实现\n```swift\noverride var preferredStatusBarStyle: UIStatusBarStyle {\n    return .lightContent\n}\n```\n时，两个`ViewController`对应的`UIStatusBarStyle`不同，则会出现如上图。`UIStatusBarStyle`一致则正常。\n\n## 解决关键\n\n```swift\nclass NavigationController: UINavigationController {\n    override var childViewControllerForStatusBarStyle: UIViewController? {\n        return topViewController\n    }\n}\n```\n只需要将`childViewControllerForStatusBarStyle`设置为`UINavigationController.topViewController`即可。\n\n## 另外\n\n附上`BViewController`中相关代码。在切换的两个`UIViewController`的`preferredStatusBarStyle`一样时，不需要设置`UINavigationController.childViewControllerForStatusBarStyle`。\n```swift\nclass BViewController: UIViewController {\n\n    var navigationBarHidden = false\n\n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n\n        guard let navigationController = navigationController  else {\n            return\n        }\n        if navigationController.isNavigationBarHidden != navigationBarHidden {\n            navigationController.setNavigationBarHidden(navigationBarHidden, animated: animated)\n        }\n    }\n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n\n        guard let navigationController = navigationController  else {\n            return\n        }\n        guard let last = navigationController.viewControllers.last as? BViewController else {\n            return\n        }\n        if last.navigationBarHidden != navigationBarHidden {\n            navigationController.setNavigationBarHidden(last.navigationBarHidden, animated: animated)\n        }\n    }\n}\n```\n\n## 感谢\n\n- @木头 `viewWillAppear`更换为`viewDidAppear`然后调试，在Demo中测试也可以曲线救国。\n- @Harry 提供的终极大法～\n","source":"_posts/push-pop-navigation-bar-hidden.md","raw":"---\ntitle: 侧滑导航栏消失问题笔记\ndate: 2017-05-16 12:16:47\ntags: \ncategories:\n\t- iOS\n\t- DEBUG\n---\n\n如果前页面和后页面不同，则会出现轻微侧滑时导航栏莫名其妙没了😂\n\n[Demo-PushAndPop](https://github.com/madordie/Demo-PushAndPop)\n\n<!--more-->\n\n## Demo-PushAndPop\n[已解决] 隐藏导航栏+改变状态栏样式时出现导航栏莫名其妙没了\n\n## 问题\n\n![snapshot](https://github.com/madordie/Demo-PushAndPop/blob/master/Untitled.gif?raw=true)\n\n当`ViewController.swift`实现\n```swift\noverride var preferredStatusBarStyle: UIStatusBarStyle {\n    return .lightContent\n}\n```\n时，两个`ViewController`对应的`UIStatusBarStyle`不同，则会出现如上图。`UIStatusBarStyle`一致则正常。\n\n## 解决关键\n\n```swift\nclass NavigationController: UINavigationController {\n    override var childViewControllerForStatusBarStyle: UIViewController? {\n        return topViewController\n    }\n}\n```\n只需要将`childViewControllerForStatusBarStyle`设置为`UINavigationController.topViewController`即可。\n\n## 另外\n\n附上`BViewController`中相关代码。在切换的两个`UIViewController`的`preferredStatusBarStyle`一样时，不需要设置`UINavigationController.childViewControllerForStatusBarStyle`。\n```swift\nclass BViewController: UIViewController {\n\n    var navigationBarHidden = false\n\n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n\n        guard let navigationController = navigationController  else {\n            return\n        }\n        if navigationController.isNavigationBarHidden != navigationBarHidden {\n            navigationController.setNavigationBarHidden(navigationBarHidden, animated: animated)\n        }\n    }\n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n\n        guard let navigationController = navigationController  else {\n            return\n        }\n        guard let last = navigationController.viewControllers.last as? BViewController else {\n            return\n        }\n        if last.navigationBarHidden != navigationBarHidden {\n            navigationController.setNavigationBarHidden(last.navigationBarHidden, animated: animated)\n        }\n    }\n}\n```\n\n## 感谢\n\n- @木头 `viewWillAppear`更换为`viewDidAppear`然后调试，在Demo中测试也可以曲线救国。\n- @Harry 提供的终极大法～\n","slug":"push-pop-navigation-bar-hidden","published":1,"updated":"2017-05-18T09:16:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfnv000zkhuvrqxbk0mz","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>如果前页面和后页面不同，则会出现轻微侧滑时导航栏莫名其妙没了😂</p>\n<p><a href=\"https://github.com/madordie/Demo-PushAndPop\" target=\"_blank\" rel=\"external\">Demo-PushAndPop</a></p>\n<a id=\"more\"></a>\n<h2 id=\"Demo-PushAndPop\"><a href=\"#Demo-PushAndPop\" class=\"headerlink\" title=\"Demo-PushAndPop\"></a>Demo-PushAndPop</h2><p>[已解决] 隐藏导航栏+改变状态栏样式时出现导航栏莫名其妙没了</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p><img src=\"https://github.com/madordie/Demo-PushAndPop/blob/master/Untitled.gif?raw=true\" alt=\"snapshot\"></p>\n<p>当<code>ViewController.swift</code>实现<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">var</span> preferredStatusBarStyle: <span class=\"type\">UIStatusBarStyle</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> .lightContent</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>时，两个<code>ViewController</code>对应的<code>UIStatusBarStyle</code>不同，则会出现如上图。<code>UIStatusBarStyle</code>一致则正常。</p>\n<h2 id=\"解决关键\"><a href=\"#解决关键\" class=\"headerlink\" title=\"解决关键\"></a>解决关键</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NavigationController</span>: <span class=\"title\">UINavigationController</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> childViewControllerForStatusBarStyle: <span class=\"type\">UIViewController</span>? &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> topViewController</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>只需要将<code>childViewControllerForStatusBarStyle</code>设置为<code>UINavigationController.topViewController</code>即可。</p>\n<h2 id=\"另外\"><a href=\"#另外\" class=\"headerlink\" title=\"另外\"></a>另外</h2><p>附上<code>BViewController</code>中相关代码。在切换的两个<code>UIViewController</code>的<code>preferredStatusBarStyle</code>一样时，不需要设置<code>UINavigationController.childViewControllerForStatusBarStyle</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BViewController</span>: <span class=\"title\">UIViewController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> navigationBarHidden = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillAppear</span><span class=\"params\">(<span class=\"number\">_</span> animated: Bool)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.viewWillAppear(animated)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> navigationController = navigationController  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> navigationController.isNavigationBarHidden != navigationBarHidden &#123;</div><div class=\"line\">            navigationController.setNavigationBarHidden(navigationBarHidden, animated: animated)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillDisappear</span><span class=\"params\">(<span class=\"number\">_</span> animated: Bool)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.viewWillDisappear(animated)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> navigationController = navigationController  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> last = navigationController.viewControllers.last <span class=\"keyword\">as</span>? <span class=\"type\">BViewController</span> <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> last.navigationBarHidden != navigationBarHidden &#123;</div><div class=\"line\">            navigationController.setNavigationBarHidden(last.navigationBarHidden, animated: animated)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><ul>\n<li>@木头 <code>viewWillAppear</code>更换为<code>viewDidAppear</code>然后调试，在Demo中测试也可以曲线救国。</li>\n<li>@Harry 提供的终极大法～</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>如果前页面和后页面不同，则会出现轻微侧滑时导航栏莫名其妙没了😂</p>\n<p><a href=\"https://github.com/madordie/Demo-PushAndPop\">Demo-PushAndPop</a></p>","more":"<h2 id=\"Demo-PushAndPop\"><a href=\"#Demo-PushAndPop\" class=\"headerlink\" title=\"Demo-PushAndPop\"></a>Demo-PushAndPop</h2><p>[已解决] 隐藏导航栏+改变状态栏样式时出现导航栏莫名其妙没了</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p><img src=\"https://github.com/madordie/Demo-PushAndPop/blob/master/Untitled.gif?raw=true\" alt=\"snapshot\"></p>\n<p>当<code>ViewController.swift</code>实现<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">var</span> preferredStatusBarStyle: <span class=\"type\">UIStatusBarStyle</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> .lightContent</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>时，两个<code>ViewController</code>对应的<code>UIStatusBarStyle</code>不同，则会出现如上图。<code>UIStatusBarStyle</code>一致则正常。</p>\n<h2 id=\"解决关键\"><a href=\"#解决关键\" class=\"headerlink\" title=\"解决关键\"></a>解决关键</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NavigationController</span>: <span class=\"title\">UINavigationController</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> childViewControllerForStatusBarStyle: <span class=\"type\">UIViewController</span>? &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> topViewController</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>只需要将<code>childViewControllerForStatusBarStyle</code>设置为<code>UINavigationController.topViewController</code>即可。</p>\n<h2 id=\"另外\"><a href=\"#另外\" class=\"headerlink\" title=\"另外\"></a>另外</h2><p>附上<code>BViewController</code>中相关代码。在切换的两个<code>UIViewController</code>的<code>preferredStatusBarStyle</code>一样时，不需要设置<code>UINavigationController.childViewControllerForStatusBarStyle</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BViewController</span>: <span class=\"title\">UIViewController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> navigationBarHidden = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillAppear</span><span class=\"params\">(<span class=\"number\">_</span> animated: Bool)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.viewWillAppear(animated)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> navigationController = navigationController  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> navigationController.isNavigationBarHidden != navigationBarHidden &#123;</div><div class=\"line\">            navigationController.setNavigationBarHidden(navigationBarHidden, animated: animated)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillDisappear</span><span class=\"params\">(<span class=\"number\">_</span> animated: Bool)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.viewWillDisappear(animated)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> navigationController = navigationController  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> last = navigationController.viewControllers.last <span class=\"keyword\">as</span>? <span class=\"type\">BViewController</span> <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> last.navigationBarHidden != navigationBarHidden &#123;</div><div class=\"line\">            navigationController.setNavigationBarHidden(last.navigationBarHidden, animated: animated)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><ul>\n<li>@木头 <code>viewWillAppear</code>更换为<code>viewDidAppear</code>然后调试，在Demo中测试也可以曲线救国。</li>\n<li>@Harry 提供的终极大法～</li>\n</ul>"},{"title":"准备食用RAC(ReactiveCocoa)的顾虑","date":"2016-07-12T01:53:14.000Z","_content":"\n对于目前的项目，如果引用RAC，会对项目造成哪些影响的相关思考。\n\n<!--more-->\n\n# 说明\n\n众所周知，RAC很火，有很多崇拜者。本文只是一个新手第一次使用RAC时候所顾忌的一些问题，如果有比较好的解决方案及时告知我，我会及时更改。\n\n\n# OC简单食用方法\n\n先来个例子代码：\n\n```objc\n\n    RACSignal *RSignal = [[self.R rac_newValueChannelWithNilValue:@0] startWith:@(self.R.value)];\n    RACSignal *GSignal = [[self.G rac_newValueChannelWithNilValue:@0] startWith:@(self.G.value)];\n    RACSignal *BSignal = [[self.B rac_newValueChannelWithNilValue:@0] startWith:@(self.B.value)];\n\n    NSString*(^valueFormat)(NSNumber *value) = ^(NSNumber *value) {\n        return [NSString stringWithFormat:@\"%.0f\", [value doubleValue]*255];\n    };\n    \n    [RSignal subscribeNext:^(id x) {\n        self.RVaule.text = valueFormat(x);\n    }];\n    [GSignal subscribeNext:^(id x) {\n        self.GValue.text = valueFormat(x);\n    }];\n    [BSignal subscribeNext:^(id x) {\n        self.BValue.text = valueFormat(x);\n    }];\n    \n```\n\n是不是超级简单！\n\n\n## 顾虑\n\n可是我有一个问题：\n\n- OC属于运行时语法，这个里面的`id x`的不确定因素可能会导致类型识别出现错误。如果说项目是多人维护，那么A可能不知道B写的Signal走的类型是什么，所以这个问题就不适用于松散的多人开发。如果需要使用RAC恐怕需要在项目启动时进行规避这些不确定的问题才能引入。\n\n\n# Swift简单食用方法\n\n在[ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa)的[README.md](https://github.com/ReactiveCocoa/ReactiveCocoa#objective-c-and-swift)中有这么一段话：\n\n> ## Objective-C and Swift\n>\n  Although ReactiveCocoa was started as an Objective-C framework, as of [version\n  3.0][CHANGELOG], all major feature development is concentrated on the [Swift API][].\n>\n  RAC’s [Objective-C API][] and Swift API are entirely separate, but there is\n  a [bridge][Objective-C Bridging] to convert between the two. This\n  is mostly meant as a compatibility layer for older ReactiveCocoa projects, or to\n  use Cocoa extensions which haven’t been added to the Swift API yet.\n>\n  The Objective-C API will continue to exist and be supported for the foreseeable\n  future, but it won’t receive many improvements. For more information about using\n  this API, please consult our [legacy documentation][].\n>\n  **We highly recommend that all new projects use the Swift API.**\n","source":"_posts/reactivecocoa-ready-to-use.md","raw":"---\ntitle: 准备食用RAC(ReactiveCocoa)的顾虑\ndate: 2016-07-12 09:53:14\ntags: \ncategories:\n  - iOS\n  - ReactiveCocoa\n---\n\n对于目前的项目，如果引用RAC，会对项目造成哪些影响的相关思考。\n\n<!--more-->\n\n# 说明\n\n众所周知，RAC很火，有很多崇拜者。本文只是一个新手第一次使用RAC时候所顾忌的一些问题，如果有比较好的解决方案及时告知我，我会及时更改。\n\n\n# OC简单食用方法\n\n先来个例子代码：\n\n```objc\n\n    RACSignal *RSignal = [[self.R rac_newValueChannelWithNilValue:@0] startWith:@(self.R.value)];\n    RACSignal *GSignal = [[self.G rac_newValueChannelWithNilValue:@0] startWith:@(self.G.value)];\n    RACSignal *BSignal = [[self.B rac_newValueChannelWithNilValue:@0] startWith:@(self.B.value)];\n\n    NSString*(^valueFormat)(NSNumber *value) = ^(NSNumber *value) {\n        return [NSString stringWithFormat:@\"%.0f\", [value doubleValue]*255];\n    };\n    \n    [RSignal subscribeNext:^(id x) {\n        self.RVaule.text = valueFormat(x);\n    }];\n    [GSignal subscribeNext:^(id x) {\n        self.GValue.text = valueFormat(x);\n    }];\n    [BSignal subscribeNext:^(id x) {\n        self.BValue.text = valueFormat(x);\n    }];\n    \n```\n\n是不是超级简单！\n\n\n## 顾虑\n\n可是我有一个问题：\n\n- OC属于运行时语法，这个里面的`id x`的不确定因素可能会导致类型识别出现错误。如果说项目是多人维护，那么A可能不知道B写的Signal走的类型是什么，所以这个问题就不适用于松散的多人开发。如果需要使用RAC恐怕需要在项目启动时进行规避这些不确定的问题才能引入。\n\n\n# Swift简单食用方法\n\n在[ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa)的[README.md](https://github.com/ReactiveCocoa/ReactiveCocoa#objective-c-and-swift)中有这么一段话：\n\n> ## Objective-C and Swift\n>\n  Although ReactiveCocoa was started as an Objective-C framework, as of [version\n  3.0][CHANGELOG], all major feature development is concentrated on the [Swift API][].\n>\n  RAC’s [Objective-C API][] and Swift API are entirely separate, but there is\n  a [bridge][Objective-C Bridging] to convert between the two. This\n  is mostly meant as a compatibility layer for older ReactiveCocoa projects, or to\n  use Cocoa extensions which haven’t been added to the Swift API yet.\n>\n  The Objective-C API will continue to exist and be supported for the foreseeable\n  future, but it won’t receive many improvements. For more information about using\n  this API, please consult our [legacy documentation][].\n>\n  **We highly recommend that all new projects use the Swift API.**\n","slug":"reactivecocoa-ready-to-use","published":1,"updated":"2017-05-16T04:28:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfny0012khuve2cnldmp","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>对于目前的项目，如果引用RAC，会对项目造成哪些影响的相关思考。</p>\n<a id=\"more\"></a>\n<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><p>众所周知，RAC很火，有很多崇拜者。本文只是一个新手第一次使用RAC时候所顾忌的一些问题，如果有比较好的解决方案及时告知我，我会及时更改。</p>\n<h1 id=\"OC简单食用方法\"><a href=\"#OC简单食用方法\" class=\"headerlink\" title=\"OC简单食用方法\"></a>OC简单食用方法</h1><p>先来个例子代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">RACSignal *RSignal = [[<span class=\"keyword\">self</span>.R rac_newValueChannelWithNilValue:@<span class=\"number\">0</span>] startWith:@(<span class=\"keyword\">self</span>.R.value)];</div><div class=\"line\">RACSignal *GSignal = [[<span class=\"keyword\">self</span>.G rac_newValueChannelWithNilValue:@<span class=\"number\">0</span>] startWith:@(<span class=\"keyword\">self</span>.G.value)];</div><div class=\"line\">RACSignal *BSignal = [[<span class=\"keyword\">self</span>.B rac_newValueChannelWithNilValue:@<span class=\"number\">0</span>] startWith:@(<span class=\"keyword\">self</span>.B.value)];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NSString</span>*(^valueFormat)(<span class=\"built_in\">NSNumber</span> *value) = ^(<span class=\"built_in\">NSNumber</span> *value) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%.0f\"</span>, [value doubleValue]*<span class=\"number\">255</span>];</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">[RSignal subscribeNext:^(<span class=\"keyword\">id</span> x) &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.RVaule.text = valueFormat(x);</div><div class=\"line\">&#125;];</div><div class=\"line\">[GSignal subscribeNext:^(<span class=\"keyword\">id</span> x) &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.GValue.text = valueFormat(x);</div><div class=\"line\">&#125;];</div><div class=\"line\">[BSignal subscribeNext:^(<span class=\"keyword\">id</span> x) &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.BValue.text = valueFormat(x);</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>是不是超级简单！</p>\n<h2 id=\"顾虑\"><a href=\"#顾虑\" class=\"headerlink\" title=\"顾虑\"></a>顾虑</h2><p>可是我有一个问题：</p>\n<ul>\n<li>OC属于运行时语法，这个里面的<code>id x</code>的不确定因素可能会导致类型识别出现错误。如果说项目是多人维护，那么A可能不知道B写的Signal走的类型是什么，所以这个问题就不适用于松散的多人开发。如果需要使用RAC恐怕需要在项目启动时进行规避这些不确定的问题才能引入。</li>\n</ul>\n<h1 id=\"Swift简单食用方法\"><a href=\"#Swift简单食用方法\" class=\"headerlink\" title=\"Swift简单食用方法\"></a>Swift简单食用方法</h1><p>在<a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\" target=\"_blank\" rel=\"external\">ReactiveCocoa</a>的<a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa#objective-c-and-swift\" target=\"_blank\" rel=\"external\">README.md</a>中有这么一段话：</p>\n<blockquote>\n<h2 id=\"Objective-C-and-Swift\"><a href=\"#Objective-C-and-Swift\" class=\"headerlink\" title=\"Objective-C and Swift\"></a>Objective-C and Swift</h2><p>  Although ReactiveCocoa was started as an Objective-C framework, as of [version<br>  3.0][CHANGELOG], all major feature development is concentrated on the [Swift API][].</p>\n<p>  RAC’s [Objective-C API][] and Swift API are entirely separate, but there is<br>  a [bridge][Objective-C Bridging] to convert between the two. This<br>  is mostly meant as a compatibility layer for older ReactiveCocoa projects, or to<br>  use Cocoa extensions which haven’t been added to the Swift API yet.</p>\n<p>  The Objective-C API will continue to exist and be supported for the foreseeable<br>  future, but it won’t receive many improvements. For more information about using<br>  this API, please consult our [legacy documentation][].</p>\n<p>  <strong>We highly recommend that all new projects use the Swift API.</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>对于目前的项目，如果引用RAC，会对项目造成哪些影响的相关思考。</p>","more":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><p>众所周知，RAC很火，有很多崇拜者。本文只是一个新手第一次使用RAC时候所顾忌的一些问题，如果有比较好的解决方案及时告知我，我会及时更改。</p>\n<h1 id=\"OC简单食用方法\"><a href=\"#OC简单食用方法\" class=\"headerlink\" title=\"OC简单食用方法\"></a>OC简单食用方法</h1><p>先来个例子代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">RACSignal *RSignal = [[<span class=\"keyword\">self</span>.R rac_newValueChannelWithNilValue:@<span class=\"number\">0</span>] startWith:@(<span class=\"keyword\">self</span>.R.value)];</div><div class=\"line\">RACSignal *GSignal = [[<span class=\"keyword\">self</span>.G rac_newValueChannelWithNilValue:@<span class=\"number\">0</span>] startWith:@(<span class=\"keyword\">self</span>.G.value)];</div><div class=\"line\">RACSignal *BSignal = [[<span class=\"keyword\">self</span>.B rac_newValueChannelWithNilValue:@<span class=\"number\">0</span>] startWith:@(<span class=\"keyword\">self</span>.B.value)];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NSString</span>*(^valueFormat)(<span class=\"built_in\">NSNumber</span> *value) = ^(<span class=\"built_in\">NSNumber</span> *value) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%.0f\"</span>, [value doubleValue]*<span class=\"number\">255</span>];</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">[RSignal subscribeNext:^(<span class=\"keyword\">id</span> x) &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.RVaule.text = valueFormat(x);</div><div class=\"line\">&#125;];</div><div class=\"line\">[GSignal subscribeNext:^(<span class=\"keyword\">id</span> x) &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.GValue.text = valueFormat(x);</div><div class=\"line\">&#125;];</div><div class=\"line\">[BSignal subscribeNext:^(<span class=\"keyword\">id</span> x) &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.BValue.text = valueFormat(x);</div><div class=\"line\">&#125;];</div></pre></td></tr></table></figure>\n<p>是不是超级简单！</p>\n<h2 id=\"顾虑\"><a href=\"#顾虑\" class=\"headerlink\" title=\"顾虑\"></a>顾虑</h2><p>可是我有一个问题：</p>\n<ul>\n<li>OC属于运行时语法，这个里面的<code>id x</code>的不确定因素可能会导致类型识别出现错误。如果说项目是多人维护，那么A可能不知道B写的Signal走的类型是什么，所以这个问题就不适用于松散的多人开发。如果需要使用RAC恐怕需要在项目启动时进行规避这些不确定的问题才能引入。</li>\n</ul>\n<h1 id=\"Swift简单食用方法\"><a href=\"#Swift简单食用方法\" class=\"headerlink\" title=\"Swift简单食用方法\"></a>Swift简单食用方法</h1><p>在<a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\">ReactiveCocoa</a>的<a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa#objective-c-and-swift\">README.md</a>中有这么一段话：</p>\n<blockquote>\n<h2 id=\"Objective-C-and-Swift\"><a href=\"#Objective-C-and-Swift\" class=\"headerlink\" title=\"Objective-C and Swift\"></a>Objective-C and Swift</h2><p>  Although ReactiveCocoa was started as an Objective-C framework, as of [version<br>  3.0][CHANGELOG], all major feature development is concentrated on the [Swift API][].</p>\n<p>  RAC’s [Objective-C API][] and Swift API are entirely separate, but there is<br>  a [bridge][Objective-C Bridging] to convert between the two. This<br>  is mostly meant as a compatibility layer for older ReactiveCocoa projects, or to<br>  use Cocoa extensions which haven’t been added to the Swift API yet.</p>\n<p>  The Objective-C API will continue to exist and be supported for the foreseeable<br>  future, but it won’t receive many improvements. For more information about using<br>  this API, please consult our [legacy documentation][].</p>\n<p>  <strong>We highly recommend that all new projects use the Swift API.</strong></p>\n</blockquote>"},{"title":"iOS逆向-砸壳(cycript/clutch)","date":"2017-08-09T12:31:50.000Z","_content":"\n# 准备工作\n\n- 越狱设备\n\n目前有两种砸壳工具，并不肩并肩，一个不行就用另一个呗，俩都不行就Google吧～～\n\n下面分别对`cycript`、`clutch`进行砸壳:\n\n<!--more-->\n\n# 使用cycript进行砸壳\n\n##  准备\n\n- `Cydia`中搜索`cycript`并安装 \b\n\n## 步骤\n\n\n### 制作并上传`dumpdecrypted.dylib` （已经OK的可忽略\n\n#### 制作\n\n目前我制作目录暂时在`~/Desktop`。\n\n```shell\n$ git clone https://github.com/stefanesser/dumpdecrypted.git ~/Desktop\n$ cd ～／Desktop/dumpdecrypted\n$ make\n$ ls dumpdecrypted.dylib\n```\n\n没什么错误的话，即得`dumpdecrypted.dylib`。\n\n#### 上传\n\n将`dumpdecrypted.dylib`放在越狱设备的`/var/root/`下\n\n```shell\n$ ls dumpdecrypted.dylib\n$ scp dumpdecrypted.dylib root@10.12.14.16:/var/root/\nroot@10.12.14.16's password:\ndumpdecrypted.dylib                           100%  193KB   3.0MB/s   00:00\n$\n```\n\n### 登录进越狱设备\n\n可以使用`ssh root@IP`进行登录。\n\n当然也可以使用`ssh ipad`，这样免密登录登录。 [配置传送门](https://madordie.github.io/reverse-ios-ssh/)\n\n### 找到可执行文件路径\n\n这里以`WeChat`为例子啦～\n\n记得先打开呀～～～\n\n`ps -e`： 显示所有程序\n`grep`: 这里是过滤一下。。具体用法Google。所有的程序有点多，我知道名字，所以直接过滤一下。也可忽略\n\n```shell\n$ ps -e | grep WeChat\n705 ??         0:02.20 /var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat\n707 ttys000    0:00.01 grep WeChat\n$ cycript -p 705\n$ cycript -p 705\ncy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]\n#\"file:///var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/\"\ncy# exit(0)\nMS:Error: _krncall(mach_vm_read_overwrite(task, data, sizeof(*baton), reinterpret_cast<mach_vm_address_t>(baton), &error)) =4\n*** _assert(status == 0):../Inject.cpp(143):InjectLibrary\n$\n```\n\n此处获得两个目录：\n\n- `/var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat`\n- `/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/`\n\n### 开砸\n\n```shell\n$ cd ~\n$ cp dumpdecrypted.dylib /var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/\n$ cd /var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/\n$ DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat\nmach-o decryption dumper\n\nDISCLAIMER: This tool is only meant for security research purposes, not for application crackers.\n\n[+] detected 64bit ARM binary in memory.\n[+] offset to cryptid found: @0x1000c0ca8(from 0x1000c0000) = ca8\n[+] Found encrypted data at address 00004000 of length 51200000 bytes - type 1.\n[+] Opening /private/var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat for reading.\n[+] Reading header\n[+] Detecting header type\n[+] Executable is a plain MACH-O image\n[+] Opening WeChat.decrypted for writing.\n[+] Copying the not encrypted start of the file\n[+] Dumping the decrypted data into the file\n[+] Copying the not encrypted remainder of the file\n[+] Setting the LC_ENCRYPTION_INFO->cryptid to 0 at offset ca8\n[+] Closing original file\n[+] Closing dump file\n$ ls WeChat.decrypted\nWeChat.decrypted\n$ pwd\n/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents\n```\n最后得到文件:\n\n- `/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/WeChat.decrypted`\n\n### 将`*.decrypted`拷贝出来\n\n我这里直接使用`scp`吧～。\n\n```shell\n$ cd /Users/Madordie/Desktop/Madordie/iOS/xxx\n$ scp root@10.12.14.16:/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/WeChat.decrypted .\nroot@10.12.14.16's password:\nWeChat.decrypted                              100%   61MB   4.7MB/s   00:12\n$ ls WeChat.decrypted\nWeChat.decrypted\n```\n至此在主机上得到：\n\n- `/Users/Madordie/Desktop/Madordie/iOS/xxx/WeChat.decrypted`\n\n## 总结\n\n- 为什么将`dumpdecrypted.dylib`  `copy` 至`*/Documents/`下？\n    ：别的目录没有权限～～（`dumpdecrypted.dylib: stat() failed with errno=1` ）\n\n# 使用clutch进行砸壳\n\n## 步骤\n\n### 下载上传clutch(无须重复做)\n\n`clutch`可以从[https://github.com/KJCracks/Clutch](https://github.com/KJCracks/Clutch)下载编译。\n\n当然也可以从[https://github.com/KJCracks/Clutch/releases](https://github.com/KJCracks/Clutch/releases)直接下载。\n\n目前下载到目录`~/Clutch-2.0.4`\n\n上传到设备：\n\n```shell\n$ cd ~\n$ scp Clutch-2.0.4 root@10.12.14.16:/usr/bin/\nroot@10.12.14.16's password:\nClutch-2.0.4                                  100% 1204KB   4.7MB/s   00:00\n```\n\n### 登录进越狱设备\n\n可以使用`ssh root@IP`进行登录。\n\n当然也可以使用`ssh ipad`，这样免密登录登录。 [配置传送门](https://madordie.github.io/reverse-ios-ssh/)\n\n### 修改权限\n\n```shell\n$ cd ~\n$ cd /usr/bin\n$ mv Clutch-2.0.4 clutch\n$ chmod +x clutch\n```\n\n### 砸壳\n\n```shell\n$ clutch -i\nInstalled apps:\n1:   钉钉 <com.laiwang.DingTalk>\n2:   韩剧TV-最新热门韩剧大全 <com.baoyun.hanju>\n3:   PG Client - a better client for dribbble <com.az.azdribbble>\n4:   窝牛－设计装修我们的家 <com.lingduohome.acorn>\n$ clutch -d 1\ncom.laiwang.DingTalk contains watchOS 2 compatible application. It's not possible to dump watchOS 2 apps with Clutch 2.0.4 at this moment.\nZipping DingTalk.app\nASLR slide: 0x10001c000\nDumping <DingTalk> (arm64)\nPatched cryptid (64bit segment)\nWriting new checksum\nDONE: /private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa\nFinished dumping com.laiwang.DingTalk in 40.6 seconds\n$\n```\n\n生成最终路径:\n\n- `/private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa`\n\n### 传至本地\n\n注意路径中有`()`这样的字符，需要转义一下。如下：\n\n在本地终端中使用`scp`拉取：\n\n```shell\n$ scp root@10.12.14.16:'/private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-\\(Clutch-2.0.4\\).ipa' .\nroot@10.12.14.16's password:\ncom.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ip 100%   48MB   3.6MB/s   00:13\n$ ls com.laiwang.DingTalk-iOS7.0-\\(Clutch-2.0.4\\).ipa\ncom.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa\n$ pwd\n/Users/Madordie/Desktop/Madordie/ios-reverse\n```\n至此在主机上得到：\n\n- `/Users/Madordie/Desktop/Madordie/ios-reverse/com.laiwang.DingTalk-iOS7.0-\\(Clutch-2.0.4\\).ipa`\n\n## 总结\n\n- 并不是每一个都可以支持这种工具砸壳，失败了用第一种试试。。。\n\n# 最后\n\n目前发现这两种砸壳工具。但是并不是每一个APP都可以使用2种工具。有的只有一个有效，有的两个都有效，还有一种两个都失败的😂\n","source":"_posts/reverse-ios-dump-decrypted.md","raw":"---\ntitle: iOS逆向-砸壳(cycript/clutch)\ndate: 2017-08-09 20:31:50\ntags:\ncategories:\n    - iOS\n    - 逆向\n---\n\n# 准备工作\n\n- 越狱设备\n\n目前有两种砸壳工具，并不肩并肩，一个不行就用另一个呗，俩都不行就Google吧～～\n\n下面分别对`cycript`、`clutch`进行砸壳:\n\n<!--more-->\n\n# 使用cycript进行砸壳\n\n##  准备\n\n- `Cydia`中搜索`cycript`并安装 \b\n\n## 步骤\n\n\n### 制作并上传`dumpdecrypted.dylib` （已经OK的可忽略\n\n#### 制作\n\n目前我制作目录暂时在`~/Desktop`。\n\n```shell\n$ git clone https://github.com/stefanesser/dumpdecrypted.git ~/Desktop\n$ cd ～／Desktop/dumpdecrypted\n$ make\n$ ls dumpdecrypted.dylib\n```\n\n没什么错误的话，即得`dumpdecrypted.dylib`。\n\n#### 上传\n\n将`dumpdecrypted.dylib`放在越狱设备的`/var/root/`下\n\n```shell\n$ ls dumpdecrypted.dylib\n$ scp dumpdecrypted.dylib root@10.12.14.16:/var/root/\nroot@10.12.14.16's password:\ndumpdecrypted.dylib                           100%  193KB   3.0MB/s   00:00\n$\n```\n\n### 登录进越狱设备\n\n可以使用`ssh root@IP`进行登录。\n\n当然也可以使用`ssh ipad`，这样免密登录登录。 [配置传送门](https://madordie.github.io/reverse-ios-ssh/)\n\n### 找到可执行文件路径\n\n这里以`WeChat`为例子啦～\n\n记得先打开呀～～～\n\n`ps -e`： 显示所有程序\n`grep`: 这里是过滤一下。。具体用法Google。所有的程序有点多，我知道名字，所以直接过滤一下。也可忽略\n\n```shell\n$ ps -e | grep WeChat\n705 ??         0:02.20 /var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat\n707 ttys000    0:00.01 grep WeChat\n$ cycript -p 705\n$ cycript -p 705\ncy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]\n#\"file:///var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/\"\ncy# exit(0)\nMS:Error: _krncall(mach_vm_read_overwrite(task, data, sizeof(*baton), reinterpret_cast<mach_vm_address_t>(baton), &error)) =4\n*** _assert(status == 0):../Inject.cpp(143):InjectLibrary\n$\n```\n\n此处获得两个目录：\n\n- `/var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat`\n- `/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/`\n\n### 开砸\n\n```shell\n$ cd ~\n$ cp dumpdecrypted.dylib /var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/\n$ cd /var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/\n$ DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat\nmach-o decryption dumper\n\nDISCLAIMER: This tool is only meant for security research purposes, not for application crackers.\n\n[+] detected 64bit ARM binary in memory.\n[+] offset to cryptid found: @0x1000c0ca8(from 0x1000c0000) = ca8\n[+] Found encrypted data at address 00004000 of length 51200000 bytes - type 1.\n[+] Opening /private/var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat for reading.\n[+] Reading header\n[+] Detecting header type\n[+] Executable is a plain MACH-O image\n[+] Opening WeChat.decrypted for writing.\n[+] Copying the not encrypted start of the file\n[+] Dumping the decrypted data into the file\n[+] Copying the not encrypted remainder of the file\n[+] Setting the LC_ENCRYPTION_INFO->cryptid to 0 at offset ca8\n[+] Closing original file\n[+] Closing dump file\n$ ls WeChat.decrypted\nWeChat.decrypted\n$ pwd\n/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents\n```\n最后得到文件:\n\n- `/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/WeChat.decrypted`\n\n### 将`*.decrypted`拷贝出来\n\n我这里直接使用`scp`吧～。\n\n```shell\n$ cd /Users/Madordie/Desktop/Madordie/iOS/xxx\n$ scp root@10.12.14.16:/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/WeChat.decrypted .\nroot@10.12.14.16's password:\nWeChat.decrypted                              100%   61MB   4.7MB/s   00:12\n$ ls WeChat.decrypted\nWeChat.decrypted\n```\n至此在主机上得到：\n\n- `/Users/Madordie/Desktop/Madordie/iOS/xxx/WeChat.decrypted`\n\n## 总结\n\n- 为什么将`dumpdecrypted.dylib`  `copy` 至`*/Documents/`下？\n    ：别的目录没有权限～～（`dumpdecrypted.dylib: stat() failed with errno=1` ）\n\n# 使用clutch进行砸壳\n\n## 步骤\n\n### 下载上传clutch(无须重复做)\n\n`clutch`可以从[https://github.com/KJCracks/Clutch](https://github.com/KJCracks/Clutch)下载编译。\n\n当然也可以从[https://github.com/KJCracks/Clutch/releases](https://github.com/KJCracks/Clutch/releases)直接下载。\n\n目前下载到目录`~/Clutch-2.0.4`\n\n上传到设备：\n\n```shell\n$ cd ~\n$ scp Clutch-2.0.4 root@10.12.14.16:/usr/bin/\nroot@10.12.14.16's password:\nClutch-2.0.4                                  100% 1204KB   4.7MB/s   00:00\n```\n\n### 登录进越狱设备\n\n可以使用`ssh root@IP`进行登录。\n\n当然也可以使用`ssh ipad`，这样免密登录登录。 [配置传送门](https://madordie.github.io/reverse-ios-ssh/)\n\n### 修改权限\n\n```shell\n$ cd ~\n$ cd /usr/bin\n$ mv Clutch-2.0.4 clutch\n$ chmod +x clutch\n```\n\n### 砸壳\n\n```shell\n$ clutch -i\nInstalled apps:\n1:   钉钉 <com.laiwang.DingTalk>\n2:   韩剧TV-最新热门韩剧大全 <com.baoyun.hanju>\n3:   PG Client - a better client for dribbble <com.az.azdribbble>\n4:   窝牛－设计装修我们的家 <com.lingduohome.acorn>\n$ clutch -d 1\ncom.laiwang.DingTalk contains watchOS 2 compatible application. It's not possible to dump watchOS 2 apps with Clutch 2.0.4 at this moment.\nZipping DingTalk.app\nASLR slide: 0x10001c000\nDumping <DingTalk> (arm64)\nPatched cryptid (64bit segment)\nWriting new checksum\nDONE: /private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa\nFinished dumping com.laiwang.DingTalk in 40.6 seconds\n$\n```\n\n生成最终路径:\n\n- `/private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa`\n\n### 传至本地\n\n注意路径中有`()`这样的字符，需要转义一下。如下：\n\n在本地终端中使用`scp`拉取：\n\n```shell\n$ scp root@10.12.14.16:'/private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-\\(Clutch-2.0.4\\).ipa' .\nroot@10.12.14.16's password:\ncom.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ip 100%   48MB   3.6MB/s   00:13\n$ ls com.laiwang.DingTalk-iOS7.0-\\(Clutch-2.0.4\\).ipa\ncom.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa\n$ pwd\n/Users/Madordie/Desktop/Madordie/ios-reverse\n```\n至此在主机上得到：\n\n- `/Users/Madordie/Desktop/Madordie/ios-reverse/com.laiwang.DingTalk-iOS7.0-\\(Clutch-2.0.4\\).ipa`\n\n## 总结\n\n- 并不是每一个都可以支持这种工具砸壳，失败了用第一种试试。。。\n\n# 最后\n\n目前发现这两种砸壳工具。但是并不是每一个APP都可以使用2种工具。有的只有一个有效，有的两个都有效，还有一种两个都失败的😂\n","slug":"reverse-ios-dump-decrypted","published":1,"updated":"2017-08-10T10:27:18.000Z","_id":"cj661pfo00014khuvu3epyx60","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ul>\n<li>越狱设备</li>\n</ul>\n<p>目前有两种砸壳工具，并不肩并肩，一个不行就用另一个呗，俩都不行就Google吧～～</p>\n<p>下面分别对<code>cycript</code>、<code>clutch</code>进行砸壳:</p>\n<a id=\"more\"></a>\n<h1 id=\"使用cycript进行砸壳\"><a href=\"#使用cycript进行砸壳\" class=\"headerlink\" title=\"使用cycript进行砸壳\"></a>使用cycript进行砸壳</h1><h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li><code>Cydia</code>中搜索<code>cycript</code>并安装 \b</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"制作并上传dumpdecrypted-dylib-（已经OK的可忽略\"><a href=\"#制作并上传dumpdecrypted-dylib-（已经OK的可忽略\" class=\"headerlink\" title=\"制作并上传dumpdecrypted.dylib （已经OK的可忽略\"></a>制作并上传<code>dumpdecrypted.dylib</code> （已经OK的可忽略</h3><h4 id=\"制作\"><a href=\"#制作\" class=\"headerlink\" title=\"制作\"></a>制作</h4><p>目前我制作目录暂时在<code>~/Desktop</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/stefanesser/dumpdecrypted.git ~/Desktop</div><div class=\"line\">$ cd ～／Desktop/dumpdecrypted</div><div class=\"line\">$ make</div><div class=\"line\">$ ls dumpdecrypted.dylib</div></pre></td></tr></table></figure>\n<p>没什么错误的话，即得<code>dumpdecrypted.dylib</code>。</p>\n<h4 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h4><p>将<code>dumpdecrypted.dylib</code>放在越狱设备的<code>/var/root/</code>下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls dumpdecrypted.dylib</div><div class=\"line\">$ scp dumpdecrypted.dylib root@10.12.14.16:/var/root/</div><div class=\"line\">root@10.12.14.16&apos;s password:</div><div class=\"line\">dumpdecrypted.dylib                           100%  193KB   3.0MB/s   00:00</div><div class=\"line\">$</div></pre></td></tr></table></figure>\n<h3 id=\"登录进越狱设备\"><a href=\"#登录进越狱设备\" class=\"headerlink\" title=\"登录进越狱设备\"></a>登录进越狱设备</h3><p>可以使用<code>ssh root@IP</code>进行登录。</p>\n<p>当然也可以使用<code>ssh ipad</code>，这样免密登录登录。 <a href=\"https://madordie.github.io/reverse-ios-ssh/\">配置传送门</a></p>\n<h3 id=\"找到可执行文件路径\"><a href=\"#找到可执行文件路径\" class=\"headerlink\" title=\"找到可执行文件路径\"></a>找到可执行文件路径</h3><p>这里以<code>WeChat</code>为例子啦～</p>\n<p>记得先打开呀～～～</p>\n<p><code>ps -e</code>： 显示所有程序<br><code>grep</code>: 这里是过滤一下。。具体用法Google。所有的程序有点多，我知道名字，所以直接过滤一下。也可忽略</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ps -e | grep WeChat</div><div class=\"line\">705 ??         0:02.20 /var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat</div><div class=\"line\">707 ttys000    0:00.01 grep WeChat</div><div class=\"line\">$ cycript -p 705</div><div class=\"line\">$ cycript -p 705</div><div class=\"line\">cy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]</div><div class=\"line\">#&quot;file:///var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/&quot;</div><div class=\"line\">cy# exit(0)</div><div class=\"line\">MS:Error: _krncall(mach_vm_read_overwrite(task, data, sizeof(*baton), reinterpret_cast&lt;mach_vm_address_t&gt;(baton), &amp;error)) =4</div><div class=\"line\">*** _assert(status == 0):../Inject.cpp(143):InjectLibrary</div><div class=\"line\">$</div></pre></td></tr></table></figure>\n<p>此处获得两个目录：</p>\n<ul>\n<li><code>/var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat</code></li>\n<li><code>/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/</code></li>\n</ul>\n<h3 id=\"开砸\"><a href=\"#开砸\" class=\"headerlink\" title=\"开砸\"></a>开砸</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~</div><div class=\"line\">$ cp dumpdecrypted.dylib /var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/</div><div class=\"line\">$ cd /var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/</div><div class=\"line\">$ DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat</div><div class=\"line\">mach-o decryption dumper</div><div class=\"line\"></div><div class=\"line\">DISCLAIMER: This tool is only meant for security research purposes, not for application crackers.</div><div class=\"line\"></div><div class=\"line\">[+] detected 64bit ARM binary in memory.</div><div class=\"line\">[+] offset to cryptid found: @0x1000c0ca8(from 0x1000c0000) = ca8</div><div class=\"line\">[+] Found encrypted data at address 00004000 of length 51200000 bytes - type 1.</div><div class=\"line\">[+] Opening /private/var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat for reading.</div><div class=\"line\">[+] Reading header</div><div class=\"line\">[+] Detecting header type</div><div class=\"line\">[+] Executable is a plain MACH-O image</div><div class=\"line\">[+] Opening WeChat.decrypted for writing.</div><div class=\"line\">[+] Copying the not encrypted start of the file</div><div class=\"line\">[+] Dumping the decrypted data into the file</div><div class=\"line\">[+] Copying the not encrypted remainder of the file</div><div class=\"line\">[+] Setting the LC_ENCRYPTION_INFO-&gt;cryptid to 0 at offset ca8</div><div class=\"line\">[+] Closing original file</div><div class=\"line\">[+] Closing dump file</div><div class=\"line\">$ ls WeChat.decrypted</div><div class=\"line\">WeChat.decrypted</div><div class=\"line\">$ pwd</div><div class=\"line\">/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents</div></pre></td></tr></table></figure>\n<p>最后得到文件:</p>\n<ul>\n<li><code>/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/WeChat.decrypted</code></li>\n</ul>\n<h3 id=\"将-decrypted拷贝出来\"><a href=\"#将-decrypted拷贝出来\" class=\"headerlink\" title=\"将*.decrypted拷贝出来\"></a>将<code>*.decrypted</code>拷贝出来</h3><p>我这里直接使用<code>scp</code>吧～。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd /Users/Madordie/Desktop/Madordie/iOS/xxx</div><div class=\"line\">$ scp root@10.12.14.16:/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/WeChat.decrypted .</div><div class=\"line\">root@10.12.14.16&apos;s password:</div><div class=\"line\">WeChat.decrypted                              100%   61MB   4.7MB/s   00:12</div><div class=\"line\">$ ls WeChat.decrypted</div><div class=\"line\">WeChat.decrypted</div></pre></td></tr></table></figure>\n<p>至此在主机上得到：</p>\n<ul>\n<li><code>/Users/Madordie/Desktop/Madordie/iOS/xxx/WeChat.decrypted</code></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>为什么将<code>dumpdecrypted.dylib</code>  <code>copy</code> 至<code>*/Documents/</code>下？<br>  ：别的目录没有权限～～（<code>dumpdecrypted.dylib: stat() failed with errno=1</code> ）</li>\n</ul>\n<h1 id=\"使用clutch进行砸壳\"><a href=\"#使用clutch进行砸壳\" class=\"headerlink\" title=\"使用clutch进行砸壳\"></a>使用clutch进行砸壳</h1><h2 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"下载上传clutch-无须重复做\"><a href=\"#下载上传clutch-无须重复做\" class=\"headerlink\" title=\"下载上传clutch(无须重复做)\"></a>下载上传clutch(无须重复做)</h3><p><code>clutch</code>可以从<a href=\"https://github.com/KJCracks/Clutch\" target=\"_blank\" rel=\"external\">https://github.com/KJCracks/Clutch</a>下载编译。</p>\n<p>当然也可以从<a href=\"https://github.com/KJCracks/Clutch/releases\" target=\"_blank\" rel=\"external\">https://github.com/KJCracks/Clutch/releases</a>直接下载。</p>\n<p>目前下载到目录<code>~/Clutch-2.0.4</code></p>\n<p>上传到设备：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~</div><div class=\"line\">$ scp Clutch-2.0.4 root@10.12.14.16:/usr/bin/</div><div class=\"line\">root@10.12.14.16&apos;s password:</div><div class=\"line\">Clutch-2.0.4                                  100% 1204KB   4.7MB/s   00:00</div></pre></td></tr></table></figure>\n<h3 id=\"登录进越狱设备-1\"><a href=\"#登录进越狱设备-1\" class=\"headerlink\" title=\"登录进越狱设备\"></a>登录进越狱设备</h3><p>可以使用<code>ssh root@IP</code>进行登录。</p>\n<p>当然也可以使用<code>ssh ipad</code>，这样免密登录登录。 <a href=\"https://madordie.github.io/reverse-ios-ssh/\">配置传送门</a></p>\n<h3 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a>修改权限</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~</div><div class=\"line\">$ cd /usr/bin</div><div class=\"line\">$ mv Clutch-2.0.4 clutch</div><div class=\"line\">$ chmod +x clutch</div></pre></td></tr></table></figure>\n<h3 id=\"砸壳\"><a href=\"#砸壳\" class=\"headerlink\" title=\"砸壳\"></a>砸壳</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ clutch -i</div><div class=\"line\">Installed apps:</div><div class=\"line\">1:   钉钉 &lt;com.laiwang.DingTalk&gt;</div><div class=\"line\">2:   韩剧TV-最新热门韩剧大全 &lt;com.baoyun.hanju&gt;</div><div class=\"line\">3:   PG Client - a better client for dribbble &lt;com.az.azdribbble&gt;</div><div class=\"line\">4:   窝牛－设计装修我们的家 &lt;com.lingduohome.acorn&gt;</div><div class=\"line\">$ clutch -d 1</div><div class=\"line\">com.laiwang.DingTalk contains watchOS 2 compatible application. It&apos;s not possible to dump watchOS 2 apps with Clutch 2.0.4 at this moment.</div><div class=\"line\">Zipping DingTalk.app</div><div class=\"line\">ASLR slide: 0x10001c000</div><div class=\"line\">Dumping &lt;DingTalk&gt; (arm64)</div><div class=\"line\">Patched cryptid (64bit segment)</div><div class=\"line\">Writing new checksum</div><div class=\"line\">DONE: /private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa</div><div class=\"line\">Finished dumping com.laiwang.DingTalk in 40.6 seconds</div><div class=\"line\">$</div></pre></td></tr></table></figure>\n<p>生成最终路径:</p>\n<ul>\n<li><code>/private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa</code></li>\n</ul>\n<h3 id=\"传至本地\"><a href=\"#传至本地\" class=\"headerlink\" title=\"传至本地\"></a>传至本地</h3><p>注意路径中有<code>()</code>这样的字符，需要转义一下。如下：</p>\n<p>在本地终端中使用<code>scp</code>拉取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ scp root@10.12.14.16:&apos;/private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-\\(Clutch-2.0.4\\).ipa&apos; .</div><div class=\"line\">root@10.12.14.16&apos;s password:</div><div class=\"line\">com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ip 100%   48MB   3.6MB/s   00:13</div><div class=\"line\">$ ls com.laiwang.DingTalk-iOS7.0-\\(Clutch-2.0.4\\).ipa</div><div class=\"line\">com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa</div><div class=\"line\">$ pwd</div><div class=\"line\">/Users/Madordie/Desktop/Madordie/ios-reverse</div></pre></td></tr></table></figure>\n<p>至此在主机上得到：</p>\n<ul>\n<li><code>/Users/Madordie/Desktop/Madordie/ios-reverse/com.laiwang.DingTalk-iOS7.0-\\(Clutch-2.0.4\\).ipa</code></li>\n</ul>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>并不是每一个都可以支持这种工具砸壳，失败了用第一种试试。。。</li>\n</ul>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>目前发现这两种砸壳工具。但是并不是每一个APP都可以使用2种工具。有的只有一个有效，有的两个都有效，还有一种两个都失败的😂</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ul>\n<li>越狱设备</li>\n</ul>\n<p>目前有两种砸壳工具，并不肩并肩，一个不行就用另一个呗，俩都不行就Google吧～～</p>\n<p>下面分别对<code>cycript</code>、<code>clutch</code>进行砸壳:</p>","more":"<h1 id=\"使用cycript进行砸壳\"><a href=\"#使用cycript进行砸壳\" class=\"headerlink\" title=\"使用cycript进行砸壳\"></a>使用cycript进行砸壳</h1><h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li><code>Cydia</code>中搜索<code>cycript</code>并安装 \b</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"制作并上传dumpdecrypted-dylib-（已经OK的可忽略\"><a href=\"#制作并上传dumpdecrypted-dylib-（已经OK的可忽略\" class=\"headerlink\" title=\"制作并上传dumpdecrypted.dylib （已经OK的可忽略\"></a>制作并上传<code>dumpdecrypted.dylib</code> （已经OK的可忽略</h3><h4 id=\"制作\"><a href=\"#制作\" class=\"headerlink\" title=\"制作\"></a>制作</h4><p>目前我制作目录暂时在<code>~/Desktop</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/stefanesser/dumpdecrypted.git ~/Desktop</div><div class=\"line\">$ cd ～／Desktop/dumpdecrypted</div><div class=\"line\">$ make</div><div class=\"line\">$ ls dumpdecrypted.dylib</div></pre></td></tr></table></figure>\n<p>没什么错误的话，即得<code>dumpdecrypted.dylib</code>。</p>\n<h4 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h4><p>将<code>dumpdecrypted.dylib</code>放在越狱设备的<code>/var/root/</code>下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls dumpdecrypted.dylib</div><div class=\"line\">$ scp dumpdecrypted.dylib root@10.12.14.16:/var/root/</div><div class=\"line\">root@10.12.14.16&apos;s password:</div><div class=\"line\">dumpdecrypted.dylib                           100%  193KB   3.0MB/s   00:00</div><div class=\"line\">$</div></pre></td></tr></table></figure>\n<h3 id=\"登录进越狱设备\"><a href=\"#登录进越狱设备\" class=\"headerlink\" title=\"登录进越狱设备\"></a>登录进越狱设备</h3><p>可以使用<code>ssh root@IP</code>进行登录。</p>\n<p>当然也可以使用<code>ssh ipad</code>，这样免密登录登录。 <a href=\"https://madordie.github.io/reverse-ios-ssh/\">配置传送门</a></p>\n<h3 id=\"找到可执行文件路径\"><a href=\"#找到可执行文件路径\" class=\"headerlink\" title=\"找到可执行文件路径\"></a>找到可执行文件路径</h3><p>这里以<code>WeChat</code>为例子啦～</p>\n<p>记得先打开呀～～～</p>\n<p><code>ps -e</code>： 显示所有程序<br><code>grep</code>: 这里是过滤一下。。具体用法Google。所有的程序有点多，我知道名字，所以直接过滤一下。也可忽略</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ps -e | grep WeChat</div><div class=\"line\">705 ??         0:02.20 /var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat</div><div class=\"line\">707 ttys000    0:00.01 grep WeChat</div><div class=\"line\">$ cycript -p 705</div><div class=\"line\">$ cycript -p 705</div><div class=\"line\">cy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]</div><div class=\"line\">#&quot;file:///var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/&quot;</div><div class=\"line\">cy# exit(0)</div><div class=\"line\">MS:Error: _krncall(mach_vm_read_overwrite(task, data, sizeof(*baton), reinterpret_cast&lt;mach_vm_address_t&gt;(baton), &amp;error)) =4</div><div class=\"line\">*** _assert(status == 0):../Inject.cpp(143):InjectLibrary</div><div class=\"line\">$</div></pre></td></tr></table></figure>\n<p>此处获得两个目录：</p>\n<ul>\n<li><code>/var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat</code></li>\n<li><code>/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/</code></li>\n</ul>\n<h3 id=\"开砸\"><a href=\"#开砸\" class=\"headerlink\" title=\"开砸\"></a>开砸</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~</div><div class=\"line\">$ cp dumpdecrypted.dylib /var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/</div><div class=\"line\">$ cd /var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/</div><div class=\"line\">$ DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat</div><div class=\"line\">mach-o decryption dumper</div><div class=\"line\"></div><div class=\"line\">DISCLAIMER: This tool is only meant for security research purposes, not for application crackers.</div><div class=\"line\"></div><div class=\"line\">[+] detected 64bit ARM binary in memory.</div><div class=\"line\">[+] offset to cryptid found: @0x1000c0ca8(from 0x1000c0000) = ca8</div><div class=\"line\">[+] Found encrypted data at address 00004000 of length 51200000 bytes - type 1.</div><div class=\"line\">[+] Opening /private/var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat for reading.</div><div class=\"line\">[+] Reading header</div><div class=\"line\">[+] Detecting header type</div><div class=\"line\">[+] Executable is a plain MACH-O image</div><div class=\"line\">[+] Opening WeChat.decrypted for writing.</div><div class=\"line\">[+] Copying the not encrypted start of the file</div><div class=\"line\">[+] Dumping the decrypted data into the file</div><div class=\"line\">[+] Copying the not encrypted remainder of the file</div><div class=\"line\">[+] Setting the LC_ENCRYPTION_INFO-&gt;cryptid to 0 at offset ca8</div><div class=\"line\">[+] Closing original file</div><div class=\"line\">[+] Closing dump file</div><div class=\"line\">$ ls WeChat.decrypted</div><div class=\"line\">WeChat.decrypted</div><div class=\"line\">$ pwd</div><div class=\"line\">/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents</div></pre></td></tr></table></figure>\n<p>最后得到文件:</p>\n<ul>\n<li><code>/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/WeChat.decrypted</code></li>\n</ul>\n<h3 id=\"将-decrypted拷贝出来\"><a href=\"#将-decrypted拷贝出来\" class=\"headerlink\" title=\"将*.decrypted拷贝出来\"></a>将<code>*.decrypted</code>拷贝出来</h3><p>我这里直接使用<code>scp</code>吧～。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd /Users/Madordie/Desktop/Madordie/iOS/xxx</div><div class=\"line\">$ scp root@10.12.14.16:/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/WeChat.decrypted .</div><div class=\"line\">root@10.12.14.16&apos;s password:</div><div class=\"line\">WeChat.decrypted                              100%   61MB   4.7MB/s   00:12</div><div class=\"line\">$ ls WeChat.decrypted</div><div class=\"line\">WeChat.decrypted</div></pre></td></tr></table></figure>\n<p>至此在主机上得到：</p>\n<ul>\n<li><code>/Users/Madordie/Desktop/Madordie/iOS/xxx/WeChat.decrypted</code></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>为什么将<code>dumpdecrypted.dylib</code>  <code>copy</code> 至<code>*/Documents/</code>下？<br>  ：别的目录没有权限～～（<code>dumpdecrypted.dylib: stat() failed with errno=1</code> ）</li>\n</ul>\n<h1 id=\"使用clutch进行砸壳\"><a href=\"#使用clutch进行砸壳\" class=\"headerlink\" title=\"使用clutch进行砸壳\"></a>使用clutch进行砸壳</h1><h2 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"下载上传clutch-无须重复做\"><a href=\"#下载上传clutch-无须重复做\" class=\"headerlink\" title=\"下载上传clutch(无须重复做)\"></a>下载上传clutch(无须重复做)</h3><p><code>clutch</code>可以从<a href=\"https://github.com/KJCracks/Clutch\">https://github.com/KJCracks/Clutch</a>下载编译。</p>\n<p>当然也可以从<a href=\"https://github.com/KJCracks/Clutch/releases\">https://github.com/KJCracks/Clutch/releases</a>直接下载。</p>\n<p>目前下载到目录<code>~/Clutch-2.0.4</code></p>\n<p>上传到设备：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~</div><div class=\"line\">$ scp Clutch-2.0.4 root@10.12.14.16:/usr/bin/</div><div class=\"line\">root@10.12.14.16&apos;s password:</div><div class=\"line\">Clutch-2.0.4                                  100% 1204KB   4.7MB/s   00:00</div></pre></td></tr></table></figure>\n<h3 id=\"登录进越狱设备-1\"><a href=\"#登录进越狱设备-1\" class=\"headerlink\" title=\"登录进越狱设备\"></a>登录进越狱设备</h3><p>可以使用<code>ssh root@IP</code>进行登录。</p>\n<p>当然也可以使用<code>ssh ipad</code>，这样免密登录登录。 <a href=\"https://madordie.github.io/reverse-ios-ssh/\">配置传送门</a></p>\n<h3 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a>修改权限</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~</div><div class=\"line\">$ cd /usr/bin</div><div class=\"line\">$ mv Clutch-2.0.4 clutch</div><div class=\"line\">$ chmod +x clutch</div></pre></td></tr></table></figure>\n<h3 id=\"砸壳\"><a href=\"#砸壳\" class=\"headerlink\" title=\"砸壳\"></a>砸壳</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ clutch -i</div><div class=\"line\">Installed apps:</div><div class=\"line\">1:   钉钉 &lt;com.laiwang.DingTalk&gt;</div><div class=\"line\">2:   韩剧TV-最新热门韩剧大全 &lt;com.baoyun.hanju&gt;</div><div class=\"line\">3:   PG Client - a better client for dribbble &lt;com.az.azdribbble&gt;</div><div class=\"line\">4:   窝牛－设计装修我们的家 &lt;com.lingduohome.acorn&gt;</div><div class=\"line\">$ clutch -d 1</div><div class=\"line\">com.laiwang.DingTalk contains watchOS 2 compatible application. It&apos;s not possible to dump watchOS 2 apps with Clutch 2.0.4 at this moment.</div><div class=\"line\">Zipping DingTalk.app</div><div class=\"line\">ASLR slide: 0x10001c000</div><div class=\"line\">Dumping &lt;DingTalk&gt; (arm64)</div><div class=\"line\">Patched cryptid (64bit segment)</div><div class=\"line\">Writing new checksum</div><div class=\"line\">DONE: /private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa</div><div class=\"line\">Finished dumping com.laiwang.DingTalk in 40.6 seconds</div><div class=\"line\">$</div></pre></td></tr></table></figure>\n<p>生成最终路径:</p>\n<ul>\n<li><code>/private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa</code></li>\n</ul>\n<h3 id=\"传至本地\"><a href=\"#传至本地\" class=\"headerlink\" title=\"传至本地\"></a>传至本地</h3><p>注意路径中有<code>()</code>这样的字符，需要转义一下。如下：</p>\n<p>在本地终端中使用<code>scp</code>拉取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ scp root@10.12.14.16:&apos;/private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-\\(Clutch-2.0.4\\).ipa&apos; .</div><div class=\"line\">root@10.12.14.16&apos;s password:</div><div class=\"line\">com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ip 100%   48MB   3.6MB/s   00:13</div><div class=\"line\">$ ls com.laiwang.DingTalk-iOS7.0-\\(Clutch-2.0.4\\).ipa</div><div class=\"line\">com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa</div><div class=\"line\">$ pwd</div><div class=\"line\">/Users/Madordie/Desktop/Madordie/ios-reverse</div></pre></td></tr></table></figure>\n<p>至此在主机上得到：</p>\n<ul>\n<li><code>/Users/Madordie/Desktop/Madordie/ios-reverse/com.laiwang.DingTalk-iOS7.0-\\(Clutch-2.0.4\\).ipa</code></li>\n</ul>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>并不是每一个都可以支持这种工具砸壳，失败了用第一种试试。。。</li>\n</ul>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>目前发现这两种砸壳工具。但是并不是每一个APP都可以使用2种工具。有的只有一个有效，有的两个都有效，还有一种两个都失败的😂</p>"},{"title":"「转」真实世界中的 Swift 性能优化","date":"2017-01-17T11:14:57.000Z","_content":"\n原文链接：[真实世界中的 Swift 性能优化](https://realm.io/cn/news/real-world-swift-performance/)\n\n<!--more-->\n\n------\n\n有太多的因素会导致您的应用变得缓慢。在本次讲演中，我们将自底向上地来探索应用的性能优化。来看一看在真实世界中进行数据解析、数据映射和数据存储的时候，Swift 的特性（协议、泛型、结构体和类）是如何影响应用性能的，我们将确定影响性能提升的瓶颈所在，并体验 Swift 带来的「迅捷」体验。\n\n## 概述\n\n今天我打算同大家谈论 Swift 性能优化方面的内容。当我们构建软件的时候，特别是移动软件，由于人们的精力、时间有限，人们往往更喜欢有一个流畅的用户体验，而不是等着您的应用在那加载。如果应用运行速度过慢，并且不能给用户带来他们所想要的结果的话，那么这会让人们感到不爽。因此，让您的代码能够快速运行是无比重要的一件事。\n\n那么有什么因素会导致代码运行缓慢呢？当您在编写代码并选择架构的时候，深刻认识到这些架构所带来的影响是非常重要的。我将首先谈一谈：如何理解内联、动态调度与静态调度之间的权衡，以及相关结构是如何分配内存的，还有怎样选择最适合的架构。\n\n## 内存分配\n\n对象的内存分配 (allocation) 和内存释放 (deallocation) 是代码中最大的开销之一，同时通常也是不可避免的。Swift 会自行分配和释放内存，此外它存在两种类型的分配方式。\n\n第一个是基于栈 (stack-based) 的内存分配。Swift 会尽可能选择在栈上分配内存。栈是一种非常简单的数据结构；数据从栈的底部推入 (push)，从栈的顶部弹出 (pop)。由于我们只能够修改栈的末端，因此我们可以通过维护一个指向栈末端的指针来实现这种数据结构，并且在其中进行内存的分配和释放只需要重新分配该整数即可。\n\n第二个是基于堆 (heap-based) 的内存分配。这使得内存分配将具备更加动态的生命周期，但是这需要更为复杂的数据结构。要在堆上进行内存分配的话，您需要锁定堆当中的一个空闲块 (free block)，其大小能够容纳您的对象。因此，我们需要找到未使用的块，然后在其中分配内存。当我们需要释放内存的时候，我们就必须搜索何处能够重新插入该内存块。这个操作很缓慢。主要是为了线程安全，我们必须要对这些东西进行锁定和同步。\n\n## 引用计数\n\n我们还有引用计数 (reference counting) 的概念，这个操作相对不怎么耗费性能，但是由于使用次数很多，因此它带来的性能影响仍然是很大的。引用计数是 Objective-C 和 Swift 中用于确定何时该释放对象的安全机制。目前，Swift 当中的引用计数是强制自动管理的，这意味着它很容易被开发者们所忽略。然而，当您打开 Instrument 查看何处影响了代码运行的速度的时候，您会发现 20,000 多次的 Swift 持有 (retain) 和释放 (release)，这些操作占用了 90% 的代码运行时间！\n```swift\nfunc perform(with object: Object) {\n    object.doAThing()\n}\n```\n这是因为如果有这样一个函数接收了一个对象作为参数，并且执行了这个对象的 doAThing() 方法，编译器会自动插入对象持有和释放操作，以确保在这个方法的生命周期当中，这个对象不会被回收掉。\n```swift\nfunc perform(with object: Object) {\n    __swift_retain(object)\n    object.doAThing()\n    __swift_release(object)\n}\n```\n这些对象持有和释放操作是原子操作 (atomic operations)，所以它们运转缓慢就很正常了。或者，是因为我们不知道如何让它们能够运行得更快一些。\n\n## 调度与对象\n\n此外还有调度 (dispatch) 的概念。Swift 拥有三种类型的调度方式。Swift 会尽可能将函数内联 (inline)，这样的话使用这个函数将不会有额外的性能开销。这个函数可以直接调用。静态调度 (static dispatch) 本质上是通过 V-table 进行的查找和跳转，这个操作会花费一纳秒的时间。然后动态调度 (dynamic dispatch) 将会花费大概五纳秒的时间，如果您只有几个这样的方法调用的话，这实际上并不会带来多大的问题，问题是当您在一个嵌套循环或者执行上千次操作当中使用了动态调度的话，那么它所带来的性能耗费将成百上千地累积起来，最终影响应用性能。\n\nSwift 同样也有两种类型的对象。\n```swift\nclass Index {\n    let section: Int\n    let item: Int\n}\n\nlet i = Index(section: 1,\n                item: 1)\n```\n这是一个类，类当中的数据都会在堆上分配内存。您可以在此处看到，这里我们创建了一个名为 Index 的类。其中包含了两个属性，一个 section 和一个 item。当我们创建了这个对象的时候，堆上便创建了一个指向此 Index 的指针，因此在堆上便存放了这个 section 和 item 的数据和空间。\n\n如果我们对其建立引用，就会发现我们现在有两个指向堆上相同区域的指针了，它们之间是共享内存的。\n```swift\nclass Index {\n    let section: Int\n    let item: Int\n}\n\nlet i = Index(section: 1,\n                item: 1)\n\nlet i2 = i\n```\n这个时候，Swift 会自动插入对象持有操作。\n```swift\nclass Index {\n    let section: Int\n    let item: Int\n}\n\nlet i = Index(section: 1,\n                item: 1)\n\n__swift_retain(i)\nlet i2 = i\n```\n## 结构体\n\n很多人都会说：要编写性能优异的 Swift 代码，最简单的方式就是使用结构体了，结构体通常是一个很好的结构，因为结构体会存储在栈上，并且通常会使用静态调度或者内联调度。\n\n存储在栈上的 Swift 结构体将占用三个 Word 大小。如果您的结构体当中的数据数量低于三种的话，那么结构体的值会自动在栈上内联。Word 是 CPU 当中内置整数的大小，它是 CPU 所工作的区块。\n```swift\nstruct Index {\n    let section: Int\n    let item: Int\n}\n\nlet i = Index(section: 1, item: 1)\n```\n在这里您可以看到，当我们创建这个结构体的时候，带有 section 和 item 值得 Index 结构体将会直接下放到栈当中，这个时候不会有额外的内存分配发生。那么如果我们在别处将其赋值到另一个变量的时候，会发生什么呢？\n```swift\nstruct Index {\n    let section: Int\n    let item: Int\n}\n\nlet i = Index(section: 1, item: 1)\nlet i2 = i\n```\n如果我们将 i 赋给 i2，这会将我们存储在栈当中的值直接再次复制一遍，这个时候并不会出现引用的情况。这就是所谓的「值类型」。\n\n那么如果结构体当中存放了引用类型的话又会怎样呢？持有内联指针的结构体。\n```swift\nstruct User {\n    let name: String\n    let id: String\n}\n\nlet u = User(name: \"Joe\", id: \"1234\")\n```\n当我们将其赋值给别的变量的时候，我们就持有了共享两个结构体的相同指针，因此我们必须要对这两个指针进行持有操作，而不是在对象上执行单独的持有操作。\n```swift\nstruct User {\n    let name: String\n    let id: String\n}\n\nlet u = User(name: \"Joe\",\n             id: \"1234\")\n__swift_retain(u.name._textStorage)\n__swift_retain(u.id._textStorage)\nlet u2 = u\n```\n如果其中包含了类的话，那么性能耗费会更大。\n\n## 抽象类型\n\n正如我们此前所述，Swift 提供了许多不同的抽象类型 (abstraction)，从而允许我们自行决定代码该如何运行，以及决定代码的性能特性。现在我们来看一看抽象类型是如何在实际环境当中使用的。这里有一段很简单的代码：\n```swift\nstruct Circle {\n    let radius: Double\n    let center: Point\n    func draw() {}\n}\n\nvar circles = (1..<100_000_000).map { _ in Circle(...) }\n\nfor circle in circles {\n    circle.draw()\n}\n```\n这里有一个带有 radius 和 center 属性的 Circle 结构体。它将占用三个 Word 大小的空间，并存储在栈上。我们创建了一亿个 Circle，然后我们遍历这些 Circle 并调用这个函数。在我的电脑上，这段操作在发布模式下耗费了 0.3 秒的时间。那么当需求发生变更的时候，会发生什么事呢？\n\n我们不仅需要绘圆，还需要能够处理多种类型的形状。让我们假设我们还需要绘线。我非常喜欢面向协议编程，因为它允许我在不使用继承的情况下实现多态性，并且它允许我们只需要考虑这个「抽象类型」即可。\n```\nprotocol Drawable {\n    func draw()\n}\n\nstruct Circle: Drawable {\n    let radius: Double\n    let center: Point\n    func draw() {}\n}\n\nlet drawables: [Drawable] = (1..<100_000_000).map { _ in Circle(...) }\n\nfor drawable in drawables {\n    drawable.draw()\n}\n```\n我们需要做的，就是将这个 draw 方法析取到协议当中，然后将数组的引用类型变更为这个协议，这样做导致这段代码花费了 4.0 秒的时间来运行。速率减慢了 1300%，这是为什么呢？\n\n这是因为此前的代码可以被静态调度，从而在没有任何堆应用建立的情况下仍能够执行。这就是协议是如何实现的。\n\n例如，如大家所见，这里是我们此前的 Circle 结构体。在这个 for 循环当中，Swift 编译器所做的就是前往 V-table 进行查找，或者直接将 draw 函数内联。\n\n```\nstruct Circle {\n    let radius: Double\n    let center: Point\n    func draw() {}\n}\n\nvar circles = (1..<100_000_000).map { _ in Circle(...) }\n\nfor circle in circles {\n    circle.draw()\n}\n```\n当我们用协议来替代的时候，此时它并不知道这个对象是结构体还是类。因为这里可能是任何一个实现此协议的类型。\n\n```\nprotocol Drawable {\n    func draw()\n}\n\nstruct Circle: Drawable {\n    let radius: Double\n    let center: Point\n\n    func draw() {}\n}\n\nvar drawables: [Drawable] = (1..<100_000_000).map { _ in return Circle(...) }\n\nfor drawable in drawables {\n    drawable.draw()\n}\n```\n那么我们该如何去调度这个 draw 函数呢？答案就位于协议记录表 (protocol witness table，也称为虚函数表) 当中。它其中存放了您应用当中每个实现协议的对象名，并且在底层实现当中，这个表本质上充当了这些类型的别名。\n\n```\nprotocol Drawable {\n    func draw()\n}\n\nstruct Circle: Drawable {\n    let radius: Double\n    let center: Point\n\n    func draw() {}\n}\n\nvar drawables: [Drawable] = (1..<100_000_000).map { _ in\n    return Circle(...)\n}\n\nfor drawable in drawables {\n    drawable.draw()\n}\n```\n在这里的代码当中，我们该如何获取协议记录表呢？答案就是从这个既有容器 (existential container) 当中获取，这个容器目前拥有一个三个字大小的结构体，并且存放在其内部的值缓冲区当中，此外还与协议记录表建立了引用关系。\n\n```\nstruct Circle: Drawable {\n    let radius: Double\n    let center: Point\n\n    func draw() {}\n}\n```\n这里 Circle 类型存放在了三个字大小的缓冲区当中，并且不会被单独引用。\n\n```\nstruct Line: Drawable {\n    let origin: Point\n    let end: Point\n\n    func draw() {}\n}\n```\n举个例子，对于我们的 Line 类型来说，它其中包含了四个字的存储空间，因为它拥有两个点类型。这个 Line 结构体需要超过四个字以上的存储空间。我们该如何处理它呢？这会对性能有影响么？好吧，它的确会：\n\n```\nprotocol Drawable {\n    func draw()\n}\n\nstruct Line: Drawable {\n    let origin: Point\n    let end: Point\n    func draw() {}\n}\n\nlet drawables: [Drawable] = (1..<100_000_000).map { _ in Line(...) }\n\nfor drawable in drawables {\n    drawable.draw()\n}\n```\n这需要花费 45 秒钟的时间来运行。为什么这里要花这么久的时间呢，发生了什么事呢？\n\n绝大部分的时间都花费在对结构体进行内存分配上了，因为现在它们无法存放在只有三个字大小的缓冲区当中了。因此这些结构会在堆上进行内存分配，此外这也与协议有一点关系。由于既有容器只能够存储三个字大小的结构体，或者也可以与对象建立引用关系，我们同样需要某种名为值记录表 (value witness table)。这就是我们用来处理任意值的东西。\n\n因此在这里，编译器将创建一个值记录表，对每个���缓冲区、内敛结构体来说，都有三个字大小的缓冲区，然后它将负责对值或者类进行内存分配、拷贝、销毁和内存释放等操作。\n\n```\nfunc draw(drawable: Drawable) {\n    drawable.draw()\n}\n\nlet value: Drawable = Line()\ndraw(local: value)\n\n// Generates\nfunc draw(value: ECTDrawable) {\n    var drawable: ECTDrawable = ECTDrawable()\n    let vwt = value.vwt\n    let pwt = value.pwt\n    drawable.vwt = value.vwt\n    drawable.pwt = value.pwt\n    vwt.allocateBuffAndCopyValue(&drawable, value)\n    pwt.draw(vwt.projectBuffer(&drawable)\n}\n```\n这里是一个例子，这就是这个过程的中间产物。如果我们只有一个 draw 函数，那么它将会接受我们创建的 Line 作为参数，因此我们将它传递给这个 draw 函数即可。\n\n实际情况时，它将这个 Drawable 协议传递到既有容器当中，然后在函数内部再次进行创建。这会对值和协议记录表进行赋值，然后分配一个新的缓冲区，然后将其他结构、类或者类似对象的值拷贝进这个缓冲区当中。然后就使用协议记录表当中的 draw 函数，把真实的 Drable 对象传递给这个函数。\n\n您可以看到，值记录表和协议记录表将会存放在栈上，而 Line 将会被存放在堆上，从而最后将线绘制出来。\n\n## 结论\n\n对我们进行数据建模的方式进行简单的更改将会对性能造成巨大的影响。让我们来看一看该如何来避免这些情况的发生。\n\n首先让我们来说一说泛型。大家可能会说了，我给各位展示了协议会导致性能的下降，那么我们为什么还要使用泛型呢？答案在于：泛型允许我们做什么。\n\n```\nstruct Stack<T: Type> {\n...\n}\n```\n假设我们这里有一个带有泛型 T 的 Stack 结构体，它受到一个协议类型的约束。编译器所要做的，就是将这个 T 提换成相应的协议，或者替换为我们传入的具体类型。这些操作会一直沿着函数链 (function chain) 执行，并且编译器会创建直接对此类型进行操作的专用版本。\n\n这样我们就无需再使用值记录表或者协议记录表了，并且还移除了既有容器，这可能是一个非常好的解决方式，这使得我们仍然能够写出真正快速运行的泛型代码，并且还具备 Swift 所提供的良好多态性。这就是所谓的静态多态性 (static polymorphism)。\n\n您还可以通过使用枚举来改进数据模型，而不是从服务器中获取大量的字符串。例如，假设您正在构建一个社交应用，您需要对账户建立状态的管理，以前您可能会使用字符串来进行控制。\n\n```\nenum AccountStatus: String, RawRepresentable {\ncase .banned, .verified, incomplete\n}\n```\n如果我们改用枚举的话，那么我们就无需进行内存分配了，当我们传递这个类型的时候，我们只是将枚举值进行传递，这是一个加快代码运行速度的好方法，同时也可以为整个应用程序提供更安全、更可读的代码。\n\n此外，使用 u-模型或者演示者 (Presenter) 或者不同的抽象类型的形式，来构建特定类型的模型也是非常有用的，这使得我们能够精简掉应用当中许多不必要的部分。\n\n好的，我的讲演到此结束，内容很短，感谢诸位的参与！\n\n\n","source":"_posts/real-world-swift-performance.md","raw":"---\ntitle: 「转」真实世界中的 Swift 性能优化\ndate: 2017-01-17 19:14:57\ntags:\ncategories:\n    - Swift\n---\n\n原文链接：[真实世界中的 Swift 性能优化](https://realm.io/cn/news/real-world-swift-performance/)\n\n<!--more-->\n\n------\n\n有太多的因素会导致您的应用变得缓慢。在本次讲演中，我们将自底向上地来探索应用的性能优化。来看一看在真实世界中进行数据解析、数据映射和数据存储的时候，Swift 的特性（协议、泛型、结构体和类）是如何影响应用性能的，我们将确定影响性能提升的瓶颈所在，并体验 Swift 带来的「迅捷」体验。\n\n## 概述\n\n今天我打算同大家谈论 Swift 性能优化方面的内容。当我们构建软件的时候，特别是移动软件，由于人们的精力、时间有限，人们往往更喜欢有一个流畅的用户体验，而不是等着您的应用在那加载。如果应用运行速度过慢，并且不能给用户带来他们所想要的结果的话，那么这会让人们感到不爽。因此，让您的代码能够快速运行是无比重要的一件事。\n\n那么有什么因素会导致代码运行缓慢呢？当您在编写代码并选择架构的时候，深刻认识到这些架构所带来的影响是非常重要的。我将首先谈一谈：如何理解内联、动态调度与静态调度之间的权衡，以及相关结构是如何分配内存的，还有怎样选择最适合的架构。\n\n## 内存分配\n\n对象的内存分配 (allocation) 和内存释放 (deallocation) 是代码中最大的开销之一，同时通常也是不可避免的。Swift 会自行分配和释放内存，此外它存在两种类型的分配方式。\n\n第一个是基于栈 (stack-based) 的内存分配。Swift 会尽可能选择在栈上分配内存。栈是一种非常简单的数据结构；数据从栈的底部推入 (push)，从栈的顶部弹出 (pop)。由于我们只能够修改栈的末端，因此我们可以通过维护一个指向栈末端的指针来实现这种数据结构，并且在其中进行内存的分配和释放只需要重新分配该整数即可。\n\n第二个是基于堆 (heap-based) 的内存分配。这使得内存分配将具备更加动态的生命周期，但是这需要更为复杂的数据结构。要在堆上进行内存分配的话，您需要锁定堆当中的一个空闲块 (free block)，其大小能够容纳您的对象。因此，我们需要找到未使用的块，然后在其中分配内存。当我们需要释放内存的时候，我们就必须搜索何处能够重新插入该内存块。这个操作很缓慢。主要是为了线程安全，我们必须要对这些东西进行锁定和同步。\n\n## 引用计数\n\n我们还有引用计数 (reference counting) 的概念，这个操作相对不怎么耗费性能，但是由于使用次数很多，因此它带来的性能影响仍然是很大的。引用计数是 Objective-C 和 Swift 中用于确定何时该释放对象的安全机制。目前，Swift 当中的引用计数是强制自动管理的，这意味着它很容易被开发者们所忽略。然而，当您打开 Instrument 查看何处影响了代码运行的速度的时候，您会发现 20,000 多次的 Swift 持有 (retain) 和释放 (release)，这些操作占用了 90% 的代码运行时间！\n```swift\nfunc perform(with object: Object) {\n    object.doAThing()\n}\n```\n这是因为如果有这样一个函数接收了一个对象作为参数，并且执行了这个对象的 doAThing() 方法，编译器会自动插入对象持有和释放操作，以确保在这个方法的生命周期当中，这个对象不会被回收掉。\n```swift\nfunc perform(with object: Object) {\n    __swift_retain(object)\n    object.doAThing()\n    __swift_release(object)\n}\n```\n这些对象持有和释放操作是原子操作 (atomic operations)，所以它们运转缓慢就很正常了。或者，是因为我们不知道如何让它们能够运行得更快一些。\n\n## 调度与对象\n\n此外还有调度 (dispatch) 的概念。Swift 拥有三种类型的调度方式。Swift 会尽可能将函数内联 (inline)，这样的话使用这个函数将不会有额外的性能开销。这个函数可以直接调用。静态调度 (static dispatch) 本质上是通过 V-table 进行的查找和跳转，这个操作会花费一纳秒的时间。然后动态调度 (dynamic dispatch) 将会花费大概五纳秒的时间，如果您只有几个这样的方法调用的话，这实际上并不会带来多大的问题，问题是当您在一个嵌套循环或者执行上千次操作当中使用了动态调度的话，那么它所带来的性能耗费将成百上千地累积起来，最终影响应用性能。\n\nSwift 同样也有两种类型的对象。\n```swift\nclass Index {\n    let section: Int\n    let item: Int\n}\n\nlet i = Index(section: 1,\n                item: 1)\n```\n这是一个类，类当中的数据都会在堆上分配内存。您可以在此处看到，这里我们创建了一个名为 Index 的类。其中包含了两个属性，一个 section 和一个 item。当我们创建了这个对象的时候，堆上便创建了一个指向此 Index 的指针，因此在堆上便存放了这个 section 和 item 的数据和空间。\n\n如果我们对其建立引用，就会发现我们现在有两个指向堆上相同区域的指针了，它们之间是共享内存的。\n```swift\nclass Index {\n    let section: Int\n    let item: Int\n}\n\nlet i = Index(section: 1,\n                item: 1)\n\nlet i2 = i\n```\n这个时候，Swift 会自动插入对象持有操作。\n```swift\nclass Index {\n    let section: Int\n    let item: Int\n}\n\nlet i = Index(section: 1,\n                item: 1)\n\n__swift_retain(i)\nlet i2 = i\n```\n## 结构体\n\n很多人都会说：要编写性能优异的 Swift 代码，最简单的方式就是使用结构体了，结构体通常是一个很好的结构，因为结构体会存储在栈上，并且通常会使用静态调度或者内联调度。\n\n存储在栈上的 Swift 结构体将占用三个 Word 大小。如果您的结构体当中的数据数量低于三种的话，那么结构体的值会自动在栈上内联。Word 是 CPU 当中内置整数的大小，它是 CPU 所工作的区块。\n```swift\nstruct Index {\n    let section: Int\n    let item: Int\n}\n\nlet i = Index(section: 1, item: 1)\n```\n在这里您可以看到，当我们创建这个结构体的时候，带有 section 和 item 值得 Index 结构体将会直接下放到栈当中，这个时候不会有额外的内存分配发生。那么如果我们在别处将其赋值到另一个变量的时候，会发生什么呢？\n```swift\nstruct Index {\n    let section: Int\n    let item: Int\n}\n\nlet i = Index(section: 1, item: 1)\nlet i2 = i\n```\n如果我们将 i 赋给 i2，这会将我们存储在栈当中的值直接再次复制一遍，这个时候并不会出现引用的情况。这就是所谓的「值类型」。\n\n那么如果结构体当中存放了引用类型的话又会怎样呢？持有内联指针的结构体。\n```swift\nstruct User {\n    let name: String\n    let id: String\n}\n\nlet u = User(name: \"Joe\", id: \"1234\")\n```\n当我们将其赋值给别的变量的时候，我们就持有了共享两个结构体的相同指针，因此我们必须要对这两个指针进行持有操作，而不是在对象上执行单独的持有操作。\n```swift\nstruct User {\n    let name: String\n    let id: String\n}\n\nlet u = User(name: \"Joe\",\n             id: \"1234\")\n__swift_retain(u.name._textStorage)\n__swift_retain(u.id._textStorage)\nlet u2 = u\n```\n如果其中包含了类的话，那么性能耗费会更大。\n\n## 抽象类型\n\n正如我们此前所述，Swift 提供了许多不同的抽象类型 (abstraction)，从而允许我们自行决定代码该如何运行，以及决定代码的性能特性。现在我们来看一看抽象类型是如何在实际环境当中使用的。这里有一段很简单的代码：\n```swift\nstruct Circle {\n    let radius: Double\n    let center: Point\n    func draw() {}\n}\n\nvar circles = (1..<100_000_000).map { _ in Circle(...) }\n\nfor circle in circles {\n    circle.draw()\n}\n```\n这里有一个带有 radius 和 center 属性的 Circle 结构体。它将占用三个 Word 大小的空间，并存储在栈上。我们创建了一亿个 Circle，然后我们遍历这些 Circle 并调用这个函数。在我的电脑上，这段操作在发布模式下耗费了 0.3 秒的时间。那么当需求发生变更的时候，会发生什么事呢？\n\n我们不仅需要绘圆，还需要能够处理多种类型的形状。让我们假设我们还需要绘线。我非常喜欢面向协议编程，因为它允许我在不使用继承的情况下实现多态性，并且它允许我们只需要考虑这个「抽象类型」即可。\n```\nprotocol Drawable {\n    func draw()\n}\n\nstruct Circle: Drawable {\n    let radius: Double\n    let center: Point\n    func draw() {}\n}\n\nlet drawables: [Drawable] = (1..<100_000_000).map { _ in Circle(...) }\n\nfor drawable in drawables {\n    drawable.draw()\n}\n```\n我们需要做的，就是将这个 draw 方法析取到协议当中，然后将数组的引用类型变更为这个协议，这样做导致这段代码花费了 4.0 秒的时间来运行。速率减慢了 1300%，这是为什么呢？\n\n这是因为此前的代码可以被静态调度，从而在没有任何堆应用建立的情况下仍能够执行。这就是协议是如何实现的。\n\n例如，如大家所见，这里是我们此前的 Circle 结构体。在这个 for 循环当中，Swift 编译器所做的就是前往 V-table 进行查找，或者直接将 draw 函数内联。\n\n```\nstruct Circle {\n    let radius: Double\n    let center: Point\n    func draw() {}\n}\n\nvar circles = (1..<100_000_000).map { _ in Circle(...) }\n\nfor circle in circles {\n    circle.draw()\n}\n```\n当我们用协议来替代的时候，此时它并不知道这个对象是结构体还是类。因为这里可能是任何一个实现此协议的类型。\n\n```\nprotocol Drawable {\n    func draw()\n}\n\nstruct Circle: Drawable {\n    let radius: Double\n    let center: Point\n\n    func draw() {}\n}\n\nvar drawables: [Drawable] = (1..<100_000_000).map { _ in return Circle(...) }\n\nfor drawable in drawables {\n    drawable.draw()\n}\n```\n那么我们该如何去调度这个 draw 函数呢？答案就位于协议记录表 (protocol witness table，也称为虚函数表) 当中。它其中存放了您应用当中每个实现协议的对象名，并且在底层实现当中，这个表本质上充当了这些类型的别名。\n\n```\nprotocol Drawable {\n    func draw()\n}\n\nstruct Circle: Drawable {\n    let radius: Double\n    let center: Point\n\n    func draw() {}\n}\n\nvar drawables: [Drawable] = (1..<100_000_000).map { _ in\n    return Circle(...)\n}\n\nfor drawable in drawables {\n    drawable.draw()\n}\n```\n在这里的代码当中，我们该如何获取协议记录表呢？答案就是从这个既有容器 (existential container) 当中获取，这个容器目前拥有一个三个字大小的结构体，并且存放在其内部的值缓冲区当中，此外还与协议记录表建立了引用关系。\n\n```\nstruct Circle: Drawable {\n    let radius: Double\n    let center: Point\n\n    func draw() {}\n}\n```\n这里 Circle 类型存放在了三个字大小的缓冲区当中，并且不会被单独引用。\n\n```\nstruct Line: Drawable {\n    let origin: Point\n    let end: Point\n\n    func draw() {}\n}\n```\n举个例子，对于我们的 Line 类型来说，它其中包含了四个字的存储空间，因为它拥有两个点类型。这个 Line 结构体需要超过四个字以上的存储空间。我们该如何处理它呢？这会对性能有影响么？好吧，它的确会：\n\n```\nprotocol Drawable {\n    func draw()\n}\n\nstruct Line: Drawable {\n    let origin: Point\n    let end: Point\n    func draw() {}\n}\n\nlet drawables: [Drawable] = (1..<100_000_000).map { _ in Line(...) }\n\nfor drawable in drawables {\n    drawable.draw()\n}\n```\n这需要花费 45 秒钟的时间来运行。为什么这里要花这么久的时间呢，发生了什么事呢？\n\n绝大部分的时间都花费在对结构体进行内存分配上了，因为现在它们无法存放在只有三个字大小的缓冲区当中了。因此这些结构会在堆上进行内存分配，此外这也与协议有一点关系。由于既有容器只能够存储三个字大小的结构体，或者也可以与对象建立引用关系，我们同样需要某种名为值记录表 (value witness table)。这就是我们用来处理任意值的东西。\n\n因此在这里，编译器将创建一个值记录表，对每个���缓冲区、内敛结构体来说，都有三个字大小的缓冲区，然后它将负责对值或者类进行内存分配、拷贝、销毁和内存释放等操作。\n\n```\nfunc draw(drawable: Drawable) {\n    drawable.draw()\n}\n\nlet value: Drawable = Line()\ndraw(local: value)\n\n// Generates\nfunc draw(value: ECTDrawable) {\n    var drawable: ECTDrawable = ECTDrawable()\n    let vwt = value.vwt\n    let pwt = value.pwt\n    drawable.vwt = value.vwt\n    drawable.pwt = value.pwt\n    vwt.allocateBuffAndCopyValue(&drawable, value)\n    pwt.draw(vwt.projectBuffer(&drawable)\n}\n```\n这里是一个例子，这就是这个过程的中间产物。如果我们只有一个 draw 函数，那么它将会接受我们创建的 Line 作为参数，因此我们将它传递给这个 draw 函数即可。\n\n实际情况时，它将这个 Drawable 协议传递到既有容器当中，然后在函数内部再次进行创建。这会对值和协议记录表进行赋值，然后分配一个新的缓冲区，然后将其他结构、类或者类似对象的值拷贝进这个缓冲区当中。然后就使用协议记录表当中的 draw 函数，把真实的 Drable 对象传递给这个函数。\n\n您可以看到，值记录表和协议记录表将会存放在栈上，而 Line 将会被存放在堆上，从而最后将线绘制出来。\n\n## 结论\n\n对我们进行数据建模的方式进行简单的更改将会对性能造成巨大的影响。让我们来看一看该如何来避免这些情况的发生。\n\n首先让我们来说一说泛型。大家可能会说了，我给各位展示了协议会导致性能的下降，那么我们为什么还要使用泛型呢？答案在于：泛型允许我们做什么。\n\n```\nstruct Stack<T: Type> {\n...\n}\n```\n假设我们这里有一个带有泛型 T 的 Stack 结构体，它受到一个协议类型的约束。编译器所要做的，就是将这个 T 提换成相应的协议，或者替换为我们传入的具体类型。这些操作会一直沿着函数链 (function chain) 执行，并且编译器会创建直接对此类型进行操作的专用版本。\n\n这样我们就无需再使用值记录表或者协议记录表了，并且还移除了既有容器，这可能是一个非常好的解决方式，这使得我们仍然能够写出真正快速运行的泛型代码，并且还具备 Swift 所提供的良好多态性。这就是所谓的静态多态性 (static polymorphism)。\n\n您还可以通过使用枚举来改进数据模型，而不是从服务器中获取大量的字符串。例如，假设您正在构建一个社交应用，您需要对账户建立状态的管理，以前您可能会使用字符串来进行控制。\n\n```\nenum AccountStatus: String, RawRepresentable {\ncase .banned, .verified, incomplete\n}\n```\n如果我们改用枚举的话，那么我们就无需进行内存分配了，当我们传递这个类型的时候，我们只是将枚举值进行传递，这是一个加快代码运行速度的好方法，同时也可以为整个应用程序提供更安全、更可读的代码。\n\n此外，使用 u-模型或者演示者 (Presenter) 或者不同的抽象类型的形式，来构建特定类型的模型也是非常有用的，这使得我们能够精简掉应用当中许多不必要的部分。\n\n好的，我的讲演到此结束，内容很短，感谢诸位的参与！\n\n\n","slug":"real-world-swift-performance","published":1,"updated":"2017-05-16T04:24:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfo20017khuv715c1dht","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>原文链接：<a href=\"https://realm.io/cn/news/real-world-swift-performance/\" target=\"_blank\" rel=\"external\">真实世界中的 Swift 性能优化</a></p>\n<a id=\"more\"></a>\n<hr>\n<p>有太多的因素会导致您的应用变得缓慢。在本次讲演中，我们将自底向上地来探索应用的性能优化。来看一看在真实世界中进行数据解析、数据映射和数据存储的时候，Swift 的特性（协议、泛型、结构体和类）是如何影响应用性能的，我们将确定影响性能提升的瓶颈所在，并体验 Swift 带来的「迅捷」体验。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>今天我打算同大家谈论 Swift 性能优化方面的内容。当我们构建软件的时候，特别是移动软件，由于人们的精力、时间有限，人们往往更喜欢有一个流畅的用户体验，而不是等着您的应用在那加载。如果应用运行速度过慢，并且不能给用户带来他们所想要的结果的话，那么这会让人们感到不爽。因此，让您的代码能够快速运行是无比重要的一件事。</p>\n<p>那么有什么因素会导致代码运行缓慢呢？当您在编写代码并选择架构的时候，深刻认识到这些架构所带来的影响是非常重要的。我将首先谈一谈：如何理解内联、动态调度与静态调度之间的权衡，以及相关结构是如何分配内存的，还有怎样选择最适合的架构。</p>\n<h2 id=\"内存分配\"><a href=\"#内存分配\" class=\"headerlink\" title=\"内存分配\"></a>内存分配</h2><p>对象的内存分配 (allocation) 和内存释放 (deallocation) 是代码中最大的开销之一，同时通常也是不可避免的。Swift 会自行分配和释放内存，此外它存在两种类型的分配方式。</p>\n<p>第一个是基于栈 (stack-based) 的内存分配。Swift 会尽可能选择在栈上分配内存。栈是一种非常简单的数据结构；数据从栈的底部推入 (push)，从栈的顶部弹出 (pop)。由于我们只能够修改栈的末端，因此我们可以通过维护一个指向栈末端的指针来实现这种数据结构，并且在其中进行内存的分配和释放只需要重新分配该整数即可。</p>\n<p>第二个是基于堆 (heap-based) 的内存分配。这使得内存分配将具备更加动态的生命周期，但是这需要更为复杂的数据结构。要在堆上进行内存分配的话，您需要锁定堆当中的一个空闲块 (free block)，其大小能够容纳您的对象。因此，我们需要找到未使用的块，然后在其中分配内存。当我们需要释放内存的时候，我们就必须搜索何处能够重新插入该内存块。这个操作很缓慢。主要是为了线程安全，我们必须要对这些东西进行锁定和同步。</p>\n<h2 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h2><p>我们还有引用计数 (reference counting) 的概念，这个操作相对不怎么耗费性能，但是由于使用次数很多，因此它带来的性能影响仍然是很大的。引用计数是 Objective-C 和 Swift 中用于确定何时该释放对象的安全机制。目前，Swift 当中的引用计数是强制自动管理的，这意味着它很容易被开发者们所忽略。然而，当您打开 Instrument 查看何处影响了代码运行的速度的时候，您会发现 20,000 多次的 Swift 持有 (retain) 和释放 (release)，这些操作占用了 90% 的代码运行时间！<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">perform</span><span class=\"params\">(with object: Object)</span></span> &#123;</div><div class=\"line\">    object.doAThing()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这是因为如果有这样一个函数接收了一个对象作为参数，并且执行了这个对象的 doAThing() 方法，编译器会自动插入对象持有和释放操作，以确保在这个方法的生命周期当中，这个对象不会被回收掉。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">perform</span><span class=\"params\">(with object: Object)</span></span> &#123;</div><div class=\"line\">    __swift_retain(object)</div><div class=\"line\">    object.doAThing()</div><div class=\"line\">    __swift_release(object)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这些对象持有和释放操作是原子操作 (atomic operations)，所以它们运转缓慢就很正常了。或者，是因为我们不知道如何让它们能够运行得更快一些。</p>\n<h2 id=\"调度与对象\"><a href=\"#调度与对象\" class=\"headerlink\" title=\"调度与对象\"></a>调度与对象</h2><p>此外还有调度 (dispatch) 的概念。Swift 拥有三种类型的调度方式。Swift 会尽可能将函数内联 (inline)，这样的话使用这个函数将不会有额外的性能开销。这个函数可以直接调用。静态调度 (static dispatch) 本质上是通过 V-table 进行的查找和跳转，这个操作会花费一纳秒的时间。然后动态调度 (dynamic dispatch) 将会花费大概五纳秒的时间，如果您只有几个这样的方法调用的话，这实际上并不会带来多大的问题，问题是当您在一个嵌套循环或者执行上千次操作当中使用了动态调度的话，那么它所带来的性能耗费将成百上千地累积起来，最终影响应用性能。</p>\n<p>Swift 同样也有两种类型的对象。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> section: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> item: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"type\">Index</span>(section: <span class=\"number\">1</span>,</div><div class=\"line\">                item: <span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<p>这是一个类，类当中的数据都会在堆上分配内存。您可以在此处看到，这里我们创建了一个名为 Index 的类。其中包含了两个属性，一个 section 和一个 item。当我们创建了这个对象的时候，堆上便创建了一个指向此 Index 的指针，因此在堆上便存放了这个 section 和 item 的数据和空间。</p>\n<p>如果我们对其建立引用，就会发现我们现在有两个指向堆上相同区域的指针了，它们之间是共享内存的。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> section: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> item: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"type\">Index</span>(section: <span class=\"number\">1</span>,</div><div class=\"line\">                item: <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> i2 = i</div></pre></td></tr></table></figure></p>\n<p>这个时候，Swift 会自动插入对象持有操作。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> section: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> item: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"type\">Index</span>(section: <span class=\"number\">1</span>,</div><div class=\"line\">                item: <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">__swift_retain(i)</div><div class=\"line\"><span class=\"keyword\">let</span> i2 = i</div></pre></td></tr></table></figure></p>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><p>很多人都会说：要编写性能优异的 Swift 代码，最简单的方式就是使用结构体了，结构体通常是一个很好的结构，因为结构体会存储在栈上，并且通常会使用静态调度或者内联调度。</p>\n<p>存储在栈上的 Swift 结构体将占用三个 Word 大小。如果您的结构体当中的数据数量低于三种的话，那么结构体的值会自动在栈上内联。Word 是 CPU 当中内置整数的大小，它是 CPU 所工作的区块。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Index</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> section: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> item: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"type\">Index</span>(section: <span class=\"number\">1</span>, item: <span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<p>在这里您可以看到，当我们创建这个结构体的时候，带有 section 和 item 值得 Index 结构体将会直接下放到栈当中，这个时候不会有额外的内存分配发生。那么如果我们在别处将其赋值到另一个变量的时候，会发生什么呢？<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Index</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> section: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> item: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"type\">Index</span>(section: <span class=\"number\">1</span>, item: <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> i2 = i</div></pre></td></tr></table></figure></p>\n<p>如果我们将 i 赋给 i2，这会将我们存储在栈当中的值直接再次复制一遍，这个时候并不会出现引用的情况。这就是所谓的「值类型」。</p>\n<p>那么如果结构体当中存放了引用类型的话又会怎样呢？持有内联指针的结构体。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">let</span> id: <span class=\"type\">String</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> u = <span class=\"type\">User</span>(name: <span class=\"string\">\"Joe\"</span>, id: <span class=\"string\">\"1234\"</span>)</div></pre></td></tr></table></figure></p>\n<p>当我们将其赋值给别的变量的时候，我们就持有了共享两个结构体的相同指针，因此我们必须要对这两个指针进行持有操作，而不是在对象上执行单独的持有操作。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">let</span> id: <span class=\"type\">String</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> u = <span class=\"type\">User</span>(name: <span class=\"string\">\"Joe\"</span>,</div><div class=\"line\">             id: <span class=\"string\">\"1234\"</span>)</div><div class=\"line\">__swift_retain(u.name._textStorage)</div><div class=\"line\">__swift_retain(u.id._textStorage)</div><div class=\"line\"><span class=\"keyword\">let</span> u2 = u</div></pre></td></tr></table></figure></p>\n<p>如果其中包含了类的话，那么性能耗费会更大。</p>\n<h2 id=\"抽象类型\"><a href=\"#抽象类型\" class=\"headerlink\" title=\"抽象类型\"></a>抽象类型</h2><p>正如我们此前所述，Swift 提供了许多不同的抽象类型 (abstraction)，从而允许我们自行决定代码该如何运行，以及决定代码的性能特性。现在我们来看一看抽象类型是如何在实际环境当中使用的。这里有一段很简单的代码：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> radius: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">let</span> center: <span class=\"type\">Point</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> circles = (<span class=\"number\">1</span>..&lt;<span class=\"number\">100_000_000</span>).<span class=\"built_in\">map</span> &#123; <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"type\">Circle</span>(...) &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> circle <span class=\"keyword\">in</span> circles &#123;</div><div class=\"line\">    circle.draw()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里有一个带有 radius 和 center 属性的 Circle 结构体。它将占用三个 Word 大小的空间，并存储在栈上。我们创建了一亿个 Circle，然后我们遍历这些 Circle 并调用这个函数。在我的电脑上，这段操作在发布模式下耗费了 0.3 秒的时间。那么当需求发生变更的时候，会发生什么事呢？</p>\n<p>我们不仅需要绘圆，还需要能够处理多种类型的形状。让我们假设我们还需要绘线。我非常喜欢面向协议编程，因为它允许我在不使用继承的情况下实现多态性，并且它允许我们只需要考虑这个「抽象类型」即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">protocol Drawable &#123;</div><div class=\"line\">    func draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">struct Circle: Drawable &#123;</div><div class=\"line\">    let radius: Double</div><div class=\"line\">    let center: Point</div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let drawables: [Drawable] = (1..&lt;100_000_000).map &#123; _ in Circle(...) &#125;</div><div class=\"line\"></div><div class=\"line\">for drawable in drawables &#123;</div><div class=\"line\">    drawable.draw()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们需要做的，就是将这个 draw 方法析取到协议当中，然后将数组的引用类型变更为这个协议，这样做导致这段代码花费了 4.0 秒的时间来运行。速率减慢了 1300%，这是为什么呢？</p>\n<p>这是因为此前的代码可以被静态调度，从而在没有任何堆应用建立的情况下仍能够执行。这就是协议是如何实现的。</p>\n<p>例如，如大家所见，这里是我们此前的 Circle 结构体。在这个 for 循环当中，Swift 编译器所做的就是前往 V-table 进行查找，或者直接将 draw 函数内联。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct Circle &#123;</div><div class=\"line\">    let radius: Double</div><div class=\"line\">    let center: Point</div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var circles = (1..&lt;100_000_000).map &#123; _ in Circle(...) &#125;</div><div class=\"line\"></div><div class=\"line\">for circle in circles &#123;</div><div class=\"line\">    circle.draw()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当我们用协议来替代的时候，此时它并不知道这个对象是结构体还是类。因为这里可能是任何一个实现此协议的类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">protocol Drawable &#123;</div><div class=\"line\">    func draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">struct Circle: Drawable &#123;</div><div class=\"line\">    let radius: Double</div><div class=\"line\">    let center: Point</div><div class=\"line\"></div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var drawables: [Drawable] = (1..&lt;100_000_000).map &#123; _ in return Circle(...) &#125;</div><div class=\"line\"></div><div class=\"line\">for drawable in drawables &#123;</div><div class=\"line\">    drawable.draw()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么我们该如何去调度这个 draw 函数呢？答案就位于协议记录表 (protocol witness table，也称为虚函数表) 当中。它其中存放了您应用当中每个实现协议的对象名，并且在底层实现当中，这个表本质上充当了这些类型的别名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">protocol Drawable &#123;</div><div class=\"line\">    func draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">struct Circle: Drawable &#123;</div><div class=\"line\">    let radius: Double</div><div class=\"line\">    let center: Point</div><div class=\"line\"></div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var drawables: [Drawable] = (1..&lt;100_000_000).map &#123; _ in</div><div class=\"line\">    return Circle(...)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">for drawable in drawables &#123;</div><div class=\"line\">    drawable.draw()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里的代码当中，我们该如何获取协议记录表呢？答案就是从这个既有容器 (existential container) 当中获取，这个容器目前拥有一个三个字大小的结构体，并且存放在其内部的值缓冲区当中，此外还与协议记录表建立了引用关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct Circle: Drawable &#123;</div><div class=\"line\">    let radius: Double</div><div class=\"line\">    let center: Point</div><div class=\"line\"></div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里 Circle 类型存放在了三个字大小的缓冲区当中，并且不会被单独引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct Line: Drawable &#123;</div><div class=\"line\">    let origin: Point</div><div class=\"line\">    let end: Point</div><div class=\"line\"></div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>举个例子，对于我们的 Line 类型来说，它其中包含了四个字的存储空间，因为它拥有两个点类型。这个 Line 结构体需要超过四个字以上的存储空间。我们该如何处理它呢？这会对性能有影响么？好吧，它的确会：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">protocol Drawable &#123;</div><div class=\"line\">    func draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">struct Line: Drawable &#123;</div><div class=\"line\">    let origin: Point</div><div class=\"line\">    let end: Point</div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let drawables: [Drawable] = (1..&lt;100_000_000).map &#123; _ in Line(...) &#125;</div><div class=\"line\"></div><div class=\"line\">for drawable in drawables &#123;</div><div class=\"line\">    drawable.draw()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这需要花费 45 秒钟的时间来运行。为什么这里要花这么久的时间呢，发生了什么事呢？</p>\n<p>绝大部分的时间都花费在对结构体进行内存分配上了，因为现在它们无法存放在只有三个字大小的缓冲区当中了。因此这些结构会在堆上进行内存分配，此外这也与协议有一点关系。由于既有容器只能够存储三个字大小的结构体，或者也可以与对象建立引用关系，我们同样需要某种名为值记录表 (value witness table)。这就是我们用来处理任意值的东西。</p>\n<p>因此在这里，编译器将创建一个值记录表，对每个���缓冲区、内敛结构体来说，都有三个字大小的缓冲区，然后它将负责对值或者类进行内存分配、拷贝、销毁和内存释放等操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">func draw(drawable: Drawable) &#123;</div><div class=\"line\">    drawable.draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let value: Drawable = Line()</div><div class=\"line\">draw(local: value)</div><div class=\"line\"></div><div class=\"line\">// Generates</div><div class=\"line\">func draw(value: ECTDrawable) &#123;</div><div class=\"line\">    var drawable: ECTDrawable = ECTDrawable()</div><div class=\"line\">    let vwt = value.vwt</div><div class=\"line\">    let pwt = value.pwt</div><div class=\"line\">    drawable.vwt = value.vwt</div><div class=\"line\">    drawable.pwt = value.pwt</div><div class=\"line\">    vwt.allocateBuffAndCopyValue(&amp;drawable, value)</div><div class=\"line\">    pwt.draw(vwt.projectBuffer(&amp;drawable)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里是一个例子，这就是这个过程的中间产物。如果我们只有一个 draw 函数，那么它将会接受我们创建的 Line 作为参数，因此我们将它传递给这个 draw 函数即可。</p>\n<p>实际情况时，它将这个 Drawable 协议传递到既有容器当中，然后在函数内部再次进行创建。这会对值和协议记录表进行赋值，然后分配一个新的缓冲区，然后将其他结构、类或者类似对象的值拷贝进这个缓冲区当中。然后就使用协议记录表当中的 draw 函数，把真实的 Drable 对象传递给这个函数。</p>\n<p>您可以看到，值记录表和协议记录表将会存放在栈上，而 Line 将会被存放在堆上，从而最后将线绘制出来。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>对我们进行数据建模的方式进行简单的更改将会对性能造成巨大的影响。让我们来看一看该如何来避免这些情况的发生。</p>\n<p>首先让我们来说一说泛型。大家可能会说了，我给各位展示了协议会导致性能的下降，那么我们为什么还要使用泛型呢？答案在于：泛型允许我们做什么。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct Stack&lt;T: Type&gt; &#123;</div><div class=\"line\">...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>假设我们这里有一个带有泛型 T 的 Stack 结构体，它受到一个协议类型的约束。编译器所要做的，就是将这个 T 提换成相应的协议，或者替换为我们传入的具体类型。这些操作会一直沿着函数链 (function chain) 执行，并且编译器会创建直接对此类型进行操作的专用版本。</p>\n<p>这样我们就无需再使用值记录表或者协议记录表了，并且还移除了既有容器，这可能是一个非常好的解决方式，这使得我们仍然能够写出真正快速运行的泛型代码，并且还具备 Swift 所提供的良好多态性。这就是所谓的静态多态性 (static polymorphism)。</p>\n<p>您还可以通过使用枚举来改进数据模型，而不是从服务器中获取大量的字符串。例如，假设您正在构建一个社交应用，您需要对账户建立状态的管理，以前您可能会使用字符串来进行控制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">enum AccountStatus: String, RawRepresentable &#123;</div><div class=\"line\">case .banned, .verified, incomplete</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果我们改用枚举的话，那么我们就无需进行内存分配了，当我们传递这个类型的时候，我们只是将枚举值进行传递，这是一个加快代码运行速度的好方法，同时也可以为整个应用程序提供更安全、更可读的代码。</p>\n<p>此外，使用 u-模型或者演示者 (Presenter) 或者不同的抽象类型的形式，来构建特定类型的模型也是非常有用的，这使得我们能够精简掉应用当中许多不必要的部分。</p>\n<p>好的，我的讲演到此结束，内容很短，感谢诸位的参与！</p>\n","site":{"data":{}},"excerpt":"<p>原文链接：<a href=\"https://realm.io/cn/news/real-world-swift-performance/\">真实世界中的 Swift 性能优化</a></p>","more":"<hr>\n<p>有太多的因素会导致您的应用变得缓慢。在本次讲演中，我们将自底向上地来探索应用的性能优化。来看一看在真实世界中进行数据解析、数据映射和数据存储的时候，Swift 的特性（协议、泛型、结构体和类）是如何影响应用性能的，我们将确定影响性能提升的瓶颈所在，并体验 Swift 带来的「迅捷」体验。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>今天我打算同大家谈论 Swift 性能优化方面的内容。当我们构建软件的时候，特别是移动软件，由于人们的精力、时间有限，人们往往更喜欢有一个流畅的用户体验，而不是等着您的应用在那加载。如果应用运行速度过慢，并且不能给用户带来他们所想要的结果的话，那么这会让人们感到不爽。因此，让您的代码能够快速运行是无比重要的一件事。</p>\n<p>那么有什么因素会导致代码运行缓慢呢？当您在编写代码并选择架构的时候，深刻认识到这些架构所带来的影响是非常重要的。我将首先谈一谈：如何理解内联、动态调度与静态调度之间的权衡，以及相关结构是如何分配内存的，还有怎样选择最适合的架构。</p>\n<h2 id=\"内存分配\"><a href=\"#内存分配\" class=\"headerlink\" title=\"内存分配\"></a>内存分配</h2><p>对象的内存分配 (allocation) 和内存释放 (deallocation) 是代码中最大的开销之一，同时通常也是不可避免的。Swift 会自行分配和释放内存，此外它存在两种类型的分配方式。</p>\n<p>第一个是基于栈 (stack-based) 的内存分配。Swift 会尽可能选择在栈上分配内存。栈是一种非常简单的数据结构；数据从栈的底部推入 (push)，从栈的顶部弹出 (pop)。由于我们只能够修改栈的末端，因此我们可以通过维护一个指向栈末端的指针来实现这种数据结构，并且在其中进行内存的分配和释放只需要重新分配该整数即可。</p>\n<p>第二个是基于堆 (heap-based) 的内存分配。这使得内存分配将具备更加动态的生命周期，但是这需要更为复杂的数据结构。要在堆上进行内存分配的话，您需要锁定堆当中的一个空闲块 (free block)，其大小能够容纳您的对象。因此，我们需要找到未使用的块，然后在其中分配内存。当我们需要释放内存的时候，我们就必须搜索何处能够重新插入该内存块。这个操作很缓慢。主要是为了线程安全，我们必须要对这些东西进行锁定和同步。</p>\n<h2 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h2><p>我们还有引用计数 (reference counting) 的概念，这个操作相对不怎么耗费性能，但是由于使用次数很多，因此它带来的性能影响仍然是很大的。引用计数是 Objective-C 和 Swift 中用于确定何时该释放对象的安全机制。目前，Swift 当中的引用计数是强制自动管理的，这意味着它很容易被开发者们所忽略。然而，当您打开 Instrument 查看何处影响了代码运行的速度的时候，您会发现 20,000 多次的 Swift 持有 (retain) 和释放 (release)，这些操作占用了 90% 的代码运行时间！<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">perform</span><span class=\"params\">(with object: Object)</span></span> &#123;</div><div class=\"line\">    object.doAThing()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这是因为如果有这样一个函数接收了一个对象作为参数，并且执行了这个对象的 doAThing() 方法，编译器会自动插入对象持有和释放操作，以确保在这个方法的生命周期当中，这个对象不会被回收掉。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">perform</span><span class=\"params\">(with object: Object)</span></span> &#123;</div><div class=\"line\">    __swift_retain(object)</div><div class=\"line\">    object.doAThing()</div><div class=\"line\">    __swift_release(object)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这些对象持有和释放操作是原子操作 (atomic operations)，所以它们运转缓慢就很正常了。或者，是因为我们不知道如何让它们能够运行得更快一些。</p>\n<h2 id=\"调度与对象\"><a href=\"#调度与对象\" class=\"headerlink\" title=\"调度与对象\"></a>调度与对象</h2><p>此外还有调度 (dispatch) 的概念。Swift 拥有三种类型的调度方式。Swift 会尽可能将函数内联 (inline)，这样的话使用这个函数将不会有额外的性能开销。这个函数可以直接调用。静态调度 (static dispatch) 本质上是通过 V-table 进行的查找和跳转，这个操作会花费一纳秒的时间。然后动态调度 (dynamic dispatch) 将会花费大概五纳秒的时间，如果您只有几个这样的方法调用的话，这实际上并不会带来多大的问题，问题是当您在一个嵌套循环或者执行上千次操作当中使用了动态调度的话，那么它所带来的性能耗费将成百上千地累积起来，最终影响应用性能。</p>\n<p>Swift 同样也有两种类型的对象。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> section: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> item: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"type\">Index</span>(section: <span class=\"number\">1</span>,</div><div class=\"line\">                item: <span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<p>这是一个类，类当中的数据都会在堆上分配内存。您可以在此处看到，这里我们创建了一个名为 Index 的类。其中包含了两个属性，一个 section 和一个 item。当我们创建了这个对象的时候，堆上便创建了一个指向此 Index 的指针，因此在堆上便存放了这个 section 和 item 的数据和空间。</p>\n<p>如果我们对其建立引用，就会发现我们现在有两个指向堆上相同区域的指针了，它们之间是共享内存的。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> section: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> item: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"type\">Index</span>(section: <span class=\"number\">1</span>,</div><div class=\"line\">                item: <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> i2 = i</div></pre></td></tr></table></figure></p>\n<p>这个时候，Swift 会自动插入对象持有操作。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> section: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> item: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"type\">Index</span>(section: <span class=\"number\">1</span>,</div><div class=\"line\">                item: <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">__swift_retain(i)</div><div class=\"line\"><span class=\"keyword\">let</span> i2 = i</div></pre></td></tr></table></figure></p>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><p>很多人都会说：要编写性能优异的 Swift 代码，最简单的方式就是使用结构体了，结构体通常是一个很好的结构，因为结构体会存储在栈上，并且通常会使用静态调度或者内联调度。</p>\n<p>存储在栈上的 Swift 结构体将占用三个 Word 大小。如果您的结构体当中的数据数量低于三种的话，那么结构体的值会自动在栈上内联。Word 是 CPU 当中内置整数的大小，它是 CPU 所工作的区块。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Index</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> section: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> item: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"type\">Index</span>(section: <span class=\"number\">1</span>, item: <span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<p>在这里您可以看到，当我们创建这个结构体的时候，带有 section 和 item 值得 Index 结构体将会直接下放到栈当中，这个时候不会有额外的内存分配发生。那么如果我们在别处将其赋值到另一个变量的时候，会发生什么呢？<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Index</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> section: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">let</span> item: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"type\">Index</span>(section: <span class=\"number\">1</span>, item: <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> i2 = i</div></pre></td></tr></table></figure></p>\n<p>如果我们将 i 赋给 i2，这会将我们存储在栈当中的值直接再次复制一遍，这个时候并不会出现引用的情况。这就是所谓的「值类型」。</p>\n<p>那么如果结构体当中存放了引用类型的话又会怎样呢？持有内联指针的结构体。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">let</span> id: <span class=\"type\">String</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> u = <span class=\"type\">User</span>(name: <span class=\"string\">\"Joe\"</span>, id: <span class=\"string\">\"1234\"</span>)</div></pre></td></tr></table></figure></p>\n<p>当我们将其赋值给别的变量的时候，我们就持有了共享两个结构体的相同指针，因此我们必须要对这两个指针进行持有操作，而不是在对象上执行单独的持有操作。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">let</span> id: <span class=\"type\">String</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> u = <span class=\"type\">User</span>(name: <span class=\"string\">\"Joe\"</span>,</div><div class=\"line\">             id: <span class=\"string\">\"1234\"</span>)</div><div class=\"line\">__swift_retain(u.name._textStorage)</div><div class=\"line\">__swift_retain(u.id._textStorage)</div><div class=\"line\"><span class=\"keyword\">let</span> u2 = u</div></pre></td></tr></table></figure></p>\n<p>如果其中包含了类的话，那么性能耗费会更大。</p>\n<h2 id=\"抽象类型\"><a href=\"#抽象类型\" class=\"headerlink\" title=\"抽象类型\"></a>抽象类型</h2><p>正如我们此前所述，Swift 提供了许多不同的抽象类型 (abstraction)，从而允许我们自行决定代码该如何运行，以及决定代码的性能特性。现在我们来看一看抽象类型是如何在实际环境当中使用的。这里有一段很简单的代码：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> radius: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">let</span> center: <span class=\"type\">Point</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span> &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> circles = (<span class=\"number\">1</span>..&lt;<span class=\"number\">100_000_000</span>).<span class=\"built_in\">map</span> &#123; <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"type\">Circle</span>(...) &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> circle <span class=\"keyword\">in</span> circles &#123;</div><div class=\"line\">    circle.draw()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里有一个带有 radius 和 center 属性的 Circle 结构体。它将占用三个 Word 大小的空间，并存储在栈上。我们创建了一亿个 Circle，然后我们遍历这些 Circle 并调用这个函数。在我的电脑上，这段操作在发布模式下耗费了 0.3 秒的时间。那么当需求发生变更的时候，会发生什么事呢？</p>\n<p>我们不仅需要绘圆，还需要能够处理多种类型的形状。让我们假设我们还需要绘线。我非常喜欢面向协议编程，因为它允许我在不使用继承的情况下实现多态性，并且它允许我们只需要考虑这个「抽象类型」即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">protocol Drawable &#123;</div><div class=\"line\">    func draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">struct Circle: Drawable &#123;</div><div class=\"line\">    let radius: Double</div><div class=\"line\">    let center: Point</div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let drawables: [Drawable] = (1..&lt;100_000_000).map &#123; _ in Circle(...) &#125;</div><div class=\"line\"></div><div class=\"line\">for drawable in drawables &#123;</div><div class=\"line\">    drawable.draw()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们需要做的，就是将这个 draw 方法析取到协议当中，然后将数组的引用类型变更为这个协议，这样做导致这段代码花费了 4.0 秒的时间来运行。速率减慢了 1300%，这是为什么呢？</p>\n<p>这是因为此前的代码可以被静态调度，从而在没有任何堆应用建立的情况下仍能够执行。这就是协议是如何实现的。</p>\n<p>例如，如大家所见，这里是我们此前的 Circle 结构体。在这个 for 循环当中，Swift 编译器所做的就是前往 V-table 进行查找，或者直接将 draw 函数内联。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct Circle &#123;</div><div class=\"line\">    let radius: Double</div><div class=\"line\">    let center: Point</div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var circles = (1..&lt;100_000_000).map &#123; _ in Circle(...) &#125;</div><div class=\"line\"></div><div class=\"line\">for circle in circles &#123;</div><div class=\"line\">    circle.draw()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当我们用协议来替代的时候，此时它并不知道这个对象是结构体还是类。因为这里可能是任何一个实现此协议的类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">protocol Drawable &#123;</div><div class=\"line\">    func draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">struct Circle: Drawable &#123;</div><div class=\"line\">    let radius: Double</div><div class=\"line\">    let center: Point</div><div class=\"line\"></div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var drawables: [Drawable] = (1..&lt;100_000_000).map &#123; _ in return Circle(...) &#125;</div><div class=\"line\"></div><div class=\"line\">for drawable in drawables &#123;</div><div class=\"line\">    drawable.draw()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么我们该如何去调度这个 draw 函数呢？答案就位于协议记录表 (protocol witness table，也称为虚函数表) 当中。它其中存放了您应用当中每个实现协议的对象名，并且在底层实现当中，这个表本质上充当了这些类型的别名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">protocol Drawable &#123;</div><div class=\"line\">    func draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">struct Circle: Drawable &#123;</div><div class=\"line\">    let radius: Double</div><div class=\"line\">    let center: Point</div><div class=\"line\"></div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var drawables: [Drawable] = (1..&lt;100_000_000).map &#123; _ in</div><div class=\"line\">    return Circle(...)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">for drawable in drawables &#123;</div><div class=\"line\">    drawable.draw()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里的代码当中，我们该如何获取协议记录表呢？答案就是从这个既有容器 (existential container) 当中获取，这个容器目前拥有一个三个字大小的结构体，并且存放在其内部的值缓冲区当中，此外还与协议记录表建立了引用关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct Circle: Drawable &#123;</div><div class=\"line\">    let radius: Double</div><div class=\"line\">    let center: Point</div><div class=\"line\"></div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里 Circle 类型存放在了三个字大小的缓冲区当中，并且不会被单独引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct Line: Drawable &#123;</div><div class=\"line\">    let origin: Point</div><div class=\"line\">    let end: Point</div><div class=\"line\"></div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>举个例子，对于我们的 Line 类型来说，它其中包含了四个字的存储空间，因为它拥有两个点类型。这个 Line 结构体需要超过四个字以上的存储空间。我们该如何处理它呢？这会对性能有影响么？好吧，它的确会：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">protocol Drawable &#123;</div><div class=\"line\">    func draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">struct Line: Drawable &#123;</div><div class=\"line\">    let origin: Point</div><div class=\"line\">    let end: Point</div><div class=\"line\">    func draw() &#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let drawables: [Drawable] = (1..&lt;100_000_000).map &#123; _ in Line(...) &#125;</div><div class=\"line\"></div><div class=\"line\">for drawable in drawables &#123;</div><div class=\"line\">    drawable.draw()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这需要花费 45 秒钟的时间来运行。为什么这里要花这么久的时间呢，发生了什么事呢？</p>\n<p>绝大部分的时间都花费在对结构体进行内存分配上了，因为现在它们无法存放在只有三个字大小的缓冲区当中了。因此这些结构会在堆上进行内存分配，此外这也与协议有一点关系。由于既有容器只能够存储三个字大小的结构体，或者也可以与对象建立引用关系，我们同样需要某种名为值记录表 (value witness table)。这就是我们用来处理任意值的东西。</p>\n<p>因此在这里，编译器将创建一个值记录表，对每个���缓冲区、内敛结构体来说，都有三个字大小的缓冲区，然后它将负责对值或者类进行内存分配、拷贝、销毁和内存释放等操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">func draw(drawable: Drawable) &#123;</div><div class=\"line\">    drawable.draw()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let value: Drawable = Line()</div><div class=\"line\">draw(local: value)</div><div class=\"line\"></div><div class=\"line\">// Generates</div><div class=\"line\">func draw(value: ECTDrawable) &#123;</div><div class=\"line\">    var drawable: ECTDrawable = ECTDrawable()</div><div class=\"line\">    let vwt = value.vwt</div><div class=\"line\">    let pwt = value.pwt</div><div class=\"line\">    drawable.vwt = value.vwt</div><div class=\"line\">    drawable.pwt = value.pwt</div><div class=\"line\">    vwt.allocateBuffAndCopyValue(&amp;drawable, value)</div><div class=\"line\">    pwt.draw(vwt.projectBuffer(&amp;drawable)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里是一个例子，这就是这个过程的中间产物。如果我们只有一个 draw 函数，那么它将会接受我们创建的 Line 作为参数，因此我们将它传递给这个 draw 函数即可。</p>\n<p>实际情况时，它将这个 Drawable 协议传递到既有容器当中，然后在函数内部再次进行创建。这会对值和协议记录表进行赋值，然后分配一个新的缓冲区，然后将其他结构、类或者类似对象的值拷贝进这个缓冲区当中。然后就使用协议记录表当中的 draw 函数，把真实的 Drable 对象传递给这个函数。</p>\n<p>您可以看到，值记录表和协议记录表将会存放在栈上，而 Line 将会被存放在堆上，从而最后将线绘制出来。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>对我们进行数据建模的方式进行简单的更改将会对性能造成巨大的影响。让我们来看一看该如何来避免这些情况的发生。</p>\n<p>首先让我们来说一说泛型。大家可能会说了，我给各位展示了协议会导致性能的下降，那么我们为什么还要使用泛型呢？答案在于：泛型允许我们做什么。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct Stack&lt;T: Type&gt; &#123;</div><div class=\"line\">...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>假设我们这里有一个带有泛型 T 的 Stack 结构体，它受到一个协议类型的约束。编译器所要做的，就是将这个 T 提换成相应的协议，或者替换为我们传入的具体类型。这些操作会一直沿着函数链 (function chain) 执行，并且编译器会创建直接对此类型进行操作的专用版本。</p>\n<p>这样我们就无需再使用值记录表或者协议记录表了，并且还移除了既有容器，这可能是一个非常好的解决方式，这使得我们仍然能够写出真正快速运行的泛型代码，并且还具备 Swift 所提供的良好多态性。这就是所谓的静态多态性 (static polymorphism)。</p>\n<p>您还可以通过使用枚举来改进数据模型，而不是从服务器中获取大量的字符串。例如，假设您正在构建一个社交应用，您需要对账户建立状态的管理，以前您可能会使用字符串来进行控制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">enum AccountStatus: String, RawRepresentable &#123;</div><div class=\"line\">case .banned, .verified, incomplete</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果我们改用枚举的话，那么我们就无需进行内存分配了，当我们传递这个类型的时候，我们只是将枚举值进行传递，这是一个加快代码运行速度的好方法，同时也可以为整个应用程序提供更安全、更可读的代码。</p>\n<p>此外，使用 u-模型或者演示者 (Presenter) 或者不同的抽象类型的形式，来构建特定类型的模型也是非常有用的，这使得我们能够精简掉应用当中许多不必要的部分。</p>\n<p>好的，我的讲演到此结束，内容很短，感谢诸位的参与！</p>"},{"title":"iOS逆向-设备ssh免密登录","date":"2017-08-09T07:31:30.000Z","_content":"\n## 前提条件\n\n- 已越狱设备\n- 越狱设备安装OpenSSH(⚠️记得修改默认的'alpine'登录密码)\n- 电脑和设备同局域网。（我这里设备IP：10.11.12.13，并且设置成静态IP了😂）\n\n<!--more-->\n\n## 步骤\n\n### 生成RSA证书\n\n我这里生成的证书为:`ipad`，可自己需要定义。（注意如果直接回车会覆盖`~/.ssh/id_rsa`）\n\n执行命令`ssh-keygen`，如下：\n```shell\n$ cd ~/.ssh/\n$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/Madordie/.ssh/id_rsa): ipad\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in ipad.\nYour public key has been saved in ipad.pub.\nThe key fingerprint is:\nSHA256:GpQBeAf+oqUzWlUhtItDcVyVFz2wd0EcIgD+BZLPK8U Madordie@Bingo.local\nThe key's randomart image is:\n+---[RSA 2048]----+\n|  .+*+*++o++.o+. |\n|  .+o+o=...oo... |\n|  ..o.=+ .o ...  |\n| . . = .E. . .   |\n|  o = o.S.       |\n|   * ..o.        |\n|  *   ..         |\n| o o             |\n|.                |\n+----[SHA256]-----+\n\n$ ls ~/.ssh/ipad*\n/Users/Madordie/.ssh/ipad     /Users/Madordie/.ssh/ipad.pub\n```\n\n### 将公钥推送至越狱设备\n\n默认是没有`~/.ssh`目录的，暂时放置在`/var/root`下。\n\n```shell\n$ scp ~/.ssh/ipad.pub root@10.11.12.13:/var/root\n```\n\n`scp` 默认端口为`22` 如果需要自定义端口可以在路径前添加`-P 端口号`参数。\n\n### 配置本机`~/.ssh/config`文件\n\n使用顺手的工具编辑`~/.ssh/config`文件。（没有就新建一个啦～\n\n按照如下格式填写。默认`ssh`登录端口为`22`可以不写。\n```\nHost ipad\n    Hostname 10.11.12.13\n    User root\n    Port 22\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/ipad\n```\n\n### 配置越狱设备\n\n先用`ssh root@10.11.12.13`登录进设备。刚才我们将`ipad.pub`通过`scp`放在了`/var/root`下。\n\n一般情况下`/var/root/.ssh`是不存在的，使用命令`mkdir -p /var/root/.ssh`即可创建。\n\n```shell\n$ cat ipad.pub >> /var/root/.ssh/authorized_keys\n```\n\n然后强迫症的可以使用`rm -rf ipad.pub`删除啦～\n\n对了，退出`ssh`登录的设备使用：\n\n```shell\n$ exit\nlogout\nConnection to 10.11.12.13 closed.\n```\n\n### 赶紧测试一下远程登录效果\n\n```shell\n$ ssh ipad\n```\n\n然后你会发现你已经完成了免密码登录越狱设备。\n\n## 总结\n\n其实这并不是只有越狱iOS设备才能使用的免登录，而是`ssh`所支持的。用途也很方便～\n","source":"_posts/reverse-ios-ssh.md","raw":"---\ntitle: iOS逆向-设备ssh免密登录\ndate: 2017-08-09 15:31:30\ntags:\ncategories:\n    - iOS\n    - 逆向\n---\n\n## 前提条件\n\n- 已越狱设备\n- 越狱设备安装OpenSSH(⚠️记得修改默认的'alpine'登录密码)\n- 电脑和设备同局域网。（我这里设备IP：10.11.12.13，并且设置成静态IP了😂）\n\n<!--more-->\n\n## 步骤\n\n### 生成RSA证书\n\n我这里生成的证书为:`ipad`，可自己需要定义。（注意如果直接回车会覆盖`~/.ssh/id_rsa`）\n\n执行命令`ssh-keygen`，如下：\n```shell\n$ cd ~/.ssh/\n$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/Madordie/.ssh/id_rsa): ipad\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in ipad.\nYour public key has been saved in ipad.pub.\nThe key fingerprint is:\nSHA256:GpQBeAf+oqUzWlUhtItDcVyVFz2wd0EcIgD+BZLPK8U Madordie@Bingo.local\nThe key's randomart image is:\n+---[RSA 2048]----+\n|  .+*+*++o++.o+. |\n|  .+o+o=...oo... |\n|  ..o.=+ .o ...  |\n| . . = .E. . .   |\n|  o = o.S.       |\n|   * ..o.        |\n|  *   ..         |\n| o o             |\n|.                |\n+----[SHA256]-----+\n\n$ ls ~/.ssh/ipad*\n/Users/Madordie/.ssh/ipad     /Users/Madordie/.ssh/ipad.pub\n```\n\n### 将公钥推送至越狱设备\n\n默认是没有`~/.ssh`目录的，暂时放置在`/var/root`下。\n\n```shell\n$ scp ~/.ssh/ipad.pub root@10.11.12.13:/var/root\n```\n\n`scp` 默认端口为`22` 如果需要自定义端口可以在路径前添加`-P 端口号`参数。\n\n### 配置本机`~/.ssh/config`文件\n\n使用顺手的工具编辑`~/.ssh/config`文件。（没有就新建一个啦～\n\n按照如下格式填写。默认`ssh`登录端口为`22`可以不写。\n```\nHost ipad\n    Hostname 10.11.12.13\n    User root\n    Port 22\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/ipad\n```\n\n### 配置越狱设备\n\n先用`ssh root@10.11.12.13`登录进设备。刚才我们将`ipad.pub`通过`scp`放在了`/var/root`下。\n\n一般情况下`/var/root/.ssh`是不存在的，使用命令`mkdir -p /var/root/.ssh`即可创建。\n\n```shell\n$ cat ipad.pub >> /var/root/.ssh/authorized_keys\n```\n\n然后强迫症的可以使用`rm -rf ipad.pub`删除啦～\n\n对了，退出`ssh`登录的设备使用：\n\n```shell\n$ exit\nlogout\nConnection to 10.11.12.13 closed.\n```\n\n### 赶紧测试一下远程登录效果\n\n```shell\n$ ssh ipad\n```\n\n然后你会发现你已经完成了免密码登录越狱设备。\n\n## 总结\n\n其实这并不是只有越狱iOS设备才能使用的免登录，而是`ssh`所支持的。用途也很方便～\n","slug":"reverse-ios-ssh","published":1,"updated":"2017-08-09T08:36:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfo50018khuvbwabact1","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h2><ul>\n<li>已越狱设备</li>\n<li>越狱设备安装OpenSSH(⚠️记得修改默认的’alpine’登录密码)</li>\n<li>电脑和设备同局域网。（我这里设备IP：10.11.12.13，并且设置成静态IP了😂）</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"生成RSA证书\"><a href=\"#生成RSA证书\" class=\"headerlink\" title=\"生成RSA证书\"></a>生成RSA证书</h3><p>我这里生成的证书为:<code>ipad</code>，可自己需要定义。（注意如果直接回车会覆盖<code>~/.ssh/id_rsa</code>）</p>\n<p>执行命令<code>ssh-keygen</code>，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/.ssh/</div><div class=\"line\">$ ssh-keygen</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key (/Users/Madordie/.ssh/id_rsa): ipad</div><div class=\"line\">Enter passphrase (empty for no passphrase):</div><div class=\"line\">Enter same passphrase again:</div><div class=\"line\">Your identification has been saved in ipad.</div><div class=\"line\">Your public key has been saved in ipad.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">SHA256:GpQBeAf+oqUzWlUhtItDcVyVFz2wd0EcIgD+BZLPK8U Madordie@Bingo.local</div><div class=\"line\">The key&apos;s randomart image is:</div><div class=\"line\">+---[RSA 2048]----+</div><div class=\"line\">|  .+*+*++o++.o+. |</div><div class=\"line\">|  .+o+o=...oo... |</div><div class=\"line\">|  ..o.=+ .o ...  |</div><div class=\"line\">| . . = .E. . .   |</div><div class=\"line\">|  o = o.S.       |</div><div class=\"line\">|   * ..o.        |</div><div class=\"line\">|  *   ..         |</div><div class=\"line\">| o o             |</div><div class=\"line\">|.                |</div><div class=\"line\">+----[SHA256]-----+</div><div class=\"line\"></div><div class=\"line\">$ ls ~/.ssh/ipad*</div><div class=\"line\">/Users/Madordie/.ssh/ipad     /Users/Madordie/.ssh/ipad.pub</div></pre></td></tr></table></figure></p>\n<h3 id=\"将公钥推送至越狱设备\"><a href=\"#将公钥推送至越狱设备\" class=\"headerlink\" title=\"将公钥推送至越狱设备\"></a>将公钥推送至越狱设备</h3><p>默认是没有<code>~/.ssh</code>目录的，暂时放置在<code>/var/root</code>下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ scp ~/.ssh/ipad.pub root@10.11.12.13:/var/root</div></pre></td></tr></table></figure>\n<p><code>scp</code> 默认端口为<code>22</code> 如果需要自定义端口可以在路径前添加<code>-P 端口号</code>参数。</p>\n<h3 id=\"配置本机-ssh-config文件\"><a href=\"#配置本机-ssh-config文件\" class=\"headerlink\" title=\"配置本机~/.ssh/config文件\"></a>配置本机<code>~/.ssh/config</code>文件</h3><p>使用顺手的工具编辑<code>~/.ssh/config</code>文件。（没有就新建一个啦～</p>\n<p>按照如下格式填写。默认<code>ssh</code>登录端口为<code>22</code>可以不写。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host ipad</div><div class=\"line\">    Hostname 10.11.12.13</div><div class=\"line\">    User root</div><div class=\"line\">    Port 22</div><div class=\"line\">    PreferredAuthentications publickey</div><div class=\"line\">    IdentityFile ~/.ssh/ipad</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置越狱设备\"><a href=\"#配置越狱设备\" class=\"headerlink\" title=\"配置越狱设备\"></a>配置越狱设备</h3><p>先用<code>ssh root@10.11.12.13</code>登录进设备。刚才我们将<code>ipad.pub</code>通过<code>scp</code>放在了<code>/var/root</code>下。</p>\n<p>一般情况下<code>/var/root/.ssh</code>是不存在的，使用命令<code>mkdir -p /var/root/.ssh</code>即可创建。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat ipad.pub &gt;&gt; /var/root/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n<p>然后强迫症的可以使用<code>rm -rf ipad.pub</code>删除啦～</p>\n<p>对了，退出<code>ssh</code>登录的设备使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ exit</div><div class=\"line\">logout</div><div class=\"line\">Connection to 10.11.12.13 closed.</div></pre></td></tr></table></figure>\n<h3 id=\"赶紧测试一下远程登录效果\"><a href=\"#赶紧测试一下远程登录效果\" class=\"headerlink\" title=\"赶紧测试一下远程登录效果\"></a>赶紧测试一下远程登录效果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh ipad</div></pre></td></tr></table></figure>\n<p>然后你会发现你已经完成了免密码登录越狱设备。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实这并不是只有越狱iOS设备才能使用的免登录，而是<code>ssh</code>所支持的。用途也很方便～</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h2><ul>\n<li>已越狱设备</li>\n<li>越狱设备安装OpenSSH(⚠️记得修改默认的’alpine’登录密码)</li>\n<li>电脑和设备同局域网。（我这里设备IP：10.11.12.13，并且设置成静态IP了😂）</li>\n</ul>","more":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"生成RSA证书\"><a href=\"#生成RSA证书\" class=\"headerlink\" title=\"生成RSA证书\"></a>生成RSA证书</h3><p>我这里生成的证书为:<code>ipad</code>，可自己需要定义。（注意如果直接回车会覆盖<code>~/.ssh/id_rsa</code>）</p>\n<p>执行命令<code>ssh-keygen</code>，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/.ssh/</div><div class=\"line\">$ ssh-keygen</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key (/Users/Madordie/.ssh/id_rsa): ipad</div><div class=\"line\">Enter passphrase (empty for no passphrase):</div><div class=\"line\">Enter same passphrase again:</div><div class=\"line\">Your identification has been saved in ipad.</div><div class=\"line\">Your public key has been saved in ipad.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">SHA256:GpQBeAf+oqUzWlUhtItDcVyVFz2wd0EcIgD+BZLPK8U Madordie@Bingo.local</div><div class=\"line\">The key&apos;s randomart image is:</div><div class=\"line\">+---[RSA 2048]----+</div><div class=\"line\">|  .+*+*++o++.o+. |</div><div class=\"line\">|  .+o+o=...oo... |</div><div class=\"line\">|  ..o.=+ .o ...  |</div><div class=\"line\">| . . = .E. . .   |</div><div class=\"line\">|  o = o.S.       |</div><div class=\"line\">|   * ..o.        |</div><div class=\"line\">|  *   ..         |</div><div class=\"line\">| o o             |</div><div class=\"line\">|.                |</div><div class=\"line\">+----[SHA256]-----+</div><div class=\"line\"></div><div class=\"line\">$ ls ~/.ssh/ipad*</div><div class=\"line\">/Users/Madordie/.ssh/ipad     /Users/Madordie/.ssh/ipad.pub</div></pre></td></tr></table></figure></p>\n<h3 id=\"将公钥推送至越狱设备\"><a href=\"#将公钥推送至越狱设备\" class=\"headerlink\" title=\"将公钥推送至越狱设备\"></a>将公钥推送至越狱设备</h3><p>默认是没有<code>~/.ssh</code>目录的，暂时放置在<code>/var/root</code>下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ scp ~/.ssh/ipad.pub root@10.11.12.13:/var/root</div></pre></td></tr></table></figure>\n<p><code>scp</code> 默认端口为<code>22</code> 如果需要自定义端口可以在路径前添加<code>-P 端口号</code>参数。</p>\n<h3 id=\"配置本机-ssh-config文件\"><a href=\"#配置本机-ssh-config文件\" class=\"headerlink\" title=\"配置本机~/.ssh/config文件\"></a>配置本机<code>~/.ssh/config</code>文件</h3><p>使用顺手的工具编辑<code>~/.ssh/config</code>文件。（没有就新建一个啦～</p>\n<p>按照如下格式填写。默认<code>ssh</code>登录端口为<code>22</code>可以不写。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host ipad</div><div class=\"line\">    Hostname 10.11.12.13</div><div class=\"line\">    User root</div><div class=\"line\">    Port 22</div><div class=\"line\">    PreferredAuthentications publickey</div><div class=\"line\">    IdentityFile ~/.ssh/ipad</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置越狱设备\"><a href=\"#配置越狱设备\" class=\"headerlink\" title=\"配置越狱设备\"></a>配置越狱设备</h3><p>先用<code>ssh root@10.11.12.13</code>登录进设备。刚才我们将<code>ipad.pub</code>通过<code>scp</code>放在了<code>/var/root</code>下。</p>\n<p>一般情况下<code>/var/root/.ssh</code>是不存在的，使用命令<code>mkdir -p /var/root/.ssh</code>即可创建。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat ipad.pub &gt;&gt; /var/root/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n<p>然后强迫症的可以使用<code>rm -rf ipad.pub</code>删除啦～</p>\n<p>对了，退出<code>ssh</code>登录的设备使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ exit</div><div class=\"line\">logout</div><div class=\"line\">Connection to 10.11.12.13 closed.</div></pre></td></tr></table></figure>\n<h3 id=\"赶紧测试一下远程登录效果\"><a href=\"#赶紧测试一下远程登录效果\" class=\"headerlink\" title=\"赶紧测试一下远程登录效果\"></a>赶紧测试一下远程登录效果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh ipad</div></pre></td></tr></table></figure>\n<p>然后你会发现你已经完成了免密码登录越狱设备。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实这并不是只有越狱iOS设备才能使用的免登录，而是<code>ssh</code>所支持的。用途也很方便～</p>"},{"title":"iOS逆向-class-dump工具","date":"2017-08-10T04:40:27.000Z","_content":"\n## 安装class-dump\n\n去[stevenygard.com](http://stevenygard.com/projects/class-dump/)下载最新的包。\n\n将包中的`class-dump`可执行文件复制到`/opt/class-dump`。(我的逆向相关工具均在这下面😂）\n\n在`~/.base_profile`中添加`export PATH=/opt/class-dump:$PATH`\n\n运行`source ~/.base_profile`\n\n最后确认一下安装OK ：\n\n```shell\n$ class-dump --v\nclass-dump 3.5 (64 bit) compiled Nov 16 2013 12:22:33\n```\n\n<!--more-->\n\n## 功能\n\n使用一个记录一个吧～\n\n### 用来导出`ipa`/`.decrypted`头文件\n\n此处只能导出未加密的`ipa`，或者砸过壳的。[具体砸壳过程传送门](https://madordie.github.io/reverse-ios-dump-decrypted/)\n\n```shell\n$ ls WeChat.decrypted\nWeChat.decrypted\n$ class-dump -H WeChat.decrypted -o ./Headers/\n$ ls Headers\nHeaders\n```\n\n即得头文件目录：`Headers`\n\n","source":"_posts/reverse-ios-class-dump.md","raw":"---\ntitle: iOS逆向-class-dump工具\ndate: 2017-08-10 12:40:27\ntags:\ncategories:\n    - iOS\n    - 逆向\n---\n\n## 安装class-dump\n\n去[stevenygard.com](http://stevenygard.com/projects/class-dump/)下载最新的包。\n\n将包中的`class-dump`可执行文件复制到`/opt/class-dump`。(我的逆向相关工具均在这下面😂）\n\n在`~/.base_profile`中添加`export PATH=/opt/class-dump:$PATH`\n\n运行`source ~/.base_profile`\n\n最后确认一下安装OK ：\n\n```shell\n$ class-dump --v\nclass-dump 3.5 (64 bit) compiled Nov 16 2013 12:22:33\n```\n\n<!--more-->\n\n## 功能\n\n使用一个记录一个吧～\n\n### 用来导出`ipa`/`.decrypted`头文件\n\n此处只能导出未加密的`ipa`，或者砸过壳的。[具体砸壳过程传送门](https://madordie.github.io/reverse-ios-dump-decrypted/)\n\n```shell\n$ ls WeChat.decrypted\nWeChat.decrypted\n$ class-dump -H WeChat.decrypted -o ./Headers/\n$ ls Headers\nHeaders\n```\n\n即得头文件目录：`Headers`\n\n","slug":"reverse-ios-class-dump","published":1,"updated":"2017-08-10T10:56:13.000Z","_id":"cj661pfo7001bkhuvqycxuot6","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"安装class-dump\"><a href=\"#安装class-dump\" class=\"headerlink\" title=\"安装class-dump\"></a>安装class-dump</h2><p>去<a href=\"http://stevenygard.com/projects/class-dump/\" target=\"_blank\" rel=\"external\">stevenygard.com</a>下载最新的包。</p>\n<p>将包中的<code>class-dump</code>可执行文件复制到<code>/opt/class-dump</code>。(我的逆向相关工具均在这下面😂）</p>\n<p>在<code>~/.base_profile</code>中添加<code>export PATH=/opt/class-dump:$PATH</code></p>\n<p>运行<code>source ~/.base_profile</code></p>\n<p>最后确认一下安装OK ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ class-dump --v</div><div class=\"line\">class-dump 3.5 (64 bit) compiled Nov 16 2013 12:22:33</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><p>使用一个记录一个吧～</p>\n<h3 id=\"用来导出ipa-decrypted头文件\"><a href=\"#用来导出ipa-decrypted头文件\" class=\"headerlink\" title=\"用来导出ipa/.decrypted头文件\"></a>用来导出<code>ipa</code>/<code>.decrypted</code>头文件</h3><p>此处只能导出未加密的<code>ipa</code>，或者砸过壳的。<a href=\"https://madordie.github.io/reverse-ios-dump-decrypted/\">具体砸壳过程传送门</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls WeChat.decrypted</div><div class=\"line\">WeChat.decrypted</div><div class=\"line\">$ class-dump -H WeChat.decrypted -o ./Headers/</div><div class=\"line\">$ ls Headers</div><div class=\"line\">Headers</div></pre></td></tr></table></figure>\n<p>即得头文件目录：<code>Headers</code></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装class-dump\"><a href=\"#安装class-dump\" class=\"headerlink\" title=\"安装class-dump\"></a>安装class-dump</h2><p>去<a href=\"http://stevenygard.com/projects/class-dump/\">stevenygard.com</a>下载最新的包。</p>\n<p>将包中的<code>class-dump</code>可执行文件复制到<code>/opt/class-dump</code>。(我的逆向相关工具均在这下面😂）</p>\n<p>在<code>~/.base_profile</code>中添加<code>export PATH=/opt/class-dump:$PATH</code></p>\n<p>运行<code>source ~/.base_profile</code></p>\n<p>最后确认一下安装OK ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ class-dump --v</div><div class=\"line\">class-dump 3.5 (64 bit) compiled Nov 16 2013 12:22:33</div></pre></td></tr></table></figure>","more":"<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><p>使用一个记录一个吧～</p>\n<h3 id=\"用来导出ipa-decrypted头文件\"><a href=\"#用来导出ipa-decrypted头文件\" class=\"headerlink\" title=\"用来导出ipa/.decrypted头文件\"></a>用来导出<code>ipa</code>/<code>.decrypted</code>头文件</h3><p>此处只能导出未加密的<code>ipa</code>，或者砸过壳的。<a href=\"https://madordie.github.io/reverse-ios-dump-decrypted/\">具体砸壳过程传送门</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls WeChat.decrypted</div><div class=\"line\">WeChat.decrypted</div><div class=\"line\">$ class-dump -H WeChat.decrypted -o ./Headers/</div><div class=\"line\">$ ls Headers</div><div class=\"line\">Headers</div></pre></td></tr></table></figure>\n<p>即得头文件目录：<code>Headers</code></p>"},{"title":"「转」Unowned 还是 Weak？生命周期和性能对比","date":"2017-05-18T12:55:17.000Z","_content":"\n>作者：Umberto Raimondi，原文链接，原文日期：2016-10-27\n译者：shanks；校对：Crystal Sun；定稿：CMB\n\n每当处理循环引用（retain cycles）时，需要考量对象生命周期来选择unowned或者weak标识符，这已经成为了一个共识。但是有时仍然会心存疑问，在具体的使用中应该选择哪一个，或者退一步讲，保守的只使用 weak 是不是一个好的选择呢？\n\n本文首先对循环引用的基础知识做一个简要介绍，然后会分析 Swift 源代码的一些片段，讲解 unowned 和 weak 在生命周期和性能上的差异点，希望看完本文以后，在的使用场景中，能使用正确的弱引用类型。\n\n<!--more-->\n\n## 目录:\n- 基础知识\n- 问题来了: unowened 还是 weak?\n- 性能：深度探索\n- 捕获列表处理解析\n- 结论\n- 脚注\n\n>从 GitHub 或者 zipped 获取本文相关的 Playground 代码。然后从这里获取闭包案例和 SIL，SILGen 以及 LLVM IR 的输出。\n\n## 基础知识\n\n众所周知，Swift 利用古老并且有效的自动引用计数（ARC, Automatic Reference Counting）来管理内存，带来的后果和在 Objective-C 中使用的情况类似，需要手动使用弱引用来解决循环引用问题。\n\n如果对 ARC 不了解，只需要知道的是，每一个引用类型实例都有一个引用计数与之关联，这个引用计数用来记录这个对象实例正在被变量或常量引用的总次数。当引用计数变为 0 时，实例将会被析构，实例占有的内存和资源都将变得重新可用。\n\n当有两个实例通过某种形式互相引用时，就会形成循环引用（比如：两个类实例都有一个属性指向对方的类实例；双向链表中两个相邻的节点实例等…）, 由于两个实例的引用计数都一直大于 0， 循环引用将会阻止这些实例的析构。\n\n为了解决这个问题，和其他一些有类似问题的语言一样， 在 Swift 中，弱引用 的概念被提了出来，弱引用不会被 ARC 计算，也就是说，当一个弱引用指向一个引用类型实例时，引用计数不会增加。\n\n弱引用不会阻止实例的析构, 只需要记住的是，在任何情况下，弱引用都不会拥有它指向的对象。在正式的场景中不是什么大问题，但是在我们处理这类引用的时候，需要意识到这一点。\n\n在 Swift 中有 2 种 弱 引用形式，unowned 和 weak。\n\n虽然它们的作用类似，但与它们相关实例生命周期的假设会略有不同，并且具有不同的性能特征。\n\n为了举例说明循环引用，这里不使用大家期望看到的类之间的循环引用，而使用闭包的上下文案例，这在 Objective-C 日常开发中处理循环引用时经常会遇到的情况。和类的循环引用类似，通过创建一个强引用指向外部实例，或捕获它，阻止它析构。\n\n在 Objective-C ，按照标准的做法，定义一个弱引用指向闭包外部的实例，然后在闭包内部定义强引用指向这个实例，在闭包执行期间使用它。当然，有必要在使用前检查引用的有效性。\n\n为了更方便的处理循环引用，Swift 引入了一个新的概念，用于简化和更加明显地表达在闭包内部外部变量的捕获：捕获列表（capture list）。使用捕获列表，可以在函数的头部定义和指定那些需要用在内部的外部变量，并且指定引用类型(译者注：这里是指 unowned 和 weak）。\n\n接下来举一些例子，在各种情况下捕获变量的表现。\n\n当不使用捕获列表时，闭包将会创建一个外部变量的强引用：\n\n```swift\nvar i1 = 1, i2 = 1\n\nvar fStrong = {\n    i1 += 1\n    i2 += 2\n}\n\nfStrong()\nprint(i1,i2) //Prints 2 and 3\n```\n\n闭包内部对变量的修改将会改变外部原始变量的值，这与预期是一致的。\n\n使用捕获列表，闭包内部会创建一个新的可用常量。如果没有指定常量修饰符，闭包将会简单地拷贝原始值到新的变量中，对于值类型和引用类型都是一样的。\n\n```swift\nvar fCopy = { [i1] in\n    print(i1,i2)\n}\n\nfStrong()\nprint(i1,i2) //打印结果是 2 和 3  \n\nfCopy()  //打印结果是 1 和 3\n```\n\n在上面的例子中，在调用 fStrong 之前定义函数 fCopy ,在该函数定义的时候，私有常量已经被创建了。正如你所看到的，当调用第二个函数时候，仍然打印 i1 的原始值。\n\n对于外部引用类型的变量，在捕获列表中指定 weak 或 unowned，这个常量将会被初始化为一个弱引用，指向原始值，这种指定的捕获方式就是用来处理循环引用的方式。\n\n```swift\nclass aClass{\n    var value = 1\n}\n\nvar c1 = aClass()\nvar c2 = aClass()\n\nvar fSpec = { [unowned c1, weak c2] in\n    c1.value += 1\n    if let c2 = c2 {\n        c2.value += 1\n    }\n}\n\nfSpec()\nprint(c1.value,c2.value) //Prints 2 and 2\n```\n\n两个 aClass 捕获实例的不同的定义方式，决定了它们在闭包中不同的使用方式。\n\nunowned 引用使用的场景是，原始实例永远不会为 nil，闭包可以直接使用它，并且直接定义为显式解包可选值。当原始实例被析构后，在闭包中使用这个捕获值将导致崩溃。\n\n如果捕获原始实例在使用过程中可能为 nil ，必须将引用声明为 weak， 并且在使用之前验证这个引用的有效性。\n\n## 问题来了: unowened 还是 weak?\n\n在实际使用中如何选择这两种弱引用类型呢？\n\n这个问题的答案可以简单由原始对象和引用它的闭包的生命周期来解释。\n\n![unownedbig](/images/unownedbig.png)\n\n有两个可能出现的场景：\n\n- 闭包和捕获对象的生命周期相同，所以对象可以被访问，也就意味着闭包也可以被访问。外部对象和闭包有相同的生命周期(比如：对象和它的父对象的简单返回引用）。在这种情况下，你应该把引用定义为 unowned。\n\n\t一个经典的案例是: [unowned self], 主要用在闭包中，这种闭包主要在他们的父节点上下文中做一些事情，没有在其他地方被引用或传递，不能作用在父节点之外。\n\n- 闭包的生命周期和捕获对象的生命周期相互独立，当对象不能再使用时，闭包依然能够被引用。这种情况下，你应该把引用定义为 weak，并且在使用它之前验证一下它是否为 nil（请不要对它进行强制解包).\n\n\t一个经典的案例是: [weak delegate = self.delegate!]，可以在某些使用闭包的场景中看到，闭包使用的是完全无关（生命周期独立）的代理对象。\n\n\n当无法确认两个对象之间生命周期的关系时，是否不应该去冒险选择一个无效 unowned 引用？而是保守选择 weak 引用是一个更好的选择？\n答案是否定的，不仅仅是因为对象生命周期了解是一件必要的事情，而且这两个修饰符在性能特性上也有很大的不同。\n\n弱引用最常见的实现是，每次一个新的引用生成时，都会把每个弱引用和它指向的对象信息存储到一个附加表中。\n\n当没有任何强引用指向一个对象时，Swift 运行时会启动析构过程，但是在这之前，运行时会把所有相关的弱引用置为 nil 。弱引用的这种实现方式我们称之为”零和弱引用”。\n\n这种实现有实际的开销，考虑到需要额外实现的数据结构，需要确保在并发访问情况下，对这个全局引用结构所有操作的正确性。一旦析构过程开始了，在任何环境中，都不允许访问弱引用所指向的对象了。\n\n弱引用（包括 unowned 和一些变体的 weak)在 Swift 使用了更简单和快速的实现机制。\n\nSwift 中的每个对象保持了两个引用计数器，一个是强引用计数器，用来决定 ARC 什么时候可以安全地析构这个对象，另外一个附加的弱引用计数器，用来计算创建了多少个指向这个对象的 unowned 或者 weak 引用，当这个计数器为零时，这个对象将被 析构 。\n\n需要重点理解的是，只有等到所有 unowned 引用被释放后，这个对象才会被真正地析构，然后对象将会保持未解析可访问状态，当析构发生后，对象的内容才会被回收。\n\n每当 unowned 引用被定义时，对应的 unowned 引用计数会进行原子级别地增加(使用原子gcc/llvm操作，进行一系列快速且线程安全的基本操作，例如：增加，减少，比较，交换等)，以保证线程安全。在增加计数之前，会检查强引用计数以确保对象是有效的。\n\n试图访问一个无效的对象，将会导致错误的断言，你的应用在运行时中会报错(这就是为什么这里的 unownd 实现方式叫做 unowned(safe) 实现)\n为了更好的优化，应用编译时带有 -OFast，unowned 引用不会去验证引用对象的有效性，unowned 引用的行为就会像 Objective-C 中的 __unsafe_unretained 一样。如果引用对象无效，unowned 引用将会指向已经释放垃圾内存（这种实现称之 unowned(unsafe)）。\n\n当一个 unowned 引用被释放后，如果这时没有其他强引用或 unowned 引用指向这个对象，那么最终这个对象将被析构。这就是为什么一个引用对象不能在强引用计数器等于零的情况下，被析构的原因，所有的引用计数器必须能够被访问用来验证 unowned 引用和强引用数量。\n\nSwift 的 weak 引用添加了附加层，间接地把 unowned 引用包裹到了一个可选容器里面，在指向的对象析构之后变成空的情况下，这样处理会更加的清晰。但是需要付出的代价是，附加的机制需要正确地处理可选值。\n\n考虑到以上因素，在对象关系生命周期允许的情况下，优先选择使用 unowned 引用。但是这不是此故事的结局，接下来比较一下两者性能1上的差别。\n\n## 性能：深度探索\n\n在查看 Swift 项目源码验证之前，需要理解 ARC 如何管理这两种引用类型，并且还需要解释 swiftc，LLVM 和 SIL 的相关知识。\n\n接下来试着简要介绍本文所需要的必备知识点，如果想了解更多，将在最后的脚注中找到一些有用的链接。\n\n使用一个图来解释 swiftc 整个编译过程的包含的模块：\n\n![swiftc](/images/swiftc.png)\n\nSwiftc 和 clang 一样构建在 LLVM 上，遵循 clang 编译器相似的编译流程。\n\n在编译过程的第一部分，使用一个特定语言前端进行管理，swift 源代码被解释生成一个抽象语法树(AST)表达2，然后抽象语法树的结果从语义角度进行分析，找出语义错误。\n\n在这个点上，对于其他的基于 LLVM 的编译器来讲，在通过一个附加步骤对源代码进行静态分析后（必要时可以显示错误和警告），接着 IRGen 模块 会把 AST 的内容会转换成一个轻量的和底层的机器无关的表示，我们称之为 LLVM IR(LLVM 中间表示)。\n\n尽管两个模块都需要做一些相同检查，但是这两个模块是区分开的，在两个模块之间也存在许多重复的代码。\n\nIR 是一种静态单赋值形式（SSA-form）一致语言，可以看做注入了 LLVM 的虚拟机下的 RISC 类型汇编语言。基于 SSA 将简化接下来的编译过程，从语言前端提供的中间表达会在 IR 进行多重优化。\n\n需要重点注意的是，IR 其中一个特点是，它具有三种不同的形式：内存表达（内部使用），序列化位代码形式（你已经知道的位代码形式）和可读形式。\n\n最后一种形式非常有用，用来验证 IR 代码的最终结构，这个结构将会传入到整个过程中的最后一步，将会从机器独立的 IR 代码转换成平台相关的表达(比如：x86，ARM 等等)。最后一步将被 LLVM 平台后端执行。\n\n那么 swiftc 和其他基于 LLVM 的编译器有什么不同呢？\nswiftc 和其他编译器从结构形式上的差别主要体现在一个附加组件，这个附加组件是 SILGen ，在 IRGen 之前，执行代码的监测和优化，生成一个高级的中间表达，我们称之为 SIL （Swift Intermediate Language，Swift 中间语言），最后 SIL 将会转换成 LLVM IR。这一步加强了在单个软件模块上所有具体语言的检查，并且简化了 IRGen。\n\n从 AST 到 IR 的转换分为两个步骤。SILGen 把 AST 源代码转换为原始 SIL ，然后编译器进行 Swift 语法检查（需要时打印错误或者警告信息），优化有效的原始 SIL ，通过一些步骤最后生成标准化 SIL 。如上面的示意图显示那样，标准化 SIL 的最后转化为 LLVM IR。\n\n再次强调，SIL 是一个 SSA 类型语言，使用附加的结构扩展了 Swift 的语法。它依赖 Swift 的类型系统，并且能理解 Swift 的定义，但是需要重点记住的是，当编译一个手写的 SIL 源码（是的，可以手动写 SIL 然后编译它）时，高阶的 Swift 代码或者函数内容将被编译器忽略。\n\n在接下来的章节，我们将分析一个标准化 SIL 的案例，来理解 unowned 和 weak 引用如何被编译器处理。一个包含捕获列表的基本闭包的例子，查看这个例子生成的 SIL 代码，可以看到被编译器添加的所有 ARC 相关的函数调用。\n\n> 从 GitHub 或者 zipped 获取本文相关的 Playground 代码。然后从这里获取闭包案例和 SIL ，SILGen 以及 LLVM IR 的输出。\n\n## 捕获列表处理解析\n\n接下来看看一个简单的 Swift 的例子，定义两个类变量，然后在一个闭包中对他们进行弱引用的捕获：\n\n```swift\nclass aClass{\n    var value = 1\n}\n\nvar c1 = aClass()\nvar c2 = aClass()\n\nvar fSpec = { \n    [unowned c1, weak c2] in\n    c1.value = 42\n    if let c2o = c2 {\n        c2o.value = 42\n    }\n}\n\nfSpec()\n```\n\n通过 xcrun swiftc -emit-sil sample.swift 编译 swift 源代码，生成标准化 SIL 代码。原始SIL 可以使用 -emit-silgen 选项来生成。\n\n运行以上命令以后，会发现 swiftc 产生了许多代码。通过查看 swiftc 输出代码的片段，学习一下基本的 SIL 指令，理解整个结构。\n\n在下面代码中需要的地方添加了一些多行注释（编译器也生成了一些单行注释），希望这些注释已经足够说清楚发生了什么：\n\n```swift\n/*\n  此文件包含典型 SIL 代码\n*/\nsil_stage canonical             \n\n/* \n  只有在 SIL 内部使用的特殊的导入\n*/\nimport Builtin                  \nimport Swift\nimport SwiftShims\n\n/*\n\t三个全局变量的定义，包括 c1，c2 和 闭包 fSpec。\n  \t@_Tv4clos2c1CS_6aClass是变量的符号，$aClass 是它的类型（类型前缀为$)。\n  \t变量名在这里看起来很乱，但是在后面的代码中将变得更加可读。\n*/\n// c1\nsil_global hidden @_Tv4sample2c1CS_6aClass : $aClass\n\n// c2\nsil_global hidden @_Tv4sample2c2CS_6aClass : $aClass\n\n// fSpec\nsil_global hidden @_Tv4sample5fSpecFT_T_ : $@callee_owned () -> ()\n\n...\n\n/*\n  层次作用域定义表示原始代码的位置。\n  每个 SIL 指示将会指向它生成的 `sil_scope`。\n*/\nsil_scope 1 {  parent @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 }\nsil_scope 2 { loc \"sample.swift\":14:1 parent 1 }\n\n/*\n\t自动生成的 @main 函数包含了我们原始全部作用域的代码。\n \t这里沿用了熟悉的 c main() 函数结构，接收参数个数和参数数组两个输入，这个函数遵循 c 调用约定。\n  \t这个函数包含了需要调用闭包的指令。\n*/\n// main\nsil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {\n/*\n  入口定义头部为 % 符号，后面跟随一个数字 id。\n  每当一个新的入口定义时（或者函数开头定义函数参数），编译器在入口行尾根据它的值（叫做 users）添加一个注释。\n  对于其他指令，需要提供 id 号。\n  在这里，入口 0 将被用来计算入口 4 的内容，入口 1 将被用来创建入口 10 的值。\n*/\n// %0                                             // user: %4\n// %1                                             // user: %10\n/*\n  每一个函数被分解成一系列的基本指令块，每一个指令块结束于一个终止指令（一个分支或者一个返回）。\n  这一系列的指令块表示函数所有可能的执行路径。\n*/\nbb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):\n...\n  /*\n    每一个 SIL 指令都包含一个引用，指向源代码的位置，包括指令具体从源代码中哪个地方来，属于哪一个作用域。\n    在后面分析具体的方法会看到这些内容。\n  */\n  unowned_retain %27 : $@sil_unowned aClass, loc \"sample.swift\":9:14, scope 2 // id: %28\n  store %27 to %2 : $*@sil_unowned aClass, loc \"sample.swift\":9:14, scope 2 // id: %29\n  %30 = alloc_box $@sil_weak Optional<aClass>, var, name \"c2\", loc \"sample.swift\":9:23, scope 2 // users: %46, %44, %43, %31\n  %31 = project_box %30 : $@box @sil_weak Optional<aClass>, loc \"sample.swift\":9:23, scope 2 // user: %35\n  %32 = load %19 : $*aClass, loc \"sample.swift\":9:23, scope 2 // users: %34, %33\n  ...\n}\n\n...\n\n/* \n  下面是一系列自动生成的`aClass`的方法，包括： init/deinit, setter/getter 和其他一些工具方法。\n  每个方法前的注释是编译器添加的，用来说明代码的具体作用。\n*/\n\n/*\n  隐藏方法只在它们模块中可见。\n  @convention(方法名)是 Swift 中方法调用默认的约定，在尾部有一个附加的参数指向它自己。\n*/\n// aClass.__deallocating_deinit\nsil hidden @_TFC4clos6aClassD : $@convention(method) (@owned aClass) -> () {\n    ...\n}\n\n/*\n  @guaranteed 参数表示保证在整个周期内调用此方法都有效。\n*/\n// aClass.deinit\nsil hidden @_TFC4clos6aClassd : $@convention(method) (@guaranteed aClass) -> @owned Builtin.NativeObject {\n    ...\n}\n\n/*\n  [transparent] 修饰的方法是内联的小方法\n*/\n// aClass.value.getter\nsil hidden [transparent] @_TFC4clos6aClassg5valueSi : $@convention(method) (@guaranteed aClass) -> Int {\n    ...\n}\n\n// aClass.value.setter\nsil hidden [transparent] @_TFC4clos6aClasss5valueSi : $@convention(method) (Int, @guaranteed aClass) -> () {\n    ...\n}\n// aClass.value.materializeForSet\nsil hidden [transparent] @_TFC4clos6aClassm5valueSi : $@convention(method) (Builtin.RawPointer, @inout Builtin.UnsafeValueBuffer, @guaranteed aClass) -> (Builtin.RawPointer, Optional<Builtin.RawPointer>) {\n    ...\n}\n\n/*\n  @owned 修饰符表示这个对象将被调用者拥有。\n*/\n// aClass.init() -> aClass\nsil hidden @_TFC4clos6aClasscfT_S0_ : $@convention(method) (@owned aClass) -> @owned aClass {\n    ...\n}\n\n// aClass.__allocating_init() -> aClass\nsil hidden @_TFC4clos6aClassCfT_S0_ : $@convention(method) (@thick aClass.Type) -> @owned aClass {\n    ...\n}\n\n/* \n  接下面是闭包代码段\n*/\n// (closure #1)\nsil shared @_TF4closU_FT_T_ : $@convention(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak Optional<aClass>) -> () {\n    ...\n    /* 关于闭包的 SIL 代码， 见下文 */\n\n    ...\n}\n\n...\n/* \n  sil_vtable 定义所有关于 aClass 类的虚函数表。\n  sil_vtable 包含了期望的所有自动生成的方法。\n*/\nsil_vtable aClass {\n  #aClass.deinit!deallocator: _TFC4clos6aClassD\t// aClass.__deallocating_deinit\n  #aClass.value!getter.1: _TFC4clos6aClassg5valueSi\t// aClass.value.getter\n  #aClass.value!setter.1: _TFC4clos6aClasss5valueSi\t// aClass.value.setter\n  #aClass.value!materializeForSet.1: _TFC4clos6aClassm5valueSi\t// aClass.value.materializeForSet\n  #aClass.init!initializer.1: _TFC4clos6aClasscfT_S0_\t// aClass.init() -> aClass\n}\n```\n现在回到主函数，看看两个类实例如何被获取到，并如何传递给调用他们的闭包。\n\n在这里，所有标识都被重新整理，使得代码片段更加可读。\n\n```swift\n// main\nsil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {\n// %0                                             // user: %4\n// %1                                             // user: %10\nbb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):\n  ...\n  /*\n    全局变量的引用使用三个入口来放置。\n  */\n  %13 = global_addr @clos.c1 : $*aClass, loc \"sample.swift\":5:5, scope 1 // users: %26, %17\n  ...\n  %19 = global_addr @clos.c2 : $*aClass, loc \"sample.swift\":6:5, scope 1 // users: %32, %23\n  ...\n  %25 = global_addr @clos.fSpec : $*@callee_owned () -> (), loc \"sample.swift\":8:5, scope 1 // users: %48, %45\n  /*\n    c1 是 unowned_retained 的。\n    下面的指令增加变量的 unowned 引用计数。\n  */\n  %26 = load %13 : $*aClass, loc \"sample.swift\":9:14, scope 2 // user: %27\n  %27 = ref_to_unowned %26 : $aClass to $@sil_unowned aClass, loc \"sample.swift\":9:14, scope 2 // users: %47, %38, %39, %29, %28\n  unowned_retain %27 : $@sil_unowned aClass, loc \"sample.swift\":9:14, scope 2 // id: %28\n  store %27 to %2 : $*@sil_unowned aClass, loc \"sample.swift\":9:14, scope 2 // id: %29\n  /*\n    对 c2 的处理会更加复杂一些。\n\talloc_box 创建了一个这个变量的引用数容器，变量将会存在这个容器的堆中。\n    容器创建以后，将会创建一个可选变量，指向 c2，并且可选变量会存储在容器里。容器会增加所包含值的技术，正如下面看到的一样，一旦容器被迁移，可选值就会被释放。\n    在这里，c2 的值将被存储在这个可选值中，对象将暂时strong_retained 然后释放。\n  */\n  %30 = alloc_box $@sil_weak Optional<aClass>, var, name \"c2\", loc \"sample.swift\":9:23, scope 2 // users: %46, %44, %43, %31\n  %31 = project_box %30 : $@box @sil_weak Optional<aClass>, loc \"sample.swift\":9:23, scope 2 // user: %35\n  %32 = load %19 : $*aClass, loc \"sample.swift\":9:23, scope 2 // users: %34, %33\n  strong_retain %32 : $aClass, loc \"sample.swift\":9:23, scope 2 // id: %33\n  %34 = enum $Optional<aClass>, #Optional.some!enumelt.1, %32 : $aClass, loc \"sample.swift\":9:23, scope 2 // users: %36, %35\n  store_weak %34 to [initialization] %31 : $*@sil_weak Optional<aClass>, loc \"sample.swift\":9:23, scope 2 // id: %35\n  release_value %34 : $Optional<aClass>, loc \"sample.swift\":9:23, scope 2 // id: %36\n  /*\n    获取到闭包的引用。\n  */\n  // function_ref (closure #1)\n  %37 = function_ref @sample.(closure #1) : $@convention(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak Optional<aClass>) -> (), loc \"sample.swift\":8:13, scope 2 // user: %44\n  /*\n    c1 将被标记为 tagged，并且变量变为 unowned_retained。\n  */\n  strong_retain_unowned %27 : $@sil_unowned aClass, loc \"sample.swift\":8:13, scope 2 // id: %38\n  %39 = unowned_to_ref %27 : $@sil_unowned aClass to $aClass, loc \"sample.swift\":8:13, scope 2 // users: %42, %40\n  %40 = ref_to_unowned %39 : $aClass to $@sil_unowned aClass, loc \"sample.swift\":8:13, scope 2 // users: %44, %41\n  unowned_retain %40 : $@sil_unowned aClass, loc \"sample.swift\":8:13, scope 2 // id: %41\n  strong_release %39 : $aClass, loc \"sample.swift\":8:13, scope 2 // id: %42\n  /*\n    包含 c2 的可选值容器是 strong_retained 的。\n  */\n  strong_retain %30 : $@box @sil_weak Optional<aClass>, loc \"sample.swift\":8:13, scope 2 // id: %43\n  /*\n    创建一个闭包对象，绑定方法到参数中。\n  */\n  %44 = partial_apply %37(%40, %30) : $@convention(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak Optional<aClass>) -> (), loc \"sample.swift\":8:13, scope 2 // user: %45\n  store %44 to %25 : $*@callee_owned () -> (), loc \"sample.swift\":8:13, scope 2 // id: %45\n  /*\n    \n    对 c1 和 c2 的容器变量进行释放（使用 对应匹配的 *_release 方法）。\n  */\n  strong_release %30 : $@box @sil_weak Optional<aClass>, loc \"sample.swift\":14:1, scope 2 // id: %46\n  unowned_release %27 : $@sil_unowned aClass, loc \"sample.swift\":9:14, scope 2 // id: %47\n  /*\n     加载原先存储的闭包对象，增加强引用然后调用它。\n  */\n   %48 = load %25 : $*@callee_owned () -> (), loc \"sample.swift\":17:1, scope 2 // users: %50, %49\n  strong_retain %48 : $@callee_owned () -> (), loc \"sample.swift\":17:1, scope 2 // id: %49\n  %50 = apply %48() : $@callee_owned () -> (), loc \"sample.swift\":17:7, scope 2\n  ...\n}\n```\n\n闭包有一个更加复杂的结构：\n\n```swift\n/*\n  闭包参数被标记为 @sil, 指定参数如何被计数，有一个 unowned 的 aClass 类变量 c2, 和另外一个包含 c2 的可选值容器。\n*/\n// (closure #1)\nsil shared @clos.fSpec: $@convention(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak Optional<aClass>) -> () {\n// %0                                             // users: %24, %6, %5, %2\n// %1                                             // users: %23, %3\n/*\n  下面的函数包含三块，后面两块的执行依赖可选值 c2 具体的值。\n*/\nbb0(%0 : $@sil_unowned aClass, %1 : $@box @sil_weak Optional<aClass>):\n...\n  /*\n    c1 被强计数。\n  */\n  strong_retain_unowned %0 : $@sil_unowned aClass, loc \"sample.swift\":10:5, scope 17 // id: %5\n  %6 = unowned_to_ref %0 : $@sil_unowned aClass to $aClass, loc \"sample.swift\":10:5, scope 17 // users: %11, %10, %9\n  /*\n    使用内部自带包，传入一个整型字面量到整型结构中，初始化了一个值为 42 的整型值。\n    这个值将被设置为 c1 的新值，完成以后这个变量将会被释放。\n    在这里，我们第一次看到 class_method 指令，用于获取 vtable 中的函数引用。\n  */\n  %7 = integer_literal $Builtin.Int64, 42, loc \"sample.swift\":10:16, scope 17 // user: %8\n  %8 = struct $Int (%7 : $Builtin.Int64), loc \"sample.swift\":10:16, scope 17 // user: %10\n  %9 = class_method %6 : $aClass, #aClass.value!setter.1 : (aClass) -> (Int) -> () , $@convention(method) (Int, @guaranteed aClass) -> (), loc \"sample.swift\":10:14, scope 17 // user: %10\n  %10 = apply %9(%8, %6) : $@convention(method) (Int, @guaranteed aClass) -> (), loc \"sample.swift\":10:14, scope 17\n  strong_release %6 : $aClass, loc \"sample.swift\":10:16, scope 17 // id: %11\n  /*\n    接下来讨论 c2。\n    获取可选值，然后根据它的内容执行接下来的分支语句。\n\n    If the optional has a value the bb2 block will be executed before jumping \n    to bb3, if it doesn't after a brief jump to bb1, the function will proceed to bb3 releasing\n    the retained parameters.\n    \n  */\n  %12 = load_weak %3 : $*@sil_weak Optional<aClass>, loc \"sample.swift\":11:18, scope 18 // user: %13\n  switch_enum %12 : $Optional<aClass>, case #Optional.some!enumelt.1: bb2, default bb1, loc \"sample.swift\":11:18, scope 18 // id: %13\n  bb1:                                              // Preds: bb0\n  /*\n    跳转到闭包的结尾。\n  */\n  br bb3, loc \"sample.swift\":11:18, scope 16        // id: %14\n\n// %15                                            // users: %21, %20, %19, %16\nbb2(%15 : $aClass):                               // Preds: bb0\n  /*\n    调用 aClass 的 setter，设置它的值为 42.\n  */\n  ...\n  %17 = integer_literal $Builtin.Int64, 42, loc \"sample.swift\":12:21, scope 19 // user: %18\n  %18 = struct $Int (%17 : $Builtin.Int64), loc \"sample.swift\":12:21, scope 19 // user: %20\n  %19 = class_method %15 : $aClass, #aClass.value!setter.1 : (aClass) -> (Int) -> () , $@convention(method) (Int, @guaranteed aClass) -> (), loc \"sample.swift\":12:19, scope 19 // user: %20\n  %20 = apply %19(%18, %15) : $@convention(method) (Int, @guaranteed aClass) -> (), loc \"sample.swift\":12:19, scope 19\n  strong_release %15 : $aClass, loc \"sample.swift\":13:5, scope 18 // id: %21\n  br bb3, loc \"sample.swift\":13:5, scope 18         // id: %22\n\nbb3:                                              // Preds: bb1 bb2\n  /*\n    释放所有获取的变量然后返回。\n  */\n  strong_release %1 : $@box @sil_weak Optional<aClass>, loc \"sample.swift\":14:1, scope 17 // id: %23\n  unowned_release %0 : $@sil_unowned aClass, loc \"sample.swift\":14:1, scope 17 // id: %24\n  %25 = tuple (), loc \"sample.swift\":14:1, scope 17 // user: %26\n  return %25 : $(), loc \"sample.swift\":14:1, scope 17 // id: %26\n}\n```\n\n在这里，忽略掉不同的 ARC 指令带来的性能的差异点，对不同阶段每种类型的捕获变量做一个快速的对比：\n\n动作 | Unowned | Weak\n---|---|---\n预先调用 #1 | 对象进行 unowned_retain  | 创建一个容器，并且对象进行 strong_retain 操作。创建一个可选值，存入到容器中，然后释放可选值\n预先调用 #2 | strong_retain_unowned，unowned_retain 和 strong_release | strong_retain\n闭包执行 | strong_retain_unowned，unowned_release | load_weak, 打开可选值, strong_release\n调用之后 | unowned_release | strong_release\n\n正如上面看到的 SIL 代码段那样，处理 weak 引用会涉及到更多的工作，因为需要处理引用需要的可选值。\n\n参照官方文档的描述，这里对涉及到的所有 ARC 指令做一个简要的解释：\n\n- unowned_retain：增加堆对象中的 unowned 引用计数。\n- strong_retain_unowned ：断言对象的强引用计数大于 0，然后增加这个引用计数。\n- strong_retain：增加对象的强引用计数。\n- load_weak：不是真正的 ARC 调用，但是它将增加可选值指向对象的强引用计数。\n- strong_release：减少对象的强引用计数。如果释放操作把对象强引用计数变为0，对象将被销毁，然后弱引用将被清除。当整个强引用计数和 unowned 引用计数都为0时，对象的内存才会被释放。\n- unowned_release：减少对象的 unowned 引用计数。当整个强引用计数和 unowned 引用计数都为 0 时，对象的内存才会被释放。\n\n接下来深入到 Swift 运行时看看，这些指令都是如何被实现的，相关的代码文件有：HeapObject.cpp，HeapObject.h，RefCount.h 和 Heap.cpp、 SwiftObject.mm 中的少量定义。容器实现可以在 MetadataImpl.h 找到，但是本文不展开讨论。\n\n这些文件中定义大多数的 ARC 方法都有三种变体，一种是对 Swift 对象的基础实现，另外两种实现是针对非原生 Swift 对象的：桥接对象和未知对象。后面两种变体这里不予讨论。\n\n第一个讨论指令集和 unowned 引用相关。\n\n在 HeapObject.cpp 文件中间可以看到对 unowned_retain 和 unowned_release 的实现方法：\n\n```swift\nSWIFT_RT_ENTRY_VISIBILITY\nvoid swift::swift_unownedRetain(HeapObject *object)\n    SWIFT_CC(RegisterPreservingCC_IMPL) {\n  if (!object)\n    return;\n\n  object->weakRefCount.increment();\n}\n\nSWIFT_RT_ENTRY_VISIBILITY\nvoid swift::swift_unownedRelease(HeapObject *object)\n    SWIFT_CC(RegisterPreservingCC_IMPL) {\n  if (!object)\n    return;\n\n  if (object->weakRefCount.decrementShouldDeallocate()) {\n    // Only class objects can be weak-retained and weak-released.\n    auto metadata = object->metadata;\n    assert(metadata->isClassObject());\n    auto classMetadata = static_cast<const ClassMetadata*>(metadata);\n    assert(classMetadata->isTypeMetadata());\n    SWIFT_RT_ENTRY_CALL(swift_slowDealloc)\n        (object, classMetadata->getInstanceSize(),\n         classMetadata->getInstanceAlignMask());\n  }\n}\n```\nswift_unownedRetain 是 unowned_retain 的具体实现，简单地进行 unowned 引用计数的原子增加操作（这里定义为weakRefCount），swift_unownedRelease 更加复杂，原因之前也描述过，当没有其他 unowned 引用存在时，它需要执行对象的析构操作。\n\n但是整体来讲都不复杂，在这里可以看到 doDecrementShouldDeallocate 方法，这个方法在上面代码中被一个命名类似的方法调用了。这个方法没有做太多，swift_slowDealloc 只是释放给定的指针。\n\n到此已经有了一个对象的 unowned 引用，另外一个指令，strong_retain_unowned 用来创建一个强引用：\n\n```swift\nSWIFT_RT_ENTRY_VISIBILITY\nvoid swift::swift_unownedRetainStrong(HeapObject *object)\n    SWIFT_CC(RegisterPreservingCC_IMPL) {\n  if (!object)\n    return;\n  assert(object->weakRefCount.getCount() &&\n         \"object is not currently weakly retained\");\n\n  if (! object->refCount.tryIncrement())\n    _swift_abortRetainUnowned(object);\n}\n```\n\n因为弱引用应该指向了这个对象，要使用断言来验证对象是否被弱引用，一旦断言通过，将尝试进行增加强引用计数的操作。一旦对象在进程中已经被释放，尝试将会失败。\n\n所有类似于 tryIncrement 通过某种形式修改引用计数的方法都放到 RefCount.h 中，需要使用原子操作进行这些任务。\n\n接下来讨论下 weak 引用的的实现，正如之前看到的那样，swift_weakLoadStrong 用来获取容器中可选值中强引用的对象。\n\n```swift\nHeapObject *swift::swift_weakLoadStrong(WeakReference *ref) {\n  if (ref->Value == (uintptr_t)nullptr) {\n    return nullptr;\n  }\n\n  // ref 可能被其他线程访问\n  auto ptr = __atomic_fetch_or(&ref->Value, WR_READING, __ATOMIC_RELAXED);\n  while (ptr & WR_READING) {\n    short c = 0;\n    while (__atomic_load_n(&ref->Value, __ATOMIC_RELAXED) & WR_READING) {\n      if (++c == WR_SPINLIMIT) {\n        std::this_thread::yield();\n        c -= 1;\n      }\n    }\n    ptr = __atomic_fetch_or(&ref->Value, WR_READING, __ATOMIC_RELAXED);\n  }\n\n  auto object = (HeapObject*)(ptr & ~WR_NATIVE);\n  if (object == nullptr) {\n    __atomic_store_n(&ref->Value, (uintptr_t)nullptr, __ATOMIC_RELAXED);\n    return nullptr;\n  }\n  if (object->refCount.isDeallocating()) {\n    __atomic_store_n(&ref->Value, (uintptr_t)nullptr, __ATOMIC_RELAXED);\n    SWIFT_RT_ENTRY_CALL(swift_unownedRelease)(object);\n    return nullptr;\n  }\n  auto result = swift_tryRetain(object);\n  __atomic_store_n(&ref->Value, ptr, __ATOMIC_RELAXED);\n  return result;\n}\n```\n\n在这个实现中，获取一个强引用需要更多复杂同步操作，在多线程竞争严重的情况下，会带来性能损耗。\n\n在这里第一次出现的 WeakReference 对象，是一个简单的结构体，包含一个整型值字段指向目标对象，目标对象是使用 HeapObject 类来承载的每一个运行时的 Swift 对象。\n\n在 weak 引用询问当前线程设置的 WR_READING 标识之后，从 WeakReference 容器中获取 Swift 对象，如果对象不再有效，或者在等待获取资源时，它变成可以进行析构，当前的引用会被设置为 null。\n\n如果对象依然有效，获取对象的尝试将会成功。\n\n因此，从这个角度来讲，对 weak 引用的常规操作性能比 unowned 引用的更低（但是主要的问题还是在可选值操作上面）。\n\n## 结论\n\n保守的使用 weak 引用是否明智呢？答案是否定的，无论是从性能的角度还是代码清晰的角度而言。\n\n使用正确的捕获修饰符类型，明确的表明代码中的生命周期特性，当其他人或者你自己在读你的代码时不容易误解。\n\n## 脚注\n\n1、苹果第一次讨论 weak/unowned 争议可以查看这里，之后在 twitter 上 Joe Groff 对此也进行了讨论，并且被 Michael Tsai 总结成文。\n这篇文章从意图角度出发，提供了完整并且可操作的解释。\n\n2、从维基百科中可以找到关于 AST 的解释，还可以从 Slava Pestov 的这篇文章中看到关于 Swift 编译器中如何实现 AST 的一些细节。\n\n3、关于 SIL 的更多信息，请查看详尽的官方 SIL 指南，还有 2015 LLVM 开发者会议的视频。Lex Chou 写的 SIL 快速指南可以点击这里查看。\n\n4、查看在 Swift 中如何进行名称粉碎（name mangling）的细节，请查看 Lex Chou 的这篇文章。\n\n5、Mike Ash 在他的 Friday Q&A 中的一篇文章中讨论了如何实现 weak 引用的一种实践方法，这种方法与目前 Swift 的方法对比起来有一些过时，但是其中的解释依然值得参考。\n\n> 本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 http://swift.gg。\n\n-----\n\n文章转自 [SwiftGG](http://swift.gg/2017/05/16/unowned-or-weak-lifetime-and-performance/)\n","source":"_posts/swiftgg-unowned-or-weak-lifetime-and-performance.md","raw":"---\ntitle: 「转」Unowned 还是 Weak？生命周期和性能对比\ndate: 2017-05-18 20:55:17\ntags:\ncategories:\n\tSwift\n---\n\n>作者：Umberto Raimondi，原文链接，原文日期：2016-10-27\n译者：shanks；校对：Crystal Sun；定稿：CMB\n\n每当处理循环引用（retain cycles）时，需要考量对象生命周期来选择unowned或者weak标识符，这已经成为了一个共识。但是有时仍然会心存疑问，在具体的使用中应该选择哪一个，或者退一步讲，保守的只使用 weak 是不是一个好的选择呢？\n\n本文首先对循环引用的基础知识做一个简要介绍，然后会分析 Swift 源代码的一些片段，讲解 unowned 和 weak 在生命周期和性能上的差异点，希望看完本文以后，在的使用场景中，能使用正确的弱引用类型。\n\n<!--more-->\n\n## 目录:\n- 基础知识\n- 问题来了: unowened 还是 weak?\n- 性能：深度探索\n- 捕获列表处理解析\n- 结论\n- 脚注\n\n>从 GitHub 或者 zipped 获取本文相关的 Playground 代码。然后从这里获取闭包案例和 SIL，SILGen 以及 LLVM IR 的输出。\n\n## 基础知识\n\n众所周知，Swift 利用古老并且有效的自动引用计数（ARC, Automatic Reference Counting）来管理内存，带来的后果和在 Objective-C 中使用的情况类似，需要手动使用弱引用来解决循环引用问题。\n\n如果对 ARC 不了解，只需要知道的是，每一个引用类型实例都有一个引用计数与之关联，这个引用计数用来记录这个对象实例正在被变量或常量引用的总次数。当引用计数变为 0 时，实例将会被析构，实例占有的内存和资源都将变得重新可用。\n\n当有两个实例通过某种形式互相引用时，就会形成循环引用（比如：两个类实例都有一个属性指向对方的类实例；双向链表中两个相邻的节点实例等…）, 由于两个实例的引用计数都一直大于 0， 循环引用将会阻止这些实例的析构。\n\n为了解决这个问题，和其他一些有类似问题的语言一样， 在 Swift 中，弱引用 的概念被提了出来，弱引用不会被 ARC 计算，也就是说，当一个弱引用指向一个引用类型实例时，引用计数不会增加。\n\n弱引用不会阻止实例的析构, 只需要记住的是，在任何情况下，弱引用都不会拥有它指向的对象。在正式的场景中不是什么大问题，但是在我们处理这类引用的时候，需要意识到这一点。\n\n在 Swift 中有 2 种 弱 引用形式，unowned 和 weak。\n\n虽然它们的作用类似，但与它们相关实例生命周期的假设会略有不同，并且具有不同的性能特征。\n\n为了举例说明循环引用，这里不使用大家期望看到的类之间的循环引用，而使用闭包的上下文案例，这在 Objective-C 日常开发中处理循环引用时经常会遇到的情况。和类的循环引用类似，通过创建一个强引用指向外部实例，或捕获它，阻止它析构。\n\n在 Objective-C ，按照标准的做法，定义一个弱引用指向闭包外部的实例，然后在闭包内部定义强引用指向这个实例，在闭包执行期间使用它。当然，有必要在使用前检查引用的有效性。\n\n为了更方便的处理循环引用，Swift 引入了一个新的概念，用于简化和更加明显地表达在闭包内部外部变量的捕获：捕获列表（capture list）。使用捕获列表，可以在函数的头部定义和指定那些需要用在内部的外部变量，并且指定引用类型(译者注：这里是指 unowned 和 weak）。\n\n接下来举一些例子，在各种情况下捕获变量的表现。\n\n当不使用捕获列表时，闭包将会创建一个外部变量的强引用：\n\n```swift\nvar i1 = 1, i2 = 1\n\nvar fStrong = {\n    i1 += 1\n    i2 += 2\n}\n\nfStrong()\nprint(i1,i2) //Prints 2 and 3\n```\n\n闭包内部对变量的修改将会改变外部原始变量的值，这与预期是一致的。\n\n使用捕获列表，闭包内部会创建一个新的可用常量。如果没有指定常量修饰符，闭包将会简单地拷贝原始值到新的变量中，对于值类型和引用类型都是一样的。\n\n```swift\nvar fCopy = { [i1] in\n    print(i1,i2)\n}\n\nfStrong()\nprint(i1,i2) //打印结果是 2 和 3  \n\nfCopy()  //打印结果是 1 和 3\n```\n\n在上面的例子中，在调用 fStrong 之前定义函数 fCopy ,在该函数定义的时候，私有常量已经被创建了。正如你所看到的，当调用第二个函数时候，仍然打印 i1 的原始值。\n\n对于外部引用类型的变量，在捕获列表中指定 weak 或 unowned，这个常量将会被初始化为一个弱引用，指向原始值，这种指定的捕获方式就是用来处理循环引用的方式。\n\n```swift\nclass aClass{\n    var value = 1\n}\n\nvar c1 = aClass()\nvar c2 = aClass()\n\nvar fSpec = { [unowned c1, weak c2] in\n    c1.value += 1\n    if let c2 = c2 {\n        c2.value += 1\n    }\n}\n\nfSpec()\nprint(c1.value,c2.value) //Prints 2 and 2\n```\n\n两个 aClass 捕获实例的不同的定义方式，决定了它们在闭包中不同的使用方式。\n\nunowned 引用使用的场景是，原始实例永远不会为 nil，闭包可以直接使用它，并且直接定义为显式解包可选值。当原始实例被析构后，在闭包中使用这个捕获值将导致崩溃。\n\n如果捕获原始实例在使用过程中可能为 nil ，必须将引用声明为 weak， 并且在使用之前验证这个引用的有效性。\n\n## 问题来了: unowened 还是 weak?\n\n在实际使用中如何选择这两种弱引用类型呢？\n\n这个问题的答案可以简单由原始对象和引用它的闭包的生命周期来解释。\n\n![unownedbig](/images/unownedbig.png)\n\n有两个可能出现的场景：\n\n- 闭包和捕获对象的生命周期相同，所以对象可以被访问，也就意味着闭包也可以被访问。外部对象和闭包有相同的生命周期(比如：对象和它的父对象的简单返回引用）。在这种情况下，你应该把引用定义为 unowned。\n\n\t一个经典的案例是: [unowned self], 主要用在闭包中，这种闭包主要在他们的父节点上下文中做一些事情，没有在其他地方被引用或传递，不能作用在父节点之外。\n\n- 闭包的生命周期和捕获对象的生命周期相互独立，当对象不能再使用时，闭包依然能够被引用。这种情况下，你应该把引用定义为 weak，并且在使用它之前验证一下它是否为 nil（请不要对它进行强制解包).\n\n\t一个经典的案例是: [weak delegate = self.delegate!]，可以在某些使用闭包的场景中看到，闭包使用的是完全无关（生命周期独立）的代理对象。\n\n\n当无法确认两个对象之间生命周期的关系时，是否不应该去冒险选择一个无效 unowned 引用？而是保守选择 weak 引用是一个更好的选择？\n答案是否定的，不仅仅是因为对象生命周期了解是一件必要的事情，而且这两个修饰符在性能特性上也有很大的不同。\n\n弱引用最常见的实现是，每次一个新的引用生成时，都会把每个弱引用和它指向的对象信息存储到一个附加表中。\n\n当没有任何强引用指向一个对象时，Swift 运行时会启动析构过程，但是在这之前，运行时会把所有相关的弱引用置为 nil 。弱引用的这种实现方式我们称之为”零和弱引用”。\n\n这种实现有实际的开销，考虑到需要额外实现的数据结构，需要确保在并发访问情况下，对这个全局引用结构所有操作的正确性。一旦析构过程开始了，在任何环境中，都不允许访问弱引用所指向的对象了。\n\n弱引用（包括 unowned 和一些变体的 weak)在 Swift 使用了更简单和快速的实现机制。\n\nSwift 中的每个对象保持了两个引用计数器，一个是强引用计数器，用来决定 ARC 什么时候可以安全地析构这个对象，另外一个附加的弱引用计数器，用来计算创建了多少个指向这个对象的 unowned 或者 weak 引用，当这个计数器为零时，这个对象将被 析构 。\n\n需要重点理解的是，只有等到所有 unowned 引用被释放后，这个对象才会被真正地析构，然后对象将会保持未解析可访问状态，当析构发生后，对象的内容才会被回收。\n\n每当 unowned 引用被定义时，对应的 unowned 引用计数会进行原子级别地增加(使用原子gcc/llvm操作，进行一系列快速且线程安全的基本操作，例如：增加，减少，比较，交换等)，以保证线程安全。在增加计数之前，会检查强引用计数以确保对象是有效的。\n\n试图访问一个无效的对象，将会导致错误的断言，你的应用在运行时中会报错(这就是为什么这里的 unownd 实现方式叫做 unowned(safe) 实现)\n为了更好的优化，应用编译时带有 -OFast，unowned 引用不会去验证引用对象的有效性，unowned 引用的行为就会像 Objective-C 中的 __unsafe_unretained 一样。如果引用对象无效，unowned 引用将会指向已经释放垃圾内存（这种实现称之 unowned(unsafe)）。\n\n当一个 unowned 引用被释放后，如果这时没有其他强引用或 unowned 引用指向这个对象，那么最终这个对象将被析构。这就是为什么一个引用对象不能在强引用计数器等于零的情况下，被析构的原因，所有的引用计数器必须能够被访问用来验证 unowned 引用和强引用数量。\n\nSwift 的 weak 引用添加了附加层，间接地把 unowned 引用包裹到了一个可选容器里面，在指向的对象析构之后变成空的情况下，这样处理会更加的清晰。但是需要付出的代价是，附加的机制需要正确地处理可选值。\n\n考虑到以上因素，在对象关系生命周期允许的情况下，优先选择使用 unowned 引用。但是这不是此故事的结局，接下来比较一下两者性能1上的差别。\n\n## 性能：深度探索\n\n在查看 Swift 项目源码验证之前，需要理解 ARC 如何管理这两种引用类型，并且还需要解释 swiftc，LLVM 和 SIL 的相关知识。\n\n接下来试着简要介绍本文所需要的必备知识点，如果想了解更多，将在最后的脚注中找到一些有用的链接。\n\n使用一个图来解释 swiftc 整个编译过程的包含的模块：\n\n![swiftc](/images/swiftc.png)\n\nSwiftc 和 clang 一样构建在 LLVM 上，遵循 clang 编译器相似的编译流程。\n\n在编译过程的第一部分，使用一个特定语言前端进行管理，swift 源代码被解释生成一个抽象语法树(AST)表达2，然后抽象语法树的结果从语义角度进行分析，找出语义错误。\n\n在这个点上，对于其他的基于 LLVM 的编译器来讲，在通过一个附加步骤对源代码进行静态分析后（必要时可以显示错误和警告），接着 IRGen 模块 会把 AST 的内容会转换成一个轻量的和底层的机器无关的表示，我们称之为 LLVM IR(LLVM 中间表示)。\n\n尽管两个模块都需要做一些相同检查，但是这两个模块是区分开的，在两个模块之间也存在许多重复的代码。\n\nIR 是一种静态单赋值形式（SSA-form）一致语言，可以看做注入了 LLVM 的虚拟机下的 RISC 类型汇编语言。基于 SSA 将简化接下来的编译过程，从语言前端提供的中间表达会在 IR 进行多重优化。\n\n需要重点注意的是，IR 其中一个特点是，它具有三种不同的形式：内存表达（内部使用），序列化位代码形式（你已经知道的位代码形式）和可读形式。\n\n最后一种形式非常有用，用来验证 IR 代码的最终结构，这个结构将会传入到整个过程中的最后一步，将会从机器独立的 IR 代码转换成平台相关的表达(比如：x86，ARM 等等)。最后一步将被 LLVM 平台后端执行。\n\n那么 swiftc 和其他基于 LLVM 的编译器有什么不同呢？\nswiftc 和其他编译器从结构形式上的差别主要体现在一个附加组件，这个附加组件是 SILGen ，在 IRGen 之前，执行代码的监测和优化，生成一个高级的中间表达，我们称之为 SIL （Swift Intermediate Language，Swift 中间语言），最后 SIL 将会转换成 LLVM IR。这一步加强了在单个软件模块上所有具体语言的检查，并且简化了 IRGen。\n\n从 AST 到 IR 的转换分为两个步骤。SILGen 把 AST 源代码转换为原始 SIL ，然后编译器进行 Swift 语法检查（需要时打印错误或者警告信息），优化有效的原始 SIL ，通过一些步骤最后生成标准化 SIL 。如上面的示意图显示那样，标准化 SIL 的最后转化为 LLVM IR。\n\n再次强调，SIL 是一个 SSA 类型语言，使用附加的结构扩展了 Swift 的语法。它依赖 Swift 的类型系统，并且能理解 Swift 的定义，但是需要重点记住的是，当编译一个手写的 SIL 源码（是的，可以手动写 SIL 然后编译它）时，高阶的 Swift 代码或者函数内容将被编译器忽略。\n\n在接下来的章节，我们将分析一个标准化 SIL 的案例，来理解 unowned 和 weak 引用如何被编译器处理。一个包含捕获列表的基本闭包的例子，查看这个例子生成的 SIL 代码，可以看到被编译器添加的所有 ARC 相关的函数调用。\n\n> 从 GitHub 或者 zipped 获取本文相关的 Playground 代码。然后从这里获取闭包案例和 SIL ，SILGen 以及 LLVM IR 的输出。\n\n## 捕获列表处理解析\n\n接下来看看一个简单的 Swift 的例子，定义两个类变量，然后在一个闭包中对他们进行弱引用的捕获：\n\n```swift\nclass aClass{\n    var value = 1\n}\n\nvar c1 = aClass()\nvar c2 = aClass()\n\nvar fSpec = { \n    [unowned c1, weak c2] in\n    c1.value = 42\n    if let c2o = c2 {\n        c2o.value = 42\n    }\n}\n\nfSpec()\n```\n\n通过 xcrun swiftc -emit-sil sample.swift 编译 swift 源代码，生成标准化 SIL 代码。原始SIL 可以使用 -emit-silgen 选项来生成。\n\n运行以上命令以后，会发现 swiftc 产生了许多代码。通过查看 swiftc 输出代码的片段，学习一下基本的 SIL 指令，理解整个结构。\n\n在下面代码中需要的地方添加了一些多行注释（编译器也生成了一些单行注释），希望这些注释已经足够说清楚发生了什么：\n\n```swift\n/*\n  此文件包含典型 SIL 代码\n*/\nsil_stage canonical             \n\n/* \n  只有在 SIL 内部使用的特殊的导入\n*/\nimport Builtin                  \nimport Swift\nimport SwiftShims\n\n/*\n\t三个全局变量的定义，包括 c1，c2 和 闭包 fSpec。\n  \t@_Tv4clos2c1CS_6aClass是变量的符号，$aClass 是它的类型（类型前缀为$)。\n  \t变量名在这里看起来很乱，但是在后面的代码中将变得更加可读。\n*/\n// c1\nsil_global hidden @_Tv4sample2c1CS_6aClass : $aClass\n\n// c2\nsil_global hidden @_Tv4sample2c2CS_6aClass : $aClass\n\n// fSpec\nsil_global hidden @_Tv4sample5fSpecFT_T_ : $@callee_owned () -> ()\n\n...\n\n/*\n  层次作用域定义表示原始代码的位置。\n  每个 SIL 指示将会指向它生成的 `sil_scope`。\n*/\nsil_scope 1 {  parent @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 }\nsil_scope 2 { loc \"sample.swift\":14:1 parent 1 }\n\n/*\n\t自动生成的 @main 函数包含了我们原始全部作用域的代码。\n \t这里沿用了熟悉的 c main() 函数结构，接收参数个数和参数数组两个输入，这个函数遵循 c 调用约定。\n  \t这个函数包含了需要调用闭包的指令。\n*/\n// main\nsil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {\n/*\n  入口定义头部为 % 符号，后面跟随一个数字 id。\n  每当一个新的入口定义时（或者函数开头定义函数参数），编译器在入口行尾根据它的值（叫做 users）添加一个注释。\n  对于其他指令，需要提供 id 号。\n  在这里，入口 0 将被用来计算入口 4 的内容，入口 1 将被用来创建入口 10 的值。\n*/\n// %0                                             // user: %4\n// %1                                             // user: %10\n/*\n  每一个函数被分解成一系列的基本指令块，每一个指令块结束于一个终止指令（一个分支或者一个返回）。\n  这一系列的指令块表示函数所有可能的执行路径。\n*/\nbb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):\n...\n  /*\n    每一个 SIL 指令都包含一个引用，指向源代码的位置，包括指令具体从源代码中哪个地方来，属于哪一个作用域。\n    在后面分析具体的方法会看到这些内容。\n  */\n  unowned_retain %27 : $@sil_unowned aClass, loc \"sample.swift\":9:14, scope 2 // id: %28\n  store %27 to %2 : $*@sil_unowned aClass, loc \"sample.swift\":9:14, scope 2 // id: %29\n  %30 = alloc_box $@sil_weak Optional<aClass>, var, name \"c2\", loc \"sample.swift\":9:23, scope 2 // users: %46, %44, %43, %31\n  %31 = project_box %30 : $@box @sil_weak Optional<aClass>, loc \"sample.swift\":9:23, scope 2 // user: %35\n  %32 = load %19 : $*aClass, loc \"sample.swift\":9:23, scope 2 // users: %34, %33\n  ...\n}\n\n...\n\n/* \n  下面是一系列自动生成的`aClass`的方法，包括： init/deinit, setter/getter 和其他一些工具方法。\n  每个方法前的注释是编译器添加的，用来说明代码的具体作用。\n*/\n\n/*\n  隐藏方法只在它们模块中可见。\n  @convention(方法名)是 Swift 中方法调用默认的约定，在尾部有一个附加的参数指向它自己。\n*/\n// aClass.__deallocating_deinit\nsil hidden @_TFC4clos6aClassD : $@convention(method) (@owned aClass) -> () {\n    ...\n}\n\n/*\n  @guaranteed 参数表示保证在整个周期内调用此方法都有效。\n*/\n// aClass.deinit\nsil hidden @_TFC4clos6aClassd : $@convention(method) (@guaranteed aClass) -> @owned Builtin.NativeObject {\n    ...\n}\n\n/*\n  [transparent] 修饰的方法是内联的小方法\n*/\n// aClass.value.getter\nsil hidden [transparent] @_TFC4clos6aClassg5valueSi : $@convention(method) (@guaranteed aClass) -> Int {\n    ...\n}\n\n// aClass.value.setter\nsil hidden [transparent] @_TFC4clos6aClasss5valueSi : $@convention(method) (Int, @guaranteed aClass) -> () {\n    ...\n}\n// aClass.value.materializeForSet\nsil hidden [transparent] @_TFC4clos6aClassm5valueSi : $@convention(method) (Builtin.RawPointer, @inout Builtin.UnsafeValueBuffer, @guaranteed aClass) -> (Builtin.RawPointer, Optional<Builtin.RawPointer>) {\n    ...\n}\n\n/*\n  @owned 修饰符表示这个对象将被调用者拥有。\n*/\n// aClass.init() -> aClass\nsil hidden @_TFC4clos6aClasscfT_S0_ : $@convention(method) (@owned aClass) -> @owned aClass {\n    ...\n}\n\n// aClass.__allocating_init() -> aClass\nsil hidden @_TFC4clos6aClassCfT_S0_ : $@convention(method) (@thick aClass.Type) -> @owned aClass {\n    ...\n}\n\n/* \n  接下面是闭包代码段\n*/\n// (closure #1)\nsil shared @_TF4closU_FT_T_ : $@convention(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak Optional<aClass>) -> () {\n    ...\n    /* 关于闭包的 SIL 代码， 见下文 */\n\n    ...\n}\n\n...\n/* \n  sil_vtable 定义所有关于 aClass 类的虚函数表。\n  sil_vtable 包含了期望的所有自动生成的方法。\n*/\nsil_vtable aClass {\n  #aClass.deinit!deallocator: _TFC4clos6aClassD\t// aClass.__deallocating_deinit\n  #aClass.value!getter.1: _TFC4clos6aClassg5valueSi\t// aClass.value.getter\n  #aClass.value!setter.1: _TFC4clos6aClasss5valueSi\t// aClass.value.setter\n  #aClass.value!materializeForSet.1: _TFC4clos6aClassm5valueSi\t// aClass.value.materializeForSet\n  #aClass.init!initializer.1: _TFC4clos6aClasscfT_S0_\t// aClass.init() -> aClass\n}\n```\n现在回到主函数，看看两个类实例如何被获取到，并如何传递给调用他们的闭包。\n\n在这里，所有标识都被重新整理，使得代码片段更加可读。\n\n```swift\n// main\nsil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {\n// %0                                             // user: %4\n// %1                                             // user: %10\nbb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):\n  ...\n  /*\n    全局变量的引用使用三个入口来放置。\n  */\n  %13 = global_addr @clos.c1 : $*aClass, loc \"sample.swift\":5:5, scope 1 // users: %26, %17\n  ...\n  %19 = global_addr @clos.c2 : $*aClass, loc \"sample.swift\":6:5, scope 1 // users: %32, %23\n  ...\n  %25 = global_addr @clos.fSpec : $*@callee_owned () -> (), loc \"sample.swift\":8:5, scope 1 // users: %48, %45\n  /*\n    c1 是 unowned_retained 的。\n    下面的指令增加变量的 unowned 引用计数。\n  */\n  %26 = load %13 : $*aClass, loc \"sample.swift\":9:14, scope 2 // user: %27\n  %27 = ref_to_unowned %26 : $aClass to $@sil_unowned aClass, loc \"sample.swift\":9:14, scope 2 // users: %47, %38, %39, %29, %28\n  unowned_retain %27 : $@sil_unowned aClass, loc \"sample.swift\":9:14, scope 2 // id: %28\n  store %27 to %2 : $*@sil_unowned aClass, loc \"sample.swift\":9:14, scope 2 // id: %29\n  /*\n    对 c2 的处理会更加复杂一些。\n\talloc_box 创建了一个这个变量的引用数容器，变量将会存在这个容器的堆中。\n    容器创建以后，将会创建一个可选变量，指向 c2，并且可选变量会存储在容器里。容器会增加所包含值的技术，正如下面看到的一样，一旦容器被迁移，可选值就会被释放。\n    在这里，c2 的值将被存储在这个可选值中，对象将暂时strong_retained 然后释放。\n  */\n  %30 = alloc_box $@sil_weak Optional<aClass>, var, name \"c2\", loc \"sample.swift\":9:23, scope 2 // users: %46, %44, %43, %31\n  %31 = project_box %30 : $@box @sil_weak Optional<aClass>, loc \"sample.swift\":9:23, scope 2 // user: %35\n  %32 = load %19 : $*aClass, loc \"sample.swift\":9:23, scope 2 // users: %34, %33\n  strong_retain %32 : $aClass, loc \"sample.swift\":9:23, scope 2 // id: %33\n  %34 = enum $Optional<aClass>, #Optional.some!enumelt.1, %32 : $aClass, loc \"sample.swift\":9:23, scope 2 // users: %36, %35\n  store_weak %34 to [initialization] %31 : $*@sil_weak Optional<aClass>, loc \"sample.swift\":9:23, scope 2 // id: %35\n  release_value %34 : $Optional<aClass>, loc \"sample.swift\":9:23, scope 2 // id: %36\n  /*\n    获取到闭包的引用。\n  */\n  // function_ref (closure #1)\n  %37 = function_ref @sample.(closure #1) : $@convention(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak Optional<aClass>) -> (), loc \"sample.swift\":8:13, scope 2 // user: %44\n  /*\n    c1 将被标记为 tagged，并且变量变为 unowned_retained。\n  */\n  strong_retain_unowned %27 : $@sil_unowned aClass, loc \"sample.swift\":8:13, scope 2 // id: %38\n  %39 = unowned_to_ref %27 : $@sil_unowned aClass to $aClass, loc \"sample.swift\":8:13, scope 2 // users: %42, %40\n  %40 = ref_to_unowned %39 : $aClass to $@sil_unowned aClass, loc \"sample.swift\":8:13, scope 2 // users: %44, %41\n  unowned_retain %40 : $@sil_unowned aClass, loc \"sample.swift\":8:13, scope 2 // id: %41\n  strong_release %39 : $aClass, loc \"sample.swift\":8:13, scope 2 // id: %42\n  /*\n    包含 c2 的可选值容器是 strong_retained 的。\n  */\n  strong_retain %30 : $@box @sil_weak Optional<aClass>, loc \"sample.swift\":8:13, scope 2 // id: %43\n  /*\n    创建一个闭包对象，绑定方法到参数中。\n  */\n  %44 = partial_apply %37(%40, %30) : $@convention(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak Optional<aClass>) -> (), loc \"sample.swift\":8:13, scope 2 // user: %45\n  store %44 to %25 : $*@callee_owned () -> (), loc \"sample.swift\":8:13, scope 2 // id: %45\n  /*\n    \n    对 c1 和 c2 的容器变量进行释放（使用 对应匹配的 *_release 方法）。\n  */\n  strong_release %30 : $@box @sil_weak Optional<aClass>, loc \"sample.swift\":14:1, scope 2 // id: %46\n  unowned_release %27 : $@sil_unowned aClass, loc \"sample.swift\":9:14, scope 2 // id: %47\n  /*\n     加载原先存储的闭包对象，增加强引用然后调用它。\n  */\n   %48 = load %25 : $*@callee_owned () -> (), loc \"sample.swift\":17:1, scope 2 // users: %50, %49\n  strong_retain %48 : $@callee_owned () -> (), loc \"sample.swift\":17:1, scope 2 // id: %49\n  %50 = apply %48() : $@callee_owned () -> (), loc \"sample.swift\":17:7, scope 2\n  ...\n}\n```\n\n闭包有一个更加复杂的结构：\n\n```swift\n/*\n  闭包参数被标记为 @sil, 指定参数如何被计数，有一个 unowned 的 aClass 类变量 c2, 和另外一个包含 c2 的可选值容器。\n*/\n// (closure #1)\nsil shared @clos.fSpec: $@convention(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak Optional<aClass>) -> () {\n// %0                                             // users: %24, %6, %5, %2\n// %1                                             // users: %23, %3\n/*\n  下面的函数包含三块，后面两块的执行依赖可选值 c2 具体的值。\n*/\nbb0(%0 : $@sil_unowned aClass, %1 : $@box @sil_weak Optional<aClass>):\n...\n  /*\n    c1 被强计数。\n  */\n  strong_retain_unowned %0 : $@sil_unowned aClass, loc \"sample.swift\":10:5, scope 17 // id: %5\n  %6 = unowned_to_ref %0 : $@sil_unowned aClass to $aClass, loc \"sample.swift\":10:5, scope 17 // users: %11, %10, %9\n  /*\n    使用内部自带包，传入一个整型字面量到整型结构中，初始化了一个值为 42 的整型值。\n    这个值将被设置为 c1 的新值，完成以后这个变量将会被释放。\n    在这里，我们第一次看到 class_method 指令，用于获取 vtable 中的函数引用。\n  */\n  %7 = integer_literal $Builtin.Int64, 42, loc \"sample.swift\":10:16, scope 17 // user: %8\n  %8 = struct $Int (%7 : $Builtin.Int64), loc \"sample.swift\":10:16, scope 17 // user: %10\n  %9 = class_method %6 : $aClass, #aClass.value!setter.1 : (aClass) -> (Int) -> () , $@convention(method) (Int, @guaranteed aClass) -> (), loc \"sample.swift\":10:14, scope 17 // user: %10\n  %10 = apply %9(%8, %6) : $@convention(method) (Int, @guaranteed aClass) -> (), loc \"sample.swift\":10:14, scope 17\n  strong_release %6 : $aClass, loc \"sample.swift\":10:16, scope 17 // id: %11\n  /*\n    接下来讨论 c2。\n    获取可选值，然后根据它的内容执行接下来的分支语句。\n\n    If the optional has a value the bb2 block will be executed before jumping \n    to bb3, if it doesn't after a brief jump to bb1, the function will proceed to bb3 releasing\n    the retained parameters.\n    \n  */\n  %12 = load_weak %3 : $*@sil_weak Optional<aClass>, loc \"sample.swift\":11:18, scope 18 // user: %13\n  switch_enum %12 : $Optional<aClass>, case #Optional.some!enumelt.1: bb2, default bb1, loc \"sample.swift\":11:18, scope 18 // id: %13\n  bb1:                                              // Preds: bb0\n  /*\n    跳转到闭包的结尾。\n  */\n  br bb3, loc \"sample.swift\":11:18, scope 16        // id: %14\n\n// %15                                            // users: %21, %20, %19, %16\nbb2(%15 : $aClass):                               // Preds: bb0\n  /*\n    调用 aClass 的 setter，设置它的值为 42.\n  */\n  ...\n  %17 = integer_literal $Builtin.Int64, 42, loc \"sample.swift\":12:21, scope 19 // user: %18\n  %18 = struct $Int (%17 : $Builtin.Int64), loc \"sample.swift\":12:21, scope 19 // user: %20\n  %19 = class_method %15 : $aClass, #aClass.value!setter.1 : (aClass) -> (Int) -> () , $@convention(method) (Int, @guaranteed aClass) -> (), loc \"sample.swift\":12:19, scope 19 // user: %20\n  %20 = apply %19(%18, %15) : $@convention(method) (Int, @guaranteed aClass) -> (), loc \"sample.swift\":12:19, scope 19\n  strong_release %15 : $aClass, loc \"sample.swift\":13:5, scope 18 // id: %21\n  br bb3, loc \"sample.swift\":13:5, scope 18         // id: %22\n\nbb3:                                              // Preds: bb1 bb2\n  /*\n    释放所有获取的变量然后返回。\n  */\n  strong_release %1 : $@box @sil_weak Optional<aClass>, loc \"sample.swift\":14:1, scope 17 // id: %23\n  unowned_release %0 : $@sil_unowned aClass, loc \"sample.swift\":14:1, scope 17 // id: %24\n  %25 = tuple (), loc \"sample.swift\":14:1, scope 17 // user: %26\n  return %25 : $(), loc \"sample.swift\":14:1, scope 17 // id: %26\n}\n```\n\n在这里，忽略掉不同的 ARC 指令带来的性能的差异点，对不同阶段每种类型的捕获变量做一个快速的对比：\n\n动作 | Unowned | Weak\n---|---|---\n预先调用 #1 | 对象进行 unowned_retain  | 创建一个容器，并且对象进行 strong_retain 操作。创建一个可选值，存入到容器中，然后释放可选值\n预先调用 #2 | strong_retain_unowned，unowned_retain 和 strong_release | strong_retain\n闭包执行 | strong_retain_unowned，unowned_release | load_weak, 打开可选值, strong_release\n调用之后 | unowned_release | strong_release\n\n正如上面看到的 SIL 代码段那样，处理 weak 引用会涉及到更多的工作，因为需要处理引用需要的可选值。\n\n参照官方文档的描述，这里对涉及到的所有 ARC 指令做一个简要的解释：\n\n- unowned_retain：增加堆对象中的 unowned 引用计数。\n- strong_retain_unowned ：断言对象的强引用计数大于 0，然后增加这个引用计数。\n- strong_retain：增加对象的强引用计数。\n- load_weak：不是真正的 ARC 调用，但是它将增加可选值指向对象的强引用计数。\n- strong_release：减少对象的强引用计数。如果释放操作把对象强引用计数变为0，对象将被销毁，然后弱引用将被清除。当整个强引用计数和 unowned 引用计数都为0时，对象的内存才会被释放。\n- unowned_release：减少对象的 unowned 引用计数。当整个强引用计数和 unowned 引用计数都为 0 时，对象的内存才会被释放。\n\n接下来深入到 Swift 运行时看看，这些指令都是如何被实现的，相关的代码文件有：HeapObject.cpp，HeapObject.h，RefCount.h 和 Heap.cpp、 SwiftObject.mm 中的少量定义。容器实现可以在 MetadataImpl.h 找到，但是本文不展开讨论。\n\n这些文件中定义大多数的 ARC 方法都有三种变体，一种是对 Swift 对象的基础实现，另外两种实现是针对非原生 Swift 对象的：桥接对象和未知对象。后面两种变体这里不予讨论。\n\n第一个讨论指令集和 unowned 引用相关。\n\n在 HeapObject.cpp 文件中间可以看到对 unowned_retain 和 unowned_release 的实现方法：\n\n```swift\nSWIFT_RT_ENTRY_VISIBILITY\nvoid swift::swift_unownedRetain(HeapObject *object)\n    SWIFT_CC(RegisterPreservingCC_IMPL) {\n  if (!object)\n    return;\n\n  object->weakRefCount.increment();\n}\n\nSWIFT_RT_ENTRY_VISIBILITY\nvoid swift::swift_unownedRelease(HeapObject *object)\n    SWIFT_CC(RegisterPreservingCC_IMPL) {\n  if (!object)\n    return;\n\n  if (object->weakRefCount.decrementShouldDeallocate()) {\n    // Only class objects can be weak-retained and weak-released.\n    auto metadata = object->metadata;\n    assert(metadata->isClassObject());\n    auto classMetadata = static_cast<const ClassMetadata*>(metadata);\n    assert(classMetadata->isTypeMetadata());\n    SWIFT_RT_ENTRY_CALL(swift_slowDealloc)\n        (object, classMetadata->getInstanceSize(),\n         classMetadata->getInstanceAlignMask());\n  }\n}\n```\nswift_unownedRetain 是 unowned_retain 的具体实现，简单地进行 unowned 引用计数的原子增加操作（这里定义为weakRefCount），swift_unownedRelease 更加复杂，原因之前也描述过，当没有其他 unowned 引用存在时，它需要执行对象的析构操作。\n\n但是整体来讲都不复杂，在这里可以看到 doDecrementShouldDeallocate 方法，这个方法在上面代码中被一个命名类似的方法调用了。这个方法没有做太多，swift_slowDealloc 只是释放给定的指针。\n\n到此已经有了一个对象的 unowned 引用，另外一个指令，strong_retain_unowned 用来创建一个强引用：\n\n```swift\nSWIFT_RT_ENTRY_VISIBILITY\nvoid swift::swift_unownedRetainStrong(HeapObject *object)\n    SWIFT_CC(RegisterPreservingCC_IMPL) {\n  if (!object)\n    return;\n  assert(object->weakRefCount.getCount() &&\n         \"object is not currently weakly retained\");\n\n  if (! object->refCount.tryIncrement())\n    _swift_abortRetainUnowned(object);\n}\n```\n\n因为弱引用应该指向了这个对象，要使用断言来验证对象是否被弱引用，一旦断言通过，将尝试进行增加强引用计数的操作。一旦对象在进程中已经被释放，尝试将会失败。\n\n所有类似于 tryIncrement 通过某种形式修改引用计数的方法都放到 RefCount.h 中，需要使用原子操作进行这些任务。\n\n接下来讨论下 weak 引用的的实现，正如之前看到的那样，swift_weakLoadStrong 用来获取容器中可选值中强引用的对象。\n\n```swift\nHeapObject *swift::swift_weakLoadStrong(WeakReference *ref) {\n  if (ref->Value == (uintptr_t)nullptr) {\n    return nullptr;\n  }\n\n  // ref 可能被其他线程访问\n  auto ptr = __atomic_fetch_or(&ref->Value, WR_READING, __ATOMIC_RELAXED);\n  while (ptr & WR_READING) {\n    short c = 0;\n    while (__atomic_load_n(&ref->Value, __ATOMIC_RELAXED) & WR_READING) {\n      if (++c == WR_SPINLIMIT) {\n        std::this_thread::yield();\n        c -= 1;\n      }\n    }\n    ptr = __atomic_fetch_or(&ref->Value, WR_READING, __ATOMIC_RELAXED);\n  }\n\n  auto object = (HeapObject*)(ptr & ~WR_NATIVE);\n  if (object == nullptr) {\n    __atomic_store_n(&ref->Value, (uintptr_t)nullptr, __ATOMIC_RELAXED);\n    return nullptr;\n  }\n  if (object->refCount.isDeallocating()) {\n    __atomic_store_n(&ref->Value, (uintptr_t)nullptr, __ATOMIC_RELAXED);\n    SWIFT_RT_ENTRY_CALL(swift_unownedRelease)(object);\n    return nullptr;\n  }\n  auto result = swift_tryRetain(object);\n  __atomic_store_n(&ref->Value, ptr, __ATOMIC_RELAXED);\n  return result;\n}\n```\n\n在这个实现中，获取一个强引用需要更多复杂同步操作，在多线程竞争严重的情况下，会带来性能损耗。\n\n在这里第一次出现的 WeakReference 对象，是一个简单的结构体，包含一个整型值字段指向目标对象，目标对象是使用 HeapObject 类来承载的每一个运行时的 Swift 对象。\n\n在 weak 引用询问当前线程设置的 WR_READING 标识之后，从 WeakReference 容器中获取 Swift 对象，如果对象不再有效，或者在等待获取资源时，它变成可以进行析构，当前的引用会被设置为 null。\n\n如果对象依然有效，获取对象的尝试将会成功。\n\n因此，从这个角度来讲，对 weak 引用的常规操作性能比 unowned 引用的更低（但是主要的问题还是在可选值操作上面）。\n\n## 结论\n\n保守的使用 weak 引用是否明智呢？答案是否定的，无论是从性能的角度还是代码清晰的角度而言。\n\n使用正确的捕获修饰符类型，明确的表明代码中的生命周期特性，当其他人或者你自己在读你的代码时不容易误解。\n\n## 脚注\n\n1、苹果第一次讨论 weak/unowned 争议可以查看这里，之后在 twitter 上 Joe Groff 对此也进行了讨论，并且被 Michael Tsai 总结成文。\n这篇文章从意图角度出发，提供了完整并且可操作的解释。\n\n2、从维基百科中可以找到关于 AST 的解释，还可以从 Slava Pestov 的这篇文章中看到关于 Swift 编译器中如何实现 AST 的一些细节。\n\n3、关于 SIL 的更多信息，请查看详尽的官方 SIL 指南，还有 2015 LLVM 开发者会议的视频。Lex Chou 写的 SIL 快速指南可以点击这里查看。\n\n4、查看在 Swift 中如何进行名称粉碎（name mangling）的细节，请查看 Lex Chou 的这篇文章。\n\n5、Mike Ash 在他的 Friday Q&A 中的一篇文章中讨论了如何实现 weak 引用的一种实践方法，这种方法与目前 Swift 的方法对比起来有一些过时，但是其中的解释依然值得参考。\n\n> 本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 http://swift.gg。\n\n-----\n\n文章转自 [SwiftGG](http://swift.gg/2017/05/16/unowned-or-weak-lifetime-and-performance/)\n","slug":"swiftgg-unowned-or-weak-lifetime-and-performance","published":1,"updated":"2017-08-10T06:12:00.000Z","_id":"cj661pfoa001ckhuvgnqqekiu","comments":1,"layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><blockquote>\n<p>作者：Umberto Raimondi，原文链接，原文日期：2016-10-27<br>译者：shanks；校对：Crystal Sun；定稿：CMB</p>\n</blockquote>\n<p>每当处理循环引用（retain cycles）时，需要考量对象生命周期来选择unowned或者weak标识符，这已经成为了一个共识。但是有时仍然会心存疑问，在具体的使用中应该选择哪一个，或者退一步讲，保守的只使用 weak 是不是一个好的选择呢？</p>\n<p>本文首先对循环引用的基础知识做一个简要介绍，然后会分析 Swift 源代码的一些片段，讲解 unowned 和 weak 在生命周期和性能上的差异点，希望看完本文以后，在的使用场景中，能使用正确的弱引用类型。</p>\n<a id=\"more\"></a>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录:\"></a>目录:</h2><ul>\n<li>基础知识</li>\n<li>问题来了: unowened 还是 weak?</li>\n<li>性能：深度探索</li>\n<li>捕获列表处理解析</li>\n<li>结论</li>\n<li>脚注</li>\n</ul>\n<blockquote>\n<p>从 GitHub 或者 zipped 获取本文相关的 Playground 代码。然后从这里获取闭包案例和 SIL，SILGen 以及 LLVM IR 的输出。</p>\n</blockquote>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>众所周知，Swift 利用古老并且有效的自动引用计数（ARC, Automatic Reference Counting）来管理内存，带来的后果和在 Objective-C 中使用的情况类似，需要手动使用弱引用来解决循环引用问题。</p>\n<p>如果对 ARC 不了解，只需要知道的是，每一个引用类型实例都有一个引用计数与之关联，这个引用计数用来记录这个对象实例正在被变量或常量引用的总次数。当引用计数变为 0 时，实例将会被析构，实例占有的内存和资源都将变得重新可用。</p>\n<p>当有两个实例通过某种形式互相引用时，就会形成循环引用（比如：两个类实例都有一个属性指向对方的类实例；双向链表中两个相邻的节点实例等…）, 由于两个实例的引用计数都一直大于 0， 循环引用将会阻止这些实例的析构。</p>\n<p>为了解决这个问题，和其他一些有类似问题的语言一样， 在 Swift 中，弱引用 的概念被提了出来，弱引用不会被 ARC 计算，也就是说，当一个弱引用指向一个引用类型实例时，引用计数不会增加。</p>\n<p>弱引用不会阻止实例的析构, 只需要记住的是，在任何情况下，弱引用都不会拥有它指向的对象。在正式的场景中不是什么大问题，但是在我们处理这类引用的时候，需要意识到这一点。</p>\n<p>在 Swift 中有 2 种 弱 引用形式，unowned 和 weak。</p>\n<p>虽然它们的作用类似，但与它们相关实例生命周期的假设会略有不同，并且具有不同的性能特征。</p>\n<p>为了举例说明循环引用，这里不使用大家期望看到的类之间的循环引用，而使用闭包的上下文案例，这在 Objective-C 日常开发中处理循环引用时经常会遇到的情况。和类的循环引用类似，通过创建一个强引用指向外部实例，或捕获它，阻止它析构。</p>\n<p>在 Objective-C ，按照标准的做法，定义一个弱引用指向闭包外部的实例，然后在闭包内部定义强引用指向这个实例，在闭包执行期间使用它。当然，有必要在使用前检查引用的有效性。</p>\n<p>为了更方便的处理循环引用，Swift 引入了一个新的概念，用于简化和更加明显地表达在闭包内部外部变量的捕获：捕获列表（capture list）。使用捕获列表，可以在函数的头部定义和指定那些需要用在内部的外部变量，并且指定引用类型(译者注：这里是指 unowned 和 weak）。</p>\n<p>接下来举一些例子，在各种情况下捕获变量的表现。</p>\n<p>当不使用捕获列表时，闭包将会创建一个外部变量的强引用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i1 = <span class=\"number\">1</span>, i2 = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fStrong = &#123;</div><div class=\"line\">    i1 += <span class=\"number\">1</span></div><div class=\"line\">    i2 += <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fStrong()</div><div class=\"line\"><span class=\"built_in\">print</span>(i1,i2) <span class=\"comment\">//Prints 2 and 3</span></div></pre></td></tr></table></figure>\n<p>闭包内部对变量的修改将会改变外部原始变量的值，这与预期是一致的。</p>\n<p>使用捕获列表，闭包内部会创建一个新的可用常量。如果没有指定常量修饰符，闭包将会简单地拷贝原始值到新的变量中，对于值类型和引用类型都是一样的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fCopy = &#123; [i1] <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(i1,i2)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fStrong()</div><div class=\"line\"><span class=\"built_in\">print</span>(i1,i2) <span class=\"comment\">//打印结果是 2 和 3  </span></div><div class=\"line\"></div><div class=\"line\">fCopy()  <span class=\"comment\">//打印结果是 1 和 3</span></div></pre></td></tr></table></figure>\n<p>在上面的例子中，在调用 fStrong 之前定义函数 fCopy ,在该函数定义的时候，私有常量已经被创建了。正如你所看到的，当调用第二个函数时候，仍然打印 i1 的原始值。</p>\n<p>对于外部引用类型的变量，在捕获列表中指定 weak 或 unowned，这个常量将会被初始化为一个弱引用，指向原始值，这种指定的捕获方式就是用来处理循环引用的方式。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">aClass</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"number\">1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c1 = aClass()</div><div class=\"line\"><span class=\"keyword\">var</span> c2 = aClass()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fSpec = &#123; [<span class=\"keyword\">unowned</span> c1, <span class=\"keyword\">weak</span> c2] <span class=\"keyword\">in</span></div><div class=\"line\">    c1.value += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> c2 = c2 &#123;</div><div class=\"line\">        c2.value += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fSpec()</div><div class=\"line\"><span class=\"built_in\">print</span>(c1.value,c2.value) <span class=\"comment\">//Prints 2 and 2</span></div></pre></td></tr></table></figure>\n<p>两个 aClass 捕获实例的不同的定义方式，决定了它们在闭包中不同的使用方式。</p>\n<p>unowned 引用使用的场景是，原始实例永远不会为 nil，闭包可以直接使用它，并且直接定义为显式解包可选值。当原始实例被析构后，在闭包中使用这个捕获值将导致崩溃。</p>\n<p>如果捕获原始实例在使用过程中可能为 nil ，必须将引用声明为 weak， 并且在使用之前验证这个引用的有效性。</p>\n<h2 id=\"问题来了-unowened-还是-weak\"><a href=\"#问题来了-unowened-还是-weak\" class=\"headerlink\" title=\"问题来了: unowened 还是 weak?\"></a>问题来了: unowened 还是 weak?</h2><p>在实际使用中如何选择这两种弱引用类型呢？</p>\n<p>这个问题的答案可以简单由原始对象和引用它的闭包的生命周期来解释。</p>\n<p><img src=\"/images/unownedbig.png\" alt=\"unownedbig\"></p>\n<p>有两个可能出现的场景：</p>\n<ul>\n<li><p>闭包和捕获对象的生命周期相同，所以对象可以被访问，也就意味着闭包也可以被访问。外部对象和闭包有相同的生命周期(比如：对象和它的父对象的简单返回引用）。在这种情况下，你应该把引用定义为 unowned。</p>\n<p>  一个经典的案例是: [unowned self], 主要用在闭包中，这种闭包主要在他们的父节点上下文中做一些事情，没有在其他地方被引用或传递，不能作用在父节点之外。</p>\n</li>\n<li><p>闭包的生命周期和捕获对象的生命周期相互独立，当对象不能再使用时，闭包依然能够被引用。这种情况下，你应该把引用定义为 weak，并且在使用它之前验证一下它是否为 nil（请不要对它进行强制解包).</p>\n<p>  一个经典的案例是: [weak delegate = self.delegate!]，可以在某些使用闭包的场景中看到，闭包使用的是完全无关（生命周期独立）的代理对象。</p>\n</li>\n</ul>\n<p>当无法确认两个对象之间生命周期的关系时，是否不应该去冒险选择一个无效 unowned 引用？而是保守选择 weak 引用是一个更好的选择？<br>答案是否定的，不仅仅是因为对象生命周期了解是一件必要的事情，而且这两个修饰符在性能特性上也有很大的不同。</p>\n<p>弱引用最常见的实现是，每次一个新的引用生成时，都会把每个弱引用和它指向的对象信息存储到一个附加表中。</p>\n<p>当没有任何强引用指向一个对象时，Swift 运行时会启动析构过程，但是在这之前，运行时会把所有相关的弱引用置为 nil 。弱引用的这种实现方式我们称之为”零和弱引用”。</p>\n<p>这种实现有实际的开销，考虑到需要额外实现的数据结构，需要确保在并发访问情况下，对这个全局引用结构所有操作的正确性。一旦析构过程开始了，在任何环境中，都不允许访问弱引用所指向的对象了。</p>\n<p>弱引用（包括 unowned 和一些变体的 weak)在 Swift 使用了更简单和快速的实现机制。</p>\n<p>Swift 中的每个对象保持了两个引用计数器，一个是强引用计数器，用来决定 ARC 什么时候可以安全地析构这个对象，另外一个附加的弱引用计数器，用来计算创建了多少个指向这个对象的 unowned 或者 weak 引用，当这个计数器为零时，这个对象将被 析构 。</p>\n<p>需要重点理解的是，只有等到所有 unowned 引用被释放后，这个对象才会被真正地析构，然后对象将会保持未解析可访问状态，当析构发生后，对象的内容才会被回收。</p>\n<p>每当 unowned 引用被定义时，对应的 unowned 引用计数会进行原子级别地增加(使用原子gcc/llvm操作，进行一系列快速且线程安全的基本操作，例如：增加，减少，比较，交换等)，以保证线程安全。在增加计数之前，会检查强引用计数以确保对象是有效的。</p>\n<p>试图访问一个无效的对象，将会导致错误的断言，你的应用在运行时中会报错(这就是为什么这里的 unownd 实现方式叫做 unowned(safe) 实现)<br>为了更好的优化，应用编译时带有 -OFast，unowned 引用不会去验证引用对象的有效性，unowned 引用的行为就会像 Objective-C 中的 __unsafe_unretained 一样。如果引用对象无效，unowned 引用将会指向已经释放垃圾内存（这种实现称之 unowned(unsafe)）。</p>\n<p>当一个 unowned 引用被释放后，如果这时没有其他强引用或 unowned 引用指向这个对象，那么最终这个对象将被析构。这就是为什么一个引用对象不能在强引用计数器等于零的情况下，被析构的原因，所有的引用计数器必须能够被访问用来验证 unowned 引用和强引用数量。</p>\n<p>Swift 的 weak 引用添加了附加层，间接地把 unowned 引用包裹到了一个可选容器里面，在指向的对象析构之后变成空的情况下，这样处理会更加的清晰。但是需要付出的代价是，附加的机制需要正确地处理可选值。</p>\n<p>考虑到以上因素，在对象关系生命周期允许的情况下，优先选择使用 unowned 引用。但是这不是此故事的结局，接下来比较一下两者性能1上的差别。</p>\n<h2 id=\"性能：深度探索\"><a href=\"#性能：深度探索\" class=\"headerlink\" title=\"性能：深度探索\"></a>性能：深度探索</h2><p>在查看 Swift 项目源码验证之前，需要理解 ARC 如何管理这两种引用类型，并且还需要解释 swiftc，LLVM 和 SIL 的相关知识。</p>\n<p>接下来试着简要介绍本文所需要的必备知识点，如果想了解更多，将在最后的脚注中找到一些有用的链接。</p>\n<p>使用一个图来解释 swiftc 整个编译过程的包含的模块：</p>\n<p><img src=\"/images/swiftc.png\" alt=\"swiftc\"></p>\n<p>Swiftc 和 clang 一样构建在 LLVM 上，遵循 clang 编译器相似的编译流程。</p>\n<p>在编译过程的第一部分，使用一个特定语言前端进行管理，swift 源代码被解释生成一个抽象语法树(AST)表达2，然后抽象语法树的结果从语义角度进行分析，找出语义错误。</p>\n<p>在这个点上，对于其他的基于 LLVM 的编译器来讲，在通过一个附加步骤对源代码进行静态分析后（必要时可以显示错误和警告），接着 IRGen 模块 会把 AST 的内容会转换成一个轻量的和底层的机器无关的表示，我们称之为 LLVM IR(LLVM 中间表示)。</p>\n<p>尽管两个模块都需要做一些相同检查，但是这两个模块是区分开的，在两个模块之间也存在许多重复的代码。</p>\n<p>IR 是一种静态单赋值形式（SSA-form）一致语言，可以看做注入了 LLVM 的虚拟机下的 RISC 类型汇编语言。基于 SSA 将简化接下来的编译过程，从语言前端提供的中间表达会在 IR 进行多重优化。</p>\n<p>需要重点注意的是，IR 其中一个特点是，它具有三种不同的形式：内存表达（内部使用），序列化位代码形式（你已经知道的位代码形式）和可读形式。</p>\n<p>最后一种形式非常有用，用来验证 IR 代码的最终结构，这个结构将会传入到整个过程中的最后一步，将会从机器独立的 IR 代码转换成平台相关的表达(比如：x86，ARM 等等)。最后一步将被 LLVM 平台后端执行。</p>\n<p>那么 swiftc 和其他基于 LLVM 的编译器有什么不同呢？<br>swiftc 和其他编译器从结构形式上的差别主要体现在一个附加组件，这个附加组件是 SILGen ，在 IRGen 之前，执行代码的监测和优化，生成一个高级的中间表达，我们称之为 SIL （Swift Intermediate Language，Swift 中间语言），最后 SIL 将会转换成 LLVM IR。这一步加强了在单个软件模块上所有具体语言的检查，并且简化了 IRGen。</p>\n<p>从 AST 到 IR 的转换分为两个步骤。SILGen 把 AST 源代码转换为原始 SIL ，然后编译器进行 Swift 语法检查（需要时打印错误或者警告信息），优化有效的原始 SIL ，通过一些步骤最后生成标准化 SIL 。如上面的示意图显示那样，标准化 SIL 的最后转化为 LLVM IR。</p>\n<p>再次强调，SIL 是一个 SSA 类型语言，使用附加的结构扩展了 Swift 的语法。它依赖 Swift 的类型系统，并且能理解 Swift 的定义，但是需要重点记住的是，当编译一个手写的 SIL 源码（是的，可以手动写 SIL 然后编译它）时，高阶的 Swift 代码或者函数内容将被编译器忽略。</p>\n<p>在接下来的章节，我们将分析一个标准化 SIL 的案例，来理解 unowned 和 weak 引用如何被编译器处理。一个包含捕获列表的基本闭包的例子，查看这个例子生成的 SIL 代码，可以看到被编译器添加的所有 ARC 相关的函数调用。</p>\n<blockquote>\n<p>从 GitHub 或者 zipped 获取本文相关的 Playground 代码。然后从这里获取闭包案例和 SIL ，SILGen 以及 LLVM IR 的输出。</p>\n</blockquote>\n<h2 id=\"捕获列表处理解析\"><a href=\"#捕获列表处理解析\" class=\"headerlink\" title=\"捕获列表处理解析\"></a>捕获列表处理解析</h2><p>接下来看看一个简单的 Swift 的例子，定义两个类变量，然后在一个闭包中对他们进行弱引用的捕获：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">aClass</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"number\">1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c1 = aClass()</div><div class=\"line\"><span class=\"keyword\">var</span> c2 = aClass()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fSpec = &#123; </div><div class=\"line\">    [<span class=\"keyword\">unowned</span> c1, <span class=\"keyword\">weak</span> c2] <span class=\"keyword\">in</span></div><div class=\"line\">    c1.value = <span class=\"number\">42</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> c2o = c2 &#123;</div><div class=\"line\">        c2o.value = <span class=\"number\">42</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fSpec()</div></pre></td></tr></table></figure>\n<p>通过 xcrun swiftc -emit-sil sample.swift 编译 swift 源代码，生成标准化 SIL 代码。原始SIL 可以使用 -emit-silgen 选项来生成。</p>\n<p>运行以上命令以后，会发现 swiftc 产生了许多代码。通过查看 swiftc 输出代码的片段，学习一下基本的 SIL 指令，理解整个结构。</p>\n<p>在下面代码中需要的地方添加了一些多行注释（编译器也生成了一些单行注释），希望这些注释已经足够说清楚发生了什么：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  此文件包含典型 SIL 代码</div><div class=\"line\">*/</div><div class=\"line\">sil_stage canonical             </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\">  只有在 SIL 内部使用的特殊的导入</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">import</span> Builtin                  </div><div class=\"line\"><span class=\"keyword\">import</span> Swift</div><div class=\"line\"><span class=\"keyword\">import</span> SwiftShims</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">\t三个全局变量的定义，包括 c1，c2 和 闭包 fSpec。</div><div class=\"line\">  \t@_Tv4clos2c1CS_6aClass是变量的符号，$aClass 是它的类型（类型前缀为$)。</div><div class=\"line\">  \t变量名在这里看起来很乱，但是在后面的代码中将变得更加可读。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// c1</span></div><div class=\"line\">sil_global hidden @_Tv4sample2c1CS_6aClass : $aClass</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// c2</span></div><div class=\"line\">sil_global hidden @_Tv4sample2c2CS_6aClass : $aClass</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// fSpec</span></div><div class=\"line\">sil_global hidden @_Tv4sample5fSpecFT_T_ : $@callee_owned () -&gt; ()</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  层次作用域定义表示原始代码的位置。</div><div class=\"line\">  每个 SIL 指示将会指向它生成的 `sil_scope`。</div><div class=\"line\">*/</div><div class=\"line\">sil_scope <span class=\"number\">1</span> &#123;  parent @main : $<span class=\"meta\">@convention</span>(<span class=\"built_in\">c</span>) (<span class=\"type\">Int32</span>, <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Optional</span>&lt;<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int8</span>&gt;&gt;&gt;) -&gt; <span class=\"type\">Int32</span> &#125;</div><div class=\"line\">sil_scope <span class=\"number\">2</span> &#123; loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">14</span>:<span class=\"number\">1</span> parent <span class=\"number\">1</span> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">\t自动生成的 @main 函数包含了我们原始全部作用域的代码。</div><div class=\"line\"> \t这里沿用了熟悉的 c main() 函数结构，接收参数个数和参数数组两个输入，这个函数遵循 c 调用约定。</div><div class=\"line\">  \t这个函数包含了需要调用闭包的指令。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// main</span></div><div class=\"line\">sil @main : $<span class=\"meta\">@convention</span>(<span class=\"built_in\">c</span>) (<span class=\"type\">Int32</span>, <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Optional</span>&lt;<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int8</span>&gt;&gt;&gt;) -&gt; <span class=\"type\">Int32</span> &#123;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  入口定义头部为 % 符号，后面跟随一个数字 id。</div><div class=\"line\">  每当一个新的入口定义时（或者函数开头定义函数参数），编译器在入口行尾根据它的值（叫做 users）添加一个注释。</div><div class=\"line\">  对于其他指令，需要提供 id 号。</div><div class=\"line\">  在这里，入口 0 将被用来计算入口 4 的内容，入口 1 将被用来创建入口 10 的值。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// %0                                             // user: %4</span></div><div class=\"line\"><span class=\"comment\">// %1                                             // user: %10</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  每一个函数被分解成一系列的基本指令块，每一个指令块结束于一个终止指令（一个分支或者一个返回）。</div><div class=\"line\">  这一系列的指令块表示函数所有可能的执行路径。</div><div class=\"line\">*/</div><div class=\"line\">bb0(%<span class=\"number\">0</span> : $<span class=\"type\">Int32</span>, %<span class=\"number\">1</span> : $<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Optional</span>&lt;<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int8</span>&gt;&gt;&gt;):</div><div class=\"line\">...</div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">    每一个 SIL 指令都包含一个引用，指向源代码的位置，包括指令具体从源代码中哪个地方来，属于哪一个作用域。</div><div class=\"line\">    在后面分析具体的方法会看到这些内容。</div><div class=\"line\">  */</div><div class=\"line\">  unowned_retain %<span class=\"number\">27</span> : $@sil_unowned aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">14</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// id: %28</span></div><div class=\"line\">  store %<span class=\"number\">27</span> to %<span class=\"number\">2</span> : $*@sil_unowned aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">14</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// id: %29</span></div><div class=\"line\">  %<span class=\"number\">30</span> = alloc_box $@sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;, <span class=\"keyword\">var</span>, name <span class=\"string\">\"c2\"</span>, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// users: %46, %44, %43, %31</span></div><div class=\"line\">  %<span class=\"number\">31</span> = project_box %<span class=\"number\">30</span> : $@box @sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// user: %35</span></div><div class=\"line\">  %<span class=\"number\">32</span> = load %<span class=\"number\">19</span> : $*aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// users: %34, %33</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\">  下面是一系列自动生成的`aClass`的方法，包括： init/deinit, setter/getter 和其他一些工具方法。</div><div class=\"line\">  每个方法前的注释是编译器添加的，用来说明代码的具体作用。</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  隐藏方法只在它们模块中可见。</div><div class=\"line\">  @convention(方法名)是 Swift 中方法调用默认的约定，在尾部有一个附加的参数指向它自己。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// aClass.__deallocating_deinit</span></div><div class=\"line\">sil hidden @_TFC4clos6aClassD : $<span class=\"meta\">@convention</span>(method) (@owned aClass) -&gt; () &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  @guaranteed 参数表示保证在整个周期内调用此方法都有效。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// aClass.deinit</span></div><div class=\"line\">sil hidden @_TFC4clos6aClassd : $<span class=\"meta\">@convention</span>(method) (@guaranteed aClass) -&gt; @owned <span class=\"type\">Builtin</span>.<span class=\"type\">NativeObject</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  [transparent] 修饰的方法是内联的小方法</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// aClass.value.getter</span></div><div class=\"line\">sil hidden [transparent] @_TFC4clos6aClassg5valueSi : $<span class=\"meta\">@convention</span>(method) (@guaranteed aClass) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// aClass.value.setter</span></div><div class=\"line\">sil hidden [transparent] @_TFC4clos6aClasss5valueSi : $<span class=\"meta\">@convention</span>(method) (<span class=\"type\">Int</span>, @guaranteed aClass) -&gt; () &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// aClass.value.materializeForSet</span></div><div class=\"line\">sil hidden [transparent] @_TFC4clos6aClassm5valueSi : $<span class=\"meta\">@convention</span>(method) (<span class=\"type\">Builtin</span>.<span class=\"type\">RawPointer</span>, @<span class=\"keyword\">inout</span> <span class=\"type\">Builtin</span>.<span class=\"type\">UnsafeValueBuffer</span>, @guaranteed aClass) -&gt; (<span class=\"type\">Builtin</span>.<span class=\"type\">RawPointer</span>, <span class=\"type\">Optional</span>&lt;<span class=\"type\">Builtin</span>.<span class=\"type\">RawPointer</span>&gt;) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  @owned 修饰符表示这个对象将被调用者拥有。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// aClass.init() -&gt; aClass</span></div><div class=\"line\">sil hidden @_TFC4clos6aClasscfT_S0_ : $<span class=\"meta\">@convention</span>(method) (@owned aClass) -&gt; @owned aClass &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// aClass.__allocating_init() -&gt; aClass</span></div><div class=\"line\">sil hidden @_TFC4clos6aClassCfT_S0_ : $<span class=\"meta\">@convention</span>(method) (@thick aClass.<span class=\"type\">Type</span>) -&gt; @owned aClass &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\">  接下面是闭包代码段</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// (closure #1)</span></div><div class=\"line\">sil shared @_TF4closU_FT_T_ : $<span class=\"meta\">@convention</span>(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;) -&gt; () &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">/* 关于闭包的 SIL 代码， 见下文 */</span></div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\">  sil_vtable 定义所有关于 aClass 类的虚函数表。</div><div class=\"line\">  sil_vtable 包含了期望的所有自动生成的方法。</div><div class=\"line\">*/</div><div class=\"line\">sil_vtable aClass &#123;</div><div class=\"line\">  #aClass.<span class=\"keyword\">deinit</span>!deallocator: _TFC4clos6aClassD\t<span class=\"comment\">// aClass.__deallocating_deinit</span></div><div class=\"line\">  #aClass.value!getter.<span class=\"number\">1</span>: _TFC4clos6aClassg5valueSi\t<span class=\"comment\">// aClass.value.getter</span></div><div class=\"line\">  #aClass.value!setter.<span class=\"number\">1</span>: _TFC4clos6aClasss5valueSi\t<span class=\"comment\">// aClass.value.setter</span></div><div class=\"line\">  #aClass.value!materializeForSet.<span class=\"number\">1</span>: _TFC4clos6aClassm5valueSi\t<span class=\"comment\">// aClass.value.materializeForSet</span></div><div class=\"line\">  #aClass.<span class=\"keyword\">init</span>!initializer.<span class=\"number\">1</span>: _TFC4clos6aClasscfT_S0_\t<span class=\"comment\">// aClass.init() -&gt; aClass</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在回到主函数，看看两个类实例如何被获取到，并如何传递给调用他们的闭包。</p>\n<p>在这里，所有标识都被重新整理，使得代码片段更加可读。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// main</span></div><div class=\"line\">sil @main : $<span class=\"meta\">@convention</span>(<span class=\"built_in\">c</span>) (<span class=\"type\">Int32</span>, <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Optional</span>&lt;<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int8</span>&gt;&gt;&gt;) -&gt; <span class=\"type\">Int32</span> &#123;</div><div class=\"line\"><span class=\"comment\">// %0                                             // user: %4</span></div><div class=\"line\"><span class=\"comment\">// %1                                             // user: %10</span></div><div class=\"line\">bb0(%<span class=\"number\">0</span> : $<span class=\"type\">Int32</span>, %<span class=\"number\">1</span> : $<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Optional</span>&lt;<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int8</span>&gt;&gt;&gt;):</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">    全局变量的引用使用三个入口来放置。</div><div class=\"line\">  */</div><div class=\"line\">  %<span class=\"number\">13</span> = global_addr @clos.c1 : $*aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">5</span>:<span class=\"number\">5</span>, scope <span class=\"number\">1</span> <span class=\"comment\">// users: %26, %17</span></div><div class=\"line\">  ...</div><div class=\"line\">  %<span class=\"number\">19</span> = global_addr @clos.c2 : $*aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">6</span>:<span class=\"number\">5</span>, scope <span class=\"number\">1</span> <span class=\"comment\">// users: %32, %23</span></div><div class=\"line\">  ...</div><div class=\"line\">  %<span class=\"number\">25</span> = global_addr @clos.fSpec : $*@callee_owned () -&gt; (), loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">8</span>:<span class=\"number\">5</span>, scope <span class=\"number\">1</span> <span class=\"comment\">// users: %48, %45</span></div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">    c1 是 unowned_retained 的。</div><div class=\"line\">    下面的指令增加变量的 unowned 引用计数。</div><div class=\"line\">  */</div><div class=\"line\">  %<span class=\"number\">26</span> = load %<span class=\"number\">13</span> : $*aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">14</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// user: %27</span></div><div class=\"line\">  %<span class=\"number\">27</span> = ref_to_unowned %<span class=\"number\">26</span> : $aClass to $@sil_unowned aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">14</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// users: %47, %38, %39, %29, %28</span></div><div class=\"line\">  unowned_retain %<span class=\"number\">27</span> : $@sil_unowned aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">14</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// id: %28</span></div><div class=\"line\">  store %<span class=\"number\">27</span> to %<span class=\"number\">2</span> : $*@sil_unowned aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">14</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// id: %29</span></div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">    对 c2 的处理会更加复杂一些。</div><div class=\"line\">\talloc_box 创建了一个这个变量的引用数容器，变量将会存在这个容器的堆中。</div><div class=\"line\">    容器创建以后，将会创建一个可选变量，指向 c2，并且可选变量会存储在容器里。容器会增加所包含值的技术，正如下面看到的一样，一旦容器被迁移，可选值就会被释放。</div><div class=\"line\">    在这里，c2 的值将被存储在这个可选值中，对象将暂时strong_retained 然后释放。</div><div class=\"line\">  */</div><div class=\"line\">  %<span class=\"number\">30</span> = alloc_box $@sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;, <span class=\"keyword\">var</span>, name <span class=\"string\">\"c2\"</span>, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// users: %46, %44, %43, %31</span></div><div class=\"line\">  %<span class=\"number\">31</span> = project_box %<span class=\"number\">30</span> : $@box @sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// user: %35</span></div><div class=\"line\">  %<span class=\"number\">32</span> = load %<span class=\"number\">19</span> : $*aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// users: %34, %33</span></div><div class=\"line\">  strong_retain %<span class=\"number\">32</span> : $aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// id: %33</span></div><div class=\"line\">  %<span class=\"number\">34</span> = <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">$Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, #<span class=\"title\">Optional</span>.<span class=\"title\">some</span>!<span class=\"title\">enumelt</span>.1, %32 : <span class=\"title\">$aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":9:23, <span class=\"title\">scope</span> 2 // <span class=\"title\">users</span>: %36, %35</span></div><div class=\"line\">  <span class=\"title\">store_weak</span> %34 <span class=\"title\">to</span> [<span class=\"title\">initialization</span>] %31 : <span class=\"title\">$</span>*@<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":9:23, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %35</div><div class=\"line\">  <span class=\"title\">release_value</span> %34 : <span class=\"title\">$Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":9:23, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %36</div><div class=\"line\">  /*</div><div class=\"line\">    获取到闭包的引用。</div><div class=\"line\">  */</div><div class=\"line\">  // <span class=\"title\">function_ref</span> (<span class=\"title\">closure</span> #1)</div><div class=\"line\">  %37 = <span class=\"title\">function_ref</span> @<span class=\"title\">sample</span>.(<span class=\"title\">closure</span> #1) : <span class=\"title\">$</span>@<span class=\"title\">convention</span>(<span class=\"title\">thin</span>) (@<span class=\"title\">owned</span> @<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, @<span class=\"title\">owned</span> @<span class=\"title\">box</span> @<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;) -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">user</span>: %44</div><div class=\"line\">  /*</div><div class=\"line\">    <span class=\"title\">c1</span> 将被标记为 <span class=\"title\">tagged</span>，并且变量变为 <span class=\"title\">unowned_retained</span>。</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"title\">strong_retain_unowned</span> %27 : <span class=\"title\">$</span>@<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %38</div><div class=\"line\">  %39 = <span class=\"title\">unowned_to_ref</span> %27 : <span class=\"title\">$</span>@<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span> <span class=\"title\">to</span> <span class=\"title\">$aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">users</span>: %42, %40</div><div class=\"line\">  %40 = <span class=\"title\">ref_to_unowned</span> %39 : <span class=\"title\">$aClass</span> <span class=\"title\">to</span> <span class=\"title\">$</span>@<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">users</span>: %44, %41</div><div class=\"line\">  <span class=\"title\">unowned_retain</span> %40 : <span class=\"title\">$</span>@<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %41</div><div class=\"line\">  <span class=\"title\">strong_release</span> %39 : <span class=\"title\">$aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %42</div><div class=\"line\">  /*</div><div class=\"line\">    包含 <span class=\"title\">c2</span> 的可选值容器是 <span class=\"title\">strong_retained</span> 的。</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"title\">strong_retain</span> %30 : <span class=\"title\">$</span>@<span class=\"title\">box</span> @<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %43</div><div class=\"line\">  /*</div><div class=\"line\">    创建一个闭包对象，绑定方法到参数中。</div><div class=\"line\">  */</div><div class=\"line\">  %44 = <span class=\"title\">partial_apply</span> %37(%40, %30) : <span class=\"title\">$</span>@<span class=\"title\">convention</span>(<span class=\"title\">thin</span>) (@<span class=\"title\">owned</span> @<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, @<span class=\"title\">owned</span> @<span class=\"title\">box</span> @<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;) -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">user</span>: %45</div><div class=\"line\">  <span class=\"title\">store</span> %44 <span class=\"title\">to</span> %25 : <span class=\"title\">$</span>*@<span class=\"title\">callee_owned</span> () -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %45</div><div class=\"line\">  /*</div><div class=\"line\">    </div><div class=\"line\">    对 <span class=\"title\">c1</span> 和 <span class=\"title\">c2</span> 的容器变量进行释放（使用 对应匹配的 *<span class=\"title\">_release</span> 方法）。</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"title\">strong_release</span> %30 : <span class=\"title\">$</span>@<span class=\"title\">box</span> @<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":14:1, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %46</div><div class=\"line\">  <span class=\"title\">unowned_release</span> %27 : <span class=\"title\">$</span>@<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":9:14, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %47</div><div class=\"line\">  /*</div><div class=\"line\">     加载原先存储的闭包对象，增加强引用然后调用它。</div><div class=\"line\">  */</div><div class=\"line\">   %48 = <span class=\"title\">load</span> %25 : <span class=\"title\">$</span>*@<span class=\"title\">callee_owned</span> () -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":17:1, <span class=\"title\">scope</span> 2 // <span class=\"title\">users</span>: %50, %49</div><div class=\"line\">  <span class=\"title\">strong_retain</span> %48 : <span class=\"title\">$</span>@<span class=\"title\">callee_owned</span> () -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":17:1, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %49</div><div class=\"line\">  %50 = <span class=\"title\">apply</span> %48() : <span class=\"title\">$</span>@<span class=\"title\">callee_owned</span> () -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":17:7, <span class=\"title\">scope</span> 2</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>闭包有一个更加复杂的结构：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  闭包参数被标记为 @sil, 指定参数如何被计数，有一个 unowned 的 aClass 类变量 c2, 和另外一个包含 c2 的可选值容器。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// (closure #1)</span></div><div class=\"line\">sil shared @clos.fSpec: $<span class=\"meta\">@convention</span>(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;) -&gt; () &#123;</div><div class=\"line\"><span class=\"comment\">// %0                                             // users: %24, %6, %5, %2</span></div><div class=\"line\"><span class=\"comment\">// %1                                             // users: %23, %3</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">  下面的函数包含三块，后面两块的执行依赖可选值 c2 具体的值。</div><div class=\"line\">*/</div><div class=\"line\">bb0(%<span class=\"number\">0</span> : $@sil_unowned aClass, %<span class=\"number\">1</span> : $@box @sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;):</div><div class=\"line\">...</div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">    c1 被强计数。</div><div class=\"line\">  */</div><div class=\"line\">  strong_retain_unowned %<span class=\"number\">0</span> : $@sil_unowned aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">10</span>:<span class=\"number\">5</span>, scope <span class=\"number\">17</span> <span class=\"comment\">// id: %5</span></div><div class=\"line\">  %<span class=\"number\">6</span> = unowned_to_ref %<span class=\"number\">0</span> : $@sil_unowned aClass to $aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">10</span>:<span class=\"number\">5</span>, scope <span class=\"number\">17</span> <span class=\"comment\">// users: %11, %10, %9</span></div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\">    使用内部自带包，传入一个整型字面量到整型结构中，初始化了一个值为 42 的整型值。</div><div class=\"line\">    这个值将被设置为 c1 的新值，完成以后这个变量将会被释放。</div><div class=\"line\">    在这里，我们第一次看到 class_method 指令，用于获取 vtable 中的函数引用。</div><div class=\"line\">  */</div><div class=\"line\">  %<span class=\"number\">7</span> = integer_literal $<span class=\"type\">Builtin</span>.<span class=\"type\">Int64</span>, <span class=\"number\">42</span>, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">10</span>:<span class=\"number\">16</span>, scope <span class=\"number\">17</span> <span class=\"comment\">// user: %8</span></div><div class=\"line\">  %<span class=\"number\">8</span> = <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">$Int</span> (%7 : <span class=\"title\">$Builtin</span>.<span class=\"title\">Int64</span>), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":10:16, <span class=\"title\">scope</span> 17 // <span class=\"title\">user</span>: %10</span></div><div class=\"line\">  %9 = <span class=\"title\">class_method</span> %6 : <span class=\"title\">$aClass</span>, #<span class=\"title\">aClass</span>.<span class=\"title\">value</span>!<span class=\"title\">setter</span>.1 : (<span class=\"title\">aClass</span>) -&gt; (<span class=\"title\">Int</span>) -&gt; () , <span class=\"title\">$</span>@<span class=\"title\">convention</span>(<span class=\"title\">method</span>) (<span class=\"title\">Int</span>, @<span class=\"title\">guaranteed</span> <span class=\"title\">aClass</span>) -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":10:14, <span class=\"title\">scope</span> 17 // <span class=\"title\">user</span>: %10</div><div class=\"line\">  %10 = <span class=\"title\">apply</span> %9(%8, %6) : <span class=\"title\">$</span>@<span class=\"title\">convention</span>(<span class=\"title\">method</span>) (<span class=\"title\">Int</span>, @<span class=\"title\">guaranteed</span> <span class=\"title\">aClass</span>) -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":10:14, <span class=\"title\">scope</span> 17</div><div class=\"line\">  <span class=\"title\">strong_release</span> %6 : <span class=\"title\">$aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":10:16, <span class=\"title\">scope</span> 17 // <span class=\"title\">id</span>: %11</div><div class=\"line\">  /*</div><div class=\"line\">    接下来讨论 <span class=\"title\">c2</span>。</div><div class=\"line\">    获取可选值，然后根据它的内容执行接下来的分支语句。</div><div class=\"line\"></div><div class=\"line\">    <span class=\"title\">If</span> <span class=\"title\">the</span> <span class=\"title\">optional</span> <span class=\"title\">has</span> <span class=\"title\">a</span> <span class=\"title\">value</span> <span class=\"title\">the</span> <span class=\"title\">bb2</span> <span class=\"title\">block</span> <span class=\"title\">will</span> <span class=\"title\">be</span> <span class=\"title\">executed</span> <span class=\"title\">before</span> <span class=\"title\">jumping</span> </div><div class=\"line\">    <span class=\"title\">to</span> <span class=\"title\">bb3</span>, <span class=\"title\">if</span> <span class=\"title\">it</span> <span class=\"title\">doesn</span>'<span class=\"title\">t</span> <span class=\"title\">after</span> <span class=\"title\">a</span> <span class=\"title\">brief</span> <span class=\"title\">jump</span> <span class=\"title\">to</span> <span class=\"title\">bb1</span>, <span class=\"title\">the</span> <span class=\"title\">function</span> <span class=\"title\">will</span> <span class=\"title\">proceed</span> <span class=\"title\">to</span> <span class=\"title\">bb3</span> <span class=\"title\">releasing</span></div><div class=\"line\">    <span class=\"title\">the</span> <span class=\"title\">retained</span> <span class=\"title\">parameters</span>.</div><div class=\"line\">    </div><div class=\"line\">  */</div><div class=\"line\">  %12 = <span class=\"title\">load_weak</span> %3 : <span class=\"title\">$</span>*@<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":11:18, <span class=\"title\">scope</span> 18 // <span class=\"title\">user</span>: %13</div><div class=\"line\">  <span class=\"title\">switch_enum</span> %12 : <span class=\"title\">$Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">case</span> #<span class=\"title\">Optional</span>.<span class=\"title\">some</span>!<span class=\"title\">enumelt</span>.1: <span class=\"title\">bb2</span>, <span class=\"title\">default</span> <span class=\"title\">bb1</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":11:18, <span class=\"title\">scope</span> 18 // <span class=\"title\">id</span>: %13</div><div class=\"line\">  <span class=\"title\">bb1</span>:                                              // <span class=\"title\">Preds</span>: <span class=\"title\">bb0</span></div><div class=\"line\">  /*</div><div class=\"line\">    跳转到闭包的结尾。</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"title\">br</span> <span class=\"title\">bb3</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":11:18, <span class=\"title\">scope</span> 16        // <span class=\"title\">id</span>: %14</div><div class=\"line\"></div><div class=\"line\">// %15                                            // <span class=\"title\">users</span>: %21, %20, %19, %16</div><div class=\"line\"><span class=\"title\">bb2</span>(%15 : <span class=\"title\">$aClass</span>):                               // <span class=\"title\">Preds</span>: <span class=\"title\">bb0</span></div><div class=\"line\">  /*</div><div class=\"line\">    调用 <span class=\"title\">aClass</span> 的 <span class=\"title\">setter</span>，设置它的值为 42.</div><div class=\"line\">  */</div><div class=\"line\">  ...</div><div class=\"line\">  %17 = <span class=\"title\">integer_literal</span> <span class=\"title\">$Builtin</span>.<span class=\"title\">Int64</span>, 42, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":12:21, <span class=\"title\">scope</span> 19 // <span class=\"title\">user</span>: %18</div><div class=\"line\">  %18 = <span class=\"title\">struct</span> <span class=\"title\">$Int</span> (%17 : <span class=\"title\">$Builtin</span>.<span class=\"title\">Int64</span>), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":12:21, <span class=\"title\">scope</span> 19 // <span class=\"title\">user</span>: %20</div><div class=\"line\">  %19 = <span class=\"title\">class_method</span> %15 : <span class=\"title\">$aClass</span>, #<span class=\"title\">aClass</span>.<span class=\"title\">value</span>!<span class=\"title\">setter</span>.1 : (<span class=\"title\">aClass</span>) -&gt; (<span class=\"title\">Int</span>) -&gt; () , <span class=\"title\">$</span>@<span class=\"title\">convention</span>(<span class=\"title\">method</span>) (<span class=\"title\">Int</span>, @<span class=\"title\">guaranteed</span> <span class=\"title\">aClass</span>) -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":12:19, <span class=\"title\">scope</span> 19 // <span class=\"title\">user</span>: %20</div><div class=\"line\">  %20 = <span class=\"title\">apply</span> %19(%18, %15) : <span class=\"title\">$</span>@<span class=\"title\">convention</span>(<span class=\"title\">method</span>) (<span class=\"title\">Int</span>, @<span class=\"title\">guaranteed</span> <span class=\"title\">aClass</span>) -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":12:19, <span class=\"title\">scope</span> 19</div><div class=\"line\">  <span class=\"title\">strong_release</span> %15 : <span class=\"title\">$aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":13:5, <span class=\"title\">scope</span> 18 // <span class=\"title\">id</span>: %21</div><div class=\"line\">  <span class=\"title\">br</span> <span class=\"title\">bb3</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":13:5, <span class=\"title\">scope</span> 18         // <span class=\"title\">id</span>: %22</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">bb3</span>:                                              // <span class=\"title\">Preds</span>: <span class=\"title\">bb1</span> <span class=\"title\">bb2</span></div><div class=\"line\">  /*</div><div class=\"line\">    释放所有获取的变量然后返回。</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"title\">strong_release</span> %1 : <span class=\"title\">$</span>@<span class=\"title\">box</span> @<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":14:1, <span class=\"title\">scope</span> 17 // <span class=\"title\">id</span>: %23</div><div class=\"line\">  <span class=\"title\">unowned_release</span> %0 : <span class=\"title\">$</span>@<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":14:1, <span class=\"title\">scope</span> 17 // <span class=\"title\">id</span>: %24</div><div class=\"line\">  %25 = <span class=\"title\">tuple</span> (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":14:1, <span class=\"title\">scope</span> 17 // <span class=\"title\">user</span>: %26</div><div class=\"line\">  <span class=\"title\">return</span> %25 : <span class=\"title\">$</span>(), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":14:1, <span class=\"title\">scope</span> 17 // <span class=\"title\">id</span>: %26</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里，忽略掉不同的 ARC 指令带来的性能的差异点，对不同阶段每种类型的捕获变量做一个快速的对比：</p>\n<table>\n<thead>\n<tr>\n<th>动作</th>\n<th>Unowned</th>\n<th>Weak</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>预先调用 #1</td>\n<td>对象进行 unowned_retain</td>\n<td>创建一个容器，并且对象进行 strong_retain 操作。创建一个可选值，存入到容器中，然后释放可选值</td>\n</tr>\n<tr>\n<td>预先调用 #2</td>\n<td>strong_retain_unowned，unowned_retain 和 strong_release</td>\n<td>strong_retain</td>\n</tr>\n<tr>\n<td>闭包执行</td>\n<td>strong_retain_unowned，unowned_release</td>\n<td>load_weak, 打开可选值, strong_release</td>\n</tr>\n<tr>\n<td>调用之后</td>\n<td>unowned_release</td>\n<td>strong_release</td>\n</tr>\n</tbody>\n</table>\n<p>正如上面看到的 SIL 代码段那样，处理 weak 引用会涉及到更多的工作，因为需要处理引用需要的可选值。</p>\n<p>参照官方文档的描述，这里对涉及到的所有 ARC 指令做一个简要的解释：</p>\n<ul>\n<li>unowned_retain：增加堆对象中的 unowned 引用计数。</li>\n<li>strong_retain_unowned ：断言对象的强引用计数大于 0，然后增加这个引用计数。</li>\n<li>strong_retain：增加对象的强引用计数。</li>\n<li>load_weak：不是真正的 ARC 调用，但是它将增加可选值指向对象的强引用计数。</li>\n<li>strong_release：减少对象的强引用计数。如果释放操作把对象强引用计数变为0，对象将被销毁，然后弱引用将被清除。当整个强引用计数和 unowned 引用计数都为0时，对象的内存才会被释放。</li>\n<li>unowned_release：减少对象的 unowned 引用计数。当整个强引用计数和 unowned 引用计数都为 0 时，对象的内存才会被释放。</li>\n</ul>\n<p>接下来深入到 Swift 运行时看看，这些指令都是如何被实现的，相关的代码文件有：HeapObject.cpp，HeapObject.h，RefCount.h 和 Heap.cpp、 SwiftObject.mm 中的少量定义。容器实现可以在 MetadataImpl.h 找到，但是本文不展开讨论。</p>\n<p>这些文件中定义大多数的 ARC 方法都有三种变体，一种是对 Swift 对象的基础实现，另外两种实现是针对非原生 Swift 对象的：桥接对象和未知对象。后面两种变体这里不予讨论。</p>\n<p>第一个讨论指令集和 unowned 引用相关。</p>\n<p>在 HeapObject.cpp 文件中间可以看到对 unowned_retain 和 unowned_release 的实现方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">SWIFT_RT_ENTRY_VISIBILITY</span></div><div class=\"line\">void swift::swift_unownedRetain(<span class=\"type\">HeapObject</span> *object)</div><div class=\"line\">    <span class=\"type\">SWIFT_CC</span>(<span class=\"type\">RegisterPreservingCC_IMPL</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!object)</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">  object-&gt;weakRefCount.increment();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">SWIFT_RT_ENTRY_VISIBILITY</span></div><div class=\"line\">void swift::swift_unownedRelease(<span class=\"type\">HeapObject</span> *object)</div><div class=\"line\">    <span class=\"type\">SWIFT_CC</span>(<span class=\"type\">RegisterPreservingCC_IMPL</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!object)</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (object-&gt;weakRefCount.decrementShouldDeallocate()) &#123;</div><div class=\"line\">    <span class=\"comment\">// Only class objects can be weak-retained and weak-released.</span></div><div class=\"line\">    auto metadata = object-&gt;metadata;</div><div class=\"line\">    <span class=\"built_in\">assert</span>(metadata-&gt;isClassObject());</div><div class=\"line\">    auto classMetadata = static_cast&lt;const <span class=\"type\">ClassMetadata</span>*&gt;(metadata);</div><div class=\"line\">    <span class=\"built_in\">assert</span>(classMetadata-&gt;isTypeMetadata());</div><div class=\"line\">    <span class=\"type\">SWIFT_RT_ENTRY_CALL</span>(swift_slowDealloc)</div><div class=\"line\">        (object, classMetadata-&gt;getInstanceSize(),</div><div class=\"line\">         classMetadata-&gt;getInstanceAlignMask());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>swift_unownedRetain 是 unowned_retain 的具体实现，简单地进行 unowned 引用计数的原子增加操作（这里定义为weakRefCount），swift_unownedRelease 更加复杂，原因之前也描述过，当没有其他 unowned 引用存在时，它需要执行对象的析构操作。</p>\n<p>但是整体来讲都不复杂，在这里可以看到 doDecrementShouldDeallocate 方法，这个方法在上面代码中被一个命名类似的方法调用了。这个方法没有做太多，swift_slowDealloc 只是释放给定的指针。</p>\n<p>到此已经有了一个对象的 unowned 引用，另外一个指令，strong_retain_unowned 用来创建一个强引用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">SWIFT_RT_ENTRY_VISIBILITY</span></div><div class=\"line\">void swift::swift_unownedRetainStrong(<span class=\"type\">HeapObject</span> *object)</div><div class=\"line\">    <span class=\"type\">SWIFT_CC</span>(<span class=\"type\">RegisterPreservingCC_IMPL</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!object)</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  <span class=\"built_in\">assert</span>(object-&gt;weakRefCount.getCount() &amp;&amp;</div><div class=\"line\">         <span class=\"string\">\"object is not currently weakly retained\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (! object-&gt;refCount.tryIncrement())</div><div class=\"line\">    _swift_abortRetainUnowned(object);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为弱引用应该指向了这个对象，要使用断言来验证对象是否被弱引用，一旦断言通过，将尝试进行增加强引用计数的操作。一旦对象在进程中已经被释放，尝试将会失败。</p>\n<p>所有类似于 tryIncrement 通过某种形式修改引用计数的方法都放到 RefCount.h 中，需要使用原子操作进行这些任务。</p>\n<p>接下来讨论下 weak 引用的的实现，正如之前看到的那样，swift_weakLoadStrong 用来获取容器中可选值中强引用的对象。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">HeapObject</span> *swift::swift_weakLoadStrong(<span class=\"type\">WeakReference</span> *ref) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (ref-&gt;<span class=\"type\">Value</span> == (uintptr_t)nullptr) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> nullptr;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// ref 可能被其他线程访问</span></div><div class=\"line\">  auto ptr = __atomic_fetch_or(&amp;ref-&gt;<span class=\"type\">Value</span>, <span class=\"type\">WR_READING</span>, __ATOMIC_RELAXED);</div><div class=\"line\">  <span class=\"keyword\">while</span> (ptr &amp; <span class=\"type\">WR_READING</span>) &#123;</div><div class=\"line\">    short <span class=\"built_in\">c</span> = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (__atomic_load_n(&amp;ref-&gt;<span class=\"type\">Value</span>, __ATOMIC_RELAXED) &amp; <span class=\"type\">WR_READING</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (++<span class=\"built_in\">c</span> == <span class=\"type\">WR_SPINLIMIT</span>) &#123;</div><div class=\"line\">        std::this_thread::yield();</div><div class=\"line\">        <span class=\"built_in\">c</span> -= <span class=\"number\">1</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ptr = __atomic_fetch_or(&amp;ref-&gt;<span class=\"type\">Value</span>, <span class=\"type\">WR_READING</span>, __ATOMIC_RELAXED);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  auto object = (<span class=\"type\">HeapObject</span>*)(ptr &amp; ~<span class=\"type\">WR_NATIVE</span>);</div><div class=\"line\">  <span class=\"keyword\">if</span> (object == nullptr) &#123;</div><div class=\"line\">    __atomic_store_n(&amp;ref-&gt;<span class=\"type\">Value</span>, (uintptr_t)nullptr, __ATOMIC_RELAXED);</div><div class=\"line\">    <span class=\"keyword\">return</span> nullptr;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (object-&gt;refCount.isDeallocating()) &#123;</div><div class=\"line\">    __atomic_store_n(&amp;ref-&gt;<span class=\"type\">Value</span>, (uintptr_t)nullptr, __ATOMIC_RELAXED);</div><div class=\"line\">    <span class=\"type\">SWIFT_RT_ENTRY_CALL</span>(swift_unownedRelease)(object);</div><div class=\"line\">    <span class=\"keyword\">return</span> nullptr;</div><div class=\"line\">  &#125;</div><div class=\"line\">  auto result = swift_tryRetain(object);</div><div class=\"line\">  __atomic_store_n(&amp;ref-&gt;<span class=\"type\">Value</span>, ptr, __ATOMIC_RELAXED);</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个实现中，获取一个强引用需要更多复杂同步操作，在多线程竞争严重的情况下，会带来性能损耗。</p>\n<p>在这里第一次出现的 WeakReference 对象，是一个简单的结构体，包含一个整型值字段指向目标对象，目标对象是使用 HeapObject 类来承载的每一个运行时的 Swift 对象。</p>\n<p>在 weak 引用询问当前线程设置的 WR_READING 标识之后，从 WeakReference 容器中获取 Swift 对象，如果对象不再有效，或者在等待获取资源时，它变成可以进行析构，当前的引用会被设置为 null。</p>\n<p>如果对象依然有效，获取对象的尝试将会成功。</p>\n<p>因此，从这个角度来讲，对 weak 引用的常规操作性能比 unowned 引用的更低（但是主要的问题还是在可选值操作上面）。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>保守的使用 weak 引用是否明智呢？答案是否定的，无论是从性能的角度还是代码清晰的角度而言。</p>\n<p>使用正确的捕获修饰符类型，明确的表明代码中的生命周期特性，当其他人或者你自己在读你的代码时不容易误解。</p>\n<h2 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h2><p>1、苹果第一次讨论 weak/unowned 争议可以查看这里，之后在 twitter 上 Joe Groff 对此也进行了讨论，并且被 Michael Tsai 总结成文。<br>这篇文章从意图角度出发，提供了完整并且可操作的解释。</p>\n<p>2、从维基百科中可以找到关于 AST 的解释，还可以从 Slava Pestov 的这篇文章中看到关于 Swift 编译器中如何实现 AST 的一些细节。</p>\n<p>3、关于 SIL 的更多信息，请查看详尽的官方 SIL 指南，还有 2015 LLVM 开发者会议的视频。Lex Chou 写的 SIL 快速指南可以点击这里查看。</p>\n<p>4、查看在 Swift 中如何进行名称粉碎（name mangling）的细节，请查看 Lex Chou 的这篇文章。</p>\n<p>5、Mike Ash 在他的 Friday Q&amp;A 中的一篇文章中讨论了如何实现 weak 引用的一种实践方法，这种方法与目前 Swift 的方法对比起来有一些过时，但是其中的解释依然值得参考。</p>\n<blockquote>\n<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href=\"http://swift.gg。\" target=\"_blank\" rel=\"external\">http://swift.gg。</a></p>\n</blockquote>\n<hr>\n<p>文章转自 <a href=\"http://swift.gg/2017/05/16/unowned-or-weak-lifetime-and-performance/\" target=\"_blank\" rel=\"external\">SwiftGG</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：Umberto Raimondi，原文链接，原文日期：2016-10-27<br>译者：shanks；校对：Crystal Sun；定稿：CMB</p>\n</blockquote>\n<p>每当处理循环引用（retain cycles）时，需要考量对象生命周期来选择unowned或者weak标识符，这已经成为了一个共识。但是有时仍然会心存疑问，在具体的使用中应该选择哪一个，或者退一步讲，保守的只使用 weak 是不是一个好的选择呢？</p>\n<p>本文首先对循环引用的基础知识做一个简要介绍，然后会分析 Swift 源代码的一些片段，讲解 unowned 和 weak 在生命周期和性能上的差异点，希望看完本文以后，在的使用场景中，能使用正确的弱引用类型。</p>","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录:\"></a>目录:</h2><ul>\n<li>基础知识</li>\n<li>问题来了: unowened 还是 weak?</li>\n<li>性能：深度探索</li>\n<li>捕获列表处理解析</li>\n<li>结论</li>\n<li>脚注</li>\n</ul>\n<blockquote>\n<p>从 GitHub 或者 zipped 获取本文相关的 Playground 代码。然后从这里获取闭包案例和 SIL，SILGen 以及 LLVM IR 的输出。</p>\n</blockquote>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>众所周知，Swift 利用古老并且有效的自动引用计数（ARC, Automatic Reference Counting）来管理内存，带来的后果和在 Objective-C 中使用的情况类似，需要手动使用弱引用来解决循环引用问题。</p>\n<p>如果对 ARC 不了解，只需要知道的是，每一个引用类型实例都有一个引用计数与之关联，这个引用计数用来记录这个对象实例正在被变量或常量引用的总次数。当引用计数变为 0 时，实例将会被析构，实例占有的内存和资源都将变得重新可用。</p>\n<p>当有两个实例通过某种形式互相引用时，就会形成循环引用（比如：两个类实例都有一个属性指向对方的类实例；双向链表中两个相邻的节点实例等…）, 由于两个实例的引用计数都一直大于 0， 循环引用将会阻止这些实例的析构。</p>\n<p>为了解决这个问题，和其他一些有类似问题的语言一样， 在 Swift 中，弱引用 的概念被提了出来，弱引用不会被 ARC 计算，也就是说，当一个弱引用指向一个引用类型实例时，引用计数不会增加。</p>\n<p>弱引用不会阻止实例的析构, 只需要记住的是，在任何情况下，弱引用都不会拥有它指向的对象。在正式的场景中不是什么大问题，但是在我们处理这类引用的时候，需要意识到这一点。</p>\n<p>在 Swift 中有 2 种 弱 引用形式，unowned 和 weak。</p>\n<p>虽然它们的作用类似，但与它们相关实例生命周期的假设会略有不同，并且具有不同的性能特征。</p>\n<p>为了举例说明循环引用，这里不使用大家期望看到的类之间的循环引用，而使用闭包的上下文案例，这在 Objective-C 日常开发中处理循环引用时经常会遇到的情况。和类的循环引用类似，通过创建一个强引用指向外部实例，或捕获它，阻止它析构。</p>\n<p>在 Objective-C ，按照标准的做法，定义一个弱引用指向闭包外部的实例，然后在闭包内部定义强引用指向这个实例，在闭包执行期间使用它。当然，有必要在使用前检查引用的有效性。</p>\n<p>为了更方便的处理循环引用，Swift 引入了一个新的概念，用于简化和更加明显地表达在闭包内部外部变量的捕获：捕获列表（capture list）。使用捕获列表，可以在函数的头部定义和指定那些需要用在内部的外部变量，并且指定引用类型(译者注：这里是指 unowned 和 weak）。</p>\n<p>接下来举一些例子，在各种情况下捕获变量的表现。</p>\n<p>当不使用捕获列表时，闭包将会创建一个外部变量的强引用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i1 = <span class=\"number\">1</span>, i2 = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fStrong = &#123;</div><div class=\"line\">    i1 += <span class=\"number\">1</span></div><div class=\"line\">    i2 += <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fStrong()</div><div class=\"line\"><span class=\"built_in\">print</span>(i1,i2) <span class=\"comment\">//Prints 2 and 3</span></div></pre></td></tr></table></figure>\n<p>闭包内部对变量的修改将会改变外部原始变量的值，这与预期是一致的。</p>\n<p>使用捕获列表，闭包内部会创建一个新的可用常量。如果没有指定常量修饰符，闭包将会简单地拷贝原始值到新的变量中，对于值类型和引用类型都是一样的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fCopy = &#123; [i1] <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"built_in\">print</span>(i1,i2)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fStrong()</div><div class=\"line\"><span class=\"built_in\">print</span>(i1,i2) <span class=\"comment\">//打印结果是 2 和 3  </span></div><div class=\"line\"></div><div class=\"line\">fCopy()  <span class=\"comment\">//打印结果是 1 和 3</span></div></pre></td></tr></table></figure>\n<p>在上面的例子中，在调用 fStrong 之前定义函数 fCopy ,在该函数定义的时候，私有常量已经被创建了。正如你所看到的，当调用第二个函数时候，仍然打印 i1 的原始值。</p>\n<p>对于外部引用类型的变量，在捕获列表中指定 weak 或 unowned，这个常量将会被初始化为一个弱引用，指向原始值，这种指定的捕获方式就是用来处理循环引用的方式。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">aClass</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"number\">1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c1 = aClass()</div><div class=\"line\"><span class=\"keyword\">var</span> c2 = aClass()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fSpec = &#123; [<span class=\"keyword\">unowned</span> c1, <span class=\"keyword\">weak</span> c2] <span class=\"keyword\">in</span></div><div class=\"line\">    c1.value += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> c2 = c2 &#123;</div><div class=\"line\">        c2.value += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fSpec()</div><div class=\"line\"><span class=\"built_in\">print</span>(c1.value,c2.value) <span class=\"comment\">//Prints 2 and 2</span></div></pre></td></tr></table></figure>\n<p>两个 aClass 捕获实例的不同的定义方式，决定了它们在闭包中不同的使用方式。</p>\n<p>unowned 引用使用的场景是，原始实例永远不会为 nil，闭包可以直接使用它，并且直接定义为显式解包可选值。当原始实例被析构后，在闭包中使用这个捕获值将导致崩溃。</p>\n<p>如果捕获原始实例在使用过程中可能为 nil ，必须将引用声明为 weak， 并且在使用之前验证这个引用的有效性。</p>\n<h2 id=\"问题来了-unowened-还是-weak\"><a href=\"#问题来了-unowened-还是-weak\" class=\"headerlink\" title=\"问题来了: unowened 还是 weak?\"></a>问题来了: unowened 还是 weak?</h2><p>在实际使用中如何选择这两种弱引用类型呢？</p>\n<p>这个问题的答案可以简单由原始对象和引用它的闭包的生命周期来解释。</p>\n<p><img src=\"/images/unownedbig.png\" alt=\"unownedbig\"></p>\n<p>有两个可能出现的场景：</p>\n<ul>\n<li><p>闭包和捕获对象的生命周期相同，所以对象可以被访问，也就意味着闭包也可以被访问。外部对象和闭包有相同的生命周期(比如：对象和它的父对象的简单返回引用）。在这种情况下，你应该把引用定义为 unowned。</p>\n<p>  一个经典的案例是: [unowned self], 主要用在闭包中，这种闭包主要在他们的父节点上下文中做一些事情，没有在其他地方被引用或传递，不能作用在父节点之外。</p>\n</li>\n<li><p>闭包的生命周期和捕获对象的生命周期相互独立，当对象不能再使用时，闭包依然能够被引用。这种情况下，你应该把引用定义为 weak，并且在使用它之前验证一下它是否为 nil（请不要对它进行强制解包).</p>\n<p>  一个经典的案例是: [weak delegate = self.delegate!]，可以在某些使用闭包的场景中看到，闭包使用的是完全无关（生命周期独立）的代理对象。</p>\n</li>\n</ul>\n<p>当无法确认两个对象之间生命周期的关系时，是否不应该去冒险选择一个无效 unowned 引用？而是保守选择 weak 引用是一个更好的选择？<br>答案是否定的，不仅仅是因为对象生命周期了解是一件必要的事情，而且这两个修饰符在性能特性上也有很大的不同。</p>\n<p>弱引用最常见的实现是，每次一个新的引用生成时，都会把每个弱引用和它指向的对象信息存储到一个附加表中。</p>\n<p>当没有任何强引用指向一个对象时，Swift 运行时会启动析构过程，但是在这之前，运行时会把所有相关的弱引用置为 nil 。弱引用的这种实现方式我们称之为”零和弱引用”。</p>\n<p>这种实现有实际的开销，考虑到需要额外实现的数据结构，需要确保在并发访问情况下，对这个全局引用结构所有操作的正确性。一旦析构过程开始了，在任何环境中，都不允许访问弱引用所指向的对象了。</p>\n<p>弱引用（包括 unowned 和一些变体的 weak)在 Swift 使用了更简单和快速的实现机制。</p>\n<p>Swift 中的每个对象保持了两个引用计数器，一个是强引用计数器，用来决定 ARC 什么时候可以安全地析构这个对象，另外一个附加的弱引用计数器，用来计算创建了多少个指向这个对象的 unowned 或者 weak 引用，当这个计数器为零时，这个对象将被 析构 。</p>\n<p>需要重点理解的是，只有等到所有 unowned 引用被释放后，这个对象才会被真正地析构，然后对象将会保持未解析可访问状态，当析构发生后，对象的内容才会被回收。</p>\n<p>每当 unowned 引用被定义时，对应的 unowned 引用计数会进行原子级别地增加(使用原子gcc/llvm操作，进行一系列快速且线程安全的基本操作，例如：增加，减少，比较，交换等)，以保证线程安全。在增加计数之前，会检查强引用计数以确保对象是有效的。</p>\n<p>试图访问一个无效的对象，将会导致错误的断言，你的应用在运行时中会报错(这就是为什么这里的 unownd 实现方式叫做 unowned(safe) 实现)<br>为了更好的优化，应用编译时带有 -OFast，unowned 引用不会去验证引用对象的有效性，unowned 引用的行为就会像 Objective-C 中的 __unsafe_unretained 一样。如果引用对象无效，unowned 引用将会指向已经释放垃圾内存（这种实现称之 unowned(unsafe)）。</p>\n<p>当一个 unowned 引用被释放后，如果这时没有其他强引用或 unowned 引用指向这个对象，那么最终这个对象将被析构。这就是为什么一个引用对象不能在强引用计数器等于零的情况下，被析构的原因，所有的引用计数器必须能够被访问用来验证 unowned 引用和强引用数量。</p>\n<p>Swift 的 weak 引用添加了附加层，间接地把 unowned 引用包裹到了一个可选容器里面，在指向的对象析构之后变成空的情况下，这样处理会更加的清晰。但是需要付出的代价是，附加的机制需要正确地处理可选值。</p>\n<p>考虑到以上因素，在对象关系生命周期允许的情况下，优先选择使用 unowned 引用。但是这不是此故事的结局，接下来比较一下两者性能1上的差别。</p>\n<h2 id=\"性能：深度探索\"><a href=\"#性能：深度探索\" class=\"headerlink\" title=\"性能：深度探索\"></a>性能：深度探索</h2><p>在查看 Swift 项目源码验证之前，需要理解 ARC 如何管理这两种引用类型，并且还需要解释 swiftc，LLVM 和 SIL 的相关知识。</p>\n<p>接下来试着简要介绍本文所需要的必备知识点，如果想了解更多，将在最后的脚注中找到一些有用的链接。</p>\n<p>使用一个图来解释 swiftc 整个编译过程的包含的模块：</p>\n<p><img src=\"/images/swiftc.png\" alt=\"swiftc\"></p>\n<p>Swiftc 和 clang 一样构建在 LLVM 上，遵循 clang 编译器相似的编译流程。</p>\n<p>在编译过程的第一部分，使用一个特定语言前端进行管理，swift 源代码被解释生成一个抽象语法树(AST)表达2，然后抽象语法树的结果从语义角度进行分析，找出语义错误。</p>\n<p>在这个点上，对于其他的基于 LLVM 的编译器来讲，在通过一个附加步骤对源代码进行静态分析后（必要时可以显示错误和警告），接着 IRGen 模块 会把 AST 的内容会转换成一个轻量的和底层的机器无关的表示，我们称之为 LLVM IR(LLVM 中间表示)。</p>\n<p>尽管两个模块都需要做一些相同检查，但是这两个模块是区分开的，在两个模块之间也存在许多重复的代码。</p>\n<p>IR 是一种静态单赋值形式（SSA-form）一致语言，可以看做注入了 LLVM 的虚拟机下的 RISC 类型汇编语言。基于 SSA 将简化接下来的编译过程，从语言前端提供的中间表达会在 IR 进行多重优化。</p>\n<p>需要重点注意的是，IR 其中一个特点是，它具有三种不同的形式：内存表达（内部使用），序列化位代码形式（你已经知道的位代码形式）和可读形式。</p>\n<p>最后一种形式非常有用，用来验证 IR 代码的最终结构，这个结构将会传入到整个过程中的最后一步，将会从机器独立的 IR 代码转换成平台相关的表达(比如：x86，ARM 等等)。最后一步将被 LLVM 平台后端执行。</p>\n<p>那么 swiftc 和其他基于 LLVM 的编译器有什么不同呢？<br>swiftc 和其他编译器从结构形式上的差别主要体现在一个附加组件，这个附加组件是 SILGen ，在 IRGen 之前，执行代码的监测和优化，生成一个高级的中间表达，我们称之为 SIL （Swift Intermediate Language，Swift 中间语言），最后 SIL 将会转换成 LLVM IR。这一步加强了在单个软件模块上所有具体语言的检查，并且简化了 IRGen。</p>\n<p>从 AST 到 IR 的转换分为两个步骤。SILGen 把 AST 源代码转换为原始 SIL ，然后编译器进行 Swift 语法检查（需要时打印错误或者警告信息），优化有效的原始 SIL ，通过一些步骤最后生成标准化 SIL 。如上面的示意图显示那样，标准化 SIL 的最后转化为 LLVM IR。</p>\n<p>再次强调，SIL 是一个 SSA 类型语言，使用附加的结构扩展了 Swift 的语法。它依赖 Swift 的类型系统，并且能理解 Swift 的定义，但是需要重点记住的是，当编译一个手写的 SIL 源码（是的，可以手动写 SIL 然后编译它）时，高阶的 Swift 代码或者函数内容将被编译器忽略。</p>\n<p>在接下来的章节，我们将分析一个标准化 SIL 的案例，来理解 unowned 和 weak 引用如何被编译器处理。一个包含捕获列表的基本闭包的例子，查看这个例子生成的 SIL 代码，可以看到被编译器添加的所有 ARC 相关的函数调用。</p>\n<blockquote>\n<p>从 GitHub 或者 zipped 获取本文相关的 Playground 代码。然后从这里获取闭包案例和 SIL ，SILGen 以及 LLVM IR 的输出。</p>\n</blockquote>\n<h2 id=\"捕获列表处理解析\"><a href=\"#捕获列表处理解析\" class=\"headerlink\" title=\"捕获列表处理解析\"></a>捕获列表处理解析</h2><p>接下来看看一个简单的 Swift 的例子，定义两个类变量，然后在一个闭包中对他们进行弱引用的捕获：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">aClass</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"number\">1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c1 = aClass()</div><div class=\"line\"><span class=\"keyword\">var</span> c2 = aClass()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fSpec = &#123; </div><div class=\"line\">    [<span class=\"keyword\">unowned</span> c1, <span class=\"keyword\">weak</span> c2] <span class=\"keyword\">in</span></div><div class=\"line\">    c1.value = <span class=\"number\">42</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> c2o = c2 &#123;</div><div class=\"line\">        c2o.value = <span class=\"number\">42</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fSpec()</div></pre></td></tr></table></figure>\n<p>通过 xcrun swiftc -emit-sil sample.swift 编译 swift 源代码，生成标准化 SIL 代码。原始SIL 可以使用 -emit-silgen 选项来生成。</p>\n<p>运行以上命令以后，会发现 swiftc 产生了许多代码。通过查看 swiftc 输出代码的片段，学习一下基本的 SIL 指令，理解整个结构。</p>\n<p>在下面代码中需要的地方添加了一些多行注释（编译器也生成了一些单行注释），希望这些注释已经足够说清楚发生了什么：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">  此文件包含典型 SIL 代码</div><div class=\"line\">*/</span></div><div class=\"line\">sil_stage canonical             </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* </div><div class=\"line\">  只有在 SIL 内部使用的特殊的导入</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">import</span> Builtin                  </div><div class=\"line\"><span class=\"keyword\">import</span> Swift</div><div class=\"line\"><span class=\"keyword\">import</span> SwiftShims</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">\t三个全局变量的定义，包括 c1，c2 和 闭包 fSpec。</div><div class=\"line\">  \t@_Tv4clos2c1CS_6aClass是变量的符号，$aClass 是它的类型（类型前缀为$)。</div><div class=\"line\">  \t变量名在这里看起来很乱，但是在后面的代码中将变得更加可读。</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"comment\">// c1</span></div><div class=\"line\">sil_global hidden @_Tv4sample2c1CS_6aClass : $aClass</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// c2</span></div><div class=\"line\">sil_global hidden @_Tv4sample2c2CS_6aClass : $aClass</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// fSpec</span></div><div class=\"line\">sil_global hidden @_Tv4sample5fSpecFT_T_ : $@callee_owned () -&gt; ()</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">  层次作用域定义表示原始代码的位置。</div><div class=\"line\">  每个 SIL 指示将会指向它生成的 `sil_scope`。</div><div class=\"line\">*/</span></div><div class=\"line\">sil_scope <span class=\"number\">1</span> &#123;  parent @main : $<span class=\"meta\">@convention</span>(<span class=\"built_in\">c</span>) (<span class=\"type\">Int32</span>, <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Optional</span>&lt;<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int8</span>&gt;&gt;&gt;) -&gt; <span class=\"type\">Int32</span> &#125;</div><div class=\"line\">sil_scope <span class=\"number\">2</span> &#123; loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">14</span>:<span class=\"number\">1</span> parent <span class=\"number\">1</span> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">\t自动生成的 @main 函数包含了我们原始全部作用域的代码。</div><div class=\"line\"> \t这里沿用了熟悉的 c main() 函数结构，接收参数个数和参数数组两个输入，这个函数遵循 c 调用约定。</div><div class=\"line\">  \t这个函数包含了需要调用闭包的指令。</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"comment\">// main</span></div><div class=\"line\">sil @main : $<span class=\"meta\">@convention</span>(<span class=\"built_in\">c</span>) (<span class=\"type\">Int32</span>, <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Optional</span>&lt;<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int8</span>&gt;&gt;&gt;) -&gt; <span class=\"type\">Int32</span> &#123;</div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">  入口定义头部为 % 符号，后面跟随一个数字 id。</div><div class=\"line\">  每当一个新的入口定义时（或者函数开头定义函数参数），编译器在入口行尾根据它的值（叫做 users）添加一个注释。</div><div class=\"line\">  对于其他指令，需要提供 id 号。</div><div class=\"line\">  在这里，入口 0 将被用来计算入口 4 的内容，入口 1 将被用来创建入口 10 的值。</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"comment\">// %0                                             // user: %4</span></div><div class=\"line\"><span class=\"comment\">// %1                                             // user: %10</span></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">  每一个函数被分解成一系列的基本指令块，每一个指令块结束于一个终止指令（一个分支或者一个返回）。</div><div class=\"line\">  这一系列的指令块表示函数所有可能的执行路径。</div><div class=\"line\">*/</span></div><div class=\"line\">bb0(%<span class=\"number\">0</span> : $<span class=\"type\">Int32</span>, %<span class=\"number\">1</span> : $<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Optional</span>&lt;<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int8</span>&gt;&gt;&gt;):</div><div class=\"line\">...</div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">    每一个 SIL 指令都包含一个引用，指向源代码的位置，包括指令具体从源代码中哪个地方来，属于哪一个作用域。</div><div class=\"line\">    在后面分析具体的方法会看到这些内容。</div><div class=\"line\">  */</span></div><div class=\"line\">  unowned_retain %<span class=\"number\">27</span> : $@sil_unowned aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">14</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// id: %28</span></div><div class=\"line\">  store %<span class=\"number\">27</span> to %<span class=\"number\">2</span> : $*@sil_unowned aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">14</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// id: %29</span></div><div class=\"line\">  %<span class=\"number\">30</span> = alloc_box $@sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;, <span class=\"keyword\">var</span>, name <span class=\"string\">\"c2\"</span>, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// users: %46, %44, %43, %31</span></div><div class=\"line\">  %<span class=\"number\">31</span> = project_box %<span class=\"number\">30</span> : $@box @sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// user: %35</span></div><div class=\"line\">  %<span class=\"number\">32</span> = load %<span class=\"number\">19</span> : $*aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// users: %34, %33</span></div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* </div><div class=\"line\">  下面是一系列自动生成的`aClass`的方法，包括： init/deinit, setter/getter 和其他一些工具方法。</div><div class=\"line\">  每个方法前的注释是编译器添加的，用来说明代码的具体作用。</div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">  隐藏方法只在它们模块中可见。</div><div class=\"line\">  @convention(方法名)是 Swift 中方法调用默认的约定，在尾部有一个附加的参数指向它自己。</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"comment\">// aClass.__deallocating_deinit</span></div><div class=\"line\">sil hidden @_TFC4clos6aClassD : $<span class=\"meta\">@convention</span>(method) (@owned aClass) -&gt; () &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">  @guaranteed 参数表示保证在整个周期内调用此方法都有效。</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"comment\">// aClass.deinit</span></div><div class=\"line\">sil hidden @_TFC4clos6aClassd : $<span class=\"meta\">@convention</span>(method) (@guaranteed aClass) -&gt; @owned <span class=\"type\">Builtin</span>.<span class=\"type\">NativeObject</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">  [transparent] 修饰的方法是内联的小方法</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"comment\">// aClass.value.getter</span></div><div class=\"line\">sil hidden [transparent] @_TFC4clos6aClassg5valueSi : $<span class=\"meta\">@convention</span>(method) (@guaranteed aClass) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// aClass.value.setter</span></div><div class=\"line\">sil hidden [transparent] @_TFC4clos6aClasss5valueSi : $<span class=\"meta\">@convention</span>(method) (<span class=\"type\">Int</span>, @guaranteed aClass) -&gt; () &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// aClass.value.materializeForSet</span></div><div class=\"line\">sil hidden [transparent] @_TFC4clos6aClassm5valueSi : $<span class=\"meta\">@convention</span>(method) (<span class=\"type\">Builtin</span>.<span class=\"type\">RawPointer</span>, @<span class=\"keyword\">inout</span> <span class=\"type\">Builtin</span>.<span class=\"type\">UnsafeValueBuffer</span>, @guaranteed aClass) -&gt; (<span class=\"type\">Builtin</span>.<span class=\"type\">RawPointer</span>, <span class=\"type\">Optional</span>&lt;<span class=\"type\">Builtin</span>.<span class=\"type\">RawPointer</span>&gt;) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">  @owned 修饰符表示这个对象将被调用者拥有。</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"comment\">// aClass.init() -&gt; aClass</span></div><div class=\"line\">sil hidden @_TFC4clos6aClasscfT_S0_ : $<span class=\"meta\">@convention</span>(method) (@owned aClass) -&gt; @owned aClass &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// aClass.__allocating_init() -&gt; aClass</span></div><div class=\"line\">sil hidden @_TFC4clos6aClassCfT_S0_ : $<span class=\"meta\">@convention</span>(method) (@thick aClass.<span class=\"type\">Type</span>) -&gt; @owned aClass &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* </div><div class=\"line\">  接下面是闭包代码段</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"comment\">// (closure #1)</span></div><div class=\"line\">sil shared @_TF4closU_FT_T_ : $<span class=\"meta\">@convention</span>(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;) -&gt; () &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"comment\">/* 关于闭包的 SIL 代码， 见下文 */</span></div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"><span class=\"comment\">/* </div><div class=\"line\">  sil_vtable 定义所有关于 aClass 类的虚函数表。</div><div class=\"line\">  sil_vtable 包含了期望的所有自动生成的方法。</div><div class=\"line\">*/</span></div><div class=\"line\">sil_vtable aClass &#123;</div><div class=\"line\">  #aClass.<span class=\"keyword\">deinit</span>!deallocator: _TFC4clos6aClassD\t<span class=\"comment\">// aClass.__deallocating_deinit</span></div><div class=\"line\">  #aClass.value!getter.<span class=\"number\">1</span>: _TFC4clos6aClassg5valueSi\t<span class=\"comment\">// aClass.value.getter</span></div><div class=\"line\">  #aClass.value!setter.<span class=\"number\">1</span>: _TFC4clos6aClasss5valueSi\t<span class=\"comment\">// aClass.value.setter</span></div><div class=\"line\">  #aClass.value!materializeForSet.<span class=\"number\">1</span>: _TFC4clos6aClassm5valueSi\t<span class=\"comment\">// aClass.value.materializeForSet</span></div><div class=\"line\">  #aClass.<span class=\"keyword\">init</span>!initializer.<span class=\"number\">1</span>: _TFC4clos6aClasscfT_S0_\t<span class=\"comment\">// aClass.init() -&gt; aClass</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在回到主函数，看看两个类实例如何被获取到，并如何传递给调用他们的闭包。</p>\n<p>在这里，所有标识都被重新整理，使得代码片段更加可读。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// main</span></div><div class=\"line\">sil @main : $<span class=\"meta\">@convention</span>(<span class=\"built_in\">c</span>) (<span class=\"type\">Int32</span>, <span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Optional</span>&lt;<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int8</span>&gt;&gt;&gt;) -&gt; <span class=\"type\">Int32</span> &#123;</div><div class=\"line\"><span class=\"comment\">// %0                                             // user: %4</span></div><div class=\"line\"><span class=\"comment\">// %1                                             // user: %10</span></div><div class=\"line\">bb0(%<span class=\"number\">0</span> : $<span class=\"type\">Int32</span>, %<span class=\"number\">1</span> : $<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Optional</span>&lt;<span class=\"type\">UnsafeMutablePointer</span>&lt;<span class=\"type\">Int8</span>&gt;&gt;&gt;):</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">    全局变量的引用使用三个入口来放置。</div><div class=\"line\">  */</span></div><div class=\"line\">  %<span class=\"number\">13</span> = global_addr @clos.c1 : $*aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">5</span>:<span class=\"number\">5</span>, scope <span class=\"number\">1</span> <span class=\"comment\">// users: %26, %17</span></div><div class=\"line\">  ...</div><div class=\"line\">  %<span class=\"number\">19</span> = global_addr @clos.c2 : $*aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">6</span>:<span class=\"number\">5</span>, scope <span class=\"number\">1</span> <span class=\"comment\">// users: %32, %23</span></div><div class=\"line\">  ...</div><div class=\"line\">  %<span class=\"number\">25</span> = global_addr @clos.fSpec : $*@callee_owned () -&gt; (), loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">8</span>:<span class=\"number\">5</span>, scope <span class=\"number\">1</span> <span class=\"comment\">// users: %48, %45</span></div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">    c1 是 unowned_retained 的。</div><div class=\"line\">    下面的指令增加变量的 unowned 引用计数。</div><div class=\"line\">  */</span></div><div class=\"line\">  %<span class=\"number\">26</span> = load %<span class=\"number\">13</span> : $*aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">14</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// user: %27</span></div><div class=\"line\">  %<span class=\"number\">27</span> = ref_to_unowned %<span class=\"number\">26</span> : $aClass to $@sil_unowned aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">14</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// users: %47, %38, %39, %29, %28</span></div><div class=\"line\">  unowned_retain %<span class=\"number\">27</span> : $@sil_unowned aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">14</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// id: %28</span></div><div class=\"line\">  store %<span class=\"number\">27</span> to %<span class=\"number\">2</span> : $*@sil_unowned aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">14</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// id: %29</span></div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">    对 c2 的处理会更加复杂一些。</div><div class=\"line\">\talloc_box 创建了一个这个变量的引用数容器，变量将会存在这个容器的堆中。</div><div class=\"line\">    容器创建以后，将会创建一个可选变量，指向 c2，并且可选变量会存储在容器里。容器会增加所包含值的技术，正如下面看到的一样，一旦容器被迁移，可选值就会被释放。</div><div class=\"line\">    在这里，c2 的值将被存储在这个可选值中，对象将暂时strong_retained 然后释放。</div><div class=\"line\">  */</span></div><div class=\"line\">  %<span class=\"number\">30</span> = alloc_box $@sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;, <span class=\"keyword\">var</span>, name <span class=\"string\">\"c2\"</span>, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// users: %46, %44, %43, %31</span></div><div class=\"line\">  %<span class=\"number\">31</span> = project_box %<span class=\"number\">30</span> : $@box @sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// user: %35</span></div><div class=\"line\">  %<span class=\"number\">32</span> = load %<span class=\"number\">19</span> : $*aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// users: %34, %33</span></div><div class=\"line\">  strong_retain %<span class=\"number\">32</span> : $aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">9</span>:<span class=\"number\">23</span>, scope <span class=\"number\">2</span> <span class=\"comment\">// id: %33</span></div><div class=\"line\">  %<span class=\"number\">34</span> = <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">$Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, #<span class=\"title\">Optional</span>.<span class=\"title\">some</span>!<span class=\"title\">enumelt</span>.1, %32 : <span class=\"title\">$aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":9:23, <span class=\"title\">scope</span> 2 // <span class=\"title\">users</span>: %36, %35</div><div class=\"line\">  <span class=\"title\">store_weak</span> %34 <span class=\"title\">to</span> [<span class=\"title\">initialization</span>] %31 : <span class=\"title\">$</span>*@<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":9:23, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %35</div><div class=\"line\">  <span class=\"title\">release_value</span> %34 : <span class=\"title\">$Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":9:23, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %36</div><div class=\"line\">  /*</div><div class=\"line\">    获取到闭包的引用。</div><div class=\"line\">  */</div><div class=\"line\">  // <span class=\"title\">function_ref</span> (<span class=\"title\">closure</span> #1)</div><div class=\"line\">  %37 = <span class=\"title\">function_ref</span> @<span class=\"title\">sample</span>.(<span class=\"title\">closure</span> #1) : <span class=\"title\">$</span>@<span class=\"title\">convention</span>(<span class=\"title\">thin</span>) (@<span class=\"title\">owned</span> @<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, @<span class=\"title\">owned</span> @<span class=\"title\">box</span> @<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;) -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">user</span>: %44</div><div class=\"line\">  /*</div><div class=\"line\">    <span class=\"title\">c1</span> 将被标记为 <span class=\"title\">tagged</span>，并且变量变为 <span class=\"title\">unowned_retained</span>。</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"title\">strong_retain_unowned</span> %27 : <span class=\"title\">$</span>@<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %38</div><div class=\"line\">  %39 = <span class=\"title\">unowned_to_ref</span> %27 : <span class=\"title\">$</span>@<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span> <span class=\"title\">to</span> <span class=\"title\">$aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">users</span>: %42, %40</div><div class=\"line\">  %40 = <span class=\"title\">ref_to_unowned</span> %39 : <span class=\"title\">$aClass</span> <span class=\"title\">to</span> <span class=\"title\">$</span>@<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">users</span>: %44, %41</div><div class=\"line\">  <span class=\"title\">unowned_retain</span> %40 : <span class=\"title\">$</span>@<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %41</div><div class=\"line\">  <span class=\"title\">strong_release</span> %39 : <span class=\"title\">$aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %42</div><div class=\"line\">  /*</div><div class=\"line\">    包含 <span class=\"title\">c2</span> 的可选值容器是 <span class=\"title\">strong_retained</span> 的。</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"title\">strong_retain</span> %30 : <span class=\"title\">$</span>@<span class=\"title\">box</span> @<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %43</div><div class=\"line\">  /*</div><div class=\"line\">    创建一个闭包对象，绑定方法到参数中。</div><div class=\"line\">  */</div><div class=\"line\">  %44 = <span class=\"title\">partial_apply</span> %37(%40, %30) : <span class=\"title\">$</span>@<span class=\"title\">convention</span>(<span class=\"title\">thin</span>) (@<span class=\"title\">owned</span> @<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, @<span class=\"title\">owned</span> @<span class=\"title\">box</span> @<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;) -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">user</span>: %45</div><div class=\"line\">  <span class=\"title\">store</span> %44 <span class=\"title\">to</span> %25 : <span class=\"title\">$</span>*@<span class=\"title\">callee_owned</span> () -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":8:13, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %45</div><div class=\"line\">  /*</div><div class=\"line\">    </div><div class=\"line\">    对 <span class=\"title\">c1</span> 和 <span class=\"title\">c2</span> 的容器变量进行释放（使用 对应匹配的 *<span class=\"title\">_release</span> 方法）。</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"title\">strong_release</span> %30 : <span class=\"title\">$</span>@<span class=\"title\">box</span> @<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":14:1, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %46</div><div class=\"line\">  <span class=\"title\">unowned_release</span> %27 : <span class=\"title\">$</span>@<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":9:14, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %47</div><div class=\"line\">  /*</div><div class=\"line\">     加载原先存储的闭包对象，增加强引用然后调用它。</div><div class=\"line\">  */</div><div class=\"line\">   %48 = <span class=\"title\">load</span> %25 : <span class=\"title\">$</span>*@<span class=\"title\">callee_owned</span> () -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":17:1, <span class=\"title\">scope</span> 2 // <span class=\"title\">users</span>: %50, %49</div><div class=\"line\">  <span class=\"title\">strong_retain</span> %48 : <span class=\"title\">$</span>@<span class=\"title\">callee_owned</span> () -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":17:1, <span class=\"title\">scope</span> 2 // <span class=\"title\">id</span>: %49</div><div class=\"line\">  %50 = <span class=\"title\">apply</span> %48() : <span class=\"title\">$</span>@<span class=\"title\">callee_owned</span> () -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":17:7, <span class=\"title\">scope</span> 2</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<p>闭包有一个更加复杂的结构：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">  闭包参数被标记为 @sil, 指定参数如何被计数，有一个 unowned 的 aClass 类变量 c2, 和另外一个包含 c2 的可选值容器。</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"comment\">// (closure #1)</span></div><div class=\"line\">sil shared @clos.fSpec: $<span class=\"meta\">@convention</span>(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;) -&gt; () &#123;</div><div class=\"line\"><span class=\"comment\">// %0                                             // users: %24, %6, %5, %2</span></div><div class=\"line\"><span class=\"comment\">// %1                                             // users: %23, %3</span></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">  下面的函数包含三块，后面两块的执行依赖可选值 c2 具体的值。</div><div class=\"line\">*/</span></div><div class=\"line\">bb0(%<span class=\"number\">0</span> : $@sil_unowned aClass, %<span class=\"number\">1</span> : $@box @sil_weak <span class=\"type\">Optional</span>&lt;aClass&gt;):</div><div class=\"line\">...</div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">    c1 被强计数。</div><div class=\"line\">  */</span></div><div class=\"line\">  strong_retain_unowned %<span class=\"number\">0</span> : $@sil_unowned aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">10</span>:<span class=\"number\">5</span>, scope <span class=\"number\">17</span> <span class=\"comment\">// id: %5</span></div><div class=\"line\">  %<span class=\"number\">6</span> = unowned_to_ref %<span class=\"number\">0</span> : $@sil_unowned aClass to $aClass, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">10</span>:<span class=\"number\">5</span>, scope <span class=\"number\">17</span> <span class=\"comment\">// users: %11, %10, %9</span></div><div class=\"line\">  <span class=\"comment\">/*</div><div class=\"line\">    使用内部自带包，传入一个整型字面量到整型结构中，初始化了一个值为 42 的整型值。</div><div class=\"line\">    这个值将被设置为 c1 的新值，完成以后这个变量将会被释放。</div><div class=\"line\">    在这里，我们第一次看到 class_method 指令，用于获取 vtable 中的函数引用。</div><div class=\"line\">  */</span></div><div class=\"line\">  %<span class=\"number\">7</span> = integer_literal $<span class=\"type\">Builtin</span>.<span class=\"type\">Int64</span>, <span class=\"number\">42</span>, loc <span class=\"string\">\"sample.swift\"</span>:<span class=\"number\">10</span>:<span class=\"number\">16</span>, scope <span class=\"number\">17</span> <span class=\"comment\">// user: %8</span></div><div class=\"line\">  %<span class=\"number\">8</span> = <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">$Int</span> (%7 : <span class=\"title\">$Builtin</span>.<span class=\"title\">Int64</span>), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":10:16, <span class=\"title\">scope</span> 17 // <span class=\"title\">user</span>: %10</div><div class=\"line\">  %9 = <span class=\"title\">class_method</span> %6 : <span class=\"title\">$aClass</span>, #<span class=\"title\">aClass</span>.<span class=\"title\">value</span>!<span class=\"title\">setter</span>.1 : (<span class=\"title\">aClass</span>) -&gt; (<span class=\"title\">Int</span>) -&gt; () , <span class=\"title\">$</span>@<span class=\"title\">convention</span>(<span class=\"title\">method</span>) (<span class=\"title\">Int</span>, @<span class=\"title\">guaranteed</span> <span class=\"title\">aClass</span>) -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":10:14, <span class=\"title\">scope</span> 17 // <span class=\"title\">user</span>: %10</div><div class=\"line\">  %10 = <span class=\"title\">apply</span> %9(%8, %6) : <span class=\"title\">$</span>@<span class=\"title\">convention</span>(<span class=\"title\">method</span>) (<span class=\"title\">Int</span>, @<span class=\"title\">guaranteed</span> <span class=\"title\">aClass</span>) -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":10:14, <span class=\"title\">scope</span> 17</div><div class=\"line\">  <span class=\"title\">strong_release</span> %6 : <span class=\"title\">$aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":10:16, <span class=\"title\">scope</span> 17 // <span class=\"title\">id</span>: %11</div><div class=\"line\">  /*</div><div class=\"line\">    接下来讨论 <span class=\"title\">c2</span>。</div><div class=\"line\">    获取可选值，然后根据它的内容执行接下来的分支语句。</div><div class=\"line\"></div><div class=\"line\">    <span class=\"title\">If</span> <span class=\"title\">the</span> <span class=\"title\">optional</span> <span class=\"title\">has</span> <span class=\"title\">a</span> <span class=\"title\">value</span> <span class=\"title\">the</span> <span class=\"title\">bb2</span> <span class=\"title\">block</span> <span class=\"title\">will</span> <span class=\"title\">be</span> <span class=\"title\">executed</span> <span class=\"title\">before</span> <span class=\"title\">jumping</span> </div><div class=\"line\">    <span class=\"title\">to</span> <span class=\"title\">bb3</span>, <span class=\"title\">if</span> <span class=\"title\">it</span> <span class=\"title\">doesn</span>'<span class=\"title\">t</span> <span class=\"title\">after</span> <span class=\"title\">a</span> <span class=\"title\">brief</span> <span class=\"title\">jump</span> <span class=\"title\">to</span> <span class=\"title\">bb1</span>, <span class=\"title\">the</span> <span class=\"title\">function</span> <span class=\"title\">will</span> <span class=\"title\">proceed</span> <span class=\"title\">to</span> <span class=\"title\">bb3</span> <span class=\"title\">releasing</span></div><div class=\"line\">    <span class=\"title\">the</span> <span class=\"title\">retained</span> <span class=\"title\">parameters</span>.</div><div class=\"line\">    </div><div class=\"line\">  */</div><div class=\"line\">  %12 = <span class=\"title\">load_weak</span> %3 : <span class=\"title\">$</span>*@<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":11:18, <span class=\"title\">scope</span> 18 // <span class=\"title\">user</span>: %13</div><div class=\"line\">  <span class=\"title\">switch_enum</span> %12 : <span class=\"title\">$Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">case</span> #<span class=\"title\">Optional</span>.<span class=\"title\">some</span>!<span class=\"title\">enumelt</span>.1: <span class=\"title\">bb2</span>, <span class=\"title\">default</span> <span class=\"title\">bb1</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":11:18, <span class=\"title\">scope</span> 18 // <span class=\"title\">id</span>: %13</div><div class=\"line\">  <span class=\"title\">bb1</span>:                                              // <span class=\"title\">Preds</span>: <span class=\"title\">bb0</span></div><div class=\"line\">  /*</div><div class=\"line\">    跳转到闭包的结尾。</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"title\">br</span> <span class=\"title\">bb3</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":11:18, <span class=\"title\">scope</span> 16        // <span class=\"title\">id</span>: %14</div><div class=\"line\"></div><div class=\"line\">// %15                                            // <span class=\"title\">users</span>: %21, %20, %19, %16</div><div class=\"line\"><span class=\"title\">bb2</span>(%15 : <span class=\"title\">$aClass</span>):                               // <span class=\"title\">Preds</span>: <span class=\"title\">bb0</span></div><div class=\"line\">  /*</div><div class=\"line\">    调用 <span class=\"title\">aClass</span> 的 <span class=\"title\">setter</span>，设置它的值为 42.</div><div class=\"line\">  */</div><div class=\"line\">  ...</div><div class=\"line\">  %17 = <span class=\"title\">integer_literal</span> <span class=\"title\">$Builtin</span>.<span class=\"title\">Int64</span>, 42, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":12:21, <span class=\"title\">scope</span> 19 // <span class=\"title\">user</span>: %18</div><div class=\"line\">  %18 = <span class=\"title\">struct</span> <span class=\"title\">$Int</span> (%17 : <span class=\"title\">$Builtin</span>.<span class=\"title\">Int64</span>), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":12:21, <span class=\"title\">scope</span> 19 // <span class=\"title\">user</span>: %20</div><div class=\"line\">  %19 = <span class=\"title\">class_method</span> %15 : <span class=\"title\">$aClass</span>, #<span class=\"title\">aClass</span>.<span class=\"title\">value</span>!<span class=\"title\">setter</span>.1 : (<span class=\"title\">aClass</span>) -&gt; (<span class=\"title\">Int</span>) -&gt; () , <span class=\"title\">$</span>@<span class=\"title\">convention</span>(<span class=\"title\">method</span>) (<span class=\"title\">Int</span>, @<span class=\"title\">guaranteed</span> <span class=\"title\">aClass</span>) -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":12:19, <span class=\"title\">scope</span> 19 // <span class=\"title\">user</span>: %20</div><div class=\"line\">  %20 = <span class=\"title\">apply</span> %19(%18, %15) : <span class=\"title\">$</span>@<span class=\"title\">convention</span>(<span class=\"title\">method</span>) (<span class=\"title\">Int</span>, @<span class=\"title\">guaranteed</span> <span class=\"title\">aClass</span>) -&gt; (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":12:19, <span class=\"title\">scope</span> 19</div><div class=\"line\">  <span class=\"title\">strong_release</span> %15 : <span class=\"title\">$aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":13:5, <span class=\"title\">scope</span> 18 // <span class=\"title\">id</span>: %21</div><div class=\"line\">  <span class=\"title\">br</span> <span class=\"title\">bb3</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":13:5, <span class=\"title\">scope</span> 18         // <span class=\"title\">id</span>: %22</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">bb3</span>:                                              // <span class=\"title\">Preds</span>: <span class=\"title\">bb1</span> <span class=\"title\">bb2</span></div><div class=\"line\">  /*</div><div class=\"line\">    释放所有获取的变量然后返回。</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"title\">strong_release</span> %1 : <span class=\"title\">$</span>@<span class=\"title\">box</span> @<span class=\"title\">sil_weak</span> <span class=\"title\">Optional</span>&lt;<span class=\"title\">aClass</span>&gt;, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":14:1, <span class=\"title\">scope</span> 17 // <span class=\"title\">id</span>: %23</div><div class=\"line\">  <span class=\"title\">unowned_release</span> %0 : <span class=\"title\">$</span>@<span class=\"title\">sil_unowned</span> <span class=\"title\">aClass</span>, <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":14:1, <span class=\"title\">scope</span> 17 // <span class=\"title\">id</span>: %24</div><div class=\"line\">  %25 = <span class=\"title\">tuple</span> (), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":14:1, <span class=\"title\">scope</span> 17 // <span class=\"title\">user</span>: %26</div><div class=\"line\">  <span class=\"title\">return</span> %25 : <span class=\"title\">$</span>(), <span class=\"title\">loc</span> \"<span class=\"title\">sample</span>.<span class=\"title\">swift</span>\":14:1, <span class=\"title\">scope</span> 17 // <span class=\"title\">id</span>: %26</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<p>在这里，忽略掉不同的 ARC 指令带来的性能的差异点，对不同阶段每种类型的捕获变量做一个快速的对比：</p>\n<table>\n<thead>\n<tr>\n<th>动作</th>\n<th>Unowned</th>\n<th>Weak</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>预先调用 #1</td>\n<td>对象进行 unowned_retain</td>\n<td>创建一个容器，并且对象进行 strong_retain 操作。创建一个可选值，存入到容器中，然后释放可选值</td>\n</tr>\n<tr>\n<td>预先调用 #2</td>\n<td>strong_retain_unowned，unowned_retain 和 strong_release</td>\n<td>strong_retain</td>\n</tr>\n<tr>\n<td>闭包执行</td>\n<td>strong_retain_unowned，unowned_release</td>\n<td>load_weak, 打开可选值, strong_release</td>\n</tr>\n<tr>\n<td>调用之后</td>\n<td>unowned_release</td>\n<td>strong_release</td>\n</tr>\n</tbody>\n</table>\n<p>正如上面看到的 SIL 代码段那样，处理 weak 引用会涉及到更多的工作，因为需要处理引用需要的可选值。</p>\n<p>参照官方文档的描述，这里对涉及到的所有 ARC 指令做一个简要的解释：</p>\n<ul>\n<li>unowned_retain：增加堆对象中的 unowned 引用计数。</li>\n<li>strong_retain_unowned ：断言对象的强引用计数大于 0，然后增加这个引用计数。</li>\n<li>strong_retain：增加对象的强引用计数。</li>\n<li>load_weak：不是真正的 ARC 调用，但是它将增加可选值指向对象的强引用计数。</li>\n<li>strong_release：减少对象的强引用计数。如果释放操作把对象强引用计数变为0，对象将被销毁，然后弱引用将被清除。当整个强引用计数和 unowned 引用计数都为0时，对象的内存才会被释放。</li>\n<li>unowned_release：减少对象的 unowned 引用计数。当整个强引用计数和 unowned 引用计数都为 0 时，对象的内存才会被释放。</li>\n</ul>\n<p>接下来深入到 Swift 运行时看看，这些指令都是如何被实现的，相关的代码文件有：HeapObject.cpp，HeapObject.h，RefCount.h 和 Heap.cpp、 SwiftObject.mm 中的少量定义。容器实现可以在 MetadataImpl.h 找到，但是本文不展开讨论。</p>\n<p>这些文件中定义大多数的 ARC 方法都有三种变体，一种是对 Swift 对象的基础实现，另外两种实现是针对非原生 Swift 对象的：桥接对象和未知对象。后面两种变体这里不予讨论。</p>\n<p>第一个讨论指令集和 unowned 引用相关。</p>\n<p>在 HeapObject.cpp 文件中间可以看到对 unowned_retain 和 unowned_release 的实现方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">SWIFT_RT_ENTRY_VISIBILITY</span></div><div class=\"line\">void swift::swift_unownedRetain(<span class=\"type\">HeapObject</span> *object)</div><div class=\"line\">    <span class=\"type\">SWIFT_CC</span>(<span class=\"type\">RegisterPreservingCC_IMPL</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!object)</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">  object-&gt;weakRefCount.increment();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">SWIFT_RT_ENTRY_VISIBILITY</span></div><div class=\"line\">void swift::swift_unownedRelease(<span class=\"type\">HeapObject</span> *object)</div><div class=\"line\">    <span class=\"type\">SWIFT_CC</span>(<span class=\"type\">RegisterPreservingCC_IMPL</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!object)</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (object-&gt;weakRefCount.decrementShouldDeallocate()) &#123;</div><div class=\"line\">    <span class=\"comment\">// Only class objects can be weak-retained and weak-released.</span></div><div class=\"line\">    auto metadata = object-&gt;metadata;</div><div class=\"line\">    <span class=\"built_in\">assert</span>(metadata-&gt;isClassObject());</div><div class=\"line\">    auto classMetadata = static_cast&lt;const <span class=\"type\">ClassMetadata</span>*&gt;(metadata);</div><div class=\"line\">    <span class=\"built_in\">assert</span>(classMetadata-&gt;isTypeMetadata());</div><div class=\"line\">    <span class=\"type\">SWIFT_RT_ENTRY_CALL</span>(swift_slowDealloc)</div><div class=\"line\">        (object, classMetadata-&gt;getInstanceSize(),</div><div class=\"line\">         classMetadata-&gt;getInstanceAlignMask());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>swift_unownedRetain 是 unowned_retain 的具体实现，简单地进行 unowned 引用计数的原子增加操作（这里定义为weakRefCount），swift_unownedRelease 更加复杂，原因之前也描述过，当没有其他 unowned 引用存在时，它需要执行对象的析构操作。</p>\n<p>但是整体来讲都不复杂，在这里可以看到 doDecrementShouldDeallocate 方法，这个方法在上面代码中被一个命名类似的方法调用了。这个方法没有做太多，swift_slowDealloc 只是释放给定的指针。</p>\n<p>到此已经有了一个对象的 unowned 引用，另外一个指令，strong_retain_unowned 用来创建一个强引用：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">SWIFT_RT_ENTRY_VISIBILITY</span></div><div class=\"line\">void swift::swift_unownedRetainStrong(<span class=\"type\">HeapObject</span> *object)</div><div class=\"line\">    <span class=\"type\">SWIFT_CC</span>(<span class=\"type\">RegisterPreservingCC_IMPL</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!object)</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  <span class=\"built_in\">assert</span>(object-&gt;weakRefCount.getCount() &amp;&amp;</div><div class=\"line\">         <span class=\"string\">\"object is not currently weakly retained\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (! object-&gt;refCount.tryIncrement())</div><div class=\"line\">    _swift_abortRetainUnowned(object);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为弱引用应该指向了这个对象，要使用断言来验证对象是否被弱引用，一旦断言通过，将尝试进行增加强引用计数的操作。一旦对象在进程中已经被释放，尝试将会失败。</p>\n<p>所有类似于 tryIncrement 通过某种形式修改引用计数的方法都放到 RefCount.h 中，需要使用原子操作进行这些任务。</p>\n<p>接下来讨论下 weak 引用的的实现，正如之前看到的那样，swift_weakLoadStrong 用来获取容器中可选值中强引用的对象。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">HeapObject</span> *swift::swift_weakLoadStrong(<span class=\"type\">WeakReference</span> *ref) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (ref-&gt;<span class=\"type\">Value</span> == (uintptr_t)nullptr) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> nullptr;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// ref 可能被其他线程访问</span></div><div class=\"line\">  auto ptr = __atomic_fetch_or(&amp;ref-&gt;<span class=\"type\">Value</span>, <span class=\"type\">WR_READING</span>, __ATOMIC_RELAXED);</div><div class=\"line\">  <span class=\"keyword\">while</span> (ptr &amp; <span class=\"type\">WR_READING</span>) &#123;</div><div class=\"line\">    short <span class=\"built_in\">c</span> = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (__atomic_load_n(&amp;ref-&gt;<span class=\"type\">Value</span>, __ATOMIC_RELAXED) &amp; <span class=\"type\">WR_READING</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (++<span class=\"built_in\">c</span> == <span class=\"type\">WR_SPINLIMIT</span>) &#123;</div><div class=\"line\">        std::this_thread::yield();</div><div class=\"line\">        <span class=\"built_in\">c</span> -= <span class=\"number\">1</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ptr = __atomic_fetch_or(&amp;ref-&gt;<span class=\"type\">Value</span>, <span class=\"type\">WR_READING</span>, __ATOMIC_RELAXED);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  auto object = (<span class=\"type\">HeapObject</span>*)(ptr &amp; ~<span class=\"type\">WR_NATIVE</span>);</div><div class=\"line\">  <span class=\"keyword\">if</span> (object == nullptr) &#123;</div><div class=\"line\">    __atomic_store_n(&amp;ref-&gt;<span class=\"type\">Value</span>, (uintptr_t)nullptr, __ATOMIC_RELAXED);</div><div class=\"line\">    <span class=\"keyword\">return</span> nullptr;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (object-&gt;refCount.isDeallocating()) &#123;</div><div class=\"line\">    __atomic_store_n(&amp;ref-&gt;<span class=\"type\">Value</span>, (uintptr_t)nullptr, __ATOMIC_RELAXED);</div><div class=\"line\">    <span class=\"type\">SWIFT_RT_ENTRY_CALL</span>(swift_unownedRelease)(object);</div><div class=\"line\">    <span class=\"keyword\">return</span> nullptr;</div><div class=\"line\">  &#125;</div><div class=\"line\">  auto result = swift_tryRetain(object);</div><div class=\"line\">  __atomic_store_n(&amp;ref-&gt;<span class=\"type\">Value</span>, ptr, __ATOMIC_RELAXED);</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个实现中，获取一个强引用需要更多复杂同步操作，在多线程竞争严重的情况下，会带来性能损耗。</p>\n<p>在这里第一次出现的 WeakReference 对象，是一个简单的结构体，包含一个整型值字段指向目标对象，目标对象是使用 HeapObject 类来承载的每一个运行时的 Swift 对象。</p>\n<p>在 weak 引用询问当前线程设置的 WR_READING 标识之后，从 WeakReference 容器中获取 Swift 对象，如果对象不再有效，或者在等待获取资源时，它变成可以进行析构，当前的引用会被设置为 null。</p>\n<p>如果对象依然有效，获取对象的尝试将会成功。</p>\n<p>因此，从这个角度来讲，对 weak 引用的常规操作性能比 unowned 引用的更低（但是主要的问题还是在可选值操作上面）。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>保守的使用 weak 引用是否明智呢？答案是否定的，无论是从性能的角度还是代码清晰的角度而言。</p>\n<p>使用正确的捕获修饰符类型，明确的表明代码中的生命周期特性，当其他人或者你自己在读你的代码时不容易误解。</p>\n<h2 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h2><p>1、苹果第一次讨论 weak/unowned 争议可以查看这里，之后在 twitter 上 Joe Groff 对此也进行了讨论，并且被 Michael Tsai 总结成文。<br>这篇文章从意图角度出发，提供了完整并且可操作的解释。</p>\n<p>2、从维基百科中可以找到关于 AST 的解释，还可以从 Slava Pestov 的这篇文章中看到关于 Swift 编译器中如何实现 AST 的一些细节。</p>\n<p>3、关于 SIL 的更多信息，请查看详尽的官方 SIL 指南，还有 2015 LLVM 开发者会议的视频。Lex Chou 写的 SIL 快速指南可以点击这里查看。</p>\n<p>4、查看在 Swift 中如何进行名称粉碎（name mangling）的细节，请查看 Lex Chou 的这篇文章。</p>\n<p>5、Mike Ash 在他的 Friday Q&amp;A 中的一篇文章中讨论了如何实现 weak 引用的一种实践方法，这种方法与目前 Swift 的方法对比起来有一些过时，但是其中的解释依然值得参考。</p>\n<blockquote>\n<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href=\"http://swift.gg。\">http://swift.gg。</a></p>\n</blockquote>\n<hr>\n<p>文章转自 <a href=\"http://swift.gg/2017/05/16/unowned-or-weak-lifetime-and-performance/\">SwiftGG</a></p>"},{"title":"sonarqube-note","date":"2017-02-07T02:16:58.000Z","_content":"\n### 步骤\n\nGet Started in Two Minutes\n1. Download and unzip the SonarQube distribution (let's say in \"C:\\sonarqube\" or \"/etc/sonarqube\")\n2. Start the SonarQube server:\n```\n# On Windows, execute:\nC:\\sonarqube\\bin\\windows-x86-xx\\StartSonar.bat\n \n# On other operating system, execute:\n/etc/sonarqube/bin/[OS]/sonar.sh console\n```\n3. Download and unzip the SonarQube Scanner (let's say in \"C:\\sonar-scanner\" or \"/etc/sonar-scanner\")\n4. Download and unzip some project samples (let's say in \"C:\\sonar-scanning-examples\" or \"/etc/sonar-scanning-examples\")\n5. Analyze a project:\n```\n# On Windows:\ncd C:\\sonar-scanning-examples\\sonarqube-scanner\nC:\\sonar-scanner\\bin\\sonar-scanner.bat\n \n# On other operating system:\ncd /etc/sonar-scanning-examples/sonarqube-scanner\n/etc/sonar-scanner/bin/sonar-scanner\n```\n6. Browse the results at http://localhost:9000 (default System administrator credentials are admin/admin)\n\n\n### 文档\n- [docs.sonarqube.org](https://docs.sonarqube.org/display/HOME/SonarQube+Platform)\n- \n","source":"_posts/sonarqube-note.md","raw":"---\ntitle: sonarqube-note\ndate: 2017-02-07 10:16:58\ntags:\ncategories:\n\t- 工具\n---\n\n### 步骤\n\nGet Started in Two Minutes\n1. Download and unzip the SonarQube distribution (let's say in \"C:\\sonarqube\" or \"/etc/sonarqube\")\n2. Start the SonarQube server:\n```\n# On Windows, execute:\nC:\\sonarqube\\bin\\windows-x86-xx\\StartSonar.bat\n \n# On other operating system, execute:\n/etc/sonarqube/bin/[OS]/sonar.sh console\n```\n3. Download and unzip the SonarQube Scanner (let's say in \"C:\\sonar-scanner\" or \"/etc/sonar-scanner\")\n4. Download and unzip some project samples (let's say in \"C:\\sonar-scanning-examples\" or \"/etc/sonar-scanning-examples\")\n5. Analyze a project:\n```\n# On Windows:\ncd C:\\sonar-scanning-examples\\sonarqube-scanner\nC:\\sonar-scanner\\bin\\sonar-scanner.bat\n \n# On other operating system:\ncd /etc/sonar-scanning-examples/sonarqube-scanner\n/etc/sonar-scanner/bin/sonar-scanner\n```\n6. Browse the results at http://localhost:9000 (default System administrator credentials are admin/admin)\n\n\n### 文档\n- [docs.sonarqube.org](https://docs.sonarqube.org/display/HOME/SonarQube+Platform)\n- \n","slug":"sonarqube-note","published":1,"updated":"2017-05-16T04:24:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfoc001fkhuvnmipzp6x","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>Get Started in Two Minutes</p>\n<ol>\n<li>Download and unzip the SonarQube distribution (let’s say in “C:\\sonarqube” or “/etc/sonarqube”)</li>\n<li><p>Start the SonarQube server:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># On Windows, execute:</div><div class=\"line\">C:\\sonarqube\\bin\\windows-x86-xx\\StartSonar.bat</div><div class=\"line\"> </div><div class=\"line\"># On other operating system, execute:</div><div class=\"line\">/etc/sonarqube/bin/[OS]/sonar.sh console</div></pre></td></tr></table></figure>\n</li>\n<li><p>Download and unzip the SonarQube Scanner (let’s say in “C:\\sonar-scanner” or “/etc/sonar-scanner”)</p>\n</li>\n<li>Download and unzip some project samples (let’s say in “C:\\sonar-scanning-examples” or “/etc/sonar-scanning-examples”)</li>\n<li><p>Analyze a project:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># On Windows:</div><div class=\"line\">cd C:\\sonar-scanning-examples\\sonarqube-scanner</div><div class=\"line\">C:\\sonar-scanner\\bin\\sonar-scanner.bat</div><div class=\"line\"> </div><div class=\"line\"># On other operating system:</div><div class=\"line\">cd /etc/sonar-scanning-examples/sonarqube-scanner</div><div class=\"line\">/etc/sonar-scanner/bin/sonar-scanner</div></pre></td></tr></table></figure>\n</li>\n<li><p>Browse the results at <a href=\"http://localhost:9000\" target=\"_blank\" rel=\"external\">http://localhost:9000</a> (default System administrator credentials are admin/admin)</p>\n</li>\n</ol>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ul>\n<li><a href=\"https://docs.sonarqube.org/display/HOME/SonarQube+Platform\" target=\"_blank\" rel=\"external\">docs.sonarqube.org</a></li>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>Get Started in Two Minutes</p>\n<ol>\n<li>Download and unzip the SonarQube distribution (let’s say in “C:\\sonarqube” or “/etc/sonarqube”)</li>\n<li><p>Start the SonarQube server:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># On Windows, execute:</div><div class=\"line\">C:\\sonarqube\\bin\\windows-x86-xx\\StartSonar.bat</div><div class=\"line\"> </div><div class=\"line\"># On other operating system, execute:</div><div class=\"line\">/etc/sonarqube/bin/[OS]/sonar.sh console</div></pre></td></tr></table></figure>\n</li>\n<li><p>Download and unzip the SonarQube Scanner (let’s say in “C:\\sonar-scanner” or “/etc/sonar-scanner”)</p>\n</li>\n<li>Download and unzip some project samples (let’s say in “C:\\sonar-scanning-examples” or “/etc/sonar-scanning-examples”)</li>\n<li><p>Analyze a project:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># On Windows:</div><div class=\"line\">cd C:\\sonar-scanning-examples\\sonarqube-scanner</div><div class=\"line\">C:\\sonar-scanner\\bin\\sonar-scanner.bat</div><div class=\"line\"> </div><div class=\"line\"># On other operating system:</div><div class=\"line\">cd /etc/sonar-scanning-examples/sonarqube-scanner</div><div class=\"line\">/etc/sonar-scanner/bin/sonar-scanner</div></pre></td></tr></table></figure>\n</li>\n<li><p>Browse the results at <a href=\"http://localhost:9000\">http://localhost:9000</a> (default System administrator credentials are admin/admin)</p>\n</li>\n</ol>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ul>\n<li><a href=\"https://docs.sonarqube.org/display/HOME/SonarQube+Platform\">docs.sonarqube.org</a></li>\n<li></li>\n</ul>\n"},{"title":"RxSwift语法笔记","date":"2017-04-08T06:03:18.000Z","_content":"\n记录RxSwift在使用过程中的一些常用语法。\n\n<!--more-->\n\n## 说明\n按照[RxSwift 入坑手册 Part0 - 基础概念](https://blog.callmewhy.com/2015/09/21/rxswift-getting-started-0/)格式进行补充。\n\n\n## SupportCode\n在进入正题之前，先看下项目里的 `SupportCode.swift` ，主要为 `playground` 提供了两个便利函数。\n\n一个是 `example` 函数，专门用来写示例代码的，统一输出 log 便于标记浏览，同时还能保持变量不污染全局：\n\n```swift\npublic func example(description: String, action: () -> ()) {\n    print(\"\\n--- \\(description) example ---\")\n    action()\n}\n```\n\n另一个是 `delay` 函数，通过 `dispatch_after` 用来演示延时的：\n\n```swift\npublic func delay(delay:Double, closure:()->()) {\n    dispatch_after(\n        dispatch_time(\n            DISPATCH_TIME_NOW,\n            Int64(delay * Double(NSEC_PER_SEC))\n        ),\n        dispatch_get_main_queue(), closure)\n}\n```\n\n## Introduction\n\n主要介绍了 Rx 的基础： `Observable` 。 `Observable<Element>` 是观察者模式中被观察的对象，相当于一个事件序列 (`GeneratorType`) ，会向订阅者发送新产生的事件信息。事件信息分为三种：\n\n - Next(value) 表示新的事件数据。\n - Completed 表示事件序列的完结。\n - Error 同样表示完结，但是代表异常导致的完结。\n（打个岔：协议命名，想起来上午汤哥在微博说的一段话：\n\n> 另外，我觉得 protocol 名字用形容词会更加语义分明，比如 Swift : Flyable, Killable, Visible。全用名词的话显得比较生硬，比如 Swift : Head, Wings, Ass。\n\n### empty\n\n`empty` 是一个空的序列，它只发送 `.Completed` 消息。\n\n```swift\nexample(\"empty\") {\n    let emptySequence: Observable<Int> = empty()\n    let subscription = emptySequence\n        .subscribe { event in\n            print(event)\n        }\n}\n--- empty example ---\nCompleted\n```\n\n\n### never\n\n`never` 是没有任何元素、也不会发送任何事件的空序列。\n\n```swift\nexample(\"never\") {\n    let neverSequence: Observable<String> = never()\n    let subscription = neverSequence\n        .subscribe { _ in\n            print(\"This block is never called.\")\n        }\n}\n\n--- never example ---\n```\n### just\n\n`just` 是只包含一个元素的序列，它会先发送 `.Next(value)` ，然后发送 `.Completed` 。\n\n```swift\nexample(\"just\") {\n    let singleElementSequence = just(32)\n    let subscription = singleElementSequence\n        .subscribe { event in\n            print(event)\n        }\n}\n--- just example ---\nNext(32)\nCompleted\nsequenceOf\n```\n\n`sequenceOf` 可以把一系列元素转换成事件序列。\n\n```swift\nexample(\"sequenceOf\") {\n    let sequenceOfElements/* : Observable<Int> */ = sequenceOf(0, 1, 2, 3)\n    let subscription = sequenceOfElements\n        .subscribe { event in\n            print(event)\n        }\n}\n--- sequenceOf example ---\nNext(0)\nNext(1)\nNext(2)\nNext(3)\nCompleted\nfrom\n```\n\n`from` 是通过 `asObservable()` 方法把 Swift 中的序列 (`SequenceType`) 转换成事件序列。\n\n```swift\nexample(\"from\") {\n    let sequenceFromArray = [1, 2, 3, 4, 5].asObservable()\n    let subscription = sequenceFromArray\n        .subscribe { event in\n            print(event)\n        }\n}\n--- from example ---\nNext(1)\nNext(2)\nNext(3)\nNext(4)\nNext(5)\nCompleted\n```\n\n### create\n\n`create` 可以通过闭包创建序列，通过 `.on(e: Event)` 添加事件。\n\n```swift\nexample(\"create\") {\n    let myJust = { (singleElement: Int) -> Observable<Int> in\n        return create { observer in\n            observer.on(.Next(singleElement))\n            observer.on(.Completed)\n            return NopDisposable.instance\n        }\n    }\n    let subscription = myJust(5)\n        .subscribe { event in\n            print(event)\n        }\n}\n--- create example ---\nNext(5)\nCompleted\n```\n\n### failWith\n\n`failWith` 创建一个没有元素的序列，只会发送失败 (`.Error`) 事件。\n\n```swift\nexample(\"failWith\") {\n    let error = NSError(domain: \"Test\", code: -1, userInfo: nil)\n    let erroredSequence: Observable<Int> = failWith(error)\n    let subscription = erroredSequence\n        .subscribe { event in\n            print(event)\n        }\n}\n--- failWith example ---\nError(Error Domain=Test Code=-1 \"The operation couldn’t be completed. (Test error -1.)\")\n```\n\n### deferred\n\n`deferred` 会等到有订阅者的时候再通过工厂方法创建 `Observable` 对象，每个订阅者订阅的对象都是内容相同而完全独立的序列。\n\n```swift\nexample(\"deferred\") {\n    let deferredSequence: Observable<Int> = deferred {\n        print(\"creating\")\n        return create { observer in\n            print(\"emmiting\")\n            observer.on(.Next(0))\n            observer.on(.Next(1))\n            observer.on(.Next(2))\n            return NopDisposable.instance\n        }\n    }\n    print(\"go\")\n    deferredSequence\n        .subscribe { event in\n            print(event)\n    }\n    deferredSequence\n        .subscribe { event in\n            print(event)\n        }\n}\n--- deferred example ---\ngo\ncreating\nemmiting\nNext(0)\nNext(1)\nNext(2)\ncreating\nemmiting\nNext(0)\nNext(1)\nNext(2)\n```\n\n为什么需要 `defferd` 这样一个奇怪的家伙呢？其实这相当于是一种延时加载，因为在添加监听的时候数据未必加载完毕，例如下面这个例子：\n\n```swift\nexample(\"TestDeferred\") {\n    var value: String? = nil\n    var subscription: Observable<String?> = just(value)\n    // got value\n    value = \"Hello!\"\n    subscription.subscribe { event in\n        print(event)\n    }\n}\n--- TestDeferred example ---\nNext(nil)\nCompleted\n```\n\n如果使用 `deffered` 则可以正常显示想要的数据：\n\n```swift\nexample(\"TestDeferred\") {\n    var value: String? = nil\n    var subscription: Observable<String?> = deferred {\n        return just(value)\n    }\n    // got value\n    value = \"Hello!\"\n    subscription.subscribe { event in\n        print(event)\n    }\n}\n--- TestDeferred example ---\nNext(Optional(\"Hello!\"))\nCompleted\n```\n\n## Subjects\n\n接下来是关于 `Subject` 的内容。 `Subject` 可以看做是一种代理和桥梁。它既是订阅者又是订阅源，这意味着它既可以订阅其他 `Observable` 对象，同时又可以对它的订阅者们发送事件。\n\n如果把 `Observable` 理解成不断输出事件的水管，那 `Subject` 就是套在上面的水龙头。它既怼着一根不断出水的水管，同时也向外面输送着新鲜水源。如果你直接用水杯接着水管的水，那可能导出来什么王水胶水完全把持不住；如果你在水龙头下面接着水，那你可以随心所欲的调成你想要的水速和水温。\n\n（好吧上面一段文档里没有，是我瞎掰的，如果理解错了还望打脸(￣ε(#￣)☆╰╮(￣▽￣///))\n\n在开始下面的代码之前，先定义一个辅助函数用于输出数据：\n\n```swift\nfunc writeSequenceToConsole<O: ObservableType>(name: String, sequence: O) {\n    sequence\n        .subscribe { e in\n            print(\"Subscription: \\(name), event: \\(e)\")\n        }\n}\n```\n\n### PublishSubject\n\n`PublishSubject` 会发送订阅者从订阅之后的事件序列。\n\n```swift\nexample(\"PublishSubject\") {\n    let subject = PublishSubject<String>()\n    writeSequenceToConsole(\"1\", sequence: subject)\n    subject.on(.Next(\"a\"))\n    subject.on(.Next(\"b\"))\n    writeSequenceToConsole(\"2\", sequence: subject)\n    subject.on(.Next(\"c\"))\n    subject.on(.Next(\"d\"))\n}\n--- PublishSubject example ---\nSubscription: 1, event: Next(a)\nSubscription: 1, event: Next(b)\nSubscription: 1, event: Next(c)\nSubscription: 2, event: Next(c)\nSubscription: 1, event: Next(d)\nSubscription: 2, event: Next(d)\n```\n\n### ReplaySubject\n\n`ReplaySubject` 在新的订阅对象订阅的时候会补发所有已经发送过的数据队列， `bufferSize` 是缓冲区的大小，决定了补发队列的最大值。如果 `bufferSize` 是1，那么新的订阅者出现的时候就会补发上一个事件，如果是2，则补两个，以此类推。\n\n```swift\nexample(\"ReplaySubject\") {\n    let subject = ReplaySubject<String>.create(bufferSize: 1)\n    writeSequenceToConsole(\"1\", sequence: subject)\n    subject.on(.Next(\"a\"))\n    subject.on(.Next(\"b\"))\n    writeSequenceToConsole(\"2\", sequence: subject)\n    subject.on(.Next(\"c\"))\n    subject.on(.Next(\"d\"))\n}\n--- ReplaySubject example ---\nSubscription: 1, event: Next(a)\nSubscription: 1, event: Next(b)\nSubscription: 2, event: Next(b) // 补了一个 b\nSubscription: 1, event: Next(c)\nSubscription: 2, event: Next(c)\nSubscription: 1, event: Next(d)\nSubscription: 2, event: Next(d)\n```\n\n### BehaviorSubject\n\n`BehaviorSubject` 在新的订阅对象订阅的时候会发送最近发送的事件，如果没有则发送一个默认值。\n\n```swift\nexample(\"BehaviorSubject\") {\n    let subject = BehaviorSubject(value: \"z\")\n    writeSequenceToConsole(\"1\", sequence: subject)\n    subject.on(.Next(\"a\"))\n    subject.on(.Next(\"b\"))\n    writeSequenceToConsole(\"2\", sequence: subject)\n    subject.on(.Next(\"c\"))\n    subject.on(.Completed)\n}\n--- BehaviorSubject example ---\nSubscription: 1, event: Next(z)\nSubscription: 1, event: Next(a)\nSubscription: 1, event: Next(b)\nSubscription: 2, event: Next(b)\nSubscription: 1, event: Next(c)\nSubscription: 2, event: Next(c)\nSubscription: 1, event: Completed\nSubscription: 2, event: Completed\n```\n\n### Variable\n\n`Variable` 是基于 `BehaviorSubject` 的一层封装，它的优势是：不会被显式终结。即：不会收到 `.Completed` 和 `.Error` 这类的终结事件，它会主动在析构的时候发送 `.Complete` 。\n\n```swift\nexample(\"Variable\") {\n    let variable = Variable(\"z\")\n    writeSequenceToConsole(\"1\", sequence: variable)\n    variable.value = \"a\"\n    variable.value = \"b\"\n    writeSequenceToConsole(\"2\", sequence: variable)\n    variable.value = \"c\"\n}\n--- Variable example ---\nSubscription: 1, event: Next(z)\nSubscription: 1, event: Next(a)\nSubscription: 1, event: Next(b)\nSubscription: 2, event: Next(b)\nSubscription: 1, event: Next(c)\nSubscription: 2, event: Next(c)\nSubscription: 1, event: Completed\nSubscription: 2, event: Completed\n```\n\n## Transform\n\n我们可以对序列做一些转换，类似于 `Swift` 中 `CollectionType` 的各种转换。在以前的坑中曾经提到过，可以参考：[函数式的函数](https://blog.callmewhy.com/2015/05/11/functional-reactive-programming-1/#函数式的函数/)。\n\n### map\n\n`map` 就是对每个元素都用函数做一次转换，挨个映射一遍。\n\n```swift\nexample(\"map\") {\n    let originalSequence = sequenceOf(1,2,3)\n    originalSequence\n        .map { $0 * 2 }\n        .subscribe { print($0) }\n}\n--- map example ---\nNext(2)\nNext(4)\nNext(6)\nCompleted\n```\n\n### flatMap\n\n`map` 在做转换的时候很容易出现『升维』的情况，即：转变之后，从一个序列变成了一个序列的序列。\n\n什么是『升维』？在集合中我们可以举这样一个例子，我有一个好友列表 `[p1, p2, p3]`，那么如果要获取我好友的好友的列表，可以这样做：\n\n```swift\nmyFriends.map { $0.getFriends() }\n```\n结果就成了 `[[p1-1, p1-2, p1-3], [p2-1], [p3-1, p3-2]]` ，这就成了好友的好友列表的列表了。这就是一个『升维』的例子。\n\n（以上内容文档中依旧没有，依旧是我瞎掰的，依旧欢迎有错误当面打脸(￣ε(#￣)☆╰╮(￣▽￣///))\n\n在 `Swift` 中，我们可以用 `flatMap` 过滤掉 `map` 之后的 `nil` 结果。在 `Rx` 中， `flatMap` 可以把一个序列转换成一组序列，然后再把这一组序列『拍扁』成一个序列。\n\n```swift\nexample(\"flatMap\") {\n    let sequenceInt = sequenceOf(1, 2, 3)\n    let sequenceString = sequenceOf(\"A\", \"B\", \"--\")\n    sequenceInt\n        .flatMap { int in\n            sequenceString\n        }\n        .subscribe {\n            print($0)\n        }\n}\n--- flatMap example ---\nNext(A)\nNext(B)\nNext(--)\nNext(A)\nNext(B)\nNext(--)\nNext(A)\nNext(B)\nNext(--)\nCompleted\n```\n\n### scan\n\n`scan` 有点像 `reduce` ，它会把每次的运算结果累积起来，作为下一次运算的输入值。\n\n```swift\nexample(\"scan\") {\n    let sequenceToSum = sequenceOf(0, 1, 2, 3, 4, 5)\n    sequenceToSum\n        .scan(0) { acum, elem in\n            acum + elem\n        }\n        .subscribe {\n            print($0)\n        }\n}\n--- scan example ---\nNext(0)\nNext(1)\nNext(3)\nNext(6)\nNext(10)\nNext(15)\nCompleted\n```\n\n## Filtering\n\n除了上面的各种转换，我们还可以对序列进行过滤。\n\n### filter\n\n`filter` 只会让符合条件的元素通过。\n\n```swift\nexample(\"filter\") {\n    let subscription = sequenceOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n        .filter {\n            $0 % 2 == 0\n        }\n        .subscribe {\n            print($0)\n        }\n}\n--- filter example ---\nNext(0)\nNext(2)\nNext(4)\nNext(6)\nNext(8)\nCompleted\n```\n\n### distinctUntilChanged\n\n`distinctUntilChanged` 会废弃掉重复的事件。\n\n```swift\nexample(\"distinctUntilChanged\") {\n    let subscription = sequenceOf(1, 2, 3, 1, 1, 4)\n        .distinctUntilChanged()\n        .subscribe {\n            print($0)\n        }\n}\n--- distinctUntilChanged example ---\nNext(1)\nNext(2)\nNext(3)\nNext(1)\nNext(4)\nCompleted\n```\n\n### take\n\n`take` 只获取序列中的前 `n` 个事件，在满足数量之后会自动 `.Completed` 。\n\n```swift\nexample(\"take\") {\n    let subscription = sequenceOf(1, 2, 3, 4, 5, 6)\n        .take(3)\n        .subscribe {\n            print($0)\n        }\n}\n--- take example ---\nNext(1)\nNext(2)\nNext(3)\nCompleted\n```\n\n### throttle VS. debounce\n\n`throttle` 和 `debounce` 目的都是控制某个时间段内事件序列的速度。但是又有差别：\n\n- `debounce` : `空闲控制`  空闲时间必须 `>=` 固定的时间，事件序列才会被放行\n- `throttle` : `频率控制`  事件序列满足 `1/delay` 才会被放行\n\n一般的按钮点击、用户输入、等都属于频率控制，应该使用 `throttle` 。\n\n```swift\nlet searchResults = searchBar.rx.text.orEmpty\n    .throttle(0.3, scheduler: MainScheduler.instance)\n    .distinctUntilChanged()\n    .flatMapLatest { query -> Observable<[Repository]> in\n        if query.isEmpty {\n            return .just([])\n        }\n        return searchGitHub(query)\n            .catchErrorJustReturn([])\n    }\n    .observeOn(MainScheduler.instance)\n```\n\n## Combining\n\n这部分是关于序列的运算，可以将多个序列源进行组合拼装成一个新的事件序列。\n\n### startWith\n\n`startWith` 会在队列开始之前插入一个事件元素。\n\n```swift\nexample(\"startWith\") {\n    let subscription = sequenceOf(4, 5, 6)\n        .startWith(3)\n        .subscribe {\n            print($0)\n        }\n}\n--- startWith example ---\nNext(3)\nNext(4)\nNext(5)\nNext(6)\nCompleted\n```\n\n### combineLatest\n\n如果存在两条事件队列，需要同时监听，那么每当有新的事件发生的时候，`combineLatest` 会将每个队列的最新的一个元素进行合并。\n\n```swift\nexample(\"combineLatest 1\") {\n    let intOb1 = PublishSubject<String>()\n    let intOb2 = PublishSubject<Int>()\n    combineLatest(intOb1, intOb2) {\n        \"\\($0) \\($1)\"\n        }\n        .subscribe {\n            print($0)\n        }\n    intOb1.on(.Next(\"A\"))\n    intOb2.on(.Next(1))\n    intOb1.on(.Next(\"B\"))\n    intOb2.on(.Next(2))\n}\n--- combineLatest 1 example ---\nNext(A 1)\nNext(B 1)\nNext(B 2)\n```\n\n### zip\n\n`zip` 人如其名，就是合并两条队列用的，不过它会等到两个队列的元素一一对应地凑齐了之后再合并，正如[百折不撓的米斯特菜](http://weibo.com/mrgreenhand)所提醒的， `zip` 就像是拉链一样，两根拉链拉着拉着合并到了一根上：\n\n```swift\nexample(\"zip 1\") {\n    let intOb1 = PublishSubject<String>()\n    let intOb2 = PublishSubject<Int>()\n    zip(intOb1, intOb2) {\n        \"\\($0) \\($1)\"\n        }\n        .subscribe {\n            print($0)\n        }\n    intOb1.on(.Next(\"A\"))\n    intOb2.on(.Next(1))\n    intOb1.on(.Next(\"B\"))\n    intOb1.on(.Next(\"C\"))\n    intOb2.on(.Next(2))\n}\n--- zip 1 example ---\nNext(A 1)\nNext(B 2)\n```\n\n### merge\n\n`merge` 就是 `merge` 啦，把两个队列按照顺序组合在一起。\n\n```swift\nexample(\"merge 1\") {\n    let subject1 = PublishSubject<Int>()\n    let subject2 = PublishSubject<Int>()\n    sequenceOf(subject1, subject2)\n        .merge()\n        .subscribeNext { int in\n            print(int)\n        }\n    subject1.on(.Next(1))\n    subject1.on(.Next(2))\n    subject2.on(.Next(3))\n    subject1.on(.Next(4))\n    subject2.on(.Next(5))\n}\n--- merge 1 example ---\n1\n2\n3\n4\n5\n```\n\n### switch\n\n当你的事件序列是一个事件序列的序列 (`Observable<Observable<T>>`) 的时候，（可以理解成二维序列？），可以使用 `switch` 将序列的序列平铺成一维，并且在出现新的序列的时候，自动切换到最新的那个序列上。和 `merge` 相似的是，它也是起到了将多个序列『拍平』成一条序列的作用。\n\n```swift\nexample(\"switchLatest\") {\n    let var1 = Variable(0)\n    let var2 = Variable(200)\n    // var3 is like an Observable<Observable<Int>>\n    let var3 = Variable(var1)\n    let d = var3\n        .switchLatest()\n        .subscribe {\n            print($0)\n        }\n    var1.value = 1\n    var1.value = 2\n    var1.value = 3\n    var1.value = 4\n    var3.value = var2\n    var2.value = 201\n    var1.value = 5\n    var3.value = var1\n    var2.value = 202\n    var1.value = 6\n}\n--- switchLatest example ---\nNext(0)\nNext(1)\nNext(2)\nNext(3)\nNext(4)\nNext(200)\nNext(201)\nNext(5)\nNext(6)\n```\n\n注意，虽然都是『拍平』，但是和 `flatmap` 是不同的， `flatmap` 是将一条序列变成另一条序列，而这变换过程会让维度变高，所以需要『拍平』，而 `switch` 是将本来二维的序列（序列的序列）拍平成了一维的序列。\n\n## Error Handling\n\n在事件序列中，遇到异常也是很正常的事情，有以下几种处理异常的手段。\n\n### catchError\n\n`catchError` 可以捕获异常事件，并且在后面无缝接上另一段事件序列，丝毫没有异常的痕迹。\n\n```swift\nexample(\"catchError 1\") {\n    let sequenceThatFails = PublishSubject<Int>()\n    let recoverySequence = sequenceOf(100, 200)\n    sequenceThatFails\n        .catchError { error in\n            return recoverySequence\n        }\n        .subscribe {\n            print($0)\n        }\n    sequenceThatFails.on(.Next(1))\n    sequenceThatFails.on(.Next(2))\n    sequenceThatFails.on(.Error(NSError(domain: \"Test\", code: 0, userInfo: nil)))\n}\n--- catchError 1 example ---\nNext(1)\nNext(2)\nNext(100)\nNext(200)\nCompleted\n```\n\n### retry\n\n`retry` 顾名思义，就是在出现异常的时候会再去从头订阅事件序列，妄图通过『从头再来』解决异常。\n\n```swift\nexample(\"retry\") {\n    var count = 1 // bad practice, only for example purposes\n    let funnyLookingSequence: Observable<Int> = create { observer in\n        let error = NSError(domain: \"Test\", code: 0, userInfo: nil)\n        observer.on(.Next(0))\n        observer.on(.Next(1))\n        if count < 2 {\n            observer.on(.Error(error))\n            count++\n        }\n        observer.on(.Next(2))\n        observer.on(.Completed)\n        return NopDisposable.instance\n    }\n    funnyLookingSequence\n        .retry()\n        .subscribe {\n            print($0)\n        }\n}\n--- retry example ---\nNext(0)\nNext(1)\nNext(0)\nNext(1)\nNext(2)\nCompleted\n```\n\n## Utility\n\n这里列举了针对事件序列的一些方法。\n\n### subscribe\n\n`subscribe` 在前面已经接触过了，有新的事件就会触发。\n\n```swift\nexample(\"subscribe\") {\n    let sequenceOfInts = PublishSubject<Int>()\n    sequenceOfInts\n        .subscribe {\n            print($0)\n        }\n    sequenceOfInts.on(.Next(1))\n    sequenceOfInts.on(.Completed)\n}\n--- subscribe example ---\nNext(1)\nCompleted\n```\n\n### subscribeNext\n\n`subscribeNext` 也是订阅，但是只订阅 `.Next` 事件。\n\n```swift\nexample(\"subscribeNext\") {\n    let sequenceOfInts = PublishSubject<Int>()\n    sequenceOfInts\n        .subscribeNext {\n            print($0)\n        }\n    sequenceOfInts.on(.Next(1))\n    sequenceOfInts.on(.Completed)\n}\n--- subscribeNext example ---\n1\n```\n\n### subscribeCompleted\n\n`subscribeCompleted` 是只订阅 `.Completed` 完成事件。\n\n```swift\nexample(\"subscribeCompleted\") {\n    let sequenceOfInts = PublishSubject<Int>()\n    sequenceOfInts\n        .subscribeCompleted {\n            print(\"It's completed\")\n        }\n    sequenceOfInts.on(.Next(1))\n    sequenceOfInts.on(.Completed)\n}\n--- subscribeCompleted example ---\nIt's completed\n```\n\n### subscribeError\n\n`subscribeError` 只订阅 `.Error` 失败事件。\n\n```swift\nexample(\"subscribeError\") {\n    let sequenceOfInts = PublishSubject<Int>()\n    sequenceOfInts\n        .subscribeError { error in\n            print(error)\n        }\n    sequenceOfInts.on(.Next(1))\n    sequenceOfInts.on(.Error(NSError(domain: \"Examples\", code: -1, userInfo: nil)))\n}\n--- subscribeError example ---\nError Domain=Examples Code=-1 \"The operation couldn’t be completed. (Examples error -1.)\"\n```\n\n### doOn\n\n`doOn` 可以监听事件，并且在事件发生之前调用。\n\n```swift\nexample(\"doOn\") {\n    let sequenceOfInts = PublishSubject<Int>()\n    sequenceOfInts\n        .doOn {\n            print(\"Intercepted event \\($0)\")\n        }\n        .subscribe {\n            print($0)\n        }\n    sequenceOfInts.on(.Next(1))\n    sequenceOfInts.on(.Completed)\n}\n--- doOn example ---\nIntercepted event Next(1)\nNext(1)\nIntercepted event Completed\nCompleted\n```\n\n## Conditional\n\n我们可以对多个事件序列做一些复杂的逻辑判断。\n\n### takeUntil\n\n`takeUntil` 其实就是 `take` ，它会在终于等到那个事件之后触发 `.Completed` 事件。\n\n```swift\nexample(\"takeUntil\") {\n    let originalSequence = PublishSubject<Int>()\n    let whenThisSendsNextWorldStops = PublishSubject<Int>()\n    originalSequence\n        .takeUntil(whenThisSendsNextWorldStops)\n        .subscribe {\n            print($0)\n        }\n    originalSequence.on(.Next(1))\n    originalSequence.on(.Next(2))\n    whenThisSendsNextWorldStops.on(.Next(1))\n    originalSequence.on(.Next(3))\n}\n--- takeUntil example ---\nNext(1)\nNext(2)\nCompleted\n```\n\n### takeWhile\n\n`takeWhile` 则是可以通过状态语句判断是否继续 `take` 。\n\n```swift\nexample(\"takeWhile\") {\n    let sequence = PublishSubject<Int>()\n    sequence\n        .takeWhile { int in\n            int < 2\n        }\n        .subscribe {\n            print($0)\n        }\n    sequence.on(.Next(1))\n    sequence.on(.Next(2))\n    sequence.on(.Next(3))\n}\n--- takeWhile example ---\nNext(1)\nCompleted\n```\n\n## Aggregate\n\n我们可以对事件序列做一些集合运算。\n\n### concat\n\n`concat` 可以把多个事件序列合并起来。\n\n```swift\nexample(\"concat\") {\n    let var1 = BehaviorSubject(value: 0)\n    let var2 = BehaviorSubject(value: 200)\n    // var3 is like an Observable<Observable<Int>>\n    let var3 = BehaviorSubject(value: var1)\n    let d = var3\n        .concat()\n        .subscribe {\n            print($0)\n        }\n    var1.on(.Next(1))\n    var1.on(.Next(2))\n    var3.on(.Next(var2))\n    var2.on(.Next(201))\n    var1.on(.Next(3))\n    var1.on(.Completed)\n    var2.on(.Next(202))\n}\n--- concat example ---\nNext(0)\nNext(1)\nNext(2)\nNext(3)\nNext(201)\nNext(202)\n```\n\n### reduce\n\n这里的 `reduce` 和 `CollectionType` 中的 `reduce` 是一个意思，都是指通过对一系列数据的运算最后生成一个结果。\n\n```swift\nexample(\"reduce\") {\n    sequenceOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n        .reduce(0, +)\n        .subscribe {\n            print($0)\n        }\n}\n--- reduce example ---\nNext(45)\nCompleted\n```\n\n## Connectable\n\n坑待填，Xcode 里这个操场跑不起来了。\n\n","source":"_posts/rx-dictionary.md","raw":"---\ntitle: RxSwift语法笔记\ndate: 2017-04-08 14:03:18\ntags:\ncategories:\n\t- swift\n\t- RxSwift\n---\n\n记录RxSwift在使用过程中的一些常用语法。\n\n<!--more-->\n\n## 说明\n按照[RxSwift 入坑手册 Part0 - 基础概念](https://blog.callmewhy.com/2015/09/21/rxswift-getting-started-0/)格式进行补充。\n\n\n## SupportCode\n在进入正题之前，先看下项目里的 `SupportCode.swift` ，主要为 `playground` 提供了两个便利函数。\n\n一个是 `example` 函数，专门用来写示例代码的，统一输出 log 便于标记浏览，同时还能保持变量不污染全局：\n\n```swift\npublic func example(description: String, action: () -> ()) {\n    print(\"\\n--- \\(description) example ---\")\n    action()\n}\n```\n\n另一个是 `delay` 函数，通过 `dispatch_after` 用来演示延时的：\n\n```swift\npublic func delay(delay:Double, closure:()->()) {\n    dispatch_after(\n        dispatch_time(\n            DISPATCH_TIME_NOW,\n            Int64(delay * Double(NSEC_PER_SEC))\n        ),\n        dispatch_get_main_queue(), closure)\n}\n```\n\n## Introduction\n\n主要介绍了 Rx 的基础： `Observable` 。 `Observable<Element>` 是观察者模式中被观察的对象，相当于一个事件序列 (`GeneratorType`) ，会向订阅者发送新产生的事件信息。事件信息分为三种：\n\n - Next(value) 表示新的事件数据。\n - Completed 表示事件序列的完结。\n - Error 同样表示完结，但是代表异常导致的完结。\n（打个岔：协议命名，想起来上午汤哥在微博说的一段话：\n\n> 另外，我觉得 protocol 名字用形容词会更加语义分明，比如 Swift : Flyable, Killable, Visible。全用名词的话显得比较生硬，比如 Swift : Head, Wings, Ass。\n\n### empty\n\n`empty` 是一个空的序列，它只发送 `.Completed` 消息。\n\n```swift\nexample(\"empty\") {\n    let emptySequence: Observable<Int> = empty()\n    let subscription = emptySequence\n        .subscribe { event in\n            print(event)\n        }\n}\n--- empty example ---\nCompleted\n```\n\n\n### never\n\n`never` 是没有任何元素、也不会发送任何事件的空序列。\n\n```swift\nexample(\"never\") {\n    let neverSequence: Observable<String> = never()\n    let subscription = neverSequence\n        .subscribe { _ in\n            print(\"This block is never called.\")\n        }\n}\n\n--- never example ---\n```\n### just\n\n`just` 是只包含一个元素的序列，它会先发送 `.Next(value)` ，然后发送 `.Completed` 。\n\n```swift\nexample(\"just\") {\n    let singleElementSequence = just(32)\n    let subscription = singleElementSequence\n        .subscribe { event in\n            print(event)\n        }\n}\n--- just example ---\nNext(32)\nCompleted\nsequenceOf\n```\n\n`sequenceOf` 可以把一系列元素转换成事件序列。\n\n```swift\nexample(\"sequenceOf\") {\n    let sequenceOfElements/* : Observable<Int> */ = sequenceOf(0, 1, 2, 3)\n    let subscription = sequenceOfElements\n        .subscribe { event in\n            print(event)\n        }\n}\n--- sequenceOf example ---\nNext(0)\nNext(1)\nNext(2)\nNext(3)\nCompleted\nfrom\n```\n\n`from` 是通过 `asObservable()` 方法把 Swift 中的序列 (`SequenceType`) 转换成事件序列。\n\n```swift\nexample(\"from\") {\n    let sequenceFromArray = [1, 2, 3, 4, 5].asObservable()\n    let subscription = sequenceFromArray\n        .subscribe { event in\n            print(event)\n        }\n}\n--- from example ---\nNext(1)\nNext(2)\nNext(3)\nNext(4)\nNext(5)\nCompleted\n```\n\n### create\n\n`create` 可以通过闭包创建序列，通过 `.on(e: Event)` 添加事件。\n\n```swift\nexample(\"create\") {\n    let myJust = { (singleElement: Int) -> Observable<Int> in\n        return create { observer in\n            observer.on(.Next(singleElement))\n            observer.on(.Completed)\n            return NopDisposable.instance\n        }\n    }\n    let subscription = myJust(5)\n        .subscribe { event in\n            print(event)\n        }\n}\n--- create example ---\nNext(5)\nCompleted\n```\n\n### failWith\n\n`failWith` 创建一个没有元素的序列，只会发送失败 (`.Error`) 事件。\n\n```swift\nexample(\"failWith\") {\n    let error = NSError(domain: \"Test\", code: -1, userInfo: nil)\n    let erroredSequence: Observable<Int> = failWith(error)\n    let subscription = erroredSequence\n        .subscribe { event in\n            print(event)\n        }\n}\n--- failWith example ---\nError(Error Domain=Test Code=-1 \"The operation couldn’t be completed. (Test error -1.)\")\n```\n\n### deferred\n\n`deferred` 会等到有订阅者的时候再通过工厂方法创建 `Observable` 对象，每个订阅者订阅的对象都是内容相同而完全独立的序列。\n\n```swift\nexample(\"deferred\") {\n    let deferredSequence: Observable<Int> = deferred {\n        print(\"creating\")\n        return create { observer in\n            print(\"emmiting\")\n            observer.on(.Next(0))\n            observer.on(.Next(1))\n            observer.on(.Next(2))\n            return NopDisposable.instance\n        }\n    }\n    print(\"go\")\n    deferredSequence\n        .subscribe { event in\n            print(event)\n    }\n    deferredSequence\n        .subscribe { event in\n            print(event)\n        }\n}\n--- deferred example ---\ngo\ncreating\nemmiting\nNext(0)\nNext(1)\nNext(2)\ncreating\nemmiting\nNext(0)\nNext(1)\nNext(2)\n```\n\n为什么需要 `defferd` 这样一个奇怪的家伙呢？其实这相当于是一种延时加载，因为在添加监听的时候数据未必加载完毕，例如下面这个例子：\n\n```swift\nexample(\"TestDeferred\") {\n    var value: String? = nil\n    var subscription: Observable<String?> = just(value)\n    // got value\n    value = \"Hello!\"\n    subscription.subscribe { event in\n        print(event)\n    }\n}\n--- TestDeferred example ---\nNext(nil)\nCompleted\n```\n\n如果使用 `deffered` 则可以正常显示想要的数据：\n\n```swift\nexample(\"TestDeferred\") {\n    var value: String? = nil\n    var subscription: Observable<String?> = deferred {\n        return just(value)\n    }\n    // got value\n    value = \"Hello!\"\n    subscription.subscribe { event in\n        print(event)\n    }\n}\n--- TestDeferred example ---\nNext(Optional(\"Hello!\"))\nCompleted\n```\n\n## Subjects\n\n接下来是关于 `Subject` 的内容。 `Subject` 可以看做是一种代理和桥梁。它既是订阅者又是订阅源，这意味着它既可以订阅其他 `Observable` 对象，同时又可以对它的订阅者们发送事件。\n\n如果把 `Observable` 理解成不断输出事件的水管，那 `Subject` 就是套在上面的水龙头。它既怼着一根不断出水的水管，同时也向外面输送着新鲜水源。如果你直接用水杯接着水管的水，那可能导出来什么王水胶水完全把持不住；如果你在水龙头下面接着水，那你可以随心所欲的调成你想要的水速和水温。\n\n（好吧上面一段文档里没有，是我瞎掰的，如果理解错了还望打脸(￣ε(#￣)☆╰╮(￣▽￣///))\n\n在开始下面的代码之前，先定义一个辅助函数用于输出数据：\n\n```swift\nfunc writeSequenceToConsole<O: ObservableType>(name: String, sequence: O) {\n    sequence\n        .subscribe { e in\n            print(\"Subscription: \\(name), event: \\(e)\")\n        }\n}\n```\n\n### PublishSubject\n\n`PublishSubject` 会发送订阅者从订阅之后的事件序列。\n\n```swift\nexample(\"PublishSubject\") {\n    let subject = PublishSubject<String>()\n    writeSequenceToConsole(\"1\", sequence: subject)\n    subject.on(.Next(\"a\"))\n    subject.on(.Next(\"b\"))\n    writeSequenceToConsole(\"2\", sequence: subject)\n    subject.on(.Next(\"c\"))\n    subject.on(.Next(\"d\"))\n}\n--- PublishSubject example ---\nSubscription: 1, event: Next(a)\nSubscription: 1, event: Next(b)\nSubscription: 1, event: Next(c)\nSubscription: 2, event: Next(c)\nSubscription: 1, event: Next(d)\nSubscription: 2, event: Next(d)\n```\n\n### ReplaySubject\n\n`ReplaySubject` 在新的订阅对象订阅的时候会补发所有已经发送过的数据队列， `bufferSize` 是缓冲区的大小，决定了补发队列的最大值。如果 `bufferSize` 是1，那么新的订阅者出现的时候就会补发上一个事件，如果是2，则补两个，以此类推。\n\n```swift\nexample(\"ReplaySubject\") {\n    let subject = ReplaySubject<String>.create(bufferSize: 1)\n    writeSequenceToConsole(\"1\", sequence: subject)\n    subject.on(.Next(\"a\"))\n    subject.on(.Next(\"b\"))\n    writeSequenceToConsole(\"2\", sequence: subject)\n    subject.on(.Next(\"c\"))\n    subject.on(.Next(\"d\"))\n}\n--- ReplaySubject example ---\nSubscription: 1, event: Next(a)\nSubscription: 1, event: Next(b)\nSubscription: 2, event: Next(b) // 补了一个 b\nSubscription: 1, event: Next(c)\nSubscription: 2, event: Next(c)\nSubscription: 1, event: Next(d)\nSubscription: 2, event: Next(d)\n```\n\n### BehaviorSubject\n\n`BehaviorSubject` 在新的订阅对象订阅的时候会发送最近发送的事件，如果没有则发送一个默认值。\n\n```swift\nexample(\"BehaviorSubject\") {\n    let subject = BehaviorSubject(value: \"z\")\n    writeSequenceToConsole(\"1\", sequence: subject)\n    subject.on(.Next(\"a\"))\n    subject.on(.Next(\"b\"))\n    writeSequenceToConsole(\"2\", sequence: subject)\n    subject.on(.Next(\"c\"))\n    subject.on(.Completed)\n}\n--- BehaviorSubject example ---\nSubscription: 1, event: Next(z)\nSubscription: 1, event: Next(a)\nSubscription: 1, event: Next(b)\nSubscription: 2, event: Next(b)\nSubscription: 1, event: Next(c)\nSubscription: 2, event: Next(c)\nSubscription: 1, event: Completed\nSubscription: 2, event: Completed\n```\n\n### Variable\n\n`Variable` 是基于 `BehaviorSubject` 的一层封装，它的优势是：不会被显式终结。即：不会收到 `.Completed` 和 `.Error` 这类的终结事件，它会主动在析构的时候发送 `.Complete` 。\n\n```swift\nexample(\"Variable\") {\n    let variable = Variable(\"z\")\n    writeSequenceToConsole(\"1\", sequence: variable)\n    variable.value = \"a\"\n    variable.value = \"b\"\n    writeSequenceToConsole(\"2\", sequence: variable)\n    variable.value = \"c\"\n}\n--- Variable example ---\nSubscription: 1, event: Next(z)\nSubscription: 1, event: Next(a)\nSubscription: 1, event: Next(b)\nSubscription: 2, event: Next(b)\nSubscription: 1, event: Next(c)\nSubscription: 2, event: Next(c)\nSubscription: 1, event: Completed\nSubscription: 2, event: Completed\n```\n\n## Transform\n\n我们可以对序列做一些转换，类似于 `Swift` 中 `CollectionType` 的各种转换。在以前的坑中曾经提到过，可以参考：[函数式的函数](https://blog.callmewhy.com/2015/05/11/functional-reactive-programming-1/#函数式的函数/)。\n\n### map\n\n`map` 就是对每个元素都用函数做一次转换，挨个映射一遍。\n\n```swift\nexample(\"map\") {\n    let originalSequence = sequenceOf(1,2,3)\n    originalSequence\n        .map { $0 * 2 }\n        .subscribe { print($0) }\n}\n--- map example ---\nNext(2)\nNext(4)\nNext(6)\nCompleted\n```\n\n### flatMap\n\n`map` 在做转换的时候很容易出现『升维』的情况，即：转变之后，从一个序列变成了一个序列的序列。\n\n什么是『升维』？在集合中我们可以举这样一个例子，我有一个好友列表 `[p1, p2, p3]`，那么如果要获取我好友的好友的列表，可以这样做：\n\n```swift\nmyFriends.map { $0.getFriends() }\n```\n结果就成了 `[[p1-1, p1-2, p1-3], [p2-1], [p3-1, p3-2]]` ，这就成了好友的好友列表的列表了。这就是一个『升维』的例子。\n\n（以上内容文档中依旧没有，依旧是我瞎掰的，依旧欢迎有错误当面打脸(￣ε(#￣)☆╰╮(￣▽￣///))\n\n在 `Swift` 中，我们可以用 `flatMap` 过滤掉 `map` 之后的 `nil` 结果。在 `Rx` 中， `flatMap` 可以把一个序列转换成一组序列，然后再把这一组序列『拍扁』成一个序列。\n\n```swift\nexample(\"flatMap\") {\n    let sequenceInt = sequenceOf(1, 2, 3)\n    let sequenceString = sequenceOf(\"A\", \"B\", \"--\")\n    sequenceInt\n        .flatMap { int in\n            sequenceString\n        }\n        .subscribe {\n            print($0)\n        }\n}\n--- flatMap example ---\nNext(A)\nNext(B)\nNext(--)\nNext(A)\nNext(B)\nNext(--)\nNext(A)\nNext(B)\nNext(--)\nCompleted\n```\n\n### scan\n\n`scan` 有点像 `reduce` ，它会把每次的运算结果累积起来，作为下一次运算的输入值。\n\n```swift\nexample(\"scan\") {\n    let sequenceToSum = sequenceOf(0, 1, 2, 3, 4, 5)\n    sequenceToSum\n        .scan(0) { acum, elem in\n            acum + elem\n        }\n        .subscribe {\n            print($0)\n        }\n}\n--- scan example ---\nNext(0)\nNext(1)\nNext(3)\nNext(6)\nNext(10)\nNext(15)\nCompleted\n```\n\n## Filtering\n\n除了上面的各种转换，我们还可以对序列进行过滤。\n\n### filter\n\n`filter` 只会让符合条件的元素通过。\n\n```swift\nexample(\"filter\") {\n    let subscription = sequenceOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n        .filter {\n            $0 % 2 == 0\n        }\n        .subscribe {\n            print($0)\n        }\n}\n--- filter example ---\nNext(0)\nNext(2)\nNext(4)\nNext(6)\nNext(8)\nCompleted\n```\n\n### distinctUntilChanged\n\n`distinctUntilChanged` 会废弃掉重复的事件。\n\n```swift\nexample(\"distinctUntilChanged\") {\n    let subscription = sequenceOf(1, 2, 3, 1, 1, 4)\n        .distinctUntilChanged()\n        .subscribe {\n            print($0)\n        }\n}\n--- distinctUntilChanged example ---\nNext(1)\nNext(2)\nNext(3)\nNext(1)\nNext(4)\nCompleted\n```\n\n### take\n\n`take` 只获取序列中的前 `n` 个事件，在满足数量之后会自动 `.Completed` 。\n\n```swift\nexample(\"take\") {\n    let subscription = sequenceOf(1, 2, 3, 4, 5, 6)\n        .take(3)\n        .subscribe {\n            print($0)\n        }\n}\n--- take example ---\nNext(1)\nNext(2)\nNext(3)\nCompleted\n```\n\n### throttle VS. debounce\n\n`throttle` 和 `debounce` 目的都是控制某个时间段内事件序列的速度。但是又有差别：\n\n- `debounce` : `空闲控制`  空闲时间必须 `>=` 固定的时间，事件序列才会被放行\n- `throttle` : `频率控制`  事件序列满足 `1/delay` 才会被放行\n\n一般的按钮点击、用户输入、等都属于频率控制，应该使用 `throttle` 。\n\n```swift\nlet searchResults = searchBar.rx.text.orEmpty\n    .throttle(0.3, scheduler: MainScheduler.instance)\n    .distinctUntilChanged()\n    .flatMapLatest { query -> Observable<[Repository]> in\n        if query.isEmpty {\n            return .just([])\n        }\n        return searchGitHub(query)\n            .catchErrorJustReturn([])\n    }\n    .observeOn(MainScheduler.instance)\n```\n\n## Combining\n\n这部分是关于序列的运算，可以将多个序列源进行组合拼装成一个新的事件序列。\n\n### startWith\n\n`startWith` 会在队列开始之前插入一个事件元素。\n\n```swift\nexample(\"startWith\") {\n    let subscription = sequenceOf(4, 5, 6)\n        .startWith(3)\n        .subscribe {\n            print($0)\n        }\n}\n--- startWith example ---\nNext(3)\nNext(4)\nNext(5)\nNext(6)\nCompleted\n```\n\n### combineLatest\n\n如果存在两条事件队列，需要同时监听，那么每当有新的事件发生的时候，`combineLatest` 会将每个队列的最新的一个元素进行合并。\n\n```swift\nexample(\"combineLatest 1\") {\n    let intOb1 = PublishSubject<String>()\n    let intOb2 = PublishSubject<Int>()\n    combineLatest(intOb1, intOb2) {\n        \"\\($0) \\($1)\"\n        }\n        .subscribe {\n            print($0)\n        }\n    intOb1.on(.Next(\"A\"))\n    intOb2.on(.Next(1))\n    intOb1.on(.Next(\"B\"))\n    intOb2.on(.Next(2))\n}\n--- combineLatest 1 example ---\nNext(A 1)\nNext(B 1)\nNext(B 2)\n```\n\n### zip\n\n`zip` 人如其名，就是合并两条队列用的，不过它会等到两个队列的元素一一对应地凑齐了之后再合并，正如[百折不撓的米斯特菜](http://weibo.com/mrgreenhand)所提醒的， `zip` 就像是拉链一样，两根拉链拉着拉着合并到了一根上：\n\n```swift\nexample(\"zip 1\") {\n    let intOb1 = PublishSubject<String>()\n    let intOb2 = PublishSubject<Int>()\n    zip(intOb1, intOb2) {\n        \"\\($0) \\($1)\"\n        }\n        .subscribe {\n            print($0)\n        }\n    intOb1.on(.Next(\"A\"))\n    intOb2.on(.Next(1))\n    intOb1.on(.Next(\"B\"))\n    intOb1.on(.Next(\"C\"))\n    intOb2.on(.Next(2))\n}\n--- zip 1 example ---\nNext(A 1)\nNext(B 2)\n```\n\n### merge\n\n`merge` 就是 `merge` 啦，把两个队列按照顺序组合在一起。\n\n```swift\nexample(\"merge 1\") {\n    let subject1 = PublishSubject<Int>()\n    let subject2 = PublishSubject<Int>()\n    sequenceOf(subject1, subject2)\n        .merge()\n        .subscribeNext { int in\n            print(int)\n        }\n    subject1.on(.Next(1))\n    subject1.on(.Next(2))\n    subject2.on(.Next(3))\n    subject1.on(.Next(4))\n    subject2.on(.Next(5))\n}\n--- merge 1 example ---\n1\n2\n3\n4\n5\n```\n\n### switch\n\n当你的事件序列是一个事件序列的序列 (`Observable<Observable<T>>`) 的时候，（可以理解成二维序列？），可以使用 `switch` 将序列的序列平铺成一维，并且在出现新的序列的时候，自动切换到最新的那个序列上。和 `merge` 相似的是，它也是起到了将多个序列『拍平』成一条序列的作用。\n\n```swift\nexample(\"switchLatest\") {\n    let var1 = Variable(0)\n    let var2 = Variable(200)\n    // var3 is like an Observable<Observable<Int>>\n    let var3 = Variable(var1)\n    let d = var3\n        .switchLatest()\n        .subscribe {\n            print($0)\n        }\n    var1.value = 1\n    var1.value = 2\n    var1.value = 3\n    var1.value = 4\n    var3.value = var2\n    var2.value = 201\n    var1.value = 5\n    var3.value = var1\n    var2.value = 202\n    var1.value = 6\n}\n--- switchLatest example ---\nNext(0)\nNext(1)\nNext(2)\nNext(3)\nNext(4)\nNext(200)\nNext(201)\nNext(5)\nNext(6)\n```\n\n注意，虽然都是『拍平』，但是和 `flatmap` 是不同的， `flatmap` 是将一条序列变成另一条序列，而这变换过程会让维度变高，所以需要『拍平』，而 `switch` 是将本来二维的序列（序列的序列）拍平成了一维的序列。\n\n## Error Handling\n\n在事件序列中，遇到异常也是很正常的事情，有以下几种处理异常的手段。\n\n### catchError\n\n`catchError` 可以捕获异常事件，并且在后面无缝接上另一段事件序列，丝毫没有异常的痕迹。\n\n```swift\nexample(\"catchError 1\") {\n    let sequenceThatFails = PublishSubject<Int>()\n    let recoverySequence = sequenceOf(100, 200)\n    sequenceThatFails\n        .catchError { error in\n            return recoverySequence\n        }\n        .subscribe {\n            print($0)\n        }\n    sequenceThatFails.on(.Next(1))\n    sequenceThatFails.on(.Next(2))\n    sequenceThatFails.on(.Error(NSError(domain: \"Test\", code: 0, userInfo: nil)))\n}\n--- catchError 1 example ---\nNext(1)\nNext(2)\nNext(100)\nNext(200)\nCompleted\n```\n\n### retry\n\n`retry` 顾名思义，就是在出现异常的时候会再去从头订阅事件序列，妄图通过『从头再来』解决异常。\n\n```swift\nexample(\"retry\") {\n    var count = 1 // bad practice, only for example purposes\n    let funnyLookingSequence: Observable<Int> = create { observer in\n        let error = NSError(domain: \"Test\", code: 0, userInfo: nil)\n        observer.on(.Next(0))\n        observer.on(.Next(1))\n        if count < 2 {\n            observer.on(.Error(error))\n            count++\n        }\n        observer.on(.Next(2))\n        observer.on(.Completed)\n        return NopDisposable.instance\n    }\n    funnyLookingSequence\n        .retry()\n        .subscribe {\n            print($0)\n        }\n}\n--- retry example ---\nNext(0)\nNext(1)\nNext(0)\nNext(1)\nNext(2)\nCompleted\n```\n\n## Utility\n\n这里列举了针对事件序列的一些方法。\n\n### subscribe\n\n`subscribe` 在前面已经接触过了，有新的事件就会触发。\n\n```swift\nexample(\"subscribe\") {\n    let sequenceOfInts = PublishSubject<Int>()\n    sequenceOfInts\n        .subscribe {\n            print($0)\n        }\n    sequenceOfInts.on(.Next(1))\n    sequenceOfInts.on(.Completed)\n}\n--- subscribe example ---\nNext(1)\nCompleted\n```\n\n### subscribeNext\n\n`subscribeNext` 也是订阅，但是只订阅 `.Next` 事件。\n\n```swift\nexample(\"subscribeNext\") {\n    let sequenceOfInts = PublishSubject<Int>()\n    sequenceOfInts\n        .subscribeNext {\n            print($0)\n        }\n    sequenceOfInts.on(.Next(1))\n    sequenceOfInts.on(.Completed)\n}\n--- subscribeNext example ---\n1\n```\n\n### subscribeCompleted\n\n`subscribeCompleted` 是只订阅 `.Completed` 完成事件。\n\n```swift\nexample(\"subscribeCompleted\") {\n    let sequenceOfInts = PublishSubject<Int>()\n    sequenceOfInts\n        .subscribeCompleted {\n            print(\"It's completed\")\n        }\n    sequenceOfInts.on(.Next(1))\n    sequenceOfInts.on(.Completed)\n}\n--- subscribeCompleted example ---\nIt's completed\n```\n\n### subscribeError\n\n`subscribeError` 只订阅 `.Error` 失败事件。\n\n```swift\nexample(\"subscribeError\") {\n    let sequenceOfInts = PublishSubject<Int>()\n    sequenceOfInts\n        .subscribeError { error in\n            print(error)\n        }\n    sequenceOfInts.on(.Next(1))\n    sequenceOfInts.on(.Error(NSError(domain: \"Examples\", code: -1, userInfo: nil)))\n}\n--- subscribeError example ---\nError Domain=Examples Code=-1 \"The operation couldn’t be completed. (Examples error -1.)\"\n```\n\n### doOn\n\n`doOn` 可以监听事件，并且在事件发生之前调用。\n\n```swift\nexample(\"doOn\") {\n    let sequenceOfInts = PublishSubject<Int>()\n    sequenceOfInts\n        .doOn {\n            print(\"Intercepted event \\($0)\")\n        }\n        .subscribe {\n            print($0)\n        }\n    sequenceOfInts.on(.Next(1))\n    sequenceOfInts.on(.Completed)\n}\n--- doOn example ---\nIntercepted event Next(1)\nNext(1)\nIntercepted event Completed\nCompleted\n```\n\n## Conditional\n\n我们可以对多个事件序列做一些复杂的逻辑判断。\n\n### takeUntil\n\n`takeUntil` 其实就是 `take` ，它会在终于等到那个事件之后触发 `.Completed` 事件。\n\n```swift\nexample(\"takeUntil\") {\n    let originalSequence = PublishSubject<Int>()\n    let whenThisSendsNextWorldStops = PublishSubject<Int>()\n    originalSequence\n        .takeUntil(whenThisSendsNextWorldStops)\n        .subscribe {\n            print($0)\n        }\n    originalSequence.on(.Next(1))\n    originalSequence.on(.Next(2))\n    whenThisSendsNextWorldStops.on(.Next(1))\n    originalSequence.on(.Next(3))\n}\n--- takeUntil example ---\nNext(1)\nNext(2)\nCompleted\n```\n\n### takeWhile\n\n`takeWhile` 则是可以通过状态语句判断是否继续 `take` 。\n\n```swift\nexample(\"takeWhile\") {\n    let sequence = PublishSubject<Int>()\n    sequence\n        .takeWhile { int in\n            int < 2\n        }\n        .subscribe {\n            print($0)\n        }\n    sequence.on(.Next(1))\n    sequence.on(.Next(2))\n    sequence.on(.Next(3))\n}\n--- takeWhile example ---\nNext(1)\nCompleted\n```\n\n## Aggregate\n\n我们可以对事件序列做一些集合运算。\n\n### concat\n\n`concat` 可以把多个事件序列合并起来。\n\n```swift\nexample(\"concat\") {\n    let var1 = BehaviorSubject(value: 0)\n    let var2 = BehaviorSubject(value: 200)\n    // var3 is like an Observable<Observable<Int>>\n    let var3 = BehaviorSubject(value: var1)\n    let d = var3\n        .concat()\n        .subscribe {\n            print($0)\n        }\n    var1.on(.Next(1))\n    var1.on(.Next(2))\n    var3.on(.Next(var2))\n    var2.on(.Next(201))\n    var1.on(.Next(3))\n    var1.on(.Completed)\n    var2.on(.Next(202))\n}\n--- concat example ---\nNext(0)\nNext(1)\nNext(2)\nNext(3)\nNext(201)\nNext(202)\n```\n\n### reduce\n\n这里的 `reduce` 和 `CollectionType` 中的 `reduce` 是一个意思，都是指通过对一系列数据的运算最后生成一个结果。\n\n```swift\nexample(\"reduce\") {\n    sequenceOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n        .reduce(0, +)\n        .subscribe {\n            print($0)\n        }\n}\n--- reduce example ---\nNext(45)\nCompleted\n```\n\n## Connectable\n\n坑待填，Xcode 里这个操场跑不起来了。\n\n","slug":"rx-dictionary","published":1,"updated":"2017-05-16T04:24:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfoh001gkhuvgniw94hw","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>记录RxSwift在使用过程中的一些常用语法。</p>\n<a id=\"more\"></a>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>按照<a href=\"https://blog.callmewhy.com/2015/09/21/rxswift-getting-started-0/\" target=\"_blank\" rel=\"external\">RxSwift 入坑手册 Part0 - 基础概念</a>格式进行补充。</p>\n<h2 id=\"SupportCode\"><a href=\"#SupportCode\" class=\"headerlink\" title=\"SupportCode\"></a>SupportCode</h2><p>在进入正题之前，先看下项目里的 <code>SupportCode.swift</code> ，主要为 <code>playground</code> 提供了两个便利函数。</p>\n<p>一个是 <code>example</code> 函数，专门用来写示例代码的，统一输出 log 便于标记浏览，同时还能保持变量不污染全局：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">example</span><span class=\"params\">(description: String, action: <span class=\"params\">()</span></span></span> -&gt; ()) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\n--- \\(description) example ---\"</span>)</div><div class=\"line\">    action()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另一个是 <code>delay</code> 函数，通过 <code>dispatch_after</code> 用来演示延时的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">delay</span><span class=\"params\">(delay:Double, closure:<span class=\"params\">()</span></span></span>-&gt;()) &#123;</div><div class=\"line\">    dispatch_after(</div><div class=\"line\">        dispatch_time(</div><div class=\"line\">            <span class=\"type\">DISPATCH_TIME_NOW</span>,</div><div class=\"line\">            <span class=\"type\">Int64</span>(delay * <span class=\"type\">Double</span>(<span class=\"type\">NSEC_PER_SEC</span>))</div><div class=\"line\">        ),</div><div class=\"line\">        dispatch_get_main_queue(), closure)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>主要介绍了 Rx 的基础： <code>Observable</code> 。 <code>Observable&lt;Element&gt;</code> 是观察者模式中被观察的对象，相当于一个事件序列 (<code>GeneratorType</code>) ，会向订阅者发送新产生的事件信息。事件信息分为三种：</p>\n<ul>\n<li>Next(value) 表示新的事件数据。</li>\n<li>Completed 表示事件序列的完结。</li>\n<li>Error 同样表示完结，但是代表异常导致的完结。<br>（打个岔：协议命名，想起来上午汤哥在微博说的一段话：</li>\n</ul>\n<blockquote>\n<p>另外，我觉得 protocol 名字用形容词会更加语义分明，比如 Swift : Flyable, Killable, Visible。全用名词的话显得比较生硬，比如 Swift : Head, Wings, Ass。</p>\n</blockquote>\n<h3 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty\"></a>empty</h3><p><code>empty</code> 是一个空的序列，它只发送 <code>.Completed</code> 消息。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"empty\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> emptySequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; = empty()</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = emptySequence</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- empty example ---</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"never\"><a href=\"#never\" class=\"headerlink\" title=\"never\"></a>never</h3><p><code>never</code> 是没有任何元素、也不会发送任何事件的空序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"never\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> neverSequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt; = never()</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = neverSequence</div><div class=\"line\">        .subscribe &#123; <span class=\"number\">_</span> <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"This block is never called.\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">--- never example ---</div></pre></td></tr></table></figure>\n<h3 id=\"just\"><a href=\"#just\" class=\"headerlink\" title=\"just\"></a>just</h3><p><code>just</code> 是只包含一个元素的序列，它会先发送 <code>.Next(value)</code> ，然后发送 <code>.Completed</code> 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"just\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> singleElementSequence = just(<span class=\"number\">32</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = singleElementSequence</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- just example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">32</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div><div class=\"line\">sequenceOf</div></pre></td></tr></table></figure>\n<p><code>sequenceOf</code> 可以把一系列元素转换成事件序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"sequenceOf\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceOfElements<span class=\"comment\">/* : Observable&lt;Int&gt; */</span> = sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceOfElements</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- sequenceOf example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div><div class=\"line\">from</div></pre></td></tr></table></figure>\n<p><code>from</code> 是通过 <code>asObservable()</code> 方法把 Swift 中的序列 (<code>SequenceType</code>) 转换成事件序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"from\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceFromArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].asObservable()</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceFromArray</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- from example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"create\"></a>create</h3><p><code>create</code> 可以通过闭包创建序列，通过 <code>.on(e: Event)</code> 添加事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"create\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> myJust = &#123; (singleElement: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"keyword\">return</span> create &#123; observer <span class=\"keyword\">in</span></div><div class=\"line\">            observer.on(.<span class=\"type\">Next</span>(singleElement))</div><div class=\"line\">            observer.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = myJust(<span class=\"number\">5</span>)</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- create example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"failWith\"><a href=\"#failWith\" class=\"headerlink\" title=\"failWith\"></a>failWith</h3><p><code>failWith</code> 创建一个没有元素的序列，只会发送失败 (<code>.Error</code>) 事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"failWith\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> error = <span class=\"type\">NSError</span>(domain: <span class=\"string\">\"Test\"</span>, code: -<span class=\"number\">1</span>, userInfo: <span class=\"literal\">nil</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> erroredSequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; = failWith(error)</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = erroredSequence</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- failWith example ---</div><div class=\"line\"><span class=\"type\">Error</span>(<span class=\"type\">Error</span> <span class=\"type\">Domain</span>=<span class=\"type\">Test</span> <span class=\"type\">Code</span>=-<span class=\"number\">1</span> <span class=\"string\">\"The operation couldn’t be completed. (Test error -1.)\"</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"deferred\"><a href=\"#deferred\" class=\"headerlink\" title=\"deferred\"></a>deferred</h3><p><code>deferred</code> 会等到有订阅者的时候再通过工厂方法创建 <code>Observable</code> 对象，每个订阅者订阅的对象都是内容相同而完全独立的序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"deferred\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> deferredSequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; = deferred &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"creating\"</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> create &#123; observer <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"emmiting\"</span>)</div><div class=\"line\">            observer.on(.<span class=\"type\">Next</span>(<span class=\"number\">0</span>))</div><div class=\"line\">            observer.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">            observer.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"go\"</span>)</div><div class=\"line\">    deferredSequence</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">    &#125;</div><div class=\"line\">    deferredSequence</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- deferred example ---</div><div class=\"line\">go</div><div class=\"line\">creating</div><div class=\"line\">emmiting</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\">creating</div><div class=\"line\">emmiting</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>为什么需要 <code>defferd</code> 这样一个奇怪的家伙呢？其实这相当于是一种延时加载，因为在添加监听的时候数据未必加载完毕，例如下面这个例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"TestDeferred\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value: <span class=\"type\">String</span>? = <span class=\"literal\">nil</span></div><div class=\"line\">    <span class=\"keyword\">var</span> subscription: <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>?&gt; = just(value)</div><div class=\"line\">    <span class=\"comment\">// got value</span></div><div class=\"line\">    value = <span class=\"string\">\"Hello!\"</span></div><div class=\"line\">    subscription.subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"built_in\">print</span>(event)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"type\">TestDeferred</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"literal\">nil</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<p>如果使用 <code>deffered</code> 则可以正常显示想要的数据：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"TestDeferred\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value: <span class=\"type\">String</span>? = <span class=\"literal\">nil</span></div><div class=\"line\">    <span class=\"keyword\">var</span> subscription: <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>?&gt; = deferred &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> just(value)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// got value</span></div><div class=\"line\">    value = <span class=\"string\">\"Hello!\"</span></div><div class=\"line\">    subscription.subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"built_in\">print</span>(event)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"type\">TestDeferred</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">Optional</span>(<span class=\"string\">\"Hello!\"</span>))</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Subjects\"><a href=\"#Subjects\" class=\"headerlink\" title=\"Subjects\"></a>Subjects</h2><p>接下来是关于 <code>Subject</code> 的内容。 <code>Subject</code> 可以看做是一种代理和桥梁。它既是订阅者又是订阅源，这意味着它既可以订阅其他 <code>Observable</code> 对象，同时又可以对它的订阅者们发送事件。</p>\n<p>如果把 <code>Observable</code> 理解成不断输出事件的水管，那 <code>Subject</code> 就是套在上面的水龙头。它既怼着一根不断出水的水管，同时也向外面输送着新鲜水源。如果你直接用水杯接着水管的水，那可能导出来什么王水胶水完全把持不住；如果你在水龙头下面接着水，那你可以随心所欲的调成你想要的水速和水温。</p>\n<p>（好吧上面一段文档里没有，是我瞎掰的，如果理解错了还望打脸(￣ε(#￣)☆╰╮(￣▽￣///))</p>\n<p>在开始下面的代码之前，先定义一个辅助函数用于输出数据：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">writeSequenceToConsole</span>&lt;O: ObservableType&gt;<span class=\"params\">(name: String, sequence: O)</span></span> &#123;</div><div class=\"line\">    sequence</div><div class=\"line\">        .subscribe &#123; e <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Subscription: \\(name), event: \\(e)\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"PublishSubject\"><a href=\"#PublishSubject\" class=\"headerlink\" title=\"PublishSubject\"></a>PublishSubject</h3><p><code>PublishSubject</code> 会发送订阅者从订阅之后的事件序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"PublishSubject\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subject = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: subject)</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"a\"</span>))</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"b\"</span>))</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: subject)</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"c\"</span>))</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"d\"</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"type\">PublishSubject</span> example ---</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(d)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(d)</div></pre></td></tr></table></figure>\n<h3 id=\"ReplaySubject\"><a href=\"#ReplaySubject\" class=\"headerlink\" title=\"ReplaySubject\"></a>ReplaySubject</h3><p><code>ReplaySubject</code> 在新的订阅对象订阅的时候会补发所有已经发送过的数据队列， <code>bufferSize</code> 是缓冲区的大小，决定了补发队列的最大值。如果 <code>bufferSize</code> 是1，那么新的订阅者出现的时候就会补发上一个事件，如果是2，则补两个，以此类推。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"ReplaySubject\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subject = <span class=\"type\">ReplaySubject</span>&lt;<span class=\"type\">String</span>&gt;.create(bufferSize: <span class=\"number\">1</span>)</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: subject)</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"a\"</span>))</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"b\"</span>))</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: subject)</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"c\"</span>))</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"d\"</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"type\">ReplaySubject</span> example ---</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(b) <span class=\"comment\">// 补了一个 b</span></div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(d)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(d)</div></pre></td></tr></table></figure>\n<h3 id=\"BehaviorSubject\"><a href=\"#BehaviorSubject\" class=\"headerlink\" title=\"BehaviorSubject\"></a>BehaviorSubject</h3><p><code>BehaviorSubject</code> 在新的订阅对象订阅的时候会发送最近发送的事件，如果没有则发送一个默认值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"BehaviorSubject\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subject = <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">\"z\"</span>)</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: subject)</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"a\"</span>))</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"b\"</span>))</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: subject)</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"c\"</span>))</div><div class=\"line\">    subject.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"type\">BehaviorSubject</span> example ---</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(z)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(b)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Completed</span></div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"Variable\"><a href=\"#Variable\" class=\"headerlink\" title=\"Variable\"></a>Variable</h3><p><code>Variable</code> 是基于 <code>BehaviorSubject</code> 的一层封装，它的优势是：不会被显式终结。即：不会收到 <code>.Completed</code> 和 <code>.Error</code> 这类的终结事件，它会主动在析构的时候发送 <code>.Complete</code> 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"Variable\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> variable = <span class=\"type\">Variable</span>(<span class=\"string\">\"z\"</span>)</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: variable)</div><div class=\"line\">    variable.value = <span class=\"string\">\"a\"</span></div><div class=\"line\">    variable.value = <span class=\"string\">\"b\"</span></div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: variable)</div><div class=\"line\">    variable.value = <span class=\"string\">\"c\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"type\">Variable</span> example ---</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(z)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(b)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Completed</span></div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Transform\"><a href=\"#Transform\" class=\"headerlink\" title=\"Transform\"></a>Transform</h2><p>我们可以对序列做一些转换，类似于 <code>Swift</code> 中 <code>CollectionType</code> 的各种转换。在以前的坑中曾经提到过，可以参考：<a href=\"https://blog.callmewhy.com/2015/05/11/functional-reactive-programming-1/#函数式的函数/\" target=\"_blank\" rel=\"external\">函数式的函数</a>。</p>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p><code>map</code> 就是对每个元素都用函数做一次转换，挨个映射一遍。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"map\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> originalSequence = sequenceOf(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</div><div class=\"line\">    originalSequence</div><div class=\"line\">        .<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span> * <span class=\"number\">2</span> &#125;</div><div class=\"line\">        .subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"built_in\">map</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"flatMap\"><a href=\"#flatMap\" class=\"headerlink\" title=\"flatMap\"></a>flatMap</h3><p><code>map</code> 在做转换的时候很容易出现『升维』的情况，即：转变之后，从一个序列变成了一个序列的序列。</p>\n<p>什么是『升维』？在集合中我们可以举这样一个例子，我有一个好友列表 <code>[p1, p2, p3]</code>，那么如果要获取我好友的好友的列表，可以这样做：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myFriends.<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span>.getFriends() &#125;</div></pre></td></tr></table></figure>\n<p>结果就成了 <code>[[p1-1, p1-2, p1-3], [p2-1], [p3-1, p3-2]]</code> ，这就成了好友的好友列表的列表了。这就是一个『升维』的例子。</p>\n<p>（以上内容文档中依旧没有，依旧是我瞎掰的，依旧欢迎有错误当面打脸(￣ε(#￣)☆╰╮(￣▽￣///))</p>\n<p>在 <code>Swift</code> 中，我们可以用 <code>flatMap</code> 过滤掉 <code>map</code> 之后的 <code>nil</code> 结果。在 <code>Rx</code> 中， <code>flatMap</code> 可以把一个序列转换成一组序列，然后再把这一组序列『拍扁』成一个序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"flatMap\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceInt = sequenceOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceString = sequenceOf(<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"--\"</span>)</div><div class=\"line\">    sequenceInt</div><div class=\"line\">        .flatMap &#123; int <span class=\"keyword\">in</span></div><div class=\"line\">            sequenceString</div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- flatMap example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(--)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(--)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(--)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"scan\"><a href=\"#scan\" class=\"headerlink\" title=\"scan\"></a>scan</h3><p><code>scan</code> 有点像 <code>reduce</code> ，它会把每次的运算结果累积起来，作为下一次运算的输入值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"scan\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceToSum = sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\">    sequenceToSum</div><div class=\"line\">        .scan(<span class=\"number\">0</span>) &#123; acum, elem <span class=\"keyword\">in</span></div><div class=\"line\">            acum + elem</div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- scan example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">15</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Filtering\"><a href=\"#Filtering\" class=\"headerlink\" title=\"Filtering\"></a>Filtering</h2><p>除了上面的各种转换，我们还可以对序列进行过滤。</p>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p><code>filter</code> 只会让符合条件的元素通过。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"filter\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>)</div><div class=\"line\">        .<span class=\"built_in\">filter</span> &#123;</div><div class=\"line\">            $<span class=\"number\">0</span> % <span class=\"number\">2</span> == <span class=\"number\">0</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"built_in\">filter</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"distinctUntilChanged\"><a href=\"#distinctUntilChanged\" class=\"headerlink\" title=\"distinctUntilChanged\"></a>distinctUntilChanged</h3><p><code>distinctUntilChanged</code> 会废弃掉重复的事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"distinctUntilChanged\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>)</div><div class=\"line\">        .distinctUntilChanged()</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- distinctUntilChanged example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"take\"><a href=\"#take\" class=\"headerlink\" title=\"take\"></a>take</h3><p><code>take</code> 只获取序列中的前 <code>n</code> 个事件，在满足数量之后会自动 <code>.Completed</code> 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"take\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</div><div class=\"line\">        .take(<span class=\"number\">3</span>)</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- take example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"throttle-VS-debounce\"><a href=\"#throttle-VS-debounce\" class=\"headerlink\" title=\"throttle VS. debounce\"></a>throttle VS. debounce</h3><p><code>throttle</code> 和 <code>debounce</code> 目的都是控制某个时间段内事件序列的速度。但是又有差别：</p>\n<ul>\n<li><code>debounce</code> : <code>空闲控制</code>  空闲时间必须 <code>&gt;=</code> 固定的时间，事件序列才会被放行</li>\n<li><code>throttle</code> : <code>频率控制</code>  事件序列满足 <code>1/delay</code> 才会被放行</li>\n</ul>\n<p>一般的按钮点击、用户输入、等都属于频率控制，应该使用 <code>throttle</code> 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> searchResults = searchBar.rx.text.orEmpty</div><div class=\"line\">    .throttle(<span class=\"number\">0.3</span>, scheduler: <span class=\"type\">MainScheduler</span>.instance)</div><div class=\"line\">    .distinctUntilChanged()</div><div class=\"line\">    .flatMapLatest &#123; query -&gt; <span class=\"type\">Observable</span>&lt;[<span class=\"type\">Repository</span>]&gt; <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"keyword\">if</span> query.isEmpty &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> .just([])</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> searchGitHub(query)</div><div class=\"line\">            .catchErrorJustReturn([])</div><div class=\"line\">    &#125;</div><div class=\"line\">    .observeOn(<span class=\"type\">MainScheduler</span>.instance)</div></pre></td></tr></table></figure>\n<h2 id=\"Combining\"><a href=\"#Combining\" class=\"headerlink\" title=\"Combining\"></a>Combining</h2><p>这部分是关于序列的运算，可以将多个序列源进行组合拼装成一个新的事件序列。</p>\n<h3 id=\"startWith\"><a href=\"#startWith\" class=\"headerlink\" title=\"startWith\"></a>startWith</h3><p><code>startWith</code> 会在队列开始之前插入一个事件元素。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"startWith\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</div><div class=\"line\">        .startWith(<span class=\"number\">3</span>)</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- startWith example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"combineLatest\"><a href=\"#combineLatest\" class=\"headerlink\" title=\"combineLatest\"></a>combineLatest</h3><p>如果存在两条事件队列，需要同时监听，那么每当有新的事件发生的时候，<code>combineLatest</code> 会将每个队列的最新的一个元素进行合并。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"combineLatest 1\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> intOb1 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">    <span class=\"keyword\">let</span> intOb2 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    combineLatest(intOb1, intOb2) &#123;</div><div class=\"line\">        <span class=\"string\">\"\\($0) \\($1)\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"A\"</span>))</div><div class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"B\"</span>))</div><div class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- combineLatest <span class=\"number\">1</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span> <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span> <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span> <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h3><p><code>zip</code> 人如其名，就是合并两条队列用的，不过它会等到两个队列的元素一一对应地凑齐了之后再合并，正如<a href=\"http://weibo.com/mrgreenhand\" target=\"_blank\" rel=\"external\">百折不撓的米斯特菜</a>所提醒的， <code>zip</code> 就像是拉链一样，两根拉链拉着拉着合并到了一根上：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"zip 1\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> intOb1 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">    <span class=\"keyword\">let</span> intOb2 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    <span class=\"built_in\">zip</span>(intOb1, intOb2) &#123;</div><div class=\"line\">        <span class=\"string\">\"\\($0) \\($1)\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"A\"</span>))</div><div class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"B\"</span>))</div><div class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"C\"</span>))</div><div class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"built_in\">zip</span> <span class=\"number\">1</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span> <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span> <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h3><p><code>merge</code> 就是 <code>merge</code> 啦，把两个队列按照顺序组合在一起。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"merge 1\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subject1 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    <span class=\"keyword\">let</span> subject2 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequenceOf(subject1, subject2)</div><div class=\"line\">        .merge()</div><div class=\"line\">        .subscribeNext &#123; int <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(int)</div><div class=\"line\">        &#125;</div><div class=\"line\">    subject1.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    subject1.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">    subject2.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</div><div class=\"line\">    subject1.on(.<span class=\"type\">Next</span>(<span class=\"number\">4</span>))</div><div class=\"line\">    subject2.on(.<span class=\"type\">Next</span>(<span class=\"number\">5</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- merge <span class=\"number\">1</span> example ---</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure>\n<h3 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h3><p>当你的事件序列是一个事件序列的序列 (<code>Observable&lt;Observable&lt;T&gt;&gt;</code>) 的时候，（可以理解成二维序列？），可以使用 <code>switch</code> 将序列的序列平铺成一维，并且在出现新的序列的时候，自动切换到最新的那个序列上。和 <code>merge</code> 相似的是，它也是起到了将多个序列『拍平』成一条序列的作用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"switchLatest\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> var1 = <span class=\"type\">Variable</span>(<span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> var2 = <span class=\"type\">Variable</span>(<span class=\"number\">200</span>)</div><div class=\"line\">    <span class=\"comment\">// var3 is like an Observable&lt;Observable&lt;Int&gt;&gt;</span></div><div class=\"line\">    <span class=\"keyword\">let</span> var3 = <span class=\"type\">Variable</span>(var1)</div><div class=\"line\">    <span class=\"keyword\">let</span> d = var3</div><div class=\"line\">        .switchLatest()</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    var1.value = <span class=\"number\">1</span></div><div class=\"line\">    var1.value = <span class=\"number\">2</span></div><div class=\"line\">    var1.value = <span class=\"number\">3</span></div><div class=\"line\">    var1.value = <span class=\"number\">4</span></div><div class=\"line\">    var3.value = var2</div><div class=\"line\">    var2.value = <span class=\"number\">201</span></div><div class=\"line\">    var1.value = <span class=\"number\">5</span></div><div class=\"line\">    var3.value = var1</div><div class=\"line\">    var2.value = <span class=\"number\">202</span></div><div class=\"line\">    var1.value = <span class=\"number\">6</span></div><div class=\"line\">&#125;</div><div class=\"line\">--- switchLatest example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">200</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">201</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</div></pre></td></tr></table></figure>\n<p>注意，虽然都是『拍平』，但是和 <code>flatmap</code> 是不同的， <code>flatmap</code> 是将一条序列变成另一条序列，而这变换过程会让维度变高，所以需要『拍平』，而 <code>switch</code> 是将本来二维的序列（序列的序列）拍平成了一维的序列。</p>\n<h2 id=\"Error-Handling\"><a href=\"#Error-Handling\" class=\"headerlink\" title=\"Error Handling\"></a>Error Handling</h2><p>在事件序列中，遇到异常也是很正常的事情，有以下几种处理异常的手段。</p>\n<h3 id=\"catchError\"><a href=\"#catchError\" class=\"headerlink\" title=\"catchError\"></a>catchError</h3><p><code>catchError</code> 可以捕获异常事件，并且在后面无缝接上另一段事件序列，丝毫没有异常的痕迹。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"catchError 1\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceThatFails = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    <span class=\"keyword\">let</span> recoverySequence = sequenceOf(<span class=\"number\">100</span>, <span class=\"number\">200</span>)</div><div class=\"line\">    sequenceThatFails</div><div class=\"line\">        .catchError &#123; error <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"keyword\">return</span> recoverySequence</div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequenceThatFails.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequenceThatFails.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">    sequenceThatFails.on(.<span class=\"type\">Error</span>(<span class=\"type\">NSError</span>(domain: <span class=\"string\">\"Test\"</span>, code: <span class=\"number\">0</span>, userInfo: <span class=\"literal\">nil</span>)))</div><div class=\"line\">&#125;</div><div class=\"line\">--- catchError <span class=\"number\">1</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">200</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"retry\"><a href=\"#retry\" class=\"headerlink\" title=\"retry\"></a>retry</h3><p><code>retry</code> 顾名思义，就是在出现异常的时候会再去从头订阅事件序列，妄图通过『从头再来』解决异常。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"retry\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span> = <span class=\"number\">1</span> <span class=\"comment\">// bad practice, only for example purposes</span></div><div class=\"line\">    <span class=\"keyword\">let</span> funnyLookingSequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; = create &#123; observer <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"keyword\">let</span> error = <span class=\"type\">NSError</span>(domain: <span class=\"string\">\"Test\"</span>, code: <span class=\"number\">0</span>, userInfo: <span class=\"literal\">nil</span>)</div><div class=\"line\">        observer.on(.<span class=\"type\">Next</span>(<span class=\"number\">0</span>))</div><div class=\"line\">        observer.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">count</span> &lt; <span class=\"number\">2</span> &#123;</div><div class=\"line\">            observer.on(.<span class=\"type\">Error</span>(error))</div><div class=\"line\">            <span class=\"built_in\">count</span>++</div><div class=\"line\">        &#125;</div><div class=\"line\">        observer.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">        observer.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</div><div class=\"line\">    &#125;</div><div class=\"line\">    funnyLookingSequence</div><div class=\"line\">        .retry()</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- retry example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Utility\"><a href=\"#Utility\" class=\"headerlink\" title=\"Utility\"></a>Utility</h2><p>这里列举了针对事件序列的一些方法。</p>\n<h3 id=\"subscribe\"><a href=\"#subscribe\" class=\"headerlink\" title=\"subscribe\"></a>subscribe</h3><p><code>subscribe</code> 在前面已经接触过了，有新的事件就会触发。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"subscribe\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceOfInts = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequenceOfInts</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">--- subscribe example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"subscribeNext\"><a href=\"#subscribeNext\" class=\"headerlink\" title=\"subscribeNext\"></a>subscribeNext</h3><p><code>subscribeNext</code> 也是订阅，但是只订阅 <code>.Next</code> 事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"subscribeNext\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceOfInts = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequenceOfInts</div><div class=\"line\">        .subscribeNext &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">--- subscribeNext example ---</div><div class=\"line\"><span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h3 id=\"subscribeCompleted\"><a href=\"#subscribeCompleted\" class=\"headerlink\" title=\"subscribeCompleted\"></a>subscribeCompleted</h3><p><code>subscribeCompleted</code> 是只订阅 <code>.Completed</code> 完成事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"subscribeCompleted\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceOfInts = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequenceOfInts</div><div class=\"line\">        .subscribeCompleted &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"It's completed\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">--- subscribeCompleted example ---</div><div class=\"line\"><span class=\"type\">It's</span> completed</div></pre></td></tr></table></figure>\n<h3 id=\"subscribeError\"><a href=\"#subscribeError\" class=\"headerlink\" title=\"subscribeError\"></a>subscribeError</h3><p><code>subscribeError</code> 只订阅 <code>.Error</code> 失败事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"subscribeError\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceOfInts = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequenceOfInts</div><div class=\"line\">        .subscribeError &#123; error <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(error)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Error</span>(<span class=\"type\">NSError</span>(domain: <span class=\"string\">\"Examples\"</span>, code: -<span class=\"number\">1</span>, userInfo: <span class=\"literal\">nil</span>)))</div><div class=\"line\">&#125;</div><div class=\"line\">--- subscribeError example ---</div><div class=\"line\"><span class=\"type\">Error</span> <span class=\"type\">Domain</span>=<span class=\"type\">Examples</span> <span class=\"type\">Code</span>=-<span class=\"number\">1</span> <span class=\"string\">\"The operation couldn’t be completed. (Examples error -1.)\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"doOn\"><a href=\"#doOn\" class=\"headerlink\" title=\"doOn\"></a>doOn</h3><p><code>doOn</code> 可以监听事件，并且在事件发生之前调用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"doOn\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceOfInts = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequenceOfInts</div><div class=\"line\">        .doOn &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Intercepted event \\($0)\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">--- doOn example ---</div><div class=\"line\"><span class=\"type\">Intercepted</span> event <span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Intercepted</span> event <span class=\"type\">Completed</span></div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Conditional\"><a href=\"#Conditional\" class=\"headerlink\" title=\"Conditional\"></a>Conditional</h2><p>我们可以对多个事件序列做一些复杂的逻辑判断。</p>\n<h3 id=\"takeUntil\"><a href=\"#takeUntil\" class=\"headerlink\" title=\"takeUntil\"></a>takeUntil</h3><p><code>takeUntil</code> 其实就是 <code>take</code> ，它会在终于等到那个事件之后触发 <code>.Completed</code> 事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"takeUntil\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> originalSequence = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    <span class=\"keyword\">let</span> whenThisSendsNextWorldStops = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    originalSequence</div><div class=\"line\">        .takeUntil(whenThisSendsNextWorldStops)</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    originalSequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    originalSequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">    whenThisSendsNextWorldStops.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    originalSequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- takeUntil example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"takeWhile\"><a href=\"#takeWhile\" class=\"headerlink\" title=\"takeWhile\"></a>takeWhile</h3><p><code>takeWhile</code> 则是可以通过状态语句判断是否继续 <code>take</code> 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"takeWhile\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequence = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequence</div><div class=\"line\">        .takeWhile &#123; int <span class=\"keyword\">in</span></div><div class=\"line\">            int &lt; <span class=\"number\">2</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">    sequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- takeWhile example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Aggregate\"><a href=\"#Aggregate\" class=\"headerlink\" title=\"Aggregate\"></a>Aggregate</h2><p>我们可以对事件序列做一些集合运算。</p>\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h3><p><code>concat</code> 可以把多个事件序列合并起来。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"concat\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> var1 = <span class=\"type\">BehaviorSubject</span>(value: <span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> var2 = <span class=\"type\">BehaviorSubject</span>(value: <span class=\"number\">200</span>)</div><div class=\"line\">    <span class=\"comment\">// var3 is like an Observable&lt;Observable&lt;Int&gt;&gt;</span></div><div class=\"line\">    <span class=\"keyword\">let</span> var3 = <span class=\"type\">BehaviorSubject</span>(value: var1)</div><div class=\"line\">    <span class=\"keyword\">let</span> d = var3</div><div class=\"line\">        .concat()</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    var1.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    var1.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">    var3.on(.<span class=\"type\">Next</span>(var2))</div><div class=\"line\">    var2.on(.<span class=\"type\">Next</span>(<span class=\"number\">201</span>))</div><div class=\"line\">    var1.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</div><div class=\"line\">    var1.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">    var2.on(.<span class=\"type\">Next</span>(<span class=\"number\">202</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- concat example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">201</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">202</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><p>这里的 <code>reduce</code> 和 <code>CollectionType</code> 中的 <code>reduce</code> 是一个意思，都是指通过对一系列数据的运算最后生成一个结果。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"reduce\"</span>) &#123;</div><div class=\"line\">    sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>)</div><div class=\"line\">        .<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, +)</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"built_in\">reduce</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">45</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Connectable\"><a href=\"#Connectable\" class=\"headerlink\" title=\"Connectable\"></a>Connectable</h2><p>坑待填，Xcode 里这个操场跑不起来了。</p>\n","site":{"data":{}},"excerpt":"<p>记录RxSwift在使用过程中的一些常用语法。</p>","more":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>按照<a href=\"https://blog.callmewhy.com/2015/09/21/rxswift-getting-started-0/\">RxSwift 入坑手册 Part0 - 基础概念</a>格式进行补充。</p>\n<h2 id=\"SupportCode\"><a href=\"#SupportCode\" class=\"headerlink\" title=\"SupportCode\"></a>SupportCode</h2><p>在进入正题之前，先看下项目里的 <code>SupportCode.swift</code> ，主要为 <code>playground</code> 提供了两个便利函数。</p>\n<p>一个是 <code>example</code> 函数，专门用来写示例代码的，统一输出 log 便于标记浏览，同时还能保持变量不污染全局：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">example</span><span class=\"params\">(description: String, action: <span class=\"params\">()</span></span></span> -&gt; ()) &#123;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\n--- \\(description) example ---\"</span>)</div><div class=\"line\">    action()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另一个是 <code>delay</code> 函数，通过 <code>dispatch_after</code> 用来演示延时的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">delay</span><span class=\"params\">(delay:Double, closure:<span class=\"params\">()</span></span></span>-&gt;()) &#123;</div><div class=\"line\">    dispatch_after(</div><div class=\"line\">        dispatch_time(</div><div class=\"line\">            <span class=\"type\">DISPATCH_TIME_NOW</span>,</div><div class=\"line\">            <span class=\"type\">Int64</span>(delay * <span class=\"type\">Double</span>(<span class=\"type\">NSEC_PER_SEC</span>))</div><div class=\"line\">        ),</div><div class=\"line\">        dispatch_get_main_queue(), closure)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>主要介绍了 Rx 的基础： <code>Observable</code> 。 <code>Observable&lt;Element&gt;</code> 是观察者模式中被观察的对象，相当于一个事件序列 (<code>GeneratorType</code>) ，会向订阅者发送新产生的事件信息。事件信息分为三种：</p>\n<ul>\n<li>Next(value) 表示新的事件数据。</li>\n<li>Completed 表示事件序列的完结。</li>\n<li>Error 同样表示完结，但是代表异常导致的完结。<br>（打个岔：协议命名，想起来上午汤哥在微博说的一段话：</li>\n</ul>\n<blockquote>\n<p>另外，我觉得 protocol 名字用形容词会更加语义分明，比如 Swift : Flyable, Killable, Visible。全用名词的话显得比较生硬，比如 Swift : Head, Wings, Ass。</p>\n</blockquote>\n<h3 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty\"></a>empty</h3><p><code>empty</code> 是一个空的序列，它只发送 <code>.Completed</code> 消息。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"empty\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> emptySequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; = empty()</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = emptySequence</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- empty example ---</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"never\"><a href=\"#never\" class=\"headerlink\" title=\"never\"></a>never</h3><p><code>never</code> 是没有任何元素、也不会发送任何事件的空序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"never\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> neverSequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>&gt; = never()</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = neverSequence</div><div class=\"line\">        .subscribe &#123; <span class=\"number\">_</span> <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"This block is never called.\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">--- never example ---</div></pre></td></tr></table></figure>\n<h3 id=\"just\"><a href=\"#just\" class=\"headerlink\" title=\"just\"></a>just</h3><p><code>just</code> 是只包含一个元素的序列，它会先发送 <code>.Next(value)</code> ，然后发送 <code>.Completed</code> 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"just\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> singleElementSequence = just(<span class=\"number\">32</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = singleElementSequence</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- just example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">32</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div><div class=\"line\">sequenceOf</div></pre></td></tr></table></figure>\n<p><code>sequenceOf</code> 可以把一系列元素转换成事件序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"sequenceOf\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceOfElements<span class=\"comment\">/* : Observable&lt;Int&gt; */</span> = sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceOfElements</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- sequenceOf example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div><div class=\"line\">from</div></pre></td></tr></table></figure>\n<p><code>from</code> 是通过 <code>asObservable()</code> 方法把 Swift 中的序列 (<code>SequenceType</code>) 转换成事件序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"from\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceFromArray = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].asObservable()</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceFromArray</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- from example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"create\"></a>create</h3><p><code>create</code> 可以通过闭包创建序列，通过 <code>.on(e: Event)</code> 添加事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"create\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> myJust = &#123; (singleElement: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"keyword\">return</span> create &#123; observer <span class=\"keyword\">in</span></div><div class=\"line\">            observer.on(.<span class=\"type\">Next</span>(singleElement))</div><div class=\"line\">            observer.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = myJust(<span class=\"number\">5</span>)</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- create example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"failWith\"><a href=\"#failWith\" class=\"headerlink\" title=\"failWith\"></a>failWith</h3><p><code>failWith</code> 创建一个没有元素的序列，只会发送失败 (<code>.Error</code>) 事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"failWith\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> error = <span class=\"type\">NSError</span>(domain: <span class=\"string\">\"Test\"</span>, code: -<span class=\"number\">1</span>, userInfo: <span class=\"literal\">nil</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> erroredSequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; = failWith(error)</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = erroredSequence</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- failWith example ---</div><div class=\"line\"><span class=\"type\">Error</span>(<span class=\"type\">Error</span> <span class=\"type\">Domain</span>=<span class=\"type\">Test</span> <span class=\"type\">Code</span>=-<span class=\"number\">1</span> <span class=\"string\">\"The operation couldn’t be completed. (Test error -1.)\"</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"deferred\"><a href=\"#deferred\" class=\"headerlink\" title=\"deferred\"></a>deferred</h3><p><code>deferred</code> 会等到有订阅者的时候再通过工厂方法创建 <code>Observable</code> 对象，每个订阅者订阅的对象都是内容相同而完全独立的序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"deferred\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> deferredSequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; = deferred &#123;</div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"creating\"</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> create &#123; observer <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"emmiting\"</span>)</div><div class=\"line\">            observer.on(.<span class=\"type\">Next</span>(<span class=\"number\">0</span>))</div><div class=\"line\">            observer.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">            observer.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"go\"</span>)</div><div class=\"line\">    deferredSequence</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">    &#125;</div><div class=\"line\">    deferredSequence</div><div class=\"line\">        .subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(event)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- deferred example ---</div><div class=\"line\">go</div><div class=\"line\">creating</div><div class=\"line\">emmiting</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\">creating</div><div class=\"line\">emmiting</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>为什么需要 <code>defferd</code> 这样一个奇怪的家伙呢？其实这相当于是一种延时加载，因为在添加监听的时候数据未必加载完毕，例如下面这个例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"TestDeferred\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value: <span class=\"type\">String</span>? = <span class=\"literal\">nil</span></div><div class=\"line\">    <span class=\"keyword\">var</span> subscription: <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>?&gt; = just(value)</div><div class=\"line\">    <span class=\"comment\">// got value</span></div><div class=\"line\">    value = <span class=\"string\">\"Hello!\"</span></div><div class=\"line\">    subscription.subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"built_in\">print</span>(event)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"type\">TestDeferred</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"literal\">nil</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<p>如果使用 <code>deffered</code> 则可以正常显示想要的数据：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"TestDeferred\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value: <span class=\"type\">String</span>? = <span class=\"literal\">nil</span></div><div class=\"line\">    <span class=\"keyword\">var</span> subscription: <span class=\"type\">Observable</span>&lt;<span class=\"type\">String</span>?&gt; = deferred &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> just(value)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// got value</span></div><div class=\"line\">    value = <span class=\"string\">\"Hello!\"</span></div><div class=\"line\">    subscription.subscribe &#123; event <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"built_in\">print</span>(event)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"type\">TestDeferred</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">Optional</span>(<span class=\"string\">\"Hello!\"</span>))</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Subjects\"><a href=\"#Subjects\" class=\"headerlink\" title=\"Subjects\"></a>Subjects</h2><p>接下来是关于 <code>Subject</code> 的内容。 <code>Subject</code> 可以看做是一种代理和桥梁。它既是订阅者又是订阅源，这意味着它既可以订阅其他 <code>Observable</code> 对象，同时又可以对它的订阅者们发送事件。</p>\n<p>如果把 <code>Observable</code> 理解成不断输出事件的水管，那 <code>Subject</code> 就是套在上面的水龙头。它既怼着一根不断出水的水管，同时也向外面输送着新鲜水源。如果你直接用水杯接着水管的水，那可能导出来什么王水胶水完全把持不住；如果你在水龙头下面接着水，那你可以随心所欲的调成你想要的水速和水温。</p>\n<p>（好吧上面一段文档里没有，是我瞎掰的，如果理解错了还望打脸(￣ε(#￣)☆╰╮(￣▽￣///))</p>\n<p>在开始下面的代码之前，先定义一个辅助函数用于输出数据：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">writeSequenceToConsole</span>&lt;O: ObservableType&gt;<span class=\"params\">(name: String, sequence: O)</span></span> &#123;</div><div class=\"line\">    sequence</div><div class=\"line\">        .subscribe &#123; e <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Subscription: \\(name), event: \\(e)\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"PublishSubject\"><a href=\"#PublishSubject\" class=\"headerlink\" title=\"PublishSubject\"></a>PublishSubject</h3><p><code>PublishSubject</code> 会发送订阅者从订阅之后的事件序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"PublishSubject\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subject = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: subject)</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"a\"</span>))</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"b\"</span>))</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: subject)</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"c\"</span>))</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"d\"</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"type\">PublishSubject</span> example ---</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(d)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(d)</div></pre></td></tr></table></figure>\n<h3 id=\"ReplaySubject\"><a href=\"#ReplaySubject\" class=\"headerlink\" title=\"ReplaySubject\"></a>ReplaySubject</h3><p><code>ReplaySubject</code> 在新的订阅对象订阅的时候会补发所有已经发送过的数据队列， <code>bufferSize</code> 是缓冲区的大小，决定了补发队列的最大值。如果 <code>bufferSize</code> 是1，那么新的订阅者出现的时候就会补发上一个事件，如果是2，则补两个，以此类推。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"ReplaySubject\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subject = <span class=\"type\">ReplaySubject</span>&lt;<span class=\"type\">String</span>&gt;.create(bufferSize: <span class=\"number\">1</span>)</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: subject)</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"a\"</span>))</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"b\"</span>))</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: subject)</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"c\"</span>))</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"d\"</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"type\">ReplaySubject</span> example ---</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(b) <span class=\"comment\">// 补了一个 b</span></div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(d)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(d)</div></pre></td></tr></table></figure>\n<h3 id=\"BehaviorSubject\"><a href=\"#BehaviorSubject\" class=\"headerlink\" title=\"BehaviorSubject\"></a>BehaviorSubject</h3><p><code>BehaviorSubject</code> 在新的订阅对象订阅的时候会发送最近发送的事件，如果没有则发送一个默认值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"BehaviorSubject\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subject = <span class=\"type\">BehaviorSubject</span>(value: <span class=\"string\">\"z\"</span>)</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: subject)</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"a\"</span>))</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"b\"</span>))</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: subject)</div><div class=\"line\">    subject.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"c\"</span>))</div><div class=\"line\">    subject.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"type\">BehaviorSubject</span> example ---</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(z)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(b)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Completed</span></div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"Variable\"><a href=\"#Variable\" class=\"headerlink\" title=\"Variable\"></a>Variable</h3><p><code>Variable</code> 是基于 <code>BehaviorSubject</code> 的一层封装，它的优势是：不会被显式终结。即：不会收到 <code>.Completed</code> 和 <code>.Error</code> 这类的终结事件，它会主动在析构的时候发送 <code>.Complete</code> 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"Variable\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> variable = <span class=\"type\">Variable</span>(<span class=\"string\">\"z\"</span>)</div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"1\"</span>, sequence: variable)</div><div class=\"line\">    variable.value = <span class=\"string\">\"a\"</span></div><div class=\"line\">    variable.value = <span class=\"string\">\"b\"</span></div><div class=\"line\">    writeSequenceToConsole(<span class=\"string\">\"2\"</span>, sequence: variable)</div><div class=\"line\">    variable.value = <span class=\"string\">\"c\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"type\">Variable</span> example ---</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(z)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(a)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(b)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(b)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Next</span>(<span class=\"built_in\">c</span>)</div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">1</span>, event: <span class=\"type\">Completed</span></div><div class=\"line\"><span class=\"type\">Subscription</span>: <span class=\"number\">2</span>, event: <span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Transform\"><a href=\"#Transform\" class=\"headerlink\" title=\"Transform\"></a>Transform</h2><p>我们可以对序列做一些转换，类似于 <code>Swift</code> 中 <code>CollectionType</code> 的各种转换。在以前的坑中曾经提到过，可以参考：<a href=\"https://blog.callmewhy.com/2015/05/11/functional-reactive-programming-1/#函数式的函数/\">函数式的函数</a>。</p>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p><code>map</code> 就是对每个元素都用函数做一次转换，挨个映射一遍。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"map\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> originalSequence = sequenceOf(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</div><div class=\"line\">    originalSequence</div><div class=\"line\">        .<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span> * <span class=\"number\">2</span> &#125;</div><div class=\"line\">        .subscribe &#123; <span class=\"built_in\">print</span>($<span class=\"number\">0</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"built_in\">map</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"flatMap\"><a href=\"#flatMap\" class=\"headerlink\" title=\"flatMap\"></a>flatMap</h3><p><code>map</code> 在做转换的时候很容易出现『升维』的情况，即：转变之后，从一个序列变成了一个序列的序列。</p>\n<p>什么是『升维』？在集合中我们可以举这样一个例子，我有一个好友列表 <code>[p1, p2, p3]</code>，那么如果要获取我好友的好友的列表，可以这样做：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myFriends.<span class=\"built_in\">map</span> &#123; $<span class=\"number\">0</span>.getFriends() &#125;</div></pre></td></tr></table></figure>\n<p>结果就成了 <code>[[p1-1, p1-2, p1-3], [p2-1], [p3-1, p3-2]]</code> ，这就成了好友的好友列表的列表了。这就是一个『升维』的例子。</p>\n<p>（以上内容文档中依旧没有，依旧是我瞎掰的，依旧欢迎有错误当面打脸(￣ε(#￣)☆╰╮(￣▽￣///))</p>\n<p>在 <code>Swift</code> 中，我们可以用 <code>flatMap</code> 过滤掉 <code>map</code> 之后的 <code>nil</code> 结果。在 <code>Rx</code> 中， <code>flatMap</code> 可以把一个序列转换成一组序列，然后再把这一组序列『拍扁』成一个序列。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"flatMap\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceInt = sequenceOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceString = sequenceOf(<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"--\"</span>)</div><div class=\"line\">    sequenceInt</div><div class=\"line\">        .flatMap &#123; int <span class=\"keyword\">in</span></div><div class=\"line\">            sequenceString</div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- flatMap example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(--)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(--)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(--)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"scan\"><a href=\"#scan\" class=\"headerlink\" title=\"scan\"></a>scan</h3><p><code>scan</code> 有点像 <code>reduce</code> ，它会把每次的运算结果累积起来，作为下一次运算的输入值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"scan\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceToSum = sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\">    sequenceToSum</div><div class=\"line\">        .scan(<span class=\"number\">0</span>) &#123; acum, elem <span class=\"keyword\">in</span></div><div class=\"line\">            acum + elem</div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- scan example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">15</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Filtering\"><a href=\"#Filtering\" class=\"headerlink\" title=\"Filtering\"></a>Filtering</h2><p>除了上面的各种转换，我们还可以对序列进行过滤。</p>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p><code>filter</code> 只会让符合条件的元素通过。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"filter\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>)</div><div class=\"line\">        .<span class=\"built_in\">filter</span> &#123;</div><div class=\"line\">            $<span class=\"number\">0</span> % <span class=\"number\">2</span> == <span class=\"number\">0</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"built_in\">filter</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"distinctUntilChanged\"><a href=\"#distinctUntilChanged\" class=\"headerlink\" title=\"distinctUntilChanged\"></a>distinctUntilChanged</h3><p><code>distinctUntilChanged</code> 会废弃掉重复的事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"distinctUntilChanged\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>)</div><div class=\"line\">        .distinctUntilChanged()</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- distinctUntilChanged example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"take\"><a href=\"#take\" class=\"headerlink\" title=\"take\"></a>take</h3><p><code>take</code> 只获取序列中的前 <code>n</code> 个事件，在满足数量之后会自动 <code>.Completed</code> 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"take\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</div><div class=\"line\">        .take(<span class=\"number\">3</span>)</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- take example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"throttle-VS-debounce\"><a href=\"#throttle-VS-debounce\" class=\"headerlink\" title=\"throttle VS. debounce\"></a>throttle VS. debounce</h3><p><code>throttle</code> 和 <code>debounce</code> 目的都是控制某个时间段内事件序列的速度。但是又有差别：</p>\n<ul>\n<li><code>debounce</code> : <code>空闲控制</code>  空闲时间必须 <code>&gt;=</code> 固定的时间，事件序列才会被放行</li>\n<li><code>throttle</code> : <code>频率控制</code>  事件序列满足 <code>1/delay</code> 才会被放行</li>\n</ul>\n<p>一般的按钮点击、用户输入、等都属于频率控制，应该使用 <code>throttle</code> 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> searchResults = searchBar.rx.text.orEmpty</div><div class=\"line\">    .throttle(<span class=\"number\">0.3</span>, scheduler: <span class=\"type\">MainScheduler</span>.instance)</div><div class=\"line\">    .distinctUntilChanged()</div><div class=\"line\">    .flatMapLatest &#123; query -&gt; <span class=\"type\">Observable</span>&lt;[<span class=\"type\">Repository</span>]&gt; <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"keyword\">if</span> query.isEmpty &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> .just([])</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> searchGitHub(query)</div><div class=\"line\">            .catchErrorJustReturn([])</div><div class=\"line\">    &#125;</div><div class=\"line\">    .observeOn(<span class=\"type\">MainScheduler</span>.instance)</div></pre></td></tr></table></figure>\n<h2 id=\"Combining\"><a href=\"#Combining\" class=\"headerlink\" title=\"Combining\"></a>Combining</h2><p>这部分是关于序列的运算，可以将多个序列源进行组合拼装成一个新的事件序列。</p>\n<h3 id=\"startWith\"><a href=\"#startWith\" class=\"headerlink\" title=\"startWith\"></a>startWith</h3><p><code>startWith</code> 会在队列开始之前插入一个事件元素。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"startWith\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subscription = sequenceOf(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</div><div class=\"line\">        .startWith(<span class=\"number\">3</span>)</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- startWith example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"combineLatest\"><a href=\"#combineLatest\" class=\"headerlink\" title=\"combineLatest\"></a>combineLatest</h3><p>如果存在两条事件队列，需要同时监听，那么每当有新的事件发生的时候，<code>combineLatest</code> 会将每个队列的最新的一个元素进行合并。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"combineLatest 1\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> intOb1 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">    <span class=\"keyword\">let</span> intOb2 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    combineLatest(intOb1, intOb2) &#123;</div><div class=\"line\">        <span class=\"string\">\"\\($0) \\($1)\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"A\"</span>))</div><div class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"B\"</span>))</div><div class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- combineLatest <span class=\"number\">1</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span> <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span> <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span> <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h3><p><code>zip</code> 人如其名，就是合并两条队列用的，不过它会等到两个队列的元素一一对应地凑齐了之后再合并，正如<a href=\"http://weibo.com/mrgreenhand\">百折不撓的米斯特菜</a>所提醒的， <code>zip</code> 就像是拉链一样，两根拉链拉着拉着合并到了一根上：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"zip 1\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> intOb1 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">    <span class=\"keyword\">let</span> intOb2 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    <span class=\"built_in\">zip</span>(intOb1, intOb2) &#123;</div><div class=\"line\">        <span class=\"string\">\"\\($0) \\($1)\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"A\"</span>))</div><div class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"B\"</span>))</div><div class=\"line\">    intOb1.on(.<span class=\"type\">Next</span>(<span class=\"string\">\"C\"</span>))</div><div class=\"line\">    intOb2.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"built_in\">zip</span> <span class=\"number\">1</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">A</span> <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"type\">B</span> <span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h3><p><code>merge</code> 就是 <code>merge</code> 啦，把两个队列按照顺序组合在一起。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"merge 1\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> subject1 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    <span class=\"keyword\">let</span> subject2 = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequenceOf(subject1, subject2)</div><div class=\"line\">        .merge()</div><div class=\"line\">        .subscribeNext &#123; int <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(int)</div><div class=\"line\">        &#125;</div><div class=\"line\">    subject1.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    subject1.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">    subject2.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</div><div class=\"line\">    subject1.on(.<span class=\"type\">Next</span>(<span class=\"number\">4</span>))</div><div class=\"line\">    subject2.on(.<span class=\"type\">Next</span>(<span class=\"number\">5</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- merge <span class=\"number\">1</span> example ---</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure>\n<h3 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h3><p>当你的事件序列是一个事件序列的序列 (<code>Observable&lt;Observable&lt;T&gt;&gt;</code>) 的时候，（可以理解成二维序列？），可以使用 <code>switch</code> 将序列的序列平铺成一维，并且在出现新的序列的时候，自动切换到最新的那个序列上。和 <code>merge</code> 相似的是，它也是起到了将多个序列『拍平』成一条序列的作用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"switchLatest\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> var1 = <span class=\"type\">Variable</span>(<span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> var2 = <span class=\"type\">Variable</span>(<span class=\"number\">200</span>)</div><div class=\"line\">    <span class=\"comment\">// var3 is like an Observable&lt;Observable&lt;Int&gt;&gt;</span></div><div class=\"line\">    <span class=\"keyword\">let</span> var3 = <span class=\"type\">Variable</span>(var1)</div><div class=\"line\">    <span class=\"keyword\">let</span> d = var3</div><div class=\"line\">        .switchLatest()</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    var1.value = <span class=\"number\">1</span></div><div class=\"line\">    var1.value = <span class=\"number\">2</span></div><div class=\"line\">    var1.value = <span class=\"number\">3</span></div><div class=\"line\">    var1.value = <span class=\"number\">4</span></div><div class=\"line\">    var3.value = var2</div><div class=\"line\">    var2.value = <span class=\"number\">201</span></div><div class=\"line\">    var1.value = <span class=\"number\">5</span></div><div class=\"line\">    var3.value = var1</div><div class=\"line\">    var2.value = <span class=\"number\">202</span></div><div class=\"line\">    var1.value = <span class=\"number\">6</span></div><div class=\"line\">&#125;</div><div class=\"line\">--- switchLatest example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">200</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">201</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">6</span>)</div></pre></td></tr></table></figure>\n<p>注意，虽然都是『拍平』，但是和 <code>flatmap</code> 是不同的， <code>flatmap</code> 是将一条序列变成另一条序列，而这变换过程会让维度变高，所以需要『拍平』，而 <code>switch</code> 是将本来二维的序列（序列的序列）拍平成了一维的序列。</p>\n<h2 id=\"Error-Handling\"><a href=\"#Error-Handling\" class=\"headerlink\" title=\"Error Handling\"></a>Error Handling</h2><p>在事件序列中，遇到异常也是很正常的事情，有以下几种处理异常的手段。</p>\n<h3 id=\"catchError\"><a href=\"#catchError\" class=\"headerlink\" title=\"catchError\"></a>catchError</h3><p><code>catchError</code> 可以捕获异常事件，并且在后面无缝接上另一段事件序列，丝毫没有异常的痕迹。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"catchError 1\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceThatFails = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    <span class=\"keyword\">let</span> recoverySequence = sequenceOf(<span class=\"number\">100</span>, <span class=\"number\">200</span>)</div><div class=\"line\">    sequenceThatFails</div><div class=\"line\">        .catchError &#123; error <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"keyword\">return</span> recoverySequence</div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequenceThatFails.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequenceThatFails.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">    sequenceThatFails.on(.<span class=\"type\">Error</span>(<span class=\"type\">NSError</span>(domain: <span class=\"string\">\"Test\"</span>, code: <span class=\"number\">0</span>, userInfo: <span class=\"literal\">nil</span>)))</div><div class=\"line\">&#125;</div><div class=\"line\">--- catchError <span class=\"number\">1</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">200</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"retry\"><a href=\"#retry\" class=\"headerlink\" title=\"retry\"></a>retry</h3><p><code>retry</code> 顾名思义，就是在出现异常的时候会再去从头订阅事件序列，妄图通过『从头再来』解决异常。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"retry\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span> = <span class=\"number\">1</span> <span class=\"comment\">// bad practice, only for example purposes</span></div><div class=\"line\">    <span class=\"keyword\">let</span> funnyLookingSequence: <span class=\"type\">Observable</span>&lt;<span class=\"type\">Int</span>&gt; = create &#123; observer <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"keyword\">let</span> error = <span class=\"type\">NSError</span>(domain: <span class=\"string\">\"Test\"</span>, code: <span class=\"number\">0</span>, userInfo: <span class=\"literal\">nil</span>)</div><div class=\"line\">        observer.on(.<span class=\"type\">Next</span>(<span class=\"number\">0</span>))</div><div class=\"line\">        observer.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">count</span> &lt; <span class=\"number\">2</span> &#123;</div><div class=\"line\">            observer.on(.<span class=\"type\">Error</span>(error))</div><div class=\"line\">            <span class=\"built_in\">count</span>++</div><div class=\"line\">        &#125;</div><div class=\"line\">        observer.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">        observer.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">NopDisposable</span>.instance</div><div class=\"line\">    &#125;</div><div class=\"line\">    funnyLookingSequence</div><div class=\"line\">        .retry()</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- retry example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Utility\"><a href=\"#Utility\" class=\"headerlink\" title=\"Utility\"></a>Utility</h2><p>这里列举了针对事件序列的一些方法。</p>\n<h3 id=\"subscribe\"><a href=\"#subscribe\" class=\"headerlink\" title=\"subscribe\"></a>subscribe</h3><p><code>subscribe</code> 在前面已经接触过了，有新的事件就会触发。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"subscribe\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceOfInts = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequenceOfInts</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">--- subscribe example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"subscribeNext\"><a href=\"#subscribeNext\" class=\"headerlink\" title=\"subscribeNext\"></a>subscribeNext</h3><p><code>subscribeNext</code> 也是订阅，但是只订阅 <code>.Next</code> 事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"subscribeNext\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceOfInts = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequenceOfInts</div><div class=\"line\">        .subscribeNext &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">--- subscribeNext example ---</div><div class=\"line\"><span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h3 id=\"subscribeCompleted\"><a href=\"#subscribeCompleted\" class=\"headerlink\" title=\"subscribeCompleted\"></a>subscribeCompleted</h3><p><code>subscribeCompleted</code> 是只订阅 <code>.Completed</code> 完成事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"subscribeCompleted\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceOfInts = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequenceOfInts</div><div class=\"line\">        .subscribeCompleted &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"It's completed\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">--- subscribeCompleted example ---</div><div class=\"line\"><span class=\"type\">It's</span> completed</div></pre></td></tr></table></figure>\n<h3 id=\"subscribeError\"><a href=\"#subscribeError\" class=\"headerlink\" title=\"subscribeError\"></a>subscribeError</h3><p><code>subscribeError</code> 只订阅 <code>.Error</code> 失败事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"subscribeError\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceOfInts = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequenceOfInts</div><div class=\"line\">        .subscribeError &#123; error <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"built_in\">print</span>(error)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Error</span>(<span class=\"type\">NSError</span>(domain: <span class=\"string\">\"Examples\"</span>, code: -<span class=\"number\">1</span>, userInfo: <span class=\"literal\">nil</span>)))</div><div class=\"line\">&#125;</div><div class=\"line\">--- subscribeError example ---</div><div class=\"line\"><span class=\"type\">Error</span> <span class=\"type\">Domain</span>=<span class=\"type\">Examples</span> <span class=\"type\">Code</span>=-<span class=\"number\">1</span> <span class=\"string\">\"The operation couldn’t be completed. (Examples error -1.)\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"doOn\"><a href=\"#doOn\" class=\"headerlink\" title=\"doOn\"></a>doOn</h3><p><code>doOn</code> 可以监听事件，并且在事件发生之前调用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"doOn\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequenceOfInts = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequenceOfInts</div><div class=\"line\">        .doOn &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"Intercepted event \\($0)\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequenceOfInts.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">--- doOn example ---</div><div class=\"line\"><span class=\"type\">Intercepted</span> event <span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Intercepted</span> event <span class=\"type\">Completed</span></div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Conditional\"><a href=\"#Conditional\" class=\"headerlink\" title=\"Conditional\"></a>Conditional</h2><p>我们可以对多个事件序列做一些复杂的逻辑判断。</p>\n<h3 id=\"takeUntil\"><a href=\"#takeUntil\" class=\"headerlink\" title=\"takeUntil\"></a>takeUntil</h3><p><code>takeUntil</code> 其实就是 <code>take</code> ，它会在终于等到那个事件之后触发 <code>.Completed</code> 事件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"takeUntil\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> originalSequence = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    <span class=\"keyword\">let</span> whenThisSendsNextWorldStops = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    originalSequence</div><div class=\"line\">        .takeUntil(whenThisSendsNextWorldStops)</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    originalSequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    originalSequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">    whenThisSendsNextWorldStops.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    originalSequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- takeUntil example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h3 id=\"takeWhile\"><a href=\"#takeWhile\" class=\"headerlink\" title=\"takeWhile\"></a>takeWhile</h3><p><code>takeWhile</code> 则是可以通过状态语句判断是否继续 <code>take</code> 。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"takeWhile\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> sequence = <span class=\"type\">PublishSubject</span>&lt;<span class=\"type\">Int</span>&gt;()</div><div class=\"line\">    sequence</div><div class=\"line\">        .takeWhile &#123; int <span class=\"keyword\">in</span></div><div class=\"line\">            int &lt; <span class=\"number\">2</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    sequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    sequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">    sequence.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- takeWhile example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Aggregate\"><a href=\"#Aggregate\" class=\"headerlink\" title=\"Aggregate\"></a>Aggregate</h2><p>我们可以对事件序列做一些集合运算。</p>\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h3><p><code>concat</code> 可以把多个事件序列合并起来。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"concat\"</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> var1 = <span class=\"type\">BehaviorSubject</span>(value: <span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> var2 = <span class=\"type\">BehaviorSubject</span>(value: <span class=\"number\">200</span>)</div><div class=\"line\">    <span class=\"comment\">// var3 is like an Observable&lt;Observable&lt;Int&gt;&gt;</span></div><div class=\"line\">    <span class=\"keyword\">let</span> var3 = <span class=\"type\">BehaviorSubject</span>(value: var1)</div><div class=\"line\">    <span class=\"keyword\">let</span> d = var3</div><div class=\"line\">        .concat()</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    var1.on(.<span class=\"type\">Next</span>(<span class=\"number\">1</span>))</div><div class=\"line\">    var1.on(.<span class=\"type\">Next</span>(<span class=\"number\">2</span>))</div><div class=\"line\">    var3.on(.<span class=\"type\">Next</span>(var2))</div><div class=\"line\">    var2.on(.<span class=\"type\">Next</span>(<span class=\"number\">201</span>))</div><div class=\"line\">    var1.on(.<span class=\"type\">Next</span>(<span class=\"number\">3</span>))</div><div class=\"line\">    var1.on(.<span class=\"type\">Completed</span>)</div><div class=\"line\">    var2.on(.<span class=\"type\">Next</span>(<span class=\"number\">202</span>))</div><div class=\"line\">&#125;</div><div class=\"line\">--- concat example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">201</span>)</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">202</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><p>这里的 <code>reduce</code> 和 <code>CollectionType</code> 中的 <code>reduce</code> 是一个意思，都是指通过对一系列数据的运算最后生成一个结果。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">example(<span class=\"string\">\"reduce\"</span>) &#123;</div><div class=\"line\">    sequenceOf(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>)</div><div class=\"line\">        .<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, +)</div><div class=\"line\">        .subscribe &#123;</div><div class=\"line\">            <span class=\"built_in\">print</span>($<span class=\"number\">0</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">--- <span class=\"built_in\">reduce</span> example ---</div><div class=\"line\"><span class=\"type\">Next</span>(<span class=\"number\">45</span>)</div><div class=\"line\"><span class=\"type\">Completed</span></div></pre></td></tr></table></figure>\n<h2 id=\"Connectable\"><a href=\"#Connectable\" class=\"headerlink\" title=\"Connectable\"></a>Connectable</h2><p>坑待填，Xcode 里这个操场跑不起来了。</p>"},{"title":"Swift 编译时性能优化笔记","date":"2017-01-17T05:47:17.000Z","_content":"\nXcode在编译Swift代码的时候速度会越来越慢，就此查找原因，并列出自己的优化思路。\n\n<!--more-->\n\n### Xcode8.2 \n\n添加`User-Defind`新的`SWIFT_WHOLE_MODULE_OPTIMIZATION = YES`可以过滤为修改framework。\n\n### 针对运算符`??`的优化\n\n在使用`??`时，并不是所有的都需要优化，包裹在循环中的`??`会比较耗时比较厉害，目前不知道为啥，估计编译的时候需要检查的此时比较多吧😂。\n\n#### 尝试显式解包\n\n__思路__：`??`编译慢，就不用`??`，直接使用`if else`\n__实施__: 由于工程中使用的`??`比较多，所以比较修改起来比较麻烦。但是可以解决问题。真不行写方法转化调用喽。。\n\n#### 错误的尝试了重载运算符`??`方式\n\n__思路__: `??`运算符编译耗时较多，直觉是`??`实现有复杂的操作,重新按照显式解包的方案进行实现。\n__实施__: \n- 分析`??`的使用场景，左侧为T?,右侧为T，返回值T\n- 重载函数名定义`public func ?? <T>(left: T?, right: T) -> T`\n- 实现\n- 编译\n- error：`Ambiguous use of operator '??'`\n- 思考：这丫的在重载运算符的时候不能使用泛型吧。。\n- 更改函数为`public func ?? <Any>(left: Any?, right: Any) -> Any`\n- PL. OK了，可是问题来了，系统的`??`是可以返回对应的类型，可是这样重载之后返回一个`Any`，代码中如果出现`let str = str1 ?? \"\"`则str类型就变为`Any`而不是`String`。__巨坑__\n- 顾不了那么多了，真不行一个一个跑。于是先修改一个较为严重的`String`类型。\n- 尝试编译，结果时间惊人的没有变化。。依旧居高不下\n- 以失败告终。。\n\n__总结__: 这个`??`耗时较多并不是因为`??`的实现有问题，__猜测__是在为`??`准备左右参数的时候需要进行一层层的解包确定类型，再加上`??`可能有重载版本，进行类型匹配的时候比较耗时。\n\n#### 尝试扩展方法进行优化\n\n__思路__: 既然运算符会导致编译慢，那么就尝试使用方法直接进行转换。\n__实现__: 代码如下：\n```swift\nstruct Operator {\n    ///  ==> ??\n    static func `try`<T>(_ origin: T?, _ then: T) -> T {\n        guard let value = origin else {\n            return then\n        }\n        return value\n    }\n}\n```\n\n测试发现上述方法可以优化时间。\n\n---------\n\n### 以下原文出自：[关于 Swift 编译时性能优化的一些思考](https://github.com/yllziv/gold-miner/blob/1bfbb3deefd27138097415422bec2bb7e98e9715/TODO/regarding-swift-build-time-optimizations.md)\n\n---------\n\n>* 原文链接 : [Regarding Swift build time optimizations](https://medium.com/@RobertGummesson/regarding-swift-build-time-optimizations-fc92cdd91e31#.w81y3zhjr)\n* 原文作者 : [Robert Gummesson](https://medium.com/@RobertGummesson)\n* 译文出自 : [掘金翻译计划](https://github.com/xitu/gold-miner)\n* 译者 : [杨龙龙](http://www.yanglonglong.com)\n* 校对者: [申冠华](https://github.com/shenAlexy), [Jack King](https://github.com/Jack-Kingdom)\n\n![](http://ww3.sinaimg.cn/large/005SiNxygw1f3p3jimjllj31jk0dwqft.jpg)\n\n#### 关于 Swift 编译时性能优化的一些思考\n\n上周，我读了 [@nickoneill](https://medium.com/@nickoneill) 一篇优秀的帖子 [Speeding Up Slow Swift Build Times](https://medium.com/swift-programming/speeding-up-slow-swift-build-times-922feeba5780#.k0pngnkns) 之后，我发现用一个略不同以往的角度去读Swift代码，并不是很难。\n\n一行之前很简洁的代码，现在却出现了新的问题——它是否应该重构为9行代码来达到更快的编译速度？ (_nil coalescing 运算符就是一个例子_)孰轻孰重？简洁的代码还是对编译器友好的代码？ 我觉得，它取决于项目的大小和开发者的想法。\n\n#### 但请等等... 这里有一个Xcode插件\n\n在讲一些例子之前，我首先想到了通过手工提取日志信息是非常耗时的事情。通过命令行工具实现会相对容易一些，但是我把它往前推进了一步：集成为[Xcode插件](https://github.com/RobertGummesson/BuildTimeAnalyzer-for-Xcode)。\n\n![](http://ww1.sinaimg.cn/large/005SiNxygw1f3p3hhivppj30m809lwis.jpg)\n\n在这个例子中，最初的目的仅仅是识别并修复代码中最耗时的地方，但是现在我觉得它成为了一个必须要迭代的过程。这样我才可以更加高效地构建代码，并且防止在项目中出现耗时的函数。\n\n#### 不少惊喜\n\n我经常在不同的 Git 分支中跳转，并且等待一个暖慢的项目编译简直是在浪费我的生命。因此我思考了很长时间，一个玩具项目（大约两万行 Swift 代码）会编译如此长的时间。\n\n当我知道是什么原因导致它如此慢之后，我不得不承认我震惊了，一行代码居然需要几秒的编译时间。\n\n让我们来看几个例子。\n\n#### Nil 合并运算符\n\n编译器肯定不喜欢这里的第一种方法。在展开下面两处简写的代码之后，构建时间减少了 **99.4%**。\n\n    // 构建时间： 5238.3ms\n    return CGSize(width: size.width + (rightView?.bounds.width ?? 0) + (leftView?.bounds.width ?? 0) + 22, height: bounds.height)\n\n    // 构建时间： 32.4ms\n    var padding: CGFloat = 22\n    if let rightView = rightView {\n        padding += rightView.bounds.width\n    }\n\n    if let leftView = leftView {\n        padding += leftView.bounds.width\n    }\n    return CGSizeMake(size.width + padding, bounds.height)\n\n#### ArrayOfStuff + [Stuff]\n\n这个看起来像下面这样：\n\n    return ArrayOfStuff + [Stuff]  \n    // 而不是  \n    ArrayOfStuff.append(stuff)  \n    return ArrayOfStuff\n\n我经常这么做，并且它影响了每次构建的时间。下面是最糟糕的一个例子，改写后构建时间可以减少 **97.9%**。\n\n    // 构建时间： 1250.3ms\n    let systemOptions = [ 7, 14, 30, -1 ]\n    let systemNames = (0...2).map{ String(format: localizedFormat, systemOptions[$0]) } + [NSLocalizedString(\"everything\", comment: \"\")]\n    // Some code in-between \n    labelNames = Array(systemNames[0..<count]) + [systemNames.last!]\n\n    // 构建时间： 25.5ms\n    let systemOptions = [ 7, 14, 30, -1 ]\n    var systemNames = systemOptions.dropLast().map{ String(format: localizedFormat, $0) }\n    systemNames.append(NSLocalizedString(\"everything\", comment: \"\"))\n    // Some code in-between\n    labelNames = Array(systemNames[0..<count])\n    labelNames.append(systemNames.last!)\n\n#### 三元运算符\n\n仅仅是通过替换三元运算符为 if else 语句就能减少 **92.9%** 的构建时间。如果使用一个for循环替换 _map_ 函数，它又能减少另一个 75%（但是我的眼睛可就受不了咯😉）。\n\n    // 构建时间： 239.0ms\n    let labelNames = type == 0 ? (1...5).map{type0ToString($0)} : (0...2).map{type1ToString($0)}\n\n    // 构建时间： 16.9ms\n    var labelNames: [String]\n    if type == 0 {\n        labelNames = (1...5).map{type0ToString($0)}\n    } else {\n        labelNames = (0...2).map{type1ToString($0)}\n    }\n\n#### 转换 CGFloat 到 CGFloat\n\n这里我所说的并不一定正确。变量已经使用了 CGFloat 并且有一些括号也是多余的。在清理了这些冗余之后，构建时间能减少 **99.9%**。\n\n    // 构建时间： 3431.7 ms\n    return CGFloat(M_PI) * (CGFloat((hour + hourDelta + CGFloat(minute + minuteDelta) / 60) * 5) - 15) * unit / 180\n\n    // 构建时间： 3.0ms\n    return CGFloat(M_PI) * ((hour + hourDelta + (minute + minuteDelta) / 60) * 5 - 15) * unit / 180\n\n#### Round()\n\n这个一个非常奇怪的例子，下面的例子中变量是一个局部变量与实例变量的混合。这个问题可能不是四舍五入本身，而是结合代码的方法。去掉四舍五入的方法大概能减少 **97.6%** 的构建时间。\n\n    // 构建时间： 1433.7ms\n    let expansion = a — b — c + round(d * 0.66) + e\n    // 构建时间： 34.7ms\n    let expansion = a — b — c + d * 0.66 + e\n\n注意：所有的测试都在 MacBook Air (13-inch, Mid 2013)中进行。\n\n#### 尝试它\n\n无论你是否面临过构建时间太长的问题，编写对编译器友好的代码都是非常有用的。我确定你自己会在其中找到一些惊喜。作为参考，这里有完整的代码，在我的工程中可以5秒内完成编译...\n\n    import UIKit\n\n    class CMExpandingTextField: UITextField {\n\n        func textFieldEditingChanged() {\n            invalidateIntrinsicContentSize()\n        }\n\n        override func intrinsicContentSize() -> CGSize {\n            if isFirstResponder(), let text = text {\n                let size = text.sizeWithAttributes(typingAttributes)\n                return CGSize(width: size.width + (rightView?.bounds.width ?? 0) + (leftView?.bounds.width ?? 0) + 22, height: bounds.height)\n            }\n            return super.intrinsicContentSize()\n        }\n    }\n\n","source":"_posts/swift-build-times.md","raw":"---\ntitle: Swift 编译时性能优化笔记\ndate: 2017-01-17 13:47:17\ntags:\ncategories:\n    - Swift\n---\n\nXcode在编译Swift代码的时候速度会越来越慢，就此查找原因，并列出自己的优化思路。\n\n<!--more-->\n\n### Xcode8.2 \n\n添加`User-Defind`新的`SWIFT_WHOLE_MODULE_OPTIMIZATION = YES`可以过滤为修改framework。\n\n### 针对运算符`??`的优化\n\n在使用`??`时，并不是所有的都需要优化，包裹在循环中的`??`会比较耗时比较厉害，目前不知道为啥，估计编译的时候需要检查的此时比较多吧😂。\n\n#### 尝试显式解包\n\n__思路__：`??`编译慢，就不用`??`，直接使用`if else`\n__实施__: 由于工程中使用的`??`比较多，所以比较修改起来比较麻烦。但是可以解决问题。真不行写方法转化调用喽。。\n\n#### 错误的尝试了重载运算符`??`方式\n\n__思路__: `??`运算符编译耗时较多，直觉是`??`实现有复杂的操作,重新按照显式解包的方案进行实现。\n__实施__: \n- 分析`??`的使用场景，左侧为T?,右侧为T，返回值T\n- 重载函数名定义`public func ?? <T>(left: T?, right: T) -> T`\n- 实现\n- 编译\n- error：`Ambiguous use of operator '??'`\n- 思考：这丫的在重载运算符的时候不能使用泛型吧。。\n- 更改函数为`public func ?? <Any>(left: Any?, right: Any) -> Any`\n- PL. OK了，可是问题来了，系统的`??`是可以返回对应的类型，可是这样重载之后返回一个`Any`，代码中如果出现`let str = str1 ?? \"\"`则str类型就变为`Any`而不是`String`。__巨坑__\n- 顾不了那么多了，真不行一个一个跑。于是先修改一个较为严重的`String`类型。\n- 尝试编译，结果时间惊人的没有变化。。依旧居高不下\n- 以失败告终。。\n\n__总结__: 这个`??`耗时较多并不是因为`??`的实现有问题，__猜测__是在为`??`准备左右参数的时候需要进行一层层的解包确定类型，再加上`??`可能有重载版本，进行类型匹配的时候比较耗时。\n\n#### 尝试扩展方法进行优化\n\n__思路__: 既然运算符会导致编译慢，那么就尝试使用方法直接进行转换。\n__实现__: 代码如下：\n```swift\nstruct Operator {\n    ///  ==> ??\n    static func `try`<T>(_ origin: T?, _ then: T) -> T {\n        guard let value = origin else {\n            return then\n        }\n        return value\n    }\n}\n```\n\n测试发现上述方法可以优化时间。\n\n---------\n\n### 以下原文出自：[关于 Swift 编译时性能优化的一些思考](https://github.com/yllziv/gold-miner/blob/1bfbb3deefd27138097415422bec2bb7e98e9715/TODO/regarding-swift-build-time-optimizations.md)\n\n---------\n\n>* 原文链接 : [Regarding Swift build time optimizations](https://medium.com/@RobertGummesson/regarding-swift-build-time-optimizations-fc92cdd91e31#.w81y3zhjr)\n* 原文作者 : [Robert Gummesson](https://medium.com/@RobertGummesson)\n* 译文出自 : [掘金翻译计划](https://github.com/xitu/gold-miner)\n* 译者 : [杨龙龙](http://www.yanglonglong.com)\n* 校对者: [申冠华](https://github.com/shenAlexy), [Jack King](https://github.com/Jack-Kingdom)\n\n![](http://ww3.sinaimg.cn/large/005SiNxygw1f3p3jimjllj31jk0dwqft.jpg)\n\n#### 关于 Swift 编译时性能优化的一些思考\n\n上周，我读了 [@nickoneill](https://medium.com/@nickoneill) 一篇优秀的帖子 [Speeding Up Slow Swift Build Times](https://medium.com/swift-programming/speeding-up-slow-swift-build-times-922feeba5780#.k0pngnkns) 之后，我发现用一个略不同以往的角度去读Swift代码，并不是很难。\n\n一行之前很简洁的代码，现在却出现了新的问题——它是否应该重构为9行代码来达到更快的编译速度？ (_nil coalescing 运算符就是一个例子_)孰轻孰重？简洁的代码还是对编译器友好的代码？ 我觉得，它取决于项目的大小和开发者的想法。\n\n#### 但请等等... 这里有一个Xcode插件\n\n在讲一些例子之前，我首先想到了通过手工提取日志信息是非常耗时的事情。通过命令行工具实现会相对容易一些，但是我把它往前推进了一步：集成为[Xcode插件](https://github.com/RobertGummesson/BuildTimeAnalyzer-for-Xcode)。\n\n![](http://ww1.sinaimg.cn/large/005SiNxygw1f3p3hhivppj30m809lwis.jpg)\n\n在这个例子中，最初的目的仅仅是识别并修复代码中最耗时的地方，但是现在我觉得它成为了一个必须要迭代的过程。这样我才可以更加高效地构建代码，并且防止在项目中出现耗时的函数。\n\n#### 不少惊喜\n\n我经常在不同的 Git 分支中跳转，并且等待一个暖慢的项目编译简直是在浪费我的生命。因此我思考了很长时间，一个玩具项目（大约两万行 Swift 代码）会编译如此长的时间。\n\n当我知道是什么原因导致它如此慢之后，我不得不承认我震惊了，一行代码居然需要几秒的编译时间。\n\n让我们来看几个例子。\n\n#### Nil 合并运算符\n\n编译器肯定不喜欢这里的第一种方法。在展开下面两处简写的代码之后，构建时间减少了 **99.4%**。\n\n    // 构建时间： 5238.3ms\n    return CGSize(width: size.width + (rightView?.bounds.width ?? 0) + (leftView?.bounds.width ?? 0) + 22, height: bounds.height)\n\n    // 构建时间： 32.4ms\n    var padding: CGFloat = 22\n    if let rightView = rightView {\n        padding += rightView.bounds.width\n    }\n\n    if let leftView = leftView {\n        padding += leftView.bounds.width\n    }\n    return CGSizeMake(size.width + padding, bounds.height)\n\n#### ArrayOfStuff + [Stuff]\n\n这个看起来像下面这样：\n\n    return ArrayOfStuff + [Stuff]  \n    // 而不是  \n    ArrayOfStuff.append(stuff)  \n    return ArrayOfStuff\n\n我经常这么做，并且它影响了每次构建的时间。下面是最糟糕的一个例子，改写后构建时间可以减少 **97.9%**。\n\n    // 构建时间： 1250.3ms\n    let systemOptions = [ 7, 14, 30, -1 ]\n    let systemNames = (0...2).map{ String(format: localizedFormat, systemOptions[$0]) } + [NSLocalizedString(\"everything\", comment: \"\")]\n    // Some code in-between \n    labelNames = Array(systemNames[0..<count]) + [systemNames.last!]\n\n    // 构建时间： 25.5ms\n    let systemOptions = [ 7, 14, 30, -1 ]\n    var systemNames = systemOptions.dropLast().map{ String(format: localizedFormat, $0) }\n    systemNames.append(NSLocalizedString(\"everything\", comment: \"\"))\n    // Some code in-between\n    labelNames = Array(systemNames[0..<count])\n    labelNames.append(systemNames.last!)\n\n#### 三元运算符\n\n仅仅是通过替换三元运算符为 if else 语句就能减少 **92.9%** 的构建时间。如果使用一个for循环替换 _map_ 函数，它又能减少另一个 75%（但是我的眼睛可就受不了咯😉）。\n\n    // 构建时间： 239.0ms\n    let labelNames = type == 0 ? (1...5).map{type0ToString($0)} : (0...2).map{type1ToString($0)}\n\n    // 构建时间： 16.9ms\n    var labelNames: [String]\n    if type == 0 {\n        labelNames = (1...5).map{type0ToString($0)}\n    } else {\n        labelNames = (0...2).map{type1ToString($0)}\n    }\n\n#### 转换 CGFloat 到 CGFloat\n\n这里我所说的并不一定正确。变量已经使用了 CGFloat 并且有一些括号也是多余的。在清理了这些冗余之后，构建时间能减少 **99.9%**。\n\n    // 构建时间： 3431.7 ms\n    return CGFloat(M_PI) * (CGFloat((hour + hourDelta + CGFloat(minute + minuteDelta) / 60) * 5) - 15) * unit / 180\n\n    // 构建时间： 3.0ms\n    return CGFloat(M_PI) * ((hour + hourDelta + (minute + minuteDelta) / 60) * 5 - 15) * unit / 180\n\n#### Round()\n\n这个一个非常奇怪的例子，下面的例子中变量是一个局部变量与实例变量的混合。这个问题可能不是四舍五入本身，而是结合代码的方法。去掉四舍五入的方法大概能减少 **97.6%** 的构建时间。\n\n    // 构建时间： 1433.7ms\n    let expansion = a — b — c + round(d * 0.66) + e\n    // 构建时间： 34.7ms\n    let expansion = a — b — c + d * 0.66 + e\n\n注意：所有的测试都在 MacBook Air (13-inch, Mid 2013)中进行。\n\n#### 尝试它\n\n无论你是否面临过构建时间太长的问题，编写对编译器友好的代码都是非常有用的。我确定你自己会在其中找到一些惊喜。作为参考，这里有完整的代码，在我的工程中可以5秒内完成编译...\n\n    import UIKit\n\n    class CMExpandingTextField: UITextField {\n\n        func textFieldEditingChanged() {\n            invalidateIntrinsicContentSize()\n        }\n\n        override func intrinsicContentSize() -> CGSize {\n            if isFirstResponder(), let text = text {\n                let size = text.sizeWithAttributes(typingAttributes)\n                return CGSize(width: size.width + (rightView?.bounds.width ?? 0) + (leftView?.bounds.width ?? 0) + 22, height: bounds.height)\n            }\n            return super.intrinsicContentSize()\n        }\n    }\n\n","slug":"swift-build-times","published":1,"updated":"2017-05-16T04:27:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfoj001jkhuv37trak2k","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>Xcode在编译Swift代码的时候速度会越来越慢，就此查找原因，并列出自己的优化思路。</p>\n<a id=\"more\"></a>\n<h3 id=\"Xcode8-2\"><a href=\"#Xcode8-2\" class=\"headerlink\" title=\"Xcode8.2\"></a>Xcode8.2</h3><p>添加<code>User-Defind</code>新的<code>SWIFT_WHOLE_MODULE_OPTIMIZATION = YES</code>可以过滤为修改framework。</p>\n<h3 id=\"针对运算符-的优化\"><a href=\"#针对运算符-的优化\" class=\"headerlink\" title=\"针对运算符??的优化\"></a>针对运算符<code>??</code>的优化</h3><p>在使用<code>??</code>时，并不是所有的都需要优化，包裹在循环中的<code>??</code>会比较耗时比较厉害，目前不知道为啥，估计编译的时候需要检查的此时比较多吧😂。</p>\n<h4 id=\"尝试显式解包\"><a href=\"#尝试显式解包\" class=\"headerlink\" title=\"尝试显式解包\"></a>尝试显式解包</h4><p><strong>思路</strong>：<code>??</code>编译慢，就不用<code>??</code>，直接使用<code>if else</code><br><strong>实施</strong>: 由于工程中使用的<code>??</code>比较多，所以比较修改起来比较麻烦。但是可以解决问题。真不行写方法转化调用喽。。</p>\n<h4 id=\"错误的尝试了重载运算符-方式\"><a href=\"#错误的尝试了重载运算符-方式\" class=\"headerlink\" title=\"错误的尝试了重载运算符??方式\"></a>错误的尝试了重载运算符<code>??</code>方式</h4><p><strong>思路</strong>: <code>??</code>运算符编译耗时较多，直觉是<code>??</code>实现有复杂的操作,重新按照显式解包的方案进行实现。<br><strong>实施</strong>: </p>\n<ul>\n<li>分析<code>??</code>的使用场景，左侧为T?,右侧为T，返回值T</li>\n<li>重载函数名定义<code>public func ?? &lt;T&gt;(left: T?, right: T) -&gt; T</code></li>\n<li>实现</li>\n<li>编译</li>\n<li>error：<code>Ambiguous use of operator &#39;??&#39;</code></li>\n<li>思考：这丫的在重载运算符的时候不能使用泛型吧。。</li>\n<li>更改函数为<code>public func ?? &lt;Any&gt;(left: Any?, right: Any) -&gt; Any</code></li>\n<li>PL. OK了，可是问题来了，系统的<code>??</code>是可以返回对应的类型，可是这样重载之后返回一个<code>Any</code>，代码中如果出现<code>let str = str1 ?? &quot;&quot;</code>则str类型就变为<code>Any</code>而不是<code>String</code>。<strong>巨坑</strong></li>\n<li>顾不了那么多了，真不行一个一个跑。于是先修改一个较为严重的<code>String</code>类型。</li>\n<li>尝试编译，结果时间惊人的没有变化。。依旧居高不下</li>\n<li>以失败告终。。</li>\n</ul>\n<p><strong>总结</strong>: 这个<code>??</code>耗时较多并不是因为<code>??</code>的实现有问题，<strong>猜测</strong>是在为<code>??</code>准备左右参数的时候需要进行一层层的解包确定类型，再加上<code>??</code>可能有重载版本，进行类型匹配的时候比较耗时。</p>\n<h4 id=\"尝试扩展方法进行优化\"><a href=\"#尝试扩展方法进行优化\" class=\"headerlink\" title=\"尝试扩展方法进行优化\"></a>尝试扩展方法进行优化</h4><p><strong>思路</strong>: 既然运算符会导致编译慢，那么就尝试使用方法直接进行转换。<br><strong>实现</strong>: 代码如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Operator</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">///  ==&gt; ??</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> `<span class=\"title\">try</span>`&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> origin: T?, <span class=\"number\">_</span> then: T)</span></span> -&gt; <span class=\"type\">T</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> value = origin <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> then</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> value</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试发现上述方法可以优化时间。</p>\n<hr>\n<h3 id=\"以下原文出自：关于-Swift-编译时性能优化的一些思考\"><a href=\"#以下原文出自：关于-Swift-编译时性能优化的一些思考\" class=\"headerlink\" title=\"以下原文出自：关于 Swift 编译时性能优化的一些思考\"></a>以下原文出自：<a href=\"https://github.com/yllziv/gold-miner/blob/1bfbb3deefd27138097415422bec2bb7e98e9715/TODO/regarding-swift-build-time-optimizations.md\" target=\"_blank\" rel=\"external\">关于 Swift 编译时性能优化的一些思考</a></h3><hr>\n<blockquote>\n<ul>\n<li>原文链接 : <a href=\"https://medium.com/@RobertGummesson/regarding-swift-build-time-optimizations-fc92cdd91e31#.w81y3zhjr\" target=\"_blank\" rel=\"external\">Regarding Swift build time optimizations</a></li>\n<li>原文作者 : <a href=\"https://medium.com/@RobertGummesson\" target=\"_blank\" rel=\"external\">Robert Gummesson</a></li>\n<li>译文出自 : <a href=\"https://github.com/xitu/gold-miner\" target=\"_blank\" rel=\"external\">掘金翻译计划</a></li>\n<li>译者 : <a href=\"http://www.yanglonglong.com\" target=\"_blank\" rel=\"external\">杨龙龙</a></li>\n<li>校对者: <a href=\"https://github.com/shenAlexy\" target=\"_blank\" rel=\"external\">申冠华</a>, <a href=\"https://github.com/Jack-Kingdom\" target=\"_blank\" rel=\"external\">Jack King</a></li>\n</ul>\n</blockquote>\n<p><img src=\"http://ww3.sinaimg.cn/large/005SiNxygw1f3p3jimjllj31jk0dwqft.jpg\" alt=\"\"></p>\n<h4 id=\"关于-Swift-编译时性能优化的一些思考\"><a href=\"#关于-Swift-编译时性能优化的一些思考\" class=\"headerlink\" title=\"关于 Swift 编译时性能优化的一些思考\"></a>关于 Swift 编译时性能优化的一些思考</h4><p>上周，我读了 <a href=\"https://medium.com/@nickoneill\" target=\"_blank\" rel=\"external\">@nickoneill</a> 一篇优秀的帖子 <a href=\"https://medium.com/swift-programming/speeding-up-slow-swift-build-times-922feeba5780#.k0pngnkns\" target=\"_blank\" rel=\"external\">Speeding Up Slow Swift Build Times</a> 之后，我发现用一个略不同以往的角度去读Swift代码，并不是很难。</p>\n<p>一行之前很简洁的代码，现在却出现了新的问题——它是否应该重构为9行代码来达到更快的编译速度？ (<em>nil coalescing 运算符就是一个例子</em>)孰轻孰重？简洁的代码还是对编译器友好的代码？ 我觉得，它取决于项目的大小和开发者的想法。</p>\n<h4 id=\"但请等等…-这里有一个Xcode插件\"><a href=\"#但请等等…-这里有一个Xcode插件\" class=\"headerlink\" title=\"但请等等… 这里有一个Xcode插件\"></a>但请等等… 这里有一个Xcode插件</h4><p>在讲一些例子之前，我首先想到了通过手工提取日志信息是非常耗时的事情。通过命令行工具实现会相对容易一些，但是我把它往前推进了一步：集成为<a href=\"https://github.com/RobertGummesson/BuildTimeAnalyzer-for-Xcode\" target=\"_blank\" rel=\"external\">Xcode插件</a>。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005SiNxygw1f3p3hhivppj30m809lwis.jpg\" alt=\"\"></p>\n<p>在这个例子中，最初的目的仅仅是识别并修复代码中最耗时的地方，但是现在我觉得它成为了一个必须要迭代的过程。这样我才可以更加高效地构建代码，并且防止在项目中出现耗时的函数。</p>\n<h4 id=\"不少惊喜\"><a href=\"#不少惊喜\" class=\"headerlink\" title=\"不少惊喜\"></a>不少惊喜</h4><p>我经常在不同的 Git 分支中跳转，并且等待一个暖慢的项目编译简直是在浪费我的生命。因此我思考了很长时间，一个玩具项目（大约两万行 Swift 代码）会编译如此长的时间。</p>\n<p>当我知道是什么原因导致它如此慢之后，我不得不承认我震惊了，一行代码居然需要几秒的编译时间。</p>\n<p>让我们来看几个例子。</p>\n<h4 id=\"Nil-合并运算符\"><a href=\"#Nil-合并运算符\" class=\"headerlink\" title=\"Nil 合并运算符\"></a>Nil 合并运算符</h4><p>编译器肯定不喜欢这里的第一种方法。在展开下面两处简写的代码之后，构建时间减少了 <strong>99.4%</strong>。</p>\n<pre><code>// 构建时间： 5238.3ms\nreturn CGSize(width: size.width + (rightView?.bounds.width ?? 0) + (leftView?.bounds.width ?? 0) + 22, height: bounds.height)\n\n// 构建时间： 32.4ms\nvar padding: CGFloat = 22\nif let rightView = rightView {\n    padding += rightView.bounds.width\n}\n\nif let leftView = leftView {\n    padding += leftView.bounds.width\n}\nreturn CGSizeMake(size.width + padding, bounds.height)\n</code></pre><h4 id=\"ArrayOfStuff-Stuff\"><a href=\"#ArrayOfStuff-Stuff\" class=\"headerlink\" title=\"ArrayOfStuff + [Stuff]\"></a>ArrayOfStuff + [Stuff]</h4><p>这个看起来像下面这样：</p>\n<pre><code>return ArrayOfStuff + [Stuff]  \n// 而不是  \nArrayOfStuff.append(stuff)  \nreturn ArrayOfStuff\n</code></pre><p>我经常这么做，并且它影响了每次构建的时间。下面是最糟糕的一个例子，改写后构建时间可以减少 <strong>97.9%</strong>。</p>\n<pre><code>// 构建时间： 1250.3ms\nlet systemOptions = [ 7, 14, 30, -1 ]\nlet systemNames = (0...2).map{ String(format: localizedFormat, systemOptions[$0]) } + [NSLocalizedString(&quot;everything&quot;, comment: &quot;&quot;)]\n// Some code in-between \nlabelNames = Array(systemNames[0..&lt;count]) + [systemNames.last!]\n\n// 构建时间： 25.5ms\nlet systemOptions = [ 7, 14, 30, -1 ]\nvar systemNames = systemOptions.dropLast().map{ String(format: localizedFormat, $0) }\nsystemNames.append(NSLocalizedString(&quot;everything&quot;, comment: &quot;&quot;))\n// Some code in-between\nlabelNames = Array(systemNames[0..&lt;count])\nlabelNames.append(systemNames.last!)\n</code></pre><h4 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h4><p>仅仅是通过替换三元运算符为 if else 语句就能减少 <strong>92.9%</strong> 的构建时间。如果使用一个for循环替换 <em>map</em> 函数，它又能减少另一个 75%（但是我的眼睛可就受不了咯😉）。</p>\n<pre><code>// 构建时间： 239.0ms\nlet labelNames = type == 0 ? (1...5).map{type0ToString($0)} : (0...2).map{type1ToString($0)}\n\n// 构建时间： 16.9ms\nvar labelNames: [String]\nif type == 0 {\n    labelNames = (1...5).map{type0ToString($0)}\n} else {\n    labelNames = (0...2).map{type1ToString($0)}\n}\n</code></pre><h4 id=\"转换-CGFloat-到-CGFloat\"><a href=\"#转换-CGFloat-到-CGFloat\" class=\"headerlink\" title=\"转换 CGFloat 到 CGFloat\"></a>转换 CGFloat 到 CGFloat</h4><p>这里我所说的并不一定正确。变量已经使用了 CGFloat 并且有一些括号也是多余的。在清理了这些冗余之后，构建时间能减少 <strong>99.9%</strong>。</p>\n<pre><code>// 构建时间： 3431.7 ms\nreturn CGFloat(M_PI) * (CGFloat((hour + hourDelta + CGFloat(minute + minuteDelta) / 60) * 5) - 15) * unit / 180\n\n// 构建时间： 3.0ms\nreturn CGFloat(M_PI) * ((hour + hourDelta + (minute + minuteDelta) / 60) * 5 - 15) * unit / 180\n</code></pre><h4 id=\"Round\"><a href=\"#Round\" class=\"headerlink\" title=\"Round()\"></a>Round()</h4><p>这个一个非常奇怪的例子，下面的例子中变量是一个局部变量与实例变量的混合。这个问题可能不是四舍五入本身，而是结合代码的方法。去掉四舍五入的方法大概能减少 <strong>97.6%</strong> 的构建时间。</p>\n<pre><code>// 构建时间： 1433.7ms\nlet expansion = a — b — c + round(d * 0.66) + e\n// 构建时间： 34.7ms\nlet expansion = a — b — c + d * 0.66 + e\n</code></pre><p>注意：所有的测试都在 MacBook Air (13-inch, Mid 2013)中进行。</p>\n<h4 id=\"尝试它\"><a href=\"#尝试它\" class=\"headerlink\" title=\"尝试它\"></a>尝试它</h4><p>无论你是否面临过构建时间太长的问题，编写对编译器友好的代码都是非常有用的。我确定你自己会在其中找到一些惊喜。作为参考，这里有完整的代码，在我的工程中可以5秒内完成编译…</p>\n<pre><code>import UIKit\n\nclass CMExpandingTextField: UITextField {\n\n    func textFieldEditingChanged() {\n        invalidateIntrinsicContentSize()\n    }\n\n    override func intrinsicContentSize() -&gt; CGSize {\n        if isFirstResponder(), let text = text {\n            let size = text.sizeWithAttributes(typingAttributes)\n            return CGSize(width: size.width + (rightView?.bounds.width ?? 0) + (leftView?.bounds.width ?? 0) + 22, height: bounds.height)\n        }\n        return super.intrinsicContentSize()\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"<p>Xcode在编译Swift代码的时候速度会越来越慢，就此查找原因，并列出自己的优化思路。</p>","more":"<h3 id=\"Xcode8-2\"><a href=\"#Xcode8-2\" class=\"headerlink\" title=\"Xcode8.2\"></a>Xcode8.2</h3><p>添加<code>User-Defind</code>新的<code>SWIFT_WHOLE_MODULE_OPTIMIZATION = YES</code>可以过滤为修改framework。</p>\n<h3 id=\"针对运算符-的优化\"><a href=\"#针对运算符-的优化\" class=\"headerlink\" title=\"针对运算符??的优化\"></a>针对运算符<code>??</code>的优化</h3><p>在使用<code>??</code>时，并不是所有的都需要优化，包裹在循环中的<code>??</code>会比较耗时比较厉害，目前不知道为啥，估计编译的时候需要检查的此时比较多吧😂。</p>\n<h4 id=\"尝试显式解包\"><a href=\"#尝试显式解包\" class=\"headerlink\" title=\"尝试显式解包\"></a>尝试显式解包</h4><p><strong>思路</strong>：<code>??</code>编译慢，就不用<code>??</code>，直接使用<code>if else</code><br><strong>实施</strong>: 由于工程中使用的<code>??</code>比较多，所以比较修改起来比较麻烦。但是可以解决问题。真不行写方法转化调用喽。。</p>\n<h4 id=\"错误的尝试了重载运算符-方式\"><a href=\"#错误的尝试了重载运算符-方式\" class=\"headerlink\" title=\"错误的尝试了重载运算符??方式\"></a>错误的尝试了重载运算符<code>??</code>方式</h4><p><strong>思路</strong>: <code>??</code>运算符编译耗时较多，直觉是<code>??</code>实现有复杂的操作,重新按照显式解包的方案进行实现。<br><strong>实施</strong>: </p>\n<ul>\n<li>分析<code>??</code>的使用场景，左侧为T?,右侧为T，返回值T</li>\n<li>重载函数名定义<code>public func ?? &lt;T&gt;(left: T?, right: T) -&gt; T</code></li>\n<li>实现</li>\n<li>编译</li>\n<li>error：<code>Ambiguous use of operator &#39;??&#39;</code></li>\n<li>思考：这丫的在重载运算符的时候不能使用泛型吧。。</li>\n<li>更改函数为<code>public func ?? &lt;Any&gt;(left: Any?, right: Any) -&gt; Any</code></li>\n<li>PL. OK了，可是问题来了，系统的<code>??</code>是可以返回对应的类型，可是这样重载之后返回一个<code>Any</code>，代码中如果出现<code>let str = str1 ?? &quot;&quot;</code>则str类型就变为<code>Any</code>而不是<code>String</code>。<strong>巨坑</strong></li>\n<li>顾不了那么多了，真不行一个一个跑。于是先修改一个较为严重的<code>String</code>类型。</li>\n<li>尝试编译，结果时间惊人的没有变化。。依旧居高不下</li>\n<li>以失败告终。。</li>\n</ul>\n<p><strong>总结</strong>: 这个<code>??</code>耗时较多并不是因为<code>??</code>的实现有问题，<strong>猜测</strong>是在为<code>??</code>准备左右参数的时候需要进行一层层的解包确定类型，再加上<code>??</code>可能有重载版本，进行类型匹配的时候比较耗时。</p>\n<h4 id=\"尝试扩展方法进行优化\"><a href=\"#尝试扩展方法进行优化\" class=\"headerlink\" title=\"尝试扩展方法进行优化\"></a>尝试扩展方法进行优化</h4><p><strong>思路</strong>: 既然运算符会导致编译慢，那么就尝试使用方法直接进行转换。<br><strong>实现</strong>: 代码如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Operator</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">///  ==&gt; ??</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> `<span class=\"title\">try</span>`&lt;T&gt;<span class=\"params\">(<span class=\"number\">_</span> origin: T?, <span class=\"number\">_</span> then: T)</span></span> -&gt; <span class=\"type\">T</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> value = origin <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> then</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> value</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试发现上述方法可以优化时间。</p>\n<hr>\n<h3 id=\"以下原文出自：关于-Swift-编译时性能优化的一些思考\"><a href=\"#以下原文出自：关于-Swift-编译时性能优化的一些思考\" class=\"headerlink\" title=\"以下原文出自：关于 Swift 编译时性能优化的一些思考\"></a>以下原文出自：<a href=\"https://github.com/yllziv/gold-miner/blob/1bfbb3deefd27138097415422bec2bb7e98e9715/TODO/regarding-swift-build-time-optimizations.md\">关于 Swift 编译时性能优化的一些思考</a></h3><hr>\n<blockquote>\n<ul>\n<li>原文链接 : <a href=\"https://medium.com/@RobertGummesson/regarding-swift-build-time-optimizations-fc92cdd91e31#.w81y3zhjr\">Regarding Swift build time optimizations</a></li>\n<li>原文作者 : <a href=\"https://medium.com/@RobertGummesson\">Robert Gummesson</a></li>\n<li>译文出自 : <a href=\"https://github.com/xitu/gold-miner\">掘金翻译计划</a></li>\n<li>译者 : <a href=\"http://www.yanglonglong.com\">杨龙龙</a></li>\n<li>校对者: <a href=\"https://github.com/shenAlexy\">申冠华</a>, <a href=\"https://github.com/Jack-Kingdom\">Jack King</a></li>\n</ul>\n</blockquote>\n<p><img src=\"http://ww3.sinaimg.cn/large/005SiNxygw1f3p3jimjllj31jk0dwqft.jpg\" alt=\"\"></p>\n<h4 id=\"关于-Swift-编译时性能优化的一些思考\"><a href=\"#关于-Swift-编译时性能优化的一些思考\" class=\"headerlink\" title=\"关于 Swift 编译时性能优化的一些思考\"></a>关于 Swift 编译时性能优化的一些思考</h4><p>上周，我读了 <a href=\"https://medium.com/@nickoneill\">@nickoneill</a> 一篇优秀的帖子 <a href=\"https://medium.com/swift-programming/speeding-up-slow-swift-build-times-922feeba5780#.k0pngnkns\">Speeding Up Slow Swift Build Times</a> 之后，我发现用一个略不同以往的角度去读Swift代码，并不是很难。</p>\n<p>一行之前很简洁的代码，现在却出现了新的问题——它是否应该重构为9行代码来达到更快的编译速度？ (<em>nil coalescing 运算符就是一个例子</em>)孰轻孰重？简洁的代码还是对编译器友好的代码？ 我觉得，它取决于项目的大小和开发者的想法。</p>\n<h4 id=\"但请等等…-这里有一个Xcode插件\"><a href=\"#但请等等…-这里有一个Xcode插件\" class=\"headerlink\" title=\"但请等等… 这里有一个Xcode插件\"></a>但请等等… 这里有一个Xcode插件</h4><p>在讲一些例子之前，我首先想到了通过手工提取日志信息是非常耗时的事情。通过命令行工具实现会相对容易一些，但是我把它往前推进了一步：集成为<a href=\"https://github.com/RobertGummesson/BuildTimeAnalyzer-for-Xcode\">Xcode插件</a>。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/005SiNxygw1f3p3hhivppj30m809lwis.jpg\" alt=\"\"></p>\n<p>在这个例子中，最初的目的仅仅是识别并修复代码中最耗时的地方，但是现在我觉得它成为了一个必须要迭代的过程。这样我才可以更加高效地构建代码，并且防止在项目中出现耗时的函数。</p>\n<h4 id=\"不少惊喜\"><a href=\"#不少惊喜\" class=\"headerlink\" title=\"不少惊喜\"></a>不少惊喜</h4><p>我经常在不同的 Git 分支中跳转，并且等待一个暖慢的项目编译简直是在浪费我的生命。因此我思考了很长时间，一个玩具项目（大约两万行 Swift 代码）会编译如此长的时间。</p>\n<p>当我知道是什么原因导致它如此慢之后，我不得不承认我震惊了，一行代码居然需要几秒的编译时间。</p>\n<p>让我们来看几个例子。</p>\n<h4 id=\"Nil-合并运算符\"><a href=\"#Nil-合并运算符\" class=\"headerlink\" title=\"Nil 合并运算符\"></a>Nil 合并运算符</h4><p>编译器肯定不喜欢这里的第一种方法。在展开下面两处简写的代码之后，构建时间减少了 <strong>99.4%</strong>。</p>\n<pre><code>// 构建时间： 5238.3ms\nreturn CGSize(width: size.width + (rightView?.bounds.width ?? 0) + (leftView?.bounds.width ?? 0) + 22, height: bounds.height)\n\n// 构建时间： 32.4ms\nvar padding: CGFloat = 22\nif let rightView = rightView {\n    padding += rightView.bounds.width\n}\n\nif let leftView = leftView {\n    padding += leftView.bounds.width\n}\nreturn CGSizeMake(size.width + padding, bounds.height)\n</code></pre><h4 id=\"ArrayOfStuff-Stuff\"><a href=\"#ArrayOfStuff-Stuff\" class=\"headerlink\" title=\"ArrayOfStuff + [Stuff]\"></a>ArrayOfStuff + [Stuff]</h4><p>这个看起来像下面这样：</p>\n<pre><code>return ArrayOfStuff + [Stuff]  \n// 而不是  \nArrayOfStuff.append(stuff)  \nreturn ArrayOfStuff\n</code></pre><p>我经常这么做，并且它影响了每次构建的时间。下面是最糟糕的一个例子，改写后构建时间可以减少 <strong>97.9%</strong>。</p>\n<pre><code>// 构建时间： 1250.3ms\nlet systemOptions = [ 7, 14, 30, -1 ]\nlet systemNames = (0...2).map{ String(format: localizedFormat, systemOptions[$0]) } + [NSLocalizedString(&quot;everything&quot;, comment: &quot;&quot;)]\n// Some code in-between \nlabelNames = Array(systemNames[0..&lt;count]) + [systemNames.last!]\n\n// 构建时间： 25.5ms\nlet systemOptions = [ 7, 14, 30, -1 ]\nvar systemNames = systemOptions.dropLast().map{ String(format: localizedFormat, $0) }\nsystemNames.append(NSLocalizedString(&quot;everything&quot;, comment: &quot;&quot;))\n// Some code in-between\nlabelNames = Array(systemNames[0..&lt;count])\nlabelNames.append(systemNames.last!)\n</code></pre><h4 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h4><p>仅仅是通过替换三元运算符为 if else 语句就能减少 <strong>92.9%</strong> 的构建时间。如果使用一个for循环替换 <em>map</em> 函数，它又能减少另一个 75%（但是我的眼睛可就受不了咯😉）。</p>\n<pre><code>// 构建时间： 239.0ms\nlet labelNames = type == 0 ? (1...5).map{type0ToString($0)} : (0...2).map{type1ToString($0)}\n\n// 构建时间： 16.9ms\nvar labelNames: [String]\nif type == 0 {\n    labelNames = (1...5).map{type0ToString($0)}\n} else {\n    labelNames = (0...2).map{type1ToString($0)}\n}\n</code></pre><h4 id=\"转换-CGFloat-到-CGFloat\"><a href=\"#转换-CGFloat-到-CGFloat\" class=\"headerlink\" title=\"转换 CGFloat 到 CGFloat\"></a>转换 CGFloat 到 CGFloat</h4><p>这里我所说的并不一定正确。变量已经使用了 CGFloat 并且有一些括号也是多余的。在清理了这些冗余之后，构建时间能减少 <strong>99.9%</strong>。</p>\n<pre><code>// 构建时间： 3431.7 ms\nreturn CGFloat(M_PI) * (CGFloat((hour + hourDelta + CGFloat(minute + minuteDelta) / 60) * 5) - 15) * unit / 180\n\n// 构建时间： 3.0ms\nreturn CGFloat(M_PI) * ((hour + hourDelta + (minute + minuteDelta) / 60) * 5 - 15) * unit / 180\n</code></pre><h4 id=\"Round\"><a href=\"#Round\" class=\"headerlink\" title=\"Round()\"></a>Round()</h4><p>这个一个非常奇怪的例子，下面的例子中变量是一个局部变量与实例变量的混合。这个问题可能不是四舍五入本身，而是结合代码的方法。去掉四舍五入的方法大概能减少 <strong>97.6%</strong> 的构建时间。</p>\n<pre><code>// 构建时间： 1433.7ms\nlet expansion = a — b — c + round(d * 0.66) + e\n// 构建时间： 34.7ms\nlet expansion = a — b — c + d * 0.66 + e\n</code></pre><p>注意：所有的测试都在 MacBook Air (13-inch, Mid 2013)中进行。</p>\n<h4 id=\"尝试它\"><a href=\"#尝试它\" class=\"headerlink\" title=\"尝试它\"></a>尝试它</h4><p>无论你是否面临过构建时间太长的问题，编写对编译器友好的代码都是非常有用的。我确定你自己会在其中找到一些惊喜。作为参考，这里有完整的代码，在我的工程中可以5秒内完成编译…</p>\n<pre><code>import UIKit\n\nclass CMExpandingTextField: UITextField {\n\n    func textFieldEditingChanged() {\n        invalidateIntrinsicContentSize()\n    }\n\n    override func intrinsicContentSize() -&gt; CGSize {\n        if isFirstResponder(), let text = text {\n            let size = text.sizeWithAttributes(typingAttributes)\n            return CGSize(width: size.width + (rightView?.bounds.width ?? 0) + (leftView?.bounds.width ?? 0) + 22, height: bounds.height)\n        }\n        return super.intrinsicContentSize()\n    }\n}\n</code></pre>"},{"title":"UI素材与代码解耦的讨论与思考","date":"2016-08-28T04:16:02.000Z","_content":"\n个人对UI素材和代码的解耦的一些粗浅的看法。比如：解耦方案、是否该解耦。\n\n<!--more-->\n\n## 起因\n  \n  群里听到有人讨论这个话题，当时觉得比较新鲜，就十分好奇的请教了两位经验丰富的@kkk、@AK，虽然未得其中真髓，但是也得到一些自己的思考。总结一下两人的方案，以及自己的思考，\n  \n  \n## 问题\n  \n  代码内部引入的素材属于设计管理，代码则是码农管理，从这个角度来说两个工做都有码农管理则是一种耦合，为了减轻设计师频繁更换素材而带来的码农的无休止的协作，所以可以进行着方面的解藕。\n  \n  \n## 解决方案\n\n  哪坏哪补。有问题就会有解决方案。群中说的[方案一](#方案一)由于当时不方便，所以并没有弄明白。[方案二](#方案二)、[方案三](#方案三)是自己的一些解决方案。\n  \n  \n### <a name=\"方案一\">方案一</a>\n\n  群中讨论的是素材、代码放在一个仓库，分支不同，使用脚本进行整合(其实并没有想明白怎么弄。。下周请教一下)。另外，@夏汁泡泡 还有一个简化就是这个处理的脚本可以放在[Add Run Script Build Phase](https://developer.apple.com/library/ios/recipes/xcode_help-project_editor/Articles/AddingaRunScriptBuildPhase.html)，暴露出来已知的问题：\n  \n  - 操作麻烦\n  - 图片可能重复\n  - 命名规范\n\n\n### <a name=\"方案二\">方案二</a>\n\n  按照Pods的集成方式，可以将素材看作一个第三方库，直接将素材做成一个bundle，采用Pods私有库或者其他方式放入工程。暴露出来已知的问题：\n \n  - 什么时候更新这个bundle\n  - 多人合作时这个bundle冲突问题\n  - 命名规范\n\n\n### <a name=\"方案三\">方案三</a>\n\n  工程使用`xcassets`进行素材打包，然后使用子库进行持续集成。这样，设计师的素材可以放在另一个独立素材仓库，内含更新脚本，直接将素材生成对应的`xcassets`结构，并上传至子库。这样设计师做完素材直接扔在文件夹中，自动或手动跑一下脚本即可更新到素材仓库。暴露出来已知的问题：\n  \n  - 由于没有测试过，不知道如果素材比较多的话会不会发生冲突。因该不会吧，都是加文件或者修改😂 (有时间去研究一下之后更新)\n  - 命名规范的问题依旧存在\n  \n### <a name=\"方案四\">方案四</a>\n\n  __ 字体库 __。最近同事提出关于用字体库去存储素材图片的方案。感觉非常的赞，虽然并未实践，但是这种方案就像emoji一样，不但减少了相同图片内容之间存在多个不同尺寸版本的问题，也能够比较好的进行压缩管理。设计师需要做的就是做出一套字体库，然后将所有的素材图全部按照设计字体的方案进行设计和制作，这样在使用的时候只需要导入一个字体文件就好了。对于这个字体文件如何管理都好说，毕竟只有一个字体文件。字体库的制作方面还不是很了解，所以只提着么一下吧嘿嘿。。\n  \n  \n  \n## 思考\n\n  好了，重要的问题来了，上面的问题都是存在命名规范的问题。此问题如何化解呢？\n  \n  素材的引入需根据素材名写入代码中，那么如何才能不用素材名呢？那时不可能的😝，毕竟你要有一个唯一标识符去标志着一个素材。可能有的人说可以做一个json用来保存代码的命名和素材的命名呀，我只想说MDZZ，那不是有两套需要维护的命名规则么。。得不偿失。\n  \n  这个命名的问题其实不能复杂化。参看iOS的项目国际化操作，使用一个key作为文案的唯一标识符，需要显示该文案，通过这个唯一标识符就能直接取到。回头看下素材，是不是也能炮制一个呢？\n  \n  如果素材名字有统一的规则，就不需要这样的key作为统一标识符，直接使用素材名字即可，这样维护一套素材命名规则总比两套更容易维护。所以，直接使用素材名即可。\n  \n  如果素材不能统一命名规则，那么这样的对照文件存在也是很不错的。话又说回来，要进行UI素材和代码的解耦，素材名都不能统一，还如何解耦，此问题也不存在了。。\n  \n  退一步，我们的目的是让素材让设计师自己维护，代码不去维护素材。设计师和码农的耦合在于图片本身的交换比较烦。不论采用哪种解耦方案，都是把图片的耦合转换为图片名字的耦合(也可以理解为素材对应的KEY的耦合)。结果是 __ 为了解除一个耦合,而引入了一个新的耦合 __ 。个人认为这样是不靠谱的。。除非有强力的人去推动设计师走标准的命名。\n  \n  \n## 结论\n\n  其实这个问题大可不必纠结，如果有强力的人去推动这个标准持续走下去那么这个问题才有价值。如果真的要进行题中说的代码解耦的话，我认为第三种是比较靠谱的。 __ 命名标准、命名标准、命名标准... __。\n  \n  \n## 说明\n\n  经验有限，如果有更好的方案，望告知。拜谢！","source":"_posts/ui-source-and-code-decoupling.md","raw":"---\ntitle: UI素材与代码解耦的讨论与思考\ndate: 2016-08-28 12:16:02\ntags:\ncategories:\n  - iOS\n---\n\n个人对UI素材和代码的解耦的一些粗浅的看法。比如：解耦方案、是否该解耦。\n\n<!--more-->\n\n## 起因\n  \n  群里听到有人讨论这个话题，当时觉得比较新鲜，就十分好奇的请教了两位经验丰富的@kkk、@AK，虽然未得其中真髓，但是也得到一些自己的思考。总结一下两人的方案，以及自己的思考，\n  \n  \n## 问题\n  \n  代码内部引入的素材属于设计管理，代码则是码农管理，从这个角度来说两个工做都有码农管理则是一种耦合，为了减轻设计师频繁更换素材而带来的码农的无休止的协作，所以可以进行着方面的解藕。\n  \n  \n## 解决方案\n\n  哪坏哪补。有问题就会有解决方案。群中说的[方案一](#方案一)由于当时不方便，所以并没有弄明白。[方案二](#方案二)、[方案三](#方案三)是自己的一些解决方案。\n  \n  \n### <a name=\"方案一\">方案一</a>\n\n  群中讨论的是素材、代码放在一个仓库，分支不同，使用脚本进行整合(其实并没有想明白怎么弄。。下周请教一下)。另外，@夏汁泡泡 还有一个简化就是这个处理的脚本可以放在[Add Run Script Build Phase](https://developer.apple.com/library/ios/recipes/xcode_help-project_editor/Articles/AddingaRunScriptBuildPhase.html)，暴露出来已知的问题：\n  \n  - 操作麻烦\n  - 图片可能重复\n  - 命名规范\n\n\n### <a name=\"方案二\">方案二</a>\n\n  按照Pods的集成方式，可以将素材看作一个第三方库，直接将素材做成一个bundle，采用Pods私有库或者其他方式放入工程。暴露出来已知的问题：\n \n  - 什么时候更新这个bundle\n  - 多人合作时这个bundle冲突问题\n  - 命名规范\n\n\n### <a name=\"方案三\">方案三</a>\n\n  工程使用`xcassets`进行素材打包，然后使用子库进行持续集成。这样，设计师的素材可以放在另一个独立素材仓库，内含更新脚本，直接将素材生成对应的`xcassets`结构，并上传至子库。这样设计师做完素材直接扔在文件夹中，自动或手动跑一下脚本即可更新到素材仓库。暴露出来已知的问题：\n  \n  - 由于没有测试过，不知道如果素材比较多的话会不会发生冲突。因该不会吧，都是加文件或者修改😂 (有时间去研究一下之后更新)\n  - 命名规范的问题依旧存在\n  \n### <a name=\"方案四\">方案四</a>\n\n  __ 字体库 __。最近同事提出关于用字体库去存储素材图片的方案。感觉非常的赞，虽然并未实践，但是这种方案就像emoji一样，不但减少了相同图片内容之间存在多个不同尺寸版本的问题，也能够比较好的进行压缩管理。设计师需要做的就是做出一套字体库，然后将所有的素材图全部按照设计字体的方案进行设计和制作，这样在使用的时候只需要导入一个字体文件就好了。对于这个字体文件如何管理都好说，毕竟只有一个字体文件。字体库的制作方面还不是很了解，所以只提着么一下吧嘿嘿。。\n  \n  \n  \n## 思考\n\n  好了，重要的问题来了，上面的问题都是存在命名规范的问题。此问题如何化解呢？\n  \n  素材的引入需根据素材名写入代码中，那么如何才能不用素材名呢？那时不可能的😝，毕竟你要有一个唯一标识符去标志着一个素材。可能有的人说可以做一个json用来保存代码的命名和素材的命名呀，我只想说MDZZ，那不是有两套需要维护的命名规则么。。得不偿失。\n  \n  这个命名的问题其实不能复杂化。参看iOS的项目国际化操作，使用一个key作为文案的唯一标识符，需要显示该文案，通过这个唯一标识符就能直接取到。回头看下素材，是不是也能炮制一个呢？\n  \n  如果素材名字有统一的规则，就不需要这样的key作为统一标识符，直接使用素材名字即可，这样维护一套素材命名规则总比两套更容易维护。所以，直接使用素材名即可。\n  \n  如果素材不能统一命名规则，那么这样的对照文件存在也是很不错的。话又说回来，要进行UI素材和代码的解耦，素材名都不能统一，还如何解耦，此问题也不存在了。。\n  \n  退一步，我们的目的是让素材让设计师自己维护，代码不去维护素材。设计师和码农的耦合在于图片本身的交换比较烦。不论采用哪种解耦方案，都是把图片的耦合转换为图片名字的耦合(也可以理解为素材对应的KEY的耦合)。结果是 __ 为了解除一个耦合,而引入了一个新的耦合 __ 。个人认为这样是不靠谱的。。除非有强力的人去推动设计师走标准的命名。\n  \n  \n## 结论\n\n  其实这个问题大可不必纠结，如果有强力的人去推动这个标准持续走下去那么这个问题才有价值。如果真的要进行题中说的代码解耦的话，我认为第三种是比较靠谱的。 __ 命名标准、命名标准、命名标准... __。\n  \n  \n## 说明\n\n  经验有限，如果有更好的方案，望告知。拜谢！","slug":"ui-source-and-code-decoupling","published":1,"updated":"2017-05-16T04:24:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfom001lkhuvtksec7zv","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>个人对UI素材和代码的解耦的一些粗浅的看法。比如：解耦方案、是否该解耦。</p>\n<a id=\"more\"></a>\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>  群里听到有人讨论这个话题，当时觉得比较新鲜，就十分好奇的请教了两位经验丰富的@kkk、@AK，虽然未得其中真髓，但是也得到一些自己的思考。总结一下两人的方案，以及自己的思考，</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>  代码内部引入的素材属于设计管理，代码则是码农管理，从这个角度来说两个工做都有码农管理则是一种耦合，为了减轻设计师频繁更换素材而带来的码农的无休止的协作，所以可以进行着方面的解藕。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>  哪坏哪补。有问题就会有解决方案。群中说的<a href=\"#方案一\">方案一</a>由于当时不方便，所以并没有弄明白。<a href=\"#方案二\">方案二</a>、<a href=\"#方案三\">方案三</a>是自己的一些解决方案。</p>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a><a name=\"方案一\">方案一</a></h3><p>  群中讨论的是素材、代码放在一个仓库，分支不同，使用脚本进行整合(其实并没有想明白怎么弄。。下周请教一下)。另外，@夏汁泡泡 还有一个简化就是这个处理的脚本可以放在<a href=\"https://developer.apple.com/library/ios/recipes/xcode_help-project_editor/Articles/AddingaRunScriptBuildPhase.html\" target=\"_blank\" rel=\"external\">Add Run Script Build Phase</a>，暴露出来已知的问题：</p>\n<ul>\n<li>操作麻烦</li>\n<li>图片可能重复</li>\n<li>命名规范</li>\n</ul>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a><a name=\"方案二\">方案二</a></h3><p>  按照Pods的集成方式，可以将素材看作一个第三方库，直接将素材做成一个bundle，采用Pods私有库或者其他方式放入工程。暴露出来已知的问题：</p>\n<ul>\n<li>什么时候更新这个bundle</li>\n<li>多人合作时这个bundle冲突问题</li>\n<li>命名规范</li>\n</ul>\n<h3 id=\"方案三\"><a href=\"#方案三\" class=\"headerlink\" title=\"方案三\"></a><a name=\"方案三\">方案三</a></h3><p>  工程使用<code>xcassets</code>进行素材打包，然后使用子库进行持续集成。这样，设计师的素材可以放在另一个独立素材仓库，内含更新脚本，直接将素材生成对应的<code>xcassets</code>结构，并上传至子库。这样设计师做完素材直接扔在文件夹中，自动或手动跑一下脚本即可更新到素材仓库。暴露出来已知的问题：</p>\n<ul>\n<li>由于没有测试过，不知道如果素材比较多的话会不会发生冲突。因该不会吧，都是加文件或者修改😂 (有时间去研究一下之后更新)</li>\n<li>命名规范的问题依旧存在</li>\n</ul>\n<h3 id=\"方案四\"><a href=\"#方案四\" class=\"headerlink\" title=\"方案四\"></a><a name=\"方案四\">方案四</a></h3><p>  <strong> 字体库 </strong>。最近同事提出关于用字体库去存储素材图片的方案。感觉非常的赞，虽然并未实践，但是这种方案就像emoji一样，不但减少了相同图片内容之间存在多个不同尺寸版本的问题，也能够比较好的进行压缩管理。设计师需要做的就是做出一套字体库，然后将所有的素材图全部按照设计字体的方案进行设计和制作，这样在使用的时候只需要导入一个字体文件就好了。对于这个字体文件如何管理都好说，毕竟只有一个字体文件。字体库的制作方面还不是很了解，所以只提着么一下吧嘿嘿。。</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>  好了，重要的问题来了，上面的问题都是存在命名规范的问题。此问题如何化解呢？</p>\n<p>  素材的引入需根据素材名写入代码中，那么如何才能不用素材名呢？那时不可能的😝，毕竟你要有一个唯一标识符去标志着一个素材。可能有的人说可以做一个json用来保存代码的命名和素材的命名呀，我只想说MDZZ，那不是有两套需要维护的命名规则么。。得不偿失。</p>\n<p>  这个命名的问题其实不能复杂化。参看iOS的项目国际化操作，使用一个key作为文案的唯一标识符，需要显示该文案，通过这个唯一标识符就能直接取到。回头看下素材，是不是也能炮制一个呢？</p>\n<p>  如果素材名字有统一的规则，就不需要这样的key作为统一标识符，直接使用素材名字即可，这样维护一套素材命名规则总比两套更容易维护。所以，直接使用素材名即可。</p>\n<p>  如果素材不能统一命名规则，那么这样的对照文件存在也是很不错的。话又说回来，要进行UI素材和代码的解耦，素材名都不能统一，还如何解耦，此问题也不存在了。。</p>\n<p>  退一步，我们的目的是让素材让设计师自己维护，代码不去维护素材。设计师和码农的耦合在于图片本身的交换比较烦。不论采用哪种解耦方案，都是把图片的耦合转换为图片名字的耦合(也可以理解为素材对应的KEY的耦合)。结果是 <strong> 为了解除一个耦合,而引入了一个新的耦合 </strong> 。个人认为这样是不靠谱的。。除非有强力的人去推动设计师走标准的命名。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>  其实这个问题大可不必纠结，如果有强力的人去推动这个标准持续走下去那么这个问题才有价值。如果真的要进行题中说的代码解耦的话，我认为第三种是比较靠谱的。 <strong> 命名标准、命名标准、命名标准… </strong>。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>  经验有限，如果有更好的方案，望告知。拜谢！</p>\n","site":{"data":{}},"excerpt":"<p>个人对UI素材和代码的解耦的一些粗浅的看法。比如：解耦方案、是否该解耦。</p>","more":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>  群里听到有人讨论这个话题，当时觉得比较新鲜，就十分好奇的请教了两位经验丰富的@kkk、@AK，虽然未得其中真髓，但是也得到一些自己的思考。总结一下两人的方案，以及自己的思考，</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>  代码内部引入的素材属于设计管理，代码则是码农管理，从这个角度来说两个工做都有码农管理则是一种耦合，为了减轻设计师频繁更换素材而带来的码农的无休止的协作，所以可以进行着方面的解藕。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>  哪坏哪补。有问题就会有解决方案。群中说的<a href=\"#方案一\">方案一</a>由于当时不方便，所以并没有弄明白。<a href=\"#方案二\">方案二</a>、<a href=\"#方案三\">方案三</a>是自己的一些解决方案。</p>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a><a name=\"方案一\">方案一</a></h3><p>  群中讨论的是素材、代码放在一个仓库，分支不同，使用脚本进行整合(其实并没有想明白怎么弄。。下周请教一下)。另外，@夏汁泡泡 还有一个简化就是这个处理的脚本可以放在<a href=\"https://developer.apple.com/library/ios/recipes/xcode_help-project_editor/Articles/AddingaRunScriptBuildPhase.html\">Add Run Script Build Phase</a>，暴露出来已知的问题：</p>\n<ul>\n<li>操作麻烦</li>\n<li>图片可能重复</li>\n<li>命名规范</li>\n</ul>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a><a name=\"方案二\">方案二</a></h3><p>  按照Pods的集成方式，可以将素材看作一个第三方库，直接将素材做成一个bundle，采用Pods私有库或者其他方式放入工程。暴露出来已知的问题：</p>\n<ul>\n<li>什么时候更新这个bundle</li>\n<li>多人合作时这个bundle冲突问题</li>\n<li>命名规范</li>\n</ul>\n<h3 id=\"方案三\"><a href=\"#方案三\" class=\"headerlink\" title=\"方案三\"></a><a name=\"方案三\">方案三</a></h3><p>  工程使用<code>xcassets</code>进行素材打包，然后使用子库进行持续集成。这样，设计师的素材可以放在另一个独立素材仓库，内含更新脚本，直接将素材生成对应的<code>xcassets</code>结构，并上传至子库。这样设计师做完素材直接扔在文件夹中，自动或手动跑一下脚本即可更新到素材仓库。暴露出来已知的问题：</p>\n<ul>\n<li>由于没有测试过，不知道如果素材比较多的话会不会发生冲突。因该不会吧，都是加文件或者修改😂 (有时间去研究一下之后更新)</li>\n<li>命名规范的问题依旧存在</li>\n</ul>\n<h3 id=\"方案四\"><a href=\"#方案四\" class=\"headerlink\" title=\"方案四\"></a><a name=\"方案四\">方案四</a></h3><p>  <strong> 字体库 </strong>。最近同事提出关于用字体库去存储素材图片的方案。感觉非常的赞，虽然并未实践，但是这种方案就像emoji一样，不但减少了相同图片内容之间存在多个不同尺寸版本的问题，也能够比较好的进行压缩管理。设计师需要做的就是做出一套字体库，然后将所有的素材图全部按照设计字体的方案进行设计和制作，这样在使用的时候只需要导入一个字体文件就好了。对于这个字体文件如何管理都好说，毕竟只有一个字体文件。字体库的制作方面还不是很了解，所以只提着么一下吧嘿嘿。。</p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>  好了，重要的问题来了，上面的问题都是存在命名规范的问题。此问题如何化解呢？</p>\n<p>  素材的引入需根据素材名写入代码中，那么如何才能不用素材名呢？那时不可能的😝，毕竟你要有一个唯一标识符去标志着一个素材。可能有的人说可以做一个json用来保存代码的命名和素材的命名呀，我只想说MDZZ，那不是有两套需要维护的命名规则么。。得不偿失。</p>\n<p>  这个命名的问题其实不能复杂化。参看iOS的项目国际化操作，使用一个key作为文案的唯一标识符，需要显示该文案，通过这个唯一标识符就能直接取到。回头看下素材，是不是也能炮制一个呢？</p>\n<p>  如果素材名字有统一的规则，就不需要这样的key作为统一标识符，直接使用素材名字即可，这样维护一套素材命名规则总比两套更容易维护。所以，直接使用素材名即可。</p>\n<p>  如果素材不能统一命名规则，那么这样的对照文件存在也是很不错的。话又说回来，要进行UI素材和代码的解耦，素材名都不能统一，还如何解耦，此问题也不存在了。。</p>\n<p>  退一步，我们的目的是让素材让设计师自己维护，代码不去维护素材。设计师和码农的耦合在于图片本身的交换比较烦。不论采用哪种解耦方案，都是把图片的耦合转换为图片名字的耦合(也可以理解为素材对应的KEY的耦合)。结果是 <strong> 为了解除一个耦合,而引入了一个新的耦合 </strong> 。个人认为这样是不靠谱的。。除非有强力的人去推动设计师走标准的命名。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>  其实这个问题大可不必纠结，如果有强力的人去推动这个标准持续走下去那么这个问题才有价值。如果真的要进行题中说的代码解耦的话，我认为第三种是比较靠谱的。 <strong> 命名标准、命名标准、命名标准… </strong>。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>  经验有限，如果有更好的方案，望告知。拜谢！</p>"},{"title":"如何实现AppStore查看更多的方法","date":"2016-12-23T08:37:37.000Z","_content":"\n看到AppStore的`更多`效果，做的不错哎，本文尝试采用`exclusionPaths`进行实现。不过有瑕疵。。来年用追加的方式在实现一下。感觉追加的方式比较简单。，\n\n<!--more-->\n\n# 效果\n<img src=\"http://7xvzwi.com1.z0.glb.clouddn.com/UITextKit-AppStore-more-scene.gif://7xvzwi.com1.z0.glb.clouddn.com/leanote_new_logo.png\" alt=\"效果图\">\n\n# 简要说明\n  App Store中的查看更多动画是不是很给力？可是做起来确不知道如何下手？这里我提供一种UITextKit的方法来简单的实现一下。\n  \n  为了让例子简单，我就直接写了个more，那个view是自定义的，随便添加的，和本身的文本展示的并没有什么关系。\n  \n  为了让最后的那个moreView更加好用，增加了已经展开显示全部是否隐藏的控制。\n  \n  \n# 代码\n\n  先看下Demo中调用吧：\n  ```swift\n  let info = KTJExclusionLabel()\n  info.exclusionView = more\n  info.isAutoHidenExclusionView = isAutoHiden.isOn\n  info.numberOfLines = Int.init(line.text ?? \"\") ?? 0\n  info.sizeToFit()\n  ```\n\n  然后KTJExclusionLabel的实现：\n  ```swift\n  //\n  //  KTJExclusionLabel.swift\n  //  UITextKit-AppStore-more\n  //\n  //  Created by 孙继刚 on 2016/12/24.\n  //  Copyright © 2016年 madordie. All rights reserved.\n  //\n\n  import UIKit\n\n  class KTJExclusionLabel: UITextView {\n\n      /// 行数\n      public var numberOfLines: Int {\n          set {\n              textContainer.maximumNumberOfLines = newValue\n          }\n          get {\n              return textContainer.maximumNumberOfLines\n          }\n      }\n\n      public var isAutoHidenExclusionView: Bool = false\n\n      /// 避让的view\n      public weak var exclusionView: UIView? {\n          didSet {\n              setNeedsLayout()\n          }\n      }\n\n      override init(frame: CGRect, textContainer: NSTextContainer?) {\n          super.init(frame: frame, textContainer: textContainer)\n          setup()\n      }\n\n      required init?(coder aDecoder: NSCoder) {\n          super.init(coder: aDecoder)\n          setup()\n      }\n\n      func setup() {\n          isEditable = true\n          textContainer.lineBreakMode = .byTruncatingTail\n      }\n\n      override func sizeToFit() {\n          //  对其API还不熟悉，还没有找到如何一次判断出是否已经展示完全。。找到后再更\n\n          let originLines = numberOfLines\n          numberOfLines = 0\n          let maxHeight = resizeThatFits(frame.size).height\n          numberOfLines = originLines\n          frame.size = resizeThatFits(frame.size)\n\n          exclusionView?.isHidden = false\n          if frame.height == maxHeight {\n              frame.size = resizeThatFits(frame.size, isOver: true)\n              if isAutoHidenExclusionView {\n                  exclusionView?.isHidden = true\n              }\n          }\n      }\n\n      func resizeThatFits(_ size: CGSize, isOver: Bool = false) -> CGSize {\n          var frame = CGRect.zero\n          frame.size = size\n\n          textContainer.exclusionPaths.removeAll()\n\n          var ovalPaths = [UIBezierPath]()\n          if let exclusionView = exclusionView {\n              var lastLineFrame = CGRect.zero\n              var lineIdx = 0\n              var lastFrame = CGRect.zero\n              layoutManager.enumerateLineFragments(forGlyphRange: NSMakeRange(0, text.characters.count)) { (rect1, rect2, textContainer, range, pointer) in\n                  if lineIdx < textContainer.maximumNumberOfLines {\n                      lastLineFrame = rect2\n                  }\n                  lineIdx += 1\n                  lastFrame = rect2\n              }\n\n              if lastLineFrame == CGRect.zero {\n                  lastLineFrame = lastFrame\n              }\n              //  矫正\n              lastLineFrame.origin.x += textContainerInset.left\n              lastLineFrame.origin.y += textContainerInset.top\n\n              //  为末尾算出最大的frame\n              lastLineFrame.origin.x = lastLineFrame.maxX\n              lastLineFrame.origin.y = lastLineFrame.minY\n              lastLineFrame.size.width = frame.width - lastLineFrame.minX\n              lastLineFrame.size = exclusionView.sizeThatFits(lastLineFrame.size)\n              if lastLineFrame.maxX >= frame.width {\n\n                  if isOver == false {\n                      lastLineFrame.origin.x -= lastLineFrame.maxX - frame.width + max(textContainerInset.bottom, textContainerInset.right)\n                  } else {\n                      lastLineFrame.origin.x = lastFrame.minX + textContainerInset.left + 5\n                      lastLineFrame.origin.y += lastFrame.height\n                  }\n              }\n              exclusionView.frame = convert(lastLineFrame, to: exclusionView.superview)\n\n              var ovalFrame = convert(exclusionView.bounds, from: exclusionView)\n              ovalFrame.origin.x += 5 + textContainerInset.left\n              ovalPaths.append(UIBezierPath(rect: ovalFrame))\n\n              if isOver, isAutoHidenExclusionView {\n                  frame.size.height = lastFrame.maxY + textContainerInset.bottom\n              } else {\n                  frame.size.height = ovalFrame.maxY + textContainerInset.bottom\n              }\n          } else {\n              frame.size = super.sizeThatFits(size)\n          }\n          textContainer.exclusionPaths = ovalPaths\n\n          return CGSize(width: frame.maxX, height: frame.maxY)\n      }\n  }\n\n  ```\n  代码只是简单的做了一个DEMO，并没有仔细的调试，如果使用的话可能看需要根据自己的需求进行简单的调试吧。比如说偏移量、布局之类的。\n  ","source":"_posts/uitextkit-ellipsis-sth-at-the-end.md","raw":"---\ntitle: 如何实现AppStore查看更多的方法\ndate: 2016-12-23 16:37:37\ntags:\ncategories:\n  - iOS\n---\n\n看到AppStore的`更多`效果，做的不错哎，本文尝试采用`exclusionPaths`进行实现。不过有瑕疵。。来年用追加的方式在实现一下。感觉追加的方式比较简单。，\n\n<!--more-->\n\n# 效果\n<img src=\"http://7xvzwi.com1.z0.glb.clouddn.com/UITextKit-AppStore-more-scene.gif://7xvzwi.com1.z0.glb.clouddn.com/leanote_new_logo.png\" alt=\"效果图\">\n\n# 简要说明\n  App Store中的查看更多动画是不是很给力？可是做起来确不知道如何下手？这里我提供一种UITextKit的方法来简单的实现一下。\n  \n  为了让例子简单，我就直接写了个more，那个view是自定义的，随便添加的，和本身的文本展示的并没有什么关系。\n  \n  为了让最后的那个moreView更加好用，增加了已经展开显示全部是否隐藏的控制。\n  \n  \n# 代码\n\n  先看下Demo中调用吧：\n  ```swift\n  let info = KTJExclusionLabel()\n  info.exclusionView = more\n  info.isAutoHidenExclusionView = isAutoHiden.isOn\n  info.numberOfLines = Int.init(line.text ?? \"\") ?? 0\n  info.sizeToFit()\n  ```\n\n  然后KTJExclusionLabel的实现：\n  ```swift\n  //\n  //  KTJExclusionLabel.swift\n  //  UITextKit-AppStore-more\n  //\n  //  Created by 孙继刚 on 2016/12/24.\n  //  Copyright © 2016年 madordie. All rights reserved.\n  //\n\n  import UIKit\n\n  class KTJExclusionLabel: UITextView {\n\n      /// 行数\n      public var numberOfLines: Int {\n          set {\n              textContainer.maximumNumberOfLines = newValue\n          }\n          get {\n              return textContainer.maximumNumberOfLines\n          }\n      }\n\n      public var isAutoHidenExclusionView: Bool = false\n\n      /// 避让的view\n      public weak var exclusionView: UIView? {\n          didSet {\n              setNeedsLayout()\n          }\n      }\n\n      override init(frame: CGRect, textContainer: NSTextContainer?) {\n          super.init(frame: frame, textContainer: textContainer)\n          setup()\n      }\n\n      required init?(coder aDecoder: NSCoder) {\n          super.init(coder: aDecoder)\n          setup()\n      }\n\n      func setup() {\n          isEditable = true\n          textContainer.lineBreakMode = .byTruncatingTail\n      }\n\n      override func sizeToFit() {\n          //  对其API还不熟悉，还没有找到如何一次判断出是否已经展示完全。。找到后再更\n\n          let originLines = numberOfLines\n          numberOfLines = 0\n          let maxHeight = resizeThatFits(frame.size).height\n          numberOfLines = originLines\n          frame.size = resizeThatFits(frame.size)\n\n          exclusionView?.isHidden = false\n          if frame.height == maxHeight {\n              frame.size = resizeThatFits(frame.size, isOver: true)\n              if isAutoHidenExclusionView {\n                  exclusionView?.isHidden = true\n              }\n          }\n      }\n\n      func resizeThatFits(_ size: CGSize, isOver: Bool = false) -> CGSize {\n          var frame = CGRect.zero\n          frame.size = size\n\n          textContainer.exclusionPaths.removeAll()\n\n          var ovalPaths = [UIBezierPath]()\n          if let exclusionView = exclusionView {\n              var lastLineFrame = CGRect.zero\n              var lineIdx = 0\n              var lastFrame = CGRect.zero\n              layoutManager.enumerateLineFragments(forGlyphRange: NSMakeRange(0, text.characters.count)) { (rect1, rect2, textContainer, range, pointer) in\n                  if lineIdx < textContainer.maximumNumberOfLines {\n                      lastLineFrame = rect2\n                  }\n                  lineIdx += 1\n                  lastFrame = rect2\n              }\n\n              if lastLineFrame == CGRect.zero {\n                  lastLineFrame = lastFrame\n              }\n              //  矫正\n              lastLineFrame.origin.x += textContainerInset.left\n              lastLineFrame.origin.y += textContainerInset.top\n\n              //  为末尾算出最大的frame\n              lastLineFrame.origin.x = lastLineFrame.maxX\n              lastLineFrame.origin.y = lastLineFrame.minY\n              lastLineFrame.size.width = frame.width - lastLineFrame.minX\n              lastLineFrame.size = exclusionView.sizeThatFits(lastLineFrame.size)\n              if lastLineFrame.maxX >= frame.width {\n\n                  if isOver == false {\n                      lastLineFrame.origin.x -= lastLineFrame.maxX - frame.width + max(textContainerInset.bottom, textContainerInset.right)\n                  } else {\n                      lastLineFrame.origin.x = lastFrame.minX + textContainerInset.left + 5\n                      lastLineFrame.origin.y += lastFrame.height\n                  }\n              }\n              exclusionView.frame = convert(lastLineFrame, to: exclusionView.superview)\n\n              var ovalFrame = convert(exclusionView.bounds, from: exclusionView)\n              ovalFrame.origin.x += 5 + textContainerInset.left\n              ovalPaths.append(UIBezierPath(rect: ovalFrame))\n\n              if isOver, isAutoHidenExclusionView {\n                  frame.size.height = lastFrame.maxY + textContainerInset.bottom\n              } else {\n                  frame.size.height = ovalFrame.maxY + textContainerInset.bottom\n              }\n          } else {\n              frame.size = super.sizeThatFits(size)\n          }\n          textContainer.exclusionPaths = ovalPaths\n\n          return CGSize(width: frame.maxX, height: frame.maxY)\n      }\n  }\n\n  ```\n  代码只是简单的做了一个DEMO，并没有仔细的调试，如果使用的话可能看需要根据自己的需求进行简单的调试吧。比如说偏移量、布局之类的。\n  ","slug":"uitextkit-ellipsis-sth-at-the-end","published":1,"updated":"2017-05-16T04:24:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfoq001okhuvtw0san3r","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>看到AppStore的<code>更多</code>效果，做的不错哎，本文尝试采用<code>exclusionPaths</code>进行实现。不过有瑕疵。。来年用追加的方式在实现一下。感觉追加的方式比较简单。，</p>\n<a id=\"more\"></a>\n<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><p><img src=\"http://7xvzwi.com1.z0.glb.clouddn.com/UITextKit-AppStore-more-scene.gif://7xvzwi.com1.z0.glb.clouddn.com/leanote_new_logo.png\" alt=\"效果图\"></p>\n<h1 id=\"简要说明\"><a href=\"#简要说明\" class=\"headerlink\" title=\"简要说明\"></a>简要说明</h1><p>  App Store中的查看更多动画是不是很给力？可是做起来确不知道如何下手？这里我提供一种UITextKit的方法来简单的实现一下。</p>\n<p>  为了让例子简单，我就直接写了个more，那个view是自定义的，随便添加的，和本身的文本展示的并没有什么关系。</p>\n<p>  为了让最后的那个moreView更加好用，增加了已经展开显示全部是否隐藏的控制。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>  先看下Demo中调用吧：<br>  <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> info = <span class=\"type\">KTJExclusionLabel</span>()</div><div class=\"line\">info.exclusionView = more</div><div class=\"line\">info.isAutoHidenExclusionView = isAutoHiden.isOn</div><div class=\"line\">info.numberOfLines = <span class=\"type\">Int</span>.<span class=\"keyword\">init</span>(line.text ?? <span class=\"string\">\"\"</span>) ?? <span class=\"number\">0</span></div><div class=\"line\">info.sizeToFit()</div></pre></td></tr></table></figure></p>\n<p>  然后KTJExclusionLabel的实现：<br>  <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  KTJExclusionLabel.swift</span></div><div class=\"line\"><span class=\"comment\">//  UITextKit-AppStore-more</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by 孙继刚 on 2016/12/24.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright © 2016年 madordie. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> UIKit</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KTJExclusionLabel</span>: <span class=\"title\">UITextView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/// 行数</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> numberOfLines: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">set</span> &#123;</div><div class=\"line\">            textContainer.maximumNumberOfLines = newValue</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> textContainer.maximumNumberOfLines</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isAutoHidenExclusionView: <span class=\"type\">Bool</span> = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/// 避让的view</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> exclusionView: <span class=\"type\">UIView</span>? &#123;</div><div class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</div><div class=\"line\">            setNeedsLayout()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(frame: <span class=\"type\">CGRect</span>, textContainer: <span class=\"type\">NSTextContainer</span>?) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame, textContainer: textContainer)</div><div class=\"line\">        setup()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>?(coder aDecoder: <span class=\"type\">NSCoder</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(coder: aDecoder)</div><div class=\"line\">        setup()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        isEditable = <span class=\"literal\">true</span></div><div class=\"line\">        textContainer.lineBreakMode = .byTruncatingTail</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sizeToFit</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">//  对其API还不熟悉，还没有找到如何一次判断出是否已经展示完全。。找到后再更</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">let</span> originLines = numberOfLines</div><div class=\"line\">        numberOfLines = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">let</span> maxHeight = resizeThatFits(frame.size).height</div><div class=\"line\">        numberOfLines = originLines</div><div class=\"line\">        frame.size = resizeThatFits(frame.size)</div><div class=\"line\"></div><div class=\"line\">        exclusionView?.isHidden = <span class=\"literal\">false</span></div><div class=\"line\">        <span class=\"keyword\">if</span> frame.height == maxHeight &#123;</div><div class=\"line\">            frame.size = resizeThatFits(frame.size, isOver: <span class=\"literal\">true</span>)</div><div class=\"line\">            <span class=\"keyword\">if</span> isAutoHidenExclusionView &#123;</div><div class=\"line\">                exclusionView?.isHidden = <span class=\"literal\">true</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">resizeThatFits</span><span class=\"params\">(<span class=\"number\">_</span> size: CGSize, isOver: Bool = <span class=\"literal\">false</span>)</span></span> -&gt; <span class=\"type\">CGSize</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> frame = <span class=\"type\">CGRect</span>.zero</div><div class=\"line\">        frame.size = size</div><div class=\"line\"></div><div class=\"line\">        textContainer.exclusionPaths.removeAll()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> ovalPaths = [<span class=\"type\">UIBezierPath</span>]()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> exclusionView = exclusionView &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> lastLineFrame = <span class=\"type\">CGRect</span>.zero</div><div class=\"line\">            <span class=\"keyword\">var</span> lineIdx = <span class=\"number\">0</span></div><div class=\"line\">            <span class=\"keyword\">var</span> lastFrame = <span class=\"type\">CGRect</span>.zero</div><div class=\"line\">            layoutManager.enumerateLineFragments(forGlyphRange: <span class=\"type\">NSMakeRange</span>(<span class=\"number\">0</span>, text.characters.<span class=\"built_in\">count</span>)) &#123; (rect1, rect2, textContainer, range, pointer) <span class=\"keyword\">in</span></div><div class=\"line\">                <span class=\"keyword\">if</span> lineIdx &lt; textContainer.maximumNumberOfLines &#123;</div><div class=\"line\">                    lastLineFrame = rect2</div><div class=\"line\">                &#125;</div><div class=\"line\">                lineIdx += <span class=\"number\">1</span></div><div class=\"line\">                lastFrame = rect2</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> lastLineFrame == <span class=\"type\">CGRect</span>.zero &#123;</div><div class=\"line\">                lastLineFrame = lastFrame</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//  矫正</span></div><div class=\"line\">            lastLineFrame.origin.x += textContainerInset.<span class=\"keyword\">left</span></div><div class=\"line\">            lastLineFrame.origin.y += textContainerInset.top</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//  为末尾算出最大的frame</span></div><div class=\"line\">            lastLineFrame.origin.x = lastLineFrame.maxX</div><div class=\"line\">            lastLineFrame.origin.y = lastLineFrame.minY</div><div class=\"line\">            lastLineFrame.size.width = frame.width - lastLineFrame.minX</div><div class=\"line\">            lastLineFrame.size = exclusionView.sizeThatFits(lastLineFrame.size)</div><div class=\"line\">            <span class=\"keyword\">if</span> lastLineFrame.maxX &gt;= frame.width &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> isOver == <span class=\"literal\">false</span> &#123;</div><div class=\"line\">                    lastLineFrame.origin.x -= lastLineFrame.maxX - frame.width + <span class=\"built_in\">max</span>(textContainerInset.bottom, textContainerInset.<span class=\"keyword\">right</span>)</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    lastLineFrame.origin.x = lastFrame.minX + textContainerInset.<span class=\"keyword\">left</span> + <span class=\"number\">5</span></div><div class=\"line\">                    lastLineFrame.origin.y += lastFrame.height</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            exclusionView.frame = convert(lastLineFrame, to: exclusionView.superview)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">var</span> ovalFrame = convert(exclusionView.bounds, from: exclusionView)</div><div class=\"line\">            ovalFrame.origin.x += <span class=\"number\">5</span> + textContainerInset.<span class=\"keyword\">left</span></div><div class=\"line\">            ovalPaths.append(<span class=\"type\">UIBezierPath</span>(rect: ovalFrame))</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> isOver, isAutoHidenExclusionView &#123;</div><div class=\"line\">                frame.size.height = lastFrame.maxY + textContainerInset.bottom</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                frame.size.height = ovalFrame.maxY + textContainerInset.bottom</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            frame.size = <span class=\"keyword\">super</span>.sizeThatFits(size)</div><div class=\"line\">        &#125;</div><div class=\"line\">        textContainer.exclusionPaths = ovalPaths</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">CGSize</span>(width: frame.maxX, height: frame.maxY)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>  代码只是简单的做了一个DEMO，并没有仔细的调试，如果使用的话可能看需要根据自己的需求进行简单的调试吧。比如说偏移量、布局之类的。</p>\n","site":{"data":{}},"excerpt":"<p>看到AppStore的<code>更多</code>效果，做的不错哎，本文尝试采用<code>exclusionPaths</code>进行实现。不过有瑕疵。。来年用追加的方式在实现一下。感觉追加的方式比较简单。，</p>","more":"<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><p><img src=\"http://7xvzwi.com1.z0.glb.clouddn.com/UITextKit-AppStore-more-scene.gif://7xvzwi.com1.z0.glb.clouddn.com/leanote_new_logo.png\" alt=\"效果图\"></p>\n<h1 id=\"简要说明\"><a href=\"#简要说明\" class=\"headerlink\" title=\"简要说明\"></a>简要说明</h1><p>  App Store中的查看更多动画是不是很给力？可是做起来确不知道如何下手？这里我提供一种UITextKit的方法来简单的实现一下。</p>\n<p>  为了让例子简单，我就直接写了个more，那个view是自定义的，随便添加的，和本身的文本展示的并没有什么关系。</p>\n<p>  为了让最后的那个moreView更加好用，增加了已经展开显示全部是否隐藏的控制。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>  先看下Demo中调用吧：<br>  <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> info = <span class=\"type\">KTJExclusionLabel</span>()</div><div class=\"line\">info.exclusionView = more</div><div class=\"line\">info.isAutoHidenExclusionView = isAutoHiden.isOn</div><div class=\"line\">info.numberOfLines = <span class=\"type\">Int</span>.<span class=\"keyword\">init</span>(line.text ?? <span class=\"string\">\"\"</span>) ?? <span class=\"number\">0</span></div><div class=\"line\">info.sizeToFit()</div></pre></td></tr></table></figure></p>\n<p>  然后KTJExclusionLabel的实现：<br>  <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  KTJExclusionLabel.swift</span></div><div class=\"line\"><span class=\"comment\">//  UITextKit-AppStore-more</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//  Created by 孙继刚 on 2016/12/24.</span></div><div class=\"line\"><span class=\"comment\">//  Copyright © 2016年 madordie. All rights reserved.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> UIKit</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KTJExclusionLabel</span>: <span class=\"title\">UITextView</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/// 行数</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> numberOfLines: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">set</span> &#123;</div><div class=\"line\">            textContainer.maximumNumberOfLines = newValue</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> textContainer.maximumNumberOfLines</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isAutoHidenExclusionView: <span class=\"type\">Bool</span> = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/// 避让的view</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> exclusionView: <span class=\"type\">UIView</span>? &#123;</div><div class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</div><div class=\"line\">            setNeedsLayout()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(frame: <span class=\"type\">CGRect</span>, textContainer: <span class=\"type\">NSTextContainer</span>?) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(frame: frame, textContainer: textContainer)</div><div class=\"line\">        setup()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>?(coder aDecoder: <span class=\"type\">NSCoder</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(coder: aDecoder)</div><div class=\"line\">        setup()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        isEditable = <span class=\"literal\">true</span></div><div class=\"line\">        textContainer.lineBreakMode = .byTruncatingTail</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sizeToFit</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">//  对其API还不熟悉，还没有找到如何一次判断出是否已经展示完全。。找到后再更</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">let</span> originLines = numberOfLines</div><div class=\"line\">        numberOfLines = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">let</span> maxHeight = resizeThatFits(frame.size).height</div><div class=\"line\">        numberOfLines = originLines</div><div class=\"line\">        frame.size = resizeThatFits(frame.size)</div><div class=\"line\"></div><div class=\"line\">        exclusionView?.isHidden = <span class=\"literal\">false</span></div><div class=\"line\">        <span class=\"keyword\">if</span> frame.height == maxHeight &#123;</div><div class=\"line\">            frame.size = resizeThatFits(frame.size, isOver: <span class=\"literal\">true</span>)</div><div class=\"line\">            <span class=\"keyword\">if</span> isAutoHidenExclusionView &#123;</div><div class=\"line\">                exclusionView?.isHidden = <span class=\"literal\">true</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">resizeThatFits</span><span class=\"params\">(<span class=\"number\">_</span> size: CGSize, isOver: Bool = <span class=\"literal\">false</span>)</span></span> -&gt; <span class=\"type\">CGSize</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> frame = <span class=\"type\">CGRect</span>.zero</div><div class=\"line\">        frame.size = size</div><div class=\"line\"></div><div class=\"line\">        textContainer.exclusionPaths.removeAll()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> ovalPaths = [<span class=\"type\">UIBezierPath</span>]()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> exclusionView = exclusionView &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> lastLineFrame = <span class=\"type\">CGRect</span>.zero</div><div class=\"line\">            <span class=\"keyword\">var</span> lineIdx = <span class=\"number\">0</span></div><div class=\"line\">            <span class=\"keyword\">var</span> lastFrame = <span class=\"type\">CGRect</span>.zero</div><div class=\"line\">            layoutManager.enumerateLineFragments(forGlyphRange: <span class=\"type\">NSMakeRange</span>(<span class=\"number\">0</span>, text.characters.<span class=\"built_in\">count</span>)) &#123; (rect1, rect2, textContainer, range, pointer) <span class=\"keyword\">in</span></div><div class=\"line\">                <span class=\"keyword\">if</span> lineIdx &lt; textContainer.maximumNumberOfLines &#123;</div><div class=\"line\">                    lastLineFrame = rect2</div><div class=\"line\">                &#125;</div><div class=\"line\">                lineIdx += <span class=\"number\">1</span></div><div class=\"line\">                lastFrame = rect2</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> lastLineFrame == <span class=\"type\">CGRect</span>.zero &#123;</div><div class=\"line\">                lastLineFrame = lastFrame</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//  矫正</span></div><div class=\"line\">            lastLineFrame.origin.x += textContainerInset.<span class=\"keyword\">left</span></div><div class=\"line\">            lastLineFrame.origin.y += textContainerInset.top</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//  为末尾算出最大的frame</span></div><div class=\"line\">            lastLineFrame.origin.x = lastLineFrame.maxX</div><div class=\"line\">            lastLineFrame.origin.y = lastLineFrame.minY</div><div class=\"line\">            lastLineFrame.size.width = frame.width - lastLineFrame.minX</div><div class=\"line\">            lastLineFrame.size = exclusionView.sizeThatFits(lastLineFrame.size)</div><div class=\"line\">            <span class=\"keyword\">if</span> lastLineFrame.maxX &gt;= frame.width &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> isOver == <span class=\"literal\">false</span> &#123;</div><div class=\"line\">                    lastLineFrame.origin.x -= lastLineFrame.maxX - frame.width + <span class=\"built_in\">max</span>(textContainerInset.bottom, textContainerInset.<span class=\"keyword\">right</span>)</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    lastLineFrame.origin.x = lastFrame.minX + textContainerInset.<span class=\"keyword\">left</span> + <span class=\"number\">5</span></div><div class=\"line\">                    lastLineFrame.origin.y += lastFrame.height</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            exclusionView.frame = convert(lastLineFrame, to: exclusionView.superview)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">var</span> ovalFrame = convert(exclusionView.bounds, from: exclusionView)</div><div class=\"line\">            ovalFrame.origin.x += <span class=\"number\">5</span> + textContainerInset.<span class=\"keyword\">left</span></div><div class=\"line\">            ovalPaths.append(<span class=\"type\">UIBezierPath</span>(rect: ovalFrame))</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> isOver, isAutoHidenExclusionView &#123;</div><div class=\"line\">                frame.size.height = lastFrame.maxY + textContainerInset.bottom</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                frame.size.height = ovalFrame.maxY + textContainerInset.bottom</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            frame.size = <span class=\"keyword\">super</span>.sizeThatFits(size)</div><div class=\"line\">        &#125;</div><div class=\"line\">        textContainer.exclusionPaths = ovalPaths</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">CGSize</span>(width: frame.maxX, height: frame.maxY)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>  代码只是简单的做了一个DEMO，并没有仔细的调试，如果使用的话可能看需要根据自己的需求进行简单的调试吧。比如说偏移量、布局之类的。</p>"},{"title":"使用hexo搭建博客","date":"2016-07-05T10:03:31.000Z","_content":"\n这个github.io搭建的过程参考，以及向百度推送的python、js脚本。\n\n<!--more-->\n\n# 参考博客\n    \n感谢 [岁月如歌](http://lovenight.github.io) 的这个[《Hexo 3.1.1 静态博客搭建指南》](http://lovenight.github.io/2015/11/10/Hexo-3-1-1-静态博客搭建指南/)同时感谢这个[《向百度推送hexo博客所有链接的Python脚本》](http://lovenight.github.io/2015/11/18/向百度推送hexo博客所有链接的Python脚本/)(别问我为啥点不开，这个要问博主，不过要看这个文章也不是没办法的😂，因为这个博客也用git管理的。。。你懂)\n\n另外还有一个[soul](http://emufan.com)的[百度主动推送hexo生成的文章](http://emufan.com/2016/02/18/百度主动推送hexo生成的文章/)\n\n# python自动推送脚本修改\n\n上面说的博主大约用的是windows，所以脚本并不能立马的运行在Mac上，需要做些修改：故修改为：\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: LoveNight\n# @Date:   2015-11-16 20:45:59\n# @Last Modified by:   LoveNight\n# @Last Modified time: 2015-11-18 18:07:19\n\n# @Last Modified by:   Keith\n# @Last Modified time: 2016-07-06 16:22:45\nimport os\nimport sys\nimport json\nfrom bs4 import BeautifulSoup as BS\nimport requests\n#import msvcrt\n\n\"\"\"\nhexo 博客专用，向百度站长平台提交所有网址\n\n本脚本必须放在hexo博客的根目录下执行！需要已安装生成百度站点地图的插件。\n百度站长平台提交链接：http://zhanzhang.baidu.com/linksubmit/index\n主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。\n从中找到自己的接口调用地址\n\npython环境：\npip install beautifulsoup4\npip install requests\nxcode-select --install\t\npip install lxml \n\n\"\"\"\n\n# ❌❌❌ 抄的需要更改这个URL！！这是我的！！❌❌❌\nurl = 'http://data.zz.baidu.com/urls?site=https://madordie.github.io&token=j33t0VEPFl24tJ8N'\nbaidu_sitemap = os.path.join(sys.path[0], 'public', 'baidusitemap.xml')\ngoogle_sitemap = os.path.join(sys.path[0], 'public', 'sitemap.xml')\nsitemap = [baidu_sitemap, google_sitemap]\n\nassert (os.path.exists(baidu_sitemap) or os.path.exists(\n    google_sitemap)), \"没找到任何网站地图，请检查！\"\n\n\n# 从站点地图中读取网址列表\ndef getUrls():\n    urls = []\n    for _ in sitemap:\n        if os.path.exists(_):\n            with open(_, \"r\") as f:\n                xml = f.read()\n        soup = BS(xml, \"xml\")\n        tags = soup.find_all(\"loc\")\n        urls += [x.string for x in tags]\n        if _ == baidu_sitemap:\n            tags = soup.find_all(\"breadCrumb\", url=True)\n            urls += [x[\"url\"] for x in tags]\n    return urls\n\n\n# POST提交网址列表\ndef postUrls(urls):\n    urls = set(urls)  # 先去重\n    print(\"一共提取出 %s 个网址\" % len(urls))\n    print(urls)\n    data = \"\\n\".join(urls)\n    return requests.post(url, data=data).text\n\n\nif __name__ == '__main__':\n\n    urls = getUrls()\n    result = postUrls(urls)\n    print(\"提交结果：\")\n    print(result)\n#    msvcrt.getch()\n```\n\n# js脚本\n\n这个脚本是我在[soul](http://emufan.com)的[百度主动推送hexo生成的文章](http://emufan.com/2016/02/18/百度主动推送hexo生成的文章/)发现的，感觉也很赞。\n\n\n>  ## github\n  [脚本地址](https://github.com/Relsoul/bdwork/tree/master/soul/hexo百度主动上传)\n  ## 推送\n  今天发现百度没收录我的站..主要是我的站点换来换去的..估计被ban了..然后想用sitemap来推送一下..结果发现github禁用了百度爬虫..没办法只能主动推送了.\n  ## 利用插件\n  这里利用到了一款插件\n  [hexo-generator-baidu-sitemap](https://github.com/coneycode/hexo-generator-baidu-sitemap)\n  设置很简单 只需要在.config.yml添加一些数据即可, 下面附上我的添加数据 theme这个可以随意更改 下面的copy即可\n  ```\n  # Extensions\n  ## Plugins: http://hexo.io/plugins/\n  ## Themes: http://hexo.io/themes/\n  theme: yilia\n  baidusitemap:\n  path: baidusitemap.xml\n  ```\n>  ## 运行\n  然后hexo g 生成一下数据 会在public下面发现一个文件名为baidusitemap.xml\n  ## 脚本\n  这里用nodejs写了一款脚本 大概流程是 获取baidusitemap.xml里面的内容 然后读取本地的一个site_file.json这个文件 这个文件存储的是上一次数据 与上一次数据进行对比 如果对比发现新数据那么就上传新数据 否则全部上传.\n  ## 运行脚本\n  把ActivePush.js脚本放在hexo文件夹主目录 然后用nodejs ActivePush.js一下即可 这里还支持一个参数nodejs ActivePush.js all 则是不对比直接上传数据\n","source":"_posts/use-hexo-setup-blog.md","raw":"---\ntitle: 使用hexo搭建博客\ndate: 2016-07-05 18:03:31\ntags: hexo\ncategories: \n    - 教程\n---\n\n这个github.io搭建的过程参考，以及向百度推送的python、js脚本。\n\n<!--more-->\n\n# 参考博客\n    \n感谢 [岁月如歌](http://lovenight.github.io) 的这个[《Hexo 3.1.1 静态博客搭建指南》](http://lovenight.github.io/2015/11/10/Hexo-3-1-1-静态博客搭建指南/)同时感谢这个[《向百度推送hexo博客所有链接的Python脚本》](http://lovenight.github.io/2015/11/18/向百度推送hexo博客所有链接的Python脚本/)(别问我为啥点不开，这个要问博主，不过要看这个文章也不是没办法的😂，因为这个博客也用git管理的。。。你懂)\n\n另外还有一个[soul](http://emufan.com)的[百度主动推送hexo生成的文章](http://emufan.com/2016/02/18/百度主动推送hexo生成的文章/)\n\n# python自动推送脚本修改\n\n上面说的博主大约用的是windows，所以脚本并不能立马的运行在Mac上，需要做些修改：故修改为：\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: LoveNight\n# @Date:   2015-11-16 20:45:59\n# @Last Modified by:   LoveNight\n# @Last Modified time: 2015-11-18 18:07:19\n\n# @Last Modified by:   Keith\n# @Last Modified time: 2016-07-06 16:22:45\nimport os\nimport sys\nimport json\nfrom bs4 import BeautifulSoup as BS\nimport requests\n#import msvcrt\n\n\"\"\"\nhexo 博客专用，向百度站长平台提交所有网址\n\n本脚本必须放在hexo博客的根目录下执行！需要已安装生成百度站点地图的插件。\n百度站长平台提交链接：http://zhanzhang.baidu.com/linksubmit/index\n主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。\n从中找到自己的接口调用地址\n\npython环境：\npip install beautifulsoup4\npip install requests\nxcode-select --install\t\npip install lxml \n\n\"\"\"\n\n# ❌❌❌ 抄的需要更改这个URL！！这是我的！！❌❌❌\nurl = 'http://data.zz.baidu.com/urls?site=https://madordie.github.io&token=j33t0VEPFl24tJ8N'\nbaidu_sitemap = os.path.join(sys.path[0], 'public', 'baidusitemap.xml')\ngoogle_sitemap = os.path.join(sys.path[0], 'public', 'sitemap.xml')\nsitemap = [baidu_sitemap, google_sitemap]\n\nassert (os.path.exists(baidu_sitemap) or os.path.exists(\n    google_sitemap)), \"没找到任何网站地图，请检查！\"\n\n\n# 从站点地图中读取网址列表\ndef getUrls():\n    urls = []\n    for _ in sitemap:\n        if os.path.exists(_):\n            with open(_, \"r\") as f:\n                xml = f.read()\n        soup = BS(xml, \"xml\")\n        tags = soup.find_all(\"loc\")\n        urls += [x.string for x in tags]\n        if _ == baidu_sitemap:\n            tags = soup.find_all(\"breadCrumb\", url=True)\n            urls += [x[\"url\"] for x in tags]\n    return urls\n\n\n# POST提交网址列表\ndef postUrls(urls):\n    urls = set(urls)  # 先去重\n    print(\"一共提取出 %s 个网址\" % len(urls))\n    print(urls)\n    data = \"\\n\".join(urls)\n    return requests.post(url, data=data).text\n\n\nif __name__ == '__main__':\n\n    urls = getUrls()\n    result = postUrls(urls)\n    print(\"提交结果：\")\n    print(result)\n#    msvcrt.getch()\n```\n\n# js脚本\n\n这个脚本是我在[soul](http://emufan.com)的[百度主动推送hexo生成的文章](http://emufan.com/2016/02/18/百度主动推送hexo生成的文章/)发现的，感觉也很赞。\n\n\n>  ## github\n  [脚本地址](https://github.com/Relsoul/bdwork/tree/master/soul/hexo百度主动上传)\n  ## 推送\n  今天发现百度没收录我的站..主要是我的站点换来换去的..估计被ban了..然后想用sitemap来推送一下..结果发现github禁用了百度爬虫..没办法只能主动推送了.\n  ## 利用插件\n  这里利用到了一款插件\n  [hexo-generator-baidu-sitemap](https://github.com/coneycode/hexo-generator-baidu-sitemap)\n  设置很简单 只需要在.config.yml添加一些数据即可, 下面附上我的添加数据 theme这个可以随意更改 下面的copy即可\n  ```\n  # Extensions\n  ## Plugins: http://hexo.io/plugins/\n  ## Themes: http://hexo.io/themes/\n  theme: yilia\n  baidusitemap:\n  path: baidusitemap.xml\n  ```\n>  ## 运行\n  然后hexo g 生成一下数据 会在public下面发现一个文件名为baidusitemap.xml\n  ## 脚本\n  这里用nodejs写了一款脚本 大概流程是 获取baidusitemap.xml里面的内容 然后读取本地的一个site_file.json这个文件 这个文件存储的是上一次数据 与上一次数据进行对比 如果对比发现新数据那么就上传新数据 否则全部上传.\n  ## 运行脚本\n  把ActivePush.js脚本放在hexo文件夹主目录 然后用nodejs ActivePush.js一下即可 这里还支持一个参数nodejs ActivePush.js all 则是不对比直接上传数据\n","slug":"use-hexo-setup-blog","published":1,"updated":"2016-10-22T13:56:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj661pfot001pkhuvw1z4a073","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>这个github.io搭建的过程参考，以及向百度推送的python、js脚本。</p>\n<a id=\"more\"></a>\n<h1 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h1><p>感谢 <a href=\"http://lovenight.github.io\" target=\"_blank\" rel=\"external\">岁月如歌</a> 的这个<a href=\"http://lovenight.github.io/2015/11/10/Hexo-3-1-1-静态博客搭建指南/\" target=\"_blank\" rel=\"external\">《Hexo 3.1.1 静态博客搭建指南》</a>同时感谢这个<a href=\"http://lovenight.github.io/2015/11/18/向百度推送hexo博客所有链接的Python脚本/\" target=\"_blank\" rel=\"external\">《向百度推送hexo博客所有链接的Python脚本》</a>(别问我为啥点不开，这个要问博主，不过要看这个文章也不是没办法的😂，因为这个博客也用git管理的。。。你懂)</p>\n<p>另外还有一个<a href=\"http://emufan.com\" target=\"_blank\" rel=\"external\">soul</a>的<a href=\"http://emufan.com/2016/02/18/百度主动推送hexo生成的文章/\" target=\"_blank\" rel=\"external\">百度主动推送hexo生成的文章</a></p>\n<h1 id=\"python自动推送脚本修改\"><a href=\"#python自动推送脚本修改\" class=\"headerlink\" title=\"python自动推送脚本修改\"></a>python自动推送脚本修改</h1><p>上面说的博主大约用的是windows，所以脚本并不能立马的运行在Mac上，需要做些修改：故修改为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\"># @Author: LoveNight</span></div><div class=\"line\"><span class=\"comment\"># @Date:   2015-11-16 20:45:59</span></div><div class=\"line\"><span class=\"comment\"># @Last Modified by:   LoveNight</span></div><div class=\"line\"><span class=\"comment\"># @Last Modified time: 2015-11-18 18:07:19</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># @Last Modified by:   Keith</span></div><div class=\"line\"><span class=\"comment\"># @Last Modified time: 2016-07-06 16:22:45</span></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup <span class=\"keyword\">as</span> BS</div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"comment\">#import msvcrt</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"\"\"</span></div><div class=\"line\">hexo 博客专用，向百度站长平台提交所有网址</div><div class=\"line\"></div><div class=\"line\">本脚本必须放在hexo博客的根目录下执行！需要已安装生成百度站点地图的插件。</div><div class=\"line\">百度站长平台提交链接：http://zhanzhang.baidu.com/linksubmit/index</div><div class=\"line\">主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</div><div class=\"line\">从中找到自己的接口调用地址</div><div class=\"line\"></div><div class=\"line\">python环境：</div><div class=\"line\">pip install beautifulsoup4</div><div class=\"line\">pip install requests</div><div class=\"line\">xcode-select --install\t</div><div class=\"line\">pip install lxml </div><div class=\"line\"></div><div class=\"line\">\"\"\"</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ❌❌❌ 抄的需要更改这个URL！！这是我的！！❌❌❌</span></div><div class=\"line\">url = <span class=\"string\">'http://data.zz.baidu.com/urls?site=https://madordie.github.io&amp;token=j33t0VEPFl24tJ8N'</span></div><div class=\"line\">baidu_sitemap = os.path.join(sys.path[<span class=\"number\">0</span>], <span class=\"string\">'public'</span>, <span class=\"string\">'baidusitemap.xml'</span>)</div><div class=\"line\">google_sitemap = os.path.join(sys.path[<span class=\"number\">0</span>], <span class=\"string\">'public'</span>, <span class=\"string\">'sitemap.xml'</span>)</div><div class=\"line\">sitemap = [baidu_sitemap, google_sitemap]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">assert</span> (os.path.exists(baidu_sitemap) <span class=\"keyword\">or</span> os.path.exists(</div><div class=\"line\">    google_sitemap)), <span class=\"string\">\"没找到任何网站地图，请检查！\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 从站点地图中读取网址列表</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getUrls</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    urls = []</div><div class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> sitemap:</div><div class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(_):</div><div class=\"line\">            <span class=\"keyword\">with</span> open(_, <span class=\"string\">\"r\"</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">                xml = f.read()</div><div class=\"line\">        soup = BS(xml, <span class=\"string\">\"xml\"</span>)</div><div class=\"line\">        tags = soup.find_all(<span class=\"string\">\"loc\"</span>)</div><div class=\"line\">        urls += [x.string <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> tags]</div><div class=\"line\">        <span class=\"keyword\">if</span> _ == baidu_sitemap:</div><div class=\"line\">            tags = soup.find_all(<span class=\"string\">\"breadCrumb\"</span>, url=<span class=\"keyword\">True</span>)</div><div class=\"line\">            urls += [x[<span class=\"string\">\"url\"</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> tags]</div><div class=\"line\">    <span class=\"keyword\">return</span> urls</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># POST提交网址列表</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">postUrls</span><span class=\"params\">(urls)</span>:</span></div><div class=\"line\">    urls = set(urls)  <span class=\"comment\"># 先去重</span></div><div class=\"line\">    print(<span class=\"string\">\"一共提取出 %s 个网址\"</span> % len(urls))</div><div class=\"line\">    print(urls)</div><div class=\"line\">    data = <span class=\"string\">\"\\n\"</span>.join(urls)</div><div class=\"line\">    <span class=\"keyword\">return</span> requests.post(url, data=data).text</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\"></div><div class=\"line\">    urls = getUrls()</div><div class=\"line\">    result = postUrls(urls)</div><div class=\"line\">    print(<span class=\"string\">\"提交结果：\"</span>)</div><div class=\"line\">    print(result)</div><div class=\"line\"><span class=\"comment\">#    msvcrt.getch()</span></div></pre></td></tr></table></figure>\n<h1 id=\"js脚本\"><a href=\"#js脚本\" class=\"headerlink\" title=\"js脚本\"></a>js脚本</h1><p>这个脚本是我在<a href=\"http://emufan.com\" target=\"_blank\" rel=\"external\">soul</a>的<a href=\"http://emufan.com/2016/02/18/百度主动推送hexo生成的文章/\" target=\"_blank\" rel=\"external\">百度主动推送hexo生成的文章</a>发现的，感觉也很赞。</p>\n<blockquote>\n<h2 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h2><p>  <a href=\"https://github.com/Relsoul/bdwork/tree/master/soul/hexo百度主动上传\" target=\"_blank\" rel=\"external\">脚本地址</a></p>\n<h2 id=\"推送\"><a href=\"#推送\" class=\"headerlink\" title=\"推送\"></a>推送</h2><p>  今天发现百度没收录我的站..主要是我的站点换来换去的..估计被ban了..然后想用sitemap来推送一下..结果发现github禁用了百度爬虫..没办法只能主动推送了.</p>\n<h2 id=\"利用插件\"><a href=\"#利用插件\" class=\"headerlink\" title=\"利用插件\"></a>利用插件</h2><p>  这里利用到了一款插件<br>  <a href=\"https://github.com/coneycode/hexo-generator-baidu-sitemap\" target=\"_blank\" rel=\"external\">hexo-generator-baidu-sitemap</a><br>  设置很简单 只需要在.config.yml添加一些数据即可, 下面附上我的添加数据 theme这个可以随意更改 下面的copy即可<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: http://hexo.io/plugins/</div><div class=\"line\">## Themes: http://hexo.io/themes/</div><div class=\"line\">theme: yilia</div><div class=\"line\">baidusitemap:</div><div class=\"line\">path: baidusitemap.xml</div></pre></td></tr></table></figure></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>  然后hexo g 生成一下数据 会在public下面发现一个文件名为baidusitemap.xml</p>\n<h2 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h2><p>  这里用nodejs写了一款脚本 大概流程是 获取baidusitemap.xml里面的内容 然后读取本地的一个site_file.json这个文件 这个文件存储的是上一次数据 与上一次数据进行对比 如果对比发现新数据那么就上传新数据 否则全部上传.</p>\n<h2 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h2><p>  把ActivePush.js脚本放在hexo文件夹主目录 然后用nodejs ActivePush.js一下即可 这里还支持一个参数nodejs ActivePush.js all 则是不对比直接上传数据</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>这个github.io搭建的过程参考，以及向百度推送的python、js脚本。</p>","more":"<h1 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h1><p>感谢 <a href=\"http://lovenight.github.io\">岁月如歌</a> 的这个<a href=\"http://lovenight.github.io/2015/11/10/Hexo-3-1-1-静态博客搭建指南/\">《Hexo 3.1.1 静态博客搭建指南》</a>同时感谢这个<a href=\"http://lovenight.github.io/2015/11/18/向百度推送hexo博客所有链接的Python脚本/\">《向百度推送hexo博客所有链接的Python脚本》</a>(别问我为啥点不开，这个要问博主，不过要看这个文章也不是没办法的😂，因为这个博客也用git管理的。。。你懂)</p>\n<p>另外还有一个<a href=\"http://emufan.com\">soul</a>的<a href=\"http://emufan.com/2016/02/18/百度主动推送hexo生成的文章/\">百度主动推送hexo生成的文章</a></p>\n<h1 id=\"python自动推送脚本修改\"><a href=\"#python自动推送脚本修改\" class=\"headerlink\" title=\"python自动推送脚本修改\"></a>python自动推送脚本修改</h1><p>上面说的博主大约用的是windows，所以脚本并不能立马的运行在Mac上，需要做些修改：故修改为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\"># @Author: LoveNight</span></div><div class=\"line\"><span class=\"comment\"># @Date:   2015-11-16 20:45:59</span></div><div class=\"line\"><span class=\"comment\"># @Last Modified by:   LoveNight</span></div><div class=\"line\"><span class=\"comment\"># @Last Modified time: 2015-11-18 18:07:19</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># @Last Modified by:   Keith</span></div><div class=\"line\"><span class=\"comment\"># @Last Modified time: 2016-07-06 16:22:45</span></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup <span class=\"keyword\">as</span> BS</div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"comment\">#import msvcrt</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"\"\"</div><div class=\"line\">hexo 博客专用，向百度站长平台提交所有网址</div><div class=\"line\"></div><div class=\"line\">本脚本必须放在hexo博客的根目录下执行！需要已安装生成百度站点地图的插件。</div><div class=\"line\">百度站长平台提交链接：http://zhanzhang.baidu.com/linksubmit/index</div><div class=\"line\">主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</div><div class=\"line\">从中找到自己的接口调用地址</div><div class=\"line\"></div><div class=\"line\">python环境：</div><div class=\"line\">pip install beautifulsoup4</div><div class=\"line\">pip install requests</div><div class=\"line\">xcode-select --install\t</div><div class=\"line\">pip install lxml </div><div class=\"line\"></div><div class=\"line\">\"\"\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ❌❌❌ 抄的需要更改这个URL！！这是我的！！❌❌❌</span></div><div class=\"line\">url = <span class=\"string\">'http://data.zz.baidu.com/urls?site=https://madordie.github.io&amp;token=j33t0VEPFl24tJ8N'</span></div><div class=\"line\">baidu_sitemap = os.path.join(sys.path[<span class=\"number\">0</span>], <span class=\"string\">'public'</span>, <span class=\"string\">'baidusitemap.xml'</span>)</div><div class=\"line\">google_sitemap = os.path.join(sys.path[<span class=\"number\">0</span>], <span class=\"string\">'public'</span>, <span class=\"string\">'sitemap.xml'</span>)</div><div class=\"line\">sitemap = [baidu_sitemap, google_sitemap]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">assert</span> (os.path.exists(baidu_sitemap) <span class=\"keyword\">or</span> os.path.exists(</div><div class=\"line\">    google_sitemap)), <span class=\"string\">\"没找到任何网站地图，请检查！\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 从站点地图中读取网址列表</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getUrls</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    urls = []</div><div class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> sitemap:</div><div class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(_):</div><div class=\"line\">            <span class=\"keyword\">with</span> open(_, <span class=\"string\">\"r\"</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">                xml = f.read()</div><div class=\"line\">        soup = BS(xml, <span class=\"string\">\"xml\"</span>)</div><div class=\"line\">        tags = soup.find_all(<span class=\"string\">\"loc\"</span>)</div><div class=\"line\">        urls += [x.string <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> tags]</div><div class=\"line\">        <span class=\"keyword\">if</span> _ == baidu_sitemap:</div><div class=\"line\">            tags = soup.find_all(<span class=\"string\">\"breadCrumb\"</span>, url=<span class=\"keyword\">True</span>)</div><div class=\"line\">            urls += [x[<span class=\"string\">\"url\"</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> tags]</div><div class=\"line\">    <span class=\"keyword\">return</span> urls</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># POST提交网址列表</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">postUrls</span><span class=\"params\">(urls)</span>:</span></div><div class=\"line\">    urls = set(urls)  <span class=\"comment\"># 先去重</span></div><div class=\"line\">    print(<span class=\"string\">\"一共提取出 %s 个网址\"</span> % len(urls))</div><div class=\"line\">    print(urls)</div><div class=\"line\">    data = <span class=\"string\">\"\\n\"</span>.join(urls)</div><div class=\"line\">    <span class=\"keyword\">return</span> requests.post(url, data=data).text</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\"></div><div class=\"line\">    urls = getUrls()</div><div class=\"line\">    result = postUrls(urls)</div><div class=\"line\">    print(<span class=\"string\">\"提交结果：\"</span>)</div><div class=\"line\">    print(result)</div><div class=\"line\"><span class=\"comment\">#    msvcrt.getch()</span></div></pre></td></tr></table></figure>\n<h1 id=\"js脚本\"><a href=\"#js脚本\" class=\"headerlink\" title=\"js脚本\"></a>js脚本</h1><p>这个脚本是我在<a href=\"http://emufan.com\">soul</a>的<a href=\"http://emufan.com/2016/02/18/百度主动推送hexo生成的文章/\">百度主动推送hexo生成的文章</a>发现的，感觉也很赞。</p>\n<blockquote>\n<h2 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h2><p>  <a href=\"https://github.com/Relsoul/bdwork/tree/master/soul/hexo百度主动上传\">脚本地址</a></p>\n<h2 id=\"推送\"><a href=\"#推送\" class=\"headerlink\" title=\"推送\"></a>推送</h2><p>  今天发现百度没收录我的站..主要是我的站点换来换去的..估计被ban了..然后想用sitemap来推送一下..结果发现github禁用了百度爬虫..没办法只能主动推送了.</p>\n<h2 id=\"利用插件\"><a href=\"#利用插件\" class=\"headerlink\" title=\"利用插件\"></a>利用插件</h2><p>  这里利用到了一款插件<br>  <a href=\"https://github.com/coneycode/hexo-generator-baidu-sitemap\">hexo-generator-baidu-sitemap</a><br>  设置很简单 只需要在.config.yml添加一些数据即可, 下面附上我的添加数据 theme这个可以随意更改 下面的copy即可<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: http://hexo.io/plugins/</div><div class=\"line\">## Themes: http://hexo.io/themes/</div><div class=\"line\">theme: yilia</div><div class=\"line\">baidusitemap:</div><div class=\"line\">path: baidusitemap.xml</div></pre></td></tr></table></figure></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>  然后hexo g 生成一下数据 会在public下面发现一个文件名为baidusitemap.xml</p>\n<h2 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h2><p>  这里用nodejs写了一款脚本 大概流程是 获取baidusitemap.xml里面的内容 然后读取本地的一个site_file.json这个文件 这个文件存储的是上一次数据 与上一次数据进行对比 如果对比发现新数据那么就上传新数据 否则全部上传.</p>\n<h2 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h2><p>  把ActivePush.js脚本放在hexo文件夹主目录 然后用nodejs ActivePush.js一下即可 这里还支持一个参数nodejs ActivePush.js all 则是不对比直接上传数据</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj661pfm00001khuv6h3h104i","category_id":"cj661pfma0004khuvys72nikv","_id":"cj661pfn3000ckhuvkovm09hi"},{"post_id":"cj661pfn8000fkhuv18ioddhn","category_id":"cj661pfmz000akhuvvla56w57","_id":"cj661pfnd000jkhuvbtayrajv"},{"post_id":"cj661pfmt0008khuvc7roorh3","category_id":"cj661pfn7000ekhuv74wkm6ov","_id":"cj661pfng000lkhuvp38shvt6"},{"post_id":"cj661pfn0000bkhuvzfmq48gx","category_id":"cj661pfnb000hkhuvfccgaqzx","_id":"cj661pfnl000pkhuv525h67e3"},{"post_id":"cj661pfmf0006khuvd4h0ub8x","category_id":"cj661pfmz000akhuvvla56w57","_id":"cj661pfnq000tkhuv0zm5y5vg"},{"post_id":"cj661pfmf0006khuvd4h0ub8x","category_id":"cj661pfnh000mkhuv0muthwxq","_id":"cj661pfnt000xkhuvz0lotfqx"},{"post_id":"cj661pfn4000dkhuvsktmz76s","category_id":"cj661pfnm000rkhuve71qcuca","_id":"cj661pfnw0010khuv7np7uipq"},{"post_id":"cj661pfn9000gkhuvyw50vjia","category_id":"cj661pfnt000vkhuvtfvhqpqi","_id":"cj661pfo10015khuvm8r7m840"},{"post_id":"cj661pfnc000ikhuvhwq8n1h4","category_id":"cj661pfnm000rkhuve71qcuca","_id":"cj661pfo60019khuvk8cgnnue"},{"post_id":"cj661pfne000kkhuv8l8ohams","category_id":"cj661pfnm000rkhuve71qcuca","_id":"cj661pfob001dkhuvn7sdjpmq"},{"post_id":"cj661pfni000nkhuv0o6mf2qi","category_id":"cj661pfnt000vkhuvtfvhqpqi","_id":"cj661pfoj001hkhuvdfkfbjjf"},{"post_id":"cj661pfoc001fkhuvnmipzp6x","category_id":"cj661pfnt000vkhuvtfvhqpqi","_id":"cj661pfol001kkhuvorskczhk"},{"post_id":"cj661pfnk000okhuvsrx95r5w","category_id":"cj661pfnm000rkhuve71qcuca","_id":"cj661pfoq001mkhuvloq42lkj"},{"post_id":"cj661pfnl000qkhuvlmgeque0","category_id":"cj661pfoj001ikhuvld8p8mpi","_id":"cj661pfov001qkhuvzgwisb4l"},{"post_id":"cj661pfom001lkhuvtksec7zv","category_id":"cj661pfmz000akhuvvla56w57","_id":"cj661pfow001skhuvdwtymxsm"},{"post_id":"cj661pfoq001okhuvtw0san3r","category_id":"cj661pfmz000akhuvvla56w57","_id":"cj661pfow001ukhuvdh7sqiy0"},{"post_id":"cj661pfnu000ykhuv1lhqk1cq","category_id":"cj661pfoq001nkhuv3t6nm4n0","_id":"cj661pfox001wkhuv1oqbk38d"},{"post_id":"cj661pfnv000zkhuvrqxbk0mz","category_id":"cj661pfmz000akhuvvla56w57","_id":"cj661pfox001ykhuvjbv62h7d"},{"post_id":"cj661pfnv000zkhuvrqxbk0mz","category_id":"cj661pfov001rkhuvbhb5d107","_id":"cj661pfox0020khuvelt0ujwn"},{"post_id":"cj661pfny0012khuve2cnldmp","category_id":"cj661pfmz000akhuvvla56w57","_id":"cj661pfox0021khuv8efmtsrl"},{"post_id":"cj661pfny0012khuve2cnldmp","category_id":"cj661pfow001vkhuv2r2oa10z","_id":"cj661pfoz0023khuvrfcr91sr"},{"post_id":"cj661pfo00014khuvu3epyx60","category_id":"cj661pfmz000akhuvvla56w57","_id":"cj661pfoz0024khuvgtx0jhng"},{"post_id":"cj661pfo00014khuvu3epyx60","category_id":"cj661pfox001zkhuvutueh1f0","_id":"cj661pfp00026khuv82b3lgha"},{"post_id":"cj661pfo20017khuv715c1dht","category_id":"cj661pfoy0022khuvrlbqr4lc","_id":"cj661pfp10027khuvlkepyi35"},{"post_id":"cj661pfo50018khuvbwabact1","category_id":"cj661pfmz000akhuvvla56w57","_id":"cj661pfp30029khuvn040cqat"},{"post_id":"cj661pfo50018khuvbwabact1","category_id":"cj661pfox001zkhuvutueh1f0","_id":"cj661pfp5002bkhuv7rr8u81o"},{"post_id":"cj661pfo7001bkhuvqycxuot6","category_id":"cj661pfmz000akhuvvla56w57","_id":"cj661pfp6002ckhuvxeknvmoj"},{"post_id":"cj661pfo7001bkhuvqycxuot6","category_id":"cj661pfox001zkhuvutueh1f0","_id":"cj661pfp7002ekhuvvm210dze"},{"post_id":"cj661pfoa001ckhuvgnqqekiu","category_id":"cj661pfoy0022khuvrlbqr4lc","_id":"cj661pfp7002fkhuv5nedrw47"},{"post_id":"cj661pfoj001jkhuv37trak2k","category_id":"cj661pfoy0022khuvrlbqr4lc","_id":"cj661pfp8002ikhuv4c98pln7"},{"post_id":"cj661pfot001pkhuvw1z4a073","category_id":"cj661pfp8002hkhuvgdz3oriv","_id":"cj661pfp9002kkhuvy3mfeqgd"},{"post_id":"cj661pfoh001gkhuvgniw94hw","category_id":"cj661pfp6002dkhuvt7w8a17o","_id":"cj661pfp9002lkhuv4gh93rca"},{"post_id":"cj661pfoh001gkhuvgniw94hw","category_id":"cj661pfp8002jkhuv1wgro17o","_id":"cj661pfp9002mkhuvi48ajf2a"}],"PostTag":[{"post_id":"cj661pfnn000skhuvhamy9cuv","tag_id":"cj661pfnt000wkhuv8k24p00s","_id":"cj661pfnz0013khuvkgyu6yn3"},{"post_id":"cj661pfot001pkhuvw1z4a073","tag_id":"cj661pfow001tkhuv3516p7mh","_id":"cj661pfox001xkhuvwhn1x3tq"}],"Tag":[{"name":"sketchplugin","_id":"cj661pfnt000wkhuv8k24p00s"},{"name":"hexo","_id":"cj661pfow001tkhuv3516p7mh"}]}}