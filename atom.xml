<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>继刚的博客</title>
  <subtitle>不疯魔,不成活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://madordie.github.io/"/>
  <updated>2018-01-02T11:18:34.562Z</updated>
  <id>https://madordie.github.io/</id>
  
  <author>
    <name>继刚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS逆向-创建Cydia源</title>
    <link href="https://madordie.github.io/post/reverse-ios-creat-cydia-sources/"/>
    <id>https://madordie.github.io/post/reverse-ios-creat-cydia-sources/</id>
    <published>2018-01-01T16:00:00.000Z</published>
    <updated>2018-01-02T11:18:34.562Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>先笔记。</p>
<a id="more"></a>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>Ubuntu 16.04 LTS</li>
</ul>
<h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><h4 id="dpkg-dev"><a href="#dpkg-dev" class="headerlink" title="dpkg-dev"></a>dpkg-dev</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ apt-get update</div><div class="line">$ apt-get install dpkg-dev</div><div class="line">$ dpkg-scanpackages --help</div></pre></td></tr></table></figure>
<h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install nginx</div></pre></td></tr></table></figure>
<h3 id="开工"><a href="#开工" class="headerlink" title="开工"></a>开工</h3><h4 id="准备deb"><a href="#准备deb" class="headerlink" title="准备deb"></a>准备deb</h4><p>此处目录为<code>/opt/cydia/debs</code>，可以为别的，但是建议你也这样做:)。</p>
<h4 id="生成依赖"><a href="#生成依赖" class="headerlink" title="生成依赖"></a>生成依赖</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /opt/cydia</div><div class="line">$ dpkg-scanpackages debs/  /dev/null | gzip&gt; debs/Packages.gz</div><div class="line">$ tar zcvf Packages.gz Packages</div><div class="line">$ bzip2 -k Packages Packages.bz2</div></pre></td></tr></table></figure>
<h4 id="添加sources-list"><a href="#添加sources-list" class="headerlink" title="添加sources.list"></a>添加sources.list</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="string">"deb file:///opt/cydia ./debs/"</span> &gt;&gt; /etc/apt/sources.list</div></pre></td></tr></table></figure>
<p>ps. 注意路径信息</p>
<h4 id="更新一下"><a href="#更新一下" class="headerlink" title="更新一下"></a>更新一下</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get update</div></pre></td></tr></table></figure>
<h4 id="扔出去"><a href="#扔出去" class="headerlink" title="扔出去"></a>扔出去</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ln <span class="_">-s</span> /opt/cydia cydia</div><div class="line">$ /etc/init.d/nginx start</div></pre></td></tr></table></figure>
<h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><p>（等我试一下更新再更吧😂</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.saurik.com/id/7" target="_blank" rel="external">http://www.saurik.com/id/7</a></li>
<li><a href="https://bbs.feng.com/read-htm-tid-8052646.html" target="_blank" rel="external">https://bbs.feng.com/read-htm-tid-8052646.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="逆向" scheme="https://madordie.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>描述文件获取UDID</title>
    <link href="https://madordie.github.io/post/ios-tool-configurator-get-udid/"/>
    <id>https://madordie.github.io/post/ios-tool-configurator-get-udid/</id>
    <published>2017-12-06T16:00:00.000Z</published>
    <updated>2017-12-07T10:00:29.377Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="UDID"><a href="#UDID" class="headerlink" title="UDID"></a>UDID</h3><p>对，就是在iTunes等工具上看到的UDID..</p>
<a id="more"></a>
<h3 id="工具及文档"><a href="#工具及文档" class="headerlink" title="工具及文档"></a>工具及文档</h3><p>嗯，Apple出的为数不多的mac app:<a href="https://itunes.apple.com/cn/app/apple-configurator-2/id1037126344?mt=12" target="_blank" rel="external">Apple Configurator 2</a></p>
<p>这个工具是有中文文档的：<a href="http://help.apple.com/configurator/mac/2.3/?lang=zh-cn" target="_blank" rel="external">Apple Configurator 2 官方文档</a></p>
<p>当然还有比较暴力的直接写xml: <a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/iPhoneOTAConfiguration/ConfigurationProfileExamples/ConfigurationProfileExamples.html" target="_blank" rel="external">Apple的相关文档</a></p>
<hr>
<ul>
<li><a href="http://www.skyfox.org/safari-ios-device-udid.html" target="_blank" rel="external">通过Safari浏览器获取iOS设备UDID(设备唯一标识符)</a></li>
<li><a href="http://www.skyfox.org/ios-mobileconfig-sign.html" target="_blank" rel="external">为iOS的mobileconfig文件进行签名</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;UDID&quot;&gt;&lt;a href=&quot;#UDID&quot; class=&quot;headerlink&quot; title=&quot;UDID&quot;&gt;&lt;/a&gt;UDID&lt;/h3&gt;&lt;p&gt;对，就是在iTunes等工具上看到的UDID..&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="tool" scheme="https://madordie.github.io/tags/tool/"/>
    
      <category term="UDID" scheme="https://madordie.github.io/tags/UDID/"/>
    
  </entry>
  
  <entry>
    <title>「转」一张思维导图，让正则表达式不再难懂</title>
    <link href="https://madordie.github.io/post/reprinted-regular-mind-map/"/>
    <id>https://madordie.github.io/post/reprinted-regular-mind-map/</id>
    <published>2017-10-15T16:00:00.000Z</published>
    <updated>2017-10-16T02:26:02.834Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="/images/bruch-up-regular-expressions-1.png" alt="思维导图"></p>
<a id="more"></a>
<h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><ul>
<li>普通字符：字母、数字、汉字、下划线，匹配与之相同的一个字符</li>
<li>简单转义字符：\n（换行）,\t（制表）,\（\本身）和 \^…（\^等有特殊作用的符号如要匹配自己的话要用转义）</li>
<li><p>标准字符集合<br>注意区分大小写，大写是相反的意思，匹配相反是不匹配</p>
<ul>
<li>\d<br>  任意一个数字，0~9</li>
<li>\w<br>  任意一个字母、数字、汉字或下划线，A~Z、a~z、0~9、_和任意一个汉字</li>
<li>\s<br>  任意空白符，包括空格、制表符、换行符</li>
<li>.<br>  小数点可以匹配任意一个字符，换行除外（如果要匹配包括”\n”在内的所有字符，一般用[\s\S]）</li>
</ul>
</li>
<li><p>自定义字符集合<br>[ ]方括号匹配方式，能够匹配方括号中的任意一个字符,^表示取反</p>
<ul>
<li>[ab5@]<br>  匹配”a”或”b”或”5”或”@”</li>
<li>[^abc]<br>  匹配a、b、c之外的任意字符</li>
<li>[f-k]<br>  匹配“f”到”k”之间的字符</li>
<li>[^A-F0-3]<br>  匹配“A”-“F”,”0”-“3”之外的任意一个字符</li>
</ul>
</li>
</ul>
<h2 id="量词-Quantifier"><a href="#量词-Quantifier" class="headerlink" title="量词(Quantifier)"></a>量词(Quantifier)</h2><p>修饰前面的一个表达式，如果要修饰多个表达式，就用( )把表达式包起来</p>
<ul>
<li>{n}<br>  表达式重复n次​</li>
<li>{m,n}<br>  表达式至少重复m次，最多重复n次<ul>
<li>贪婪模式 （默认）<br>匹配符合的最长的字符串</li>
<li>非贪婪模式 （在量词后面加 ? 例：{m,n}? )<br>  匹配符合的最短的字符串</li>
</ul>
</li>
<li>{m,}<br>  表达式至少重复m次</li>
<li>？<br>  匹配表达式0或1次，相当于{0,1}</li>
<li>+<br>  表达式至少出现一次，相当于{1,}</li>
<li>*<br>  表达式不出现或出现任意次，相当于{0,}</li>
</ul>
<h2 id="字符边界"><a href="#字符边界" class="headerlink" title="字符边界"></a>字符边界</h2><pre><code>零宽：匹配的不是字符而是位置，符合某种条件的位置
</code></pre><ul>
<li>^<br>  与字符串开始的地方匹配</li>
<li>$<br>  与字符串结束的地方匹配</li>
<li>\b<br>  匹配一个单词的边界，当前位置前面的字符和后面的字符不全是\w</li>
</ul>
<h2 id="预搜索（零宽断言、环视）"><a href="#预搜索（零宽断言、环视）" class="headerlink" title="预搜索（零宽断言、环视）"></a>预搜索（零宽断言、环视）</h2><p>零宽：匹配的不是字符而是位置，符合某种条件的位置</p>
<ul>
<li>(?=exp)<br>  断言自身出现的位置的后面能匹配表达式exp</li>
<li>(?!exp)<br>  断言自身出现的位置的后面不能匹配表达式exp</li>
<li>(?&lt;=exp)<br>  断言自身出现的位置的前面能匹配表达式exp</li>
<li>(?&lt;!exp)<br>  断言自身出现的位置的前面不能匹配表达式exp</li>
</ul>
<h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><p>对文本的处理方式</p>
<ul>
<li>IGNORECASE 忽略大小写模式<br>  匹配时忽略大小写<br>  默认是区分大小写的</li>
<li>SINGLELINE 单行模式<br>  整个文本看作一个字符串，只有一个开头一个结尾<br>  使小数点”.”可以匹配包含换行符(\n)在内的任意字符</li>
<li>MULTILINE 多行模式<br>  每行都是一个字符串<br>  在多行模式下，如果需要仅匹配字符串开始和结束位置，可以使用\A和\Z</li>
</ul>
<h2 id="选择符和分组"><a href="#选择符和分组" class="headerlink" title="选择符和分组"></a>选择符和分组</h2><p>分支结构、捕获组合非捕获组</p>
<ul>
<li>| 分支结构​<br>  左右表达式之间“或”关系，匹配左边或右边</li>
<li>( ) 捕获组<br>  （1）、在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰<br>  （2）、取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到<br>  （3）、每一对括号会分配一个编号，使用（）的捕获根据左括号的顺序从1开始自动编号。捕获编号为零的第一个捕获是整个正则表达式模式匹配的文本<br>   反向引用：通过反向引用，可以对分组已捕获的字符串进行引用。</li>
<li>(?:Expression) 非捕获组<br>  一些表达式中，不得不使用（），但又不需要保存（）中子表达式匹配的内容，这时可以用非捕获组来抵消（）带来的副作用。</li>
</ul>
<hr>
<p>原文：<a href="https://my.oschina.net/u/3080373/blog/1550653" target="_blank" rel="external">一张思维导图，让正则表达式不再难懂</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/bruch-up-regular-expressions-1.png&quot; alt=&quot;思维导图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://madordie.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="正则表达式" scheme="https://madordie.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>用CollectionView简化代码，专注于业务和UI</title>
    <link href="https://madordie.github.io/post/ios-tool-collectionview-simplify-business/"/>
    <id>https://madordie.github.io/post/ios-tool-collectionview-simplify-business/</id>
    <published>2017-10-11T16:00:00.000Z</published>
    <updated>2017-10-31T03:44:10.160Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><code>UITableView</code>作为高级控件被开发者广泛使用，同样的，<code>UICollectionView</code>由于其NB的布局也被广泛使用。但是后者在使用的时候大多数都属于自定义的比较多，前者则相对普通，list基本上都用。</p>
<p>在业务需求中，常规布局，大多数都是采用<code>UITableView</code>进行的，但是有痛点：</p>
<ul>
<li>当使在APP内用过一次瀑布流之后，设计师会突然的让你在正常的list中底部追加瀑布流。。虽然是在底部追加，但是要从<code>UITableView</code>迁移到<code>UICollectionView</code></li>
<li><code>UITableViewDelegate</code>、<code>UITableViewDataSource</code> 恐怕每处使用都要写繁琐的相同的代码吧～</li>
<li>很多人也会对其进行高度缓存啊神马的优化策略</li>
<li>不知不觉这些代码堆在一起已经将<code>UIViewController</code>堆的相当的高</li>
</ul>
<p>然后呢，我们现在使用一个<code>CollectionView</code>将这些操作包装一下，达到这样一个流程:</p>
<ol>
<li><p>自定义Cell、CellModel</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LabelCell</span>: <span class="title">UICollectionViewCell</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> info = <span class="type">UILabel</span>()</div><div class="line">    ...</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">sizeThatFits</span><span class="params">(<span class="number">_</span> size: CGSize)</span></span> -&gt; <span class="type">CGSize</span> &#123;</div><div class="line">        ...</div><div class="line">        <span class="keyword">return</span> <span class="type">CGSize</span>(width: size.width, height: info.frame.maxY + info.frame.minY)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LabelCell</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Model</span>: <span class="title">ListItemDefaultProtocol</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> info: <span class="type">String</span>?</div><div class="line">        <span class="function"><span class="keyword">func</span> <span class="title">fillModel</span><span class="params">(view: LabelCell)</span></span> &#123;</div><div class="line">            view.info.text = info</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>请求、处理数据格式化为<code>LabelCell.Model</code>这样的类</p>
</li>
<li><p>处理好的数据交给<code>CollectionView</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list.sections = model.format(...)</div></pre></td></tr></table></figure>
</li>
<li><p>休息一会，完工了～</p>
</li>
</ol>
<p>然后，来看看<code>Collection</code>里面都做了什么操作</p>
<a id="more"></a>
<h3 id="CollectionView"><a href="#CollectionView" class="headerlink" title="CollectionView"></a>CollectionView</h3><p>为了达到上面效果中的第三步，我们需要自定义一个<code>CollectionView</code>来处理刷新数据、设置代理、设置数据源、注册cell、等操作。</p>
<p>需要说明的是，此处使用<a href="https://github.com/chiahsien/CHTCollectionViewWaterfallLayout" target="_blank" rel="external"><code>CHTCollectionViewWaterfallLayout</code></a>来处理瀑布流。</p>
<p>创建一个<code>CollectionViewSection</code>的类/结构体来保存section信息。比如说：<code>sectionInset</code>、<code>minimumColumnSpacing</code>、<code>minimumInteritemSpacing</code>、<code>columnCount</code>、等</p>
<p>在<code>CollectionView</code>中设置一个<code>var sections = [KTJCollectionViewSection]()</code>用于保存sections</p>
<p>实现<code>UICollectionViewDataSource</code>、 <code>UICollectionViewDelegate</code>。此处省略约1千字…</p>
<h3 id="ListItemDefaultProtocol：绑定Cell和Model"><a href="#ListItemDefaultProtocol：绑定Cell和Model" class="headerlink" title="ListItemDefaultProtocol：绑定Cell和Model"></a>ListItemDefaultProtocol：绑定Cell和Model</h3><p>上面<code>省略约1千字</code>中有一个并没有说：<code>CollectionViewSection</code>的<code>header</code>、<code>items</code>、<code>footer</code>如何实现。😂</p>
<p>好了，此处这三个均采用协议<code>ListItemDefaultProtocol</code>来实现。（PS：大家都喜欢用父类，但父类只有一个，为了兼容和冲突，这里协议是最好不过的～，特别是swift中的协议）</p>
<p>协议需要给出这么几个信息：</p>
<ul>
<li><code>reuseIdentifier</code> 用来复用的重用标识符</li>
<li><code>cellClass</code> 用来注册用的类名</li>
<li><code>func fillModel(item: AnyObject)</code> 用来给cell填充model的方法</li>
</ul>
<p>那么这个协议就出来了：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">KTJListItemProtocol</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> identifa: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="keyword">var</span> registClass: <span class="type">AnyClass</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fillModel</span><span class="params">(item: AnyObject)</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在<strong>swift</strong>协议支持默认实现，于是乎，就可以再写一个:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ListItemDefaultProtocol</span>: <span class="title">KTJListItemProtocol</span> </span>&#123;</div><div class="line">    associatedtype <span class="type">ItemType</span>: <span class="type">UIView</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fillModel</span><span class="params">(view: ItemType)</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ListItemDefaultProtocol</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> identifa: <span class="type">String</span> &#123; <span class="keyword">return</span>  <span class="type">NSStringFromClass</span>(<span class="type">ItemType</span>.<span class="keyword">self</span>)&#125;</div><div class="line">    <span class="keyword">var</span> registClass: <span class="type">AnyClass</span> &#123; <span class="keyword">return</span> <span class="type">ItemType</span>.<span class="keyword">self</span> &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fillModel</span><span class="params">(item: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> reusableView = item <span class="keyword">as</span>? <span class="type">ItemType</span> &#123;</div><div class="line">            fillModel(view: reusableView)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，就可以愉快的玩耍了～～</p>
<p>最后Cell中的的代码效果就是<a href="https://github.com/madordie/collectionview-simplify-business/blob/master/CollectionView-simplify-business/LabelCell.swift" target="_blank" rel="external">这个样子</a>。<br>再加上<a href="https://github.com/madordie/collectionview-simplify-business/blob/master/CollectionView-simplify-business/ViewController.swift" target="_blank" rel="external">数据填充</a>是不是很简单了呢～～</p>
<h3 id="以后如何开发"><a href="#以后如何开发" class="headerlink" title="以后如何开发"></a>以后如何开发</h3><p>真的如同前面的例子一样，只需要这么几步绕不过去的：</p>
<ol>
<li>处理接口吐出来的数据。</li>
<li>创建新的UI样式，并做好接口数据中间件。</li>
<li>点击事件在处理数据的时候预先埋好，所有的数据、逻辑和UI数据一起被传递，不需要多次类型判断。</li>
</ol>
<p>统一使用<code>CollectionView</code>还有一个好处：不管前面谁写的一个UI，都能拉过来用。不用做中间层去从<code>TableViewCell</code>转<code>CollectionViewCell</code>。</p>
<p>开发只需要关心业务，业务。安安心心做一个写业务的程序员吧～</p>
<h3 id="关于Cell的跳转处理"><a href="#关于Cell的跳转处理" class="headerlink" title="关于Cell的跳转处理"></a>关于Cell的跳转处理</h3><p>乍一看，完美了。不过还有一个巨烦的跳转处理。。。不过，<strong>莫怕</strong></p>
<p>跳转，有这么几种：</p>
<ul>
<li>支持路由的URL跳转，这个是最简单的，也是最爽的</li>
<li>只能复杂的进行创建类、赋值、push啊神马的</li>
</ul>
<p>由于我们将数据全部处理好后扔给了<code>cellmodel</code>，而跳转、打点所需要的参数均在此处为最全的，我们可以将回调作为数据一起传递。。</p>
<p>嗯, 事件需要传递的对象大约这个样子：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Jmp</span> </span>&#123;</div><div class="line">    <span class="comment">/// 支持URL跳转的URL</span></div><div class="line">    <span class="keyword">let</span> url: <span class="type">String</span>?</div><div class="line">    <span class="comment">/// 打点事件名</span></div><div class="line">    <span class="keyword">let</span> event: <span class="type">String</span>?</div><div class="line">    <span class="comment">/// 打点参数</span></div><div class="line">    <span class="keyword">let</span> attr: [<span class="type">AnyHashable</span>: <span class="type">Any</span>]?</div><div class="line">    <span class="comment">/// 不支持URL的直接回调</span></div><div class="line">    <span class="keyword">let</span> eventCallback: (() -&gt; <span class="type">Void</span>)?</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后cell对应的另一个类是这样的：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">KTJJmp</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> info: <span class="type">Jmp</span>?</div><div class="line">    <span class="keyword">let</span> action = #selector(topVCJmp)</div><div class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">topVCJmp</span><span class="params">()</span></span> &#123;</div><div class="line">        ... <span class="comment">// 打点</span></div><div class="line">        <span class="type">KTJURLJump</span>.jumpToViewOnTopVC(jmp: info)</div><div class="line">        info?.eventCallback?()</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tap</span><span class="params">()</span></span> -&gt; <span class="type">UITapGestureRecognizer</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(topVCJmp))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>两个类共同作用就是：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JmpCell</span>: <span class="title">UICollectionViewCell</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> jmp = <span class="type">JmpCellModel</span>()</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</div><div class="line">        ...</div><div class="line">        jmpBtn.addTarget(jmp, action: jmp.action, <span class="keyword">for</span>: .touchUpInside)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JmpCellModel</span>: <span class="title">ListItemDefaultProtocol</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> jmp: <span class="type">Jmp</span>?</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fillModel</span><span class="params">(view: JmpCell)</span></span> &#123;</div><div class="line">        view.jmp.info = jmp</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至于这个<code>JmpCellModel.jmp</code>怎么生成，这里就不说了。</p>
<h3 id="关于算高那点事"><a href="#关于算高那点事" class="headerlink" title="关于算高那点事"></a>关于算高那点事</h3><h4 id="算高位置的选择"><a href="#算高位置的选择" class="headerlink" title="算高位置的选择"></a>算高位置的选择</h4><p>我也曾纠结过frame的代码应该写在哪里。。有写在初始化的，有单独写一个方法的，还有写在<code>func sizeThatFits(:) -&gt; CGSize</code></p>
<p>由于当年对<a href="https://github.com/forkingdog/UITableView-FDTemplateLayoutCell" target="_blank" rel="external">UITableView-FDTemplateLayoutCell</a>中毒较深，所以沿用了最后一种方案。</p>
<h4 id="算高使用的view的选择"><a href="#算高使用的view的选择" class="headerlink" title="算高使用的view的选择"></a>算高使用的view的选择</h4><p>在算高的时候，首先需要明确的是：<strong>高度是数据和当前最大宽度共同决定的</strong>，所以在算高的时候需要拿着数据、view然后才能去算高（PS：至于那些拿着数据硬算出一个高度的代码，此处不发表看法😂，早晚会后悔的）</p>
<p>然后就是<code>UITableView</code>、<code>UICollectionView</code>的算高是通过一个单独的代理去获取的，并不提供view去计算。。这就是矛盾的地方。</p>
<p>虽然<code>UITableView</code>、<code>UICollectionView</code>在算高的地方不提供View,但是有一个<code>dequeueReusableCell....</code>的方法可以获取到缓存池中的<code>Cell</code>呀</p>
<p>如果你这样做了，那么你将会付出惨重的代码。这个方案我在<a href="http://www.cnblogs.com/madordie" target="_blank" rel="external">博客园</a>2015.03.17的<a href="http://www.cnblogs.com/madordie/p/4344209.html" target="_blank" rel="external">“iOS 优化性能之TableView”</a>中已经说了：</p>
<blockquote>
<p>dequeueReusableCellWithIdentifier:此函数的调用要注意以下几点：<br>    i.此函数的返回值是做为tableView:cellForRowAtIndexPath:的返回值的。这样保证拿出来的完整还给TableView。<br>    ii.如果此函数的返回值不是为了给tableView:cellForRowAtIndexPath:做返回值，那么你要注意这是在一个拿取别人稀缺资源的操作，需要注意珍惜这个返回值，能不浪费就不要浪费。<br>    iii.对于AL自动适应的TableView取Cell时候要注意保存。个人建议封装TableView，然后用来计算高度的Cell保存在TableView中。对于多种类型的Cell，则可以使用复用标识符作为Key的字典来存储。这样能够有效节约dequeueReusableCellWithIdentifier:调用次数。</p>
</blockquote>
<p><code>UICollectionView</code>也是如此。所以使用<code>dequeueReusableCell....</code>方法是<strong>很不靠谱的</strong>。</p>
<p>在<a href="https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/912b3ce4a61198c0b79a3d85b977f8fdacd153ea/Classes/UITableView%2BFDTemplateLayoutCell.m#L134-#L155" target="_blank" rel="external">UITableView-FDTemplateLayoutCell</a>中使用了字典保存缓存算高的View，也是比较赞的。</p>
<p>但是现在有了<code>CollectionView</code>，我们可以不用OC的<code>objc_setAssociatedObject(,,,)</code>去处理而直接使用了<code>NSCache</code>去处理就行了～</p>
<p>如果看了<a href="https://github.com/madordie/collectionview-simplify-business/blob/master/CollectionView.swift" target="_blank" rel="external"><code>CollectionView</code></a>就会发现，<code>ListItemProtocol</code>还有一个get方法<code>var newItem: AnyObject { get }</code>这个是用来算高的。</p>
<p>在<a href="https://github.com/madordie/collectionview-simplify-business/blob/master/CollectionView.swift" target="_blank" rel="external">CollectionView.swift</a>关于高度的代理设置中可以看到相关获取和设置。</p>
<h4 id="算高的时候变局的控制"><a href="#算高的时候变局的控制" class="headerlink" title="算高的时候变局的控制"></a>算高的时候变局的控制</h4><p>高度的计算现在已经可以正常计算，但是对于<code>columnCount &gt; 1</code>的时候，牵扯到间隙的计算需要注意一次啊。毕竟<code>CHTCollectionViewWaterfallLayout</code>功能更强大。</p>
<p>相关代码在<a href="https://github.com/madordie/collectionview-simplify-business/blob/master/CollectionView.swift" target="_blank" rel="external">CollectionView.swift</a>的<code>func collectionView(:,layout:,sizeForItemAt:) -&gt; CGSize</code>函数中。</p>
<h3 id="关于代理那点事"><a href="#关于代理那点事" class="headerlink" title="关于代理那点事"></a>关于代理那点事</h3><p>丫的，需求总是比想的多，但是办法也比问题多。</p>
<p>对于<code>CollectionView</code>来说，代理都设置成了self，这样会导致有时候需要<code>UIScrollViewDelegate</code>干些事情的时候总是不那么自由。。。实乃新痛点，不过有办法。</p>
<p>下面是几种方案：</p>
<h4 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h4><p>直接KVO到<code>self.contentOffset</code>，这样一了百了。写什么代理，要什么自行车！（PS：swift提供闭包的代理，也是很好用的）</p>
<p>如果不会，请自行<a href="https://www.google.com" target="_blank" rel="external">Google</a>。<a href="https://objccn.io/issue-7-3/" target="_blank" rel="external">ObjC-中国：KVC 和 KVO</a>，我只能帮你到这里</p>
<h4 id="Rx系"><a href="#Rx系" class="headerlink" title="Rx系"></a>Rx系</h4><p>很抱歉，你不能用<code>self.rx.contentOffset</code>。原因是<a href="https://github.com/chiahsien/CHTCollectionViewWaterfallLayout" target="_blank" rel="external"><code>CHTCollectionViewWaterfallLayout</code></a>中有这么一行断言：</p>
<blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">NSAssert</span>([<span class="keyword">self</span>.delegate conformsToProtocol:@<span class="class"><span class="keyword">protocol</span>(<span class="title">CHTCollectionViewDelegateWaterfallLayout</span>)], @"<span class="title">UICollectionView</span>'<span class="title">s</span> <span class="title">delegate</span> <span class="title">should</span> <span class="title">conform</span> <span class="title">to</span> <span class="title">CHTCollectionViewDelegateWaterfallLayout</span> <span class="title">protocol</span>");</span></div></pre></td></tr></table></figure>
</blockquote>
<p><strong>但是</strong>，你可以使用Rx里面的KVO呀～也是贼方便</p>
<h4 id="RAC系"><a href="#RAC系" class="headerlink" title="RAC系"></a>RAC系</h4><p>抱歉，我不会。原因在此<a href="../reactivecocoa-ready-to-use">准备食用RAC(ReactiveCocoa)的顾虑</a></p>
<h4 id="代理传递"><a href="#代理传递" class="headerlink" title="代理传递"></a>代理传递</h4><p>当然也可以使用代理进行传递出去。大致这个样子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CollectionViewDelegate</span>: <span class="title">NSObjectProtocol</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionView</span> </span>&#123;</div><div class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> allDelegate: <span class="type">CollectionViewDelegate</span>?</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">    <span class="keyword">self</span>.allDelegate?.collectionView(<span class="keyword">self</span>, didSelectItemAt: indexPath)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这方案没啥聊的。。</p>
<h3 id="OC咋办？"><a href="#OC咋办？" class="headerlink" title="OC咋办？"></a>OC咋办？</h3><p>这个OC也能用，只不过需要一些手段，比如说：继承、扩展、等</p>
<p><code>ListItemProtocol</code>就是为了给OC使用留的，还有就是<code>CollectionViewSection</code>使用了类，而不是结构体。</p>
<p>不过具体没有例子，不想写OC代码，太麻烦了。。主要是这种思路:)</p>
<h3 id="填充Cell的数据为什么会在CellModel中？"><a href="#填充Cell的数据为什么会在CellModel中？" class="headerlink" title="填充Cell的数据为什么会在CellModel中？"></a>填充Cell的数据为什么会在CellModel中？</h3><p>对于Cell来说，Cell是干净的，没有任何继承、协议来限制Cell如何处理。那么Cell就可以接受来自任何模块的各种风格的Cell，这是我想要的减少侵入。</p>
<p>cellModel中定义了Cell所对应的填充数据格式，在第一次写的时候难免会按照业务逻辑起一些业务逻辑的名字，在复用的时候又不能改名字，会对维护和开发加了一定量的复杂度，这不是我想要的。。</p>
<p>于是乎每个CellModel根据自己的需要绑定需要绑定的Cell，去填充Cell所对应的数据就好。只需要侵入cellModel即可。代价最小，受益最大。</p>
<p>PS.对于同一个List，需要注意cell的复用和多个cellModel同时绑定一个cell时，属性的设置。</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><a href="https://github.com/madordie/collectionview-simplify-business" target="_blank" rel="external">Demo</a>部分没有写跳转相关内容，但是别的都有了😂</p>
<h3 id="别的"><a href="#别的" class="headerlink" title="别的"></a>别的</h3><p>好像没了吧～，想起来了再补充咯</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;UITableView&lt;/code&gt;作为高级控件被开发者广泛使用，同样的，&lt;code&gt;UICollectionView&lt;/code&gt;由于其NB的布局也被广泛使用。但是后者在使用的时候大多数都属于自定义的比较多，前者则相对普通，list基本上都用。&lt;/p&gt;
&lt;p&gt;在业务需求中，常规布局，大多数都是采用&lt;code&gt;UITableView&lt;/code&gt;进行的，但是有痛点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当使在APP内用过一次瀑布流之后，设计师会突然的让你在正常的list中底部追加瀑布流。。虽然是在底部追加，但是要从&lt;code&gt;UITableView&lt;/code&gt;迁移到&lt;code&gt;UICollectionView&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UITableViewDelegate&lt;/code&gt;、&lt;code&gt;UITableViewDataSource&lt;/code&gt; 恐怕每处使用都要写繁琐的相同的代码吧～&lt;/li&gt;
&lt;li&gt;很多人也会对其进行高度缓存啊神马的优化策略&lt;/li&gt;
&lt;li&gt;不知不觉这些代码堆在一起已经将&lt;code&gt;UIViewController&lt;/code&gt;堆的相当的高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后呢，我们现在使用一个&lt;code&gt;CollectionView&lt;/code&gt;将这些操作包装一下，达到这样一个流程:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;自定义Cell、CellModel&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LabelCell&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UICollectionViewCell&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; info = &lt;span class=&quot;type&quot;&gt;UILabel&lt;/span&gt;()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sizeThatFits&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; size: CGSize)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;CGSize&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CGSize&lt;/span&gt;(width: size.width, height: info.frame.maxY + info.frame.minY)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LabelCell&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Model&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;ListItemDefaultProtocol&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; info: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fillModel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(view: LabelCell)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            view.info.text = info&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请求、处理数据格式化为&lt;code&gt;LabelCell.Model&lt;/code&gt;这样的类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理好的数据交给&lt;code&gt;CollectionView&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;list.sections = model.format(...)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;休息一会，完工了～&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后，来看看&lt;code&gt;Collection&lt;/code&gt;里面都做了什么操作&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="tool" scheme="https://madordie.github.io/tags/tool/"/>
    
      <category term="UICollectionView" scheme="https://madordie.github.io/tags/UICollectionView/"/>
    
  </entry>
  
  <entry>
    <title>mac10.13 pods 命令错误</title>
    <link href="https://madordie.github.io/post/macos-high-sierra-cocoapods/"/>
    <id>https://madordie.github.io/post/macos-high-sierra-cocoapods/</id>
    <published>2017-09-29T06:03:58.000Z</published>
    <updated>2017-10-10T06:08:43.664Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>每逢升级大版本总要过搞点事情。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pod env</div><div class="line">-bash: /usr/<span class="built_in">local</span>/bin/pod: /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby: bad interpreter: No such file or directory</div></pre></td></tr></table></figure>
<p>不论是<code>pod env</code>、<code>pod update</code> 等等均报上面的错误。</p>
<p>如果Google发现：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/44396215/cocoapods-not-working-in-macos-high-sierra" target="_blank" rel="external">ruby - CocoaPods not working in macOS High Sierra - Stack Overflow</a></li>
<li><a href="https://github.com/CocoaPods/CocoaPods/issues/6778" target="_blank" rel="external">CocoaPods CLI fails in High Sierra due to change of Ruby version #6778</a></li>
<li><a href="https://github.com/CocoaPods/CocoaPods/issues/6898#issuecomment-332060096" target="_blank" rel="external">High Sierra: bad interpreter #6898</a></li>
</ul>
<p>事情的缘由就是这样。</p>
<p><a href="https://github.com/CocoaPods/CocoaPods/issues/6898#issuecomment-332060096" target="_blank" rel="external">#6898</a>中道出了简单直接的解决方案：</p>
<blockquote>
<p>for all others:</p>
<p><code>gem install -n /usr/local/bin cocoapods</code></p>
<p>fixes it</p>
</blockquote>
<p><strong>综合起来</strong>解决这个问题是这样的：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ gem update --system</div><div class="line">$ gem uninstall cocoapods</div><div class="line">$ <span class="built_in">echo</span> <span class="string">'gem: --bindir /usr/local/bin'</span> &gt;&gt; ~/.gemrc</div><div class="line">$ sudo gem install cocoapods</div></pre></td></tr></table></figure>
<p>愉快的使用cocoapods吧～</p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;每逢升级大版本总要过搞点事情。&lt;/p&gt;
&lt;figure class=&quot;hig
    
    </summary>
    
      <category term="macOS" scheme="https://madordie.github.io/categories/macOS/"/>
    
    
      <category term="cocoapods" scheme="https://madordie.github.io/tags/cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>mac10.13依旧让Xcode支持打开终端</title>
    <link href="https://madordie.github.io/post/mac-high-sierra-open-with-external/"/>
    <id>https://madordie.github.io/post/mac-high-sierra-open-with-external/</id>
    <published>2017-09-28T11:06:47.000Z</published>
    <updated>2017-10-09T04:59:40.197Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在macOS10.13以前是支持Xcode中直接打开终端的，步骤呢就是下面这样子：</p>
<p><img src="/images/mac-high-sierra-open-with-external-1.gif" alt="效果图"></p>
<ol>
<li>右击工程</li>
<li>Open With External Editor</li>
<li>终端弹出来了。。</li>
</ol>
<p>如果没有生效，就是你的电脑上装了什么可以打开<code>xx.xcodeproj</code>的应用程序，也就是在<code>Finder</code>下右击可以看到如下样式：</p>
<p><img src="/images/mac-high-sierra-open-with-external-2.jpg" alt="效果图"></p>
<p>呐～ Xcode为默认，备忘录为默认下面的第一个～～</p>
<p>对，如果这样的话，那么按照上面3步，得到的结果是：这个文件被莫名其妙的保存在了备忘录～～  </p>
<p>这不是我们要的🤷‍♂️，下面我们通过修改<code>备忘录.app</code>的配置文件来达到我们的效果。</p>
<a id="more"></a>
<h3 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h3><p>macSO10.13加强了备忘录，嗯的确变强了，可是并没有Xcode和终端常用。</p>
<p>备忘录增加了导入的功能，支持了一些文件的打开(只是导入而已。。)，但是并不适合我。于是改一下吧～～</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol>
<li>在<code>应用程序</code>中找到<code>备忘录</code></li>
<li>显示包内容</li>
<li>找到 我们要修改的plist文件： <code>Contents/Info.plist</code></li>
<li>做一下备份：复制一下。。</li>
<li>确保 <4> 已完成</4></li>
<li>直接修改<code>Info.plist</code>会提示没有权限，使用<code>sudo vim Info.plist</code>修改</li>
<li><p>不管你用什么方法，删除下面的这些代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleTypeName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>General files and folders<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleTypeRole<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>Viewer<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>LSItemContentTypes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>public.data<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>public.directory<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>:wq</code></p>
</li>
<li>重启一下 （目的：重建索引）</li>
</ol>
<h3 id="至于我做了什么"><a href="#至于我做了什么" class="headerlink" title="至于我做了什么"></a>至于我做了什么</h3><p>讲道理，用Xcode的都知道吧？这个是注册的app支持的文件类型。 删除之后就可以了，就这么多😂</p>
<h3 id="注意一下"><a href="#注意一下" class="headerlink" title="注意一下"></a>注意一下</h3><p><code>操作</code>中的<code>步骤9</code>可以有脚本，但是还是老实重启一下吧，有的脚本会使部分图标失效，巨烦。。还是重启一下比较靠谱。毕竟不着急</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在macOS10.13以前是支持Xcode中直接打开终端的，步骤呢就是下面这样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/mac-high-sierra-open-with-external-1.gif&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右击工程&lt;/li&gt;
&lt;li&gt;Open With External Editor&lt;/li&gt;
&lt;li&gt;终端弹出来了。。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果没有生效，就是你的电脑上装了什么可以打开&lt;code&gt;xx.xcodeproj&lt;/code&gt;的应用程序，也就是在&lt;code&gt;Finder&lt;/code&gt;下右击可以看到如下样式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/mac-high-sierra-open-with-external-2.jpg&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
&lt;p&gt;呐～ Xcode为默认，备忘录为默认下面的第一个～～&lt;/p&gt;
&lt;p&gt;对，如果这样的话，那么按照上面3步，得到的结果是：这个文件被莫名其妙的保存在了备忘录～～  &lt;/p&gt;
&lt;p&gt;这不是我们要的🤷‍♂️，下面我们通过修改&lt;code&gt;备忘录.app&lt;/code&gt;的配置文件来达到我们的效果。&lt;/p&gt;
    
    </summary>
    
      <category term="macOS" scheme="https://madordie.github.io/categories/macOS/"/>
    
    
      <category term="Xcode" scheme="https://madordie.github.io/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Xcode9编译失败</title>
    <link href="https://madordie.github.io/post/debug-xcode9-build-ipa/"/>
    <id>https://madordie.github.io/post/debug-xcode9-build-ipa/</id>
    <published>2017-09-26T06:16:32.000Z</published>
    <updated>2017-10-11T03:37:39.832Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="错误输出"><a href="#错误输出" class="headerlink" title="错误输出"></a>错误输出</h2><blockquote>
<p>error: exportArchive: “Fangduoduo_ent.app” requires a provisioning profile with the Push Notifications and Associated Domains features.</p>
<p>Error Domain=IDEProvisioningErrorDomain Code=9 “”Fangduoduo_ent.app” requires a provisioning profile with the Push Notifications and Associated Domains features.” UserInfo={NSLocalizedDescription=”Fangduoduo_ent.app” requires a provisioning profile with the Push Notifications and Associated Domains features., NSLocalizedRecoverySuggestion=Add a profile to the “provisioningProfiles” dictionary in your Export Options property list.}</p>
</blockquote>
<a id="more"></a>
<h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>在升级Xcode9正式版之后，Jenkins也就升级了，于是乎用原来的套路打包之后就是上面的错误 5555…</p>
<p>如果使用<code>xcodebuild</code>进行处理，那么这个会发生在选择证书的步骤，错误大致就是这样。</p>
<p><code>$xcodebuild --help</code> 可以看到一些信息，而且在最后还特意提出了一个“-exportOptionsPlist”参数。具体内容见<code>xcodebuild --help</code></p>
<h2 id="解决问题才是关键"><a href="#解决问题才是关键" class="headerlink" title="解决问题才是关键"></a>解决问题才是关键</h2><ol>
<li><p>使用xcode9进行一次<code>archive</code></p>
</li>
<li><p>选择相关证书啊神马的，保持<code>thinning</code>不变就好</p>
</li>
<li><p>导出</p>
</li>
<li><p>导出目录有一个<code>ExportOptionsPlist.plist</code>，这个就是打包时候需要的plist</p>
</li>
</ol>
<h2 id="脚本构建"><a href="#脚本构建" class="headerlink" title="脚本构建"></a>脚本构建</h2><p><code>ipa</code>即为目标变量，具体的参看<a href="../build-ipa-sh">打包脚本</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">rm -rf ./build/*</div><div class="line">cat &lt;&lt; EOF &gt; ./build/<span class="built_in">export</span>OptionsPlist.plist</div><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;!DOCTYPE plist PUBLIC <span class="string">"-//Apple//DTD PLIST 1.0//EN"</span> <span class="string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span>&gt;</div><div class="line">&lt;plist version=<span class="string">"1.0"</span>&gt;</div><div class="line">&lt;dict&gt;</div><div class="line">    &lt;key&gt;compileBitcode&lt;/key&gt;</div><div class="line">    &lt;<span class="literal">true</span>/&gt;</div><div class="line">    &lt;key&gt;method&lt;/key&gt;</div><div class="line">    &lt;string&gt;enterprise&lt;/string&gt;</div><div class="line">    &lt;key&gt;provisioningProfiles&lt;/key&gt;</div><div class="line">    &lt;dict&gt;</div><div class="line">        &lt;key&gt;ershoufanglzg.fangdd.com&lt;/key&gt;</div><div class="line">        &lt;string&gt;ershoufanglzg_dis&lt;/string&gt;</div><div class="line">    &lt;/dict&gt;</div><div class="line">    &lt;key&gt;signingCertificate&lt;/key&gt;</div><div class="line">    &lt;string&gt;iPhone Distribution&lt;/string&gt;</div><div class="line">    &lt;key&gt;signingStyle&lt;/key&gt;</div><div class="line">    &lt;string&gt;manual&lt;/string&gt;</div><div class="line">    &lt;key&gt;stripSwiftSymbols&lt;/key&gt;</div><div class="line">    &lt;<span class="literal">true</span>/&gt;</div><div class="line">    &lt;key&gt;teamID&lt;/key&gt;</div><div class="line">    &lt;string&gt;J3B467DURT&lt;/string&gt;</div><div class="line">    &lt;key&gt;thinning&lt;/key&gt;</div><div class="line">    &lt;string&gt;&amp;lt;none&amp;gt;&lt;/string&gt;</div><div class="line">&lt;/dict&gt;</div><div class="line">&lt;/plist&gt;</div><div class="line">EOF</div><div class="line"></div><div class="line">xcodebuild -archivePath <span class="string">"./build/xxx.xcarchive"</span> -workspace Fangduoduo.xcworkspace -sdk iphoneos -scheme <span class="string">"Fangduoduo_ent"</span> -configuration <span class="string">"Release Inhouse"</span> archive</div><div class="line">xcodebuild -exportArchive -archivePath <span class="string">"./build/xxx.xcarchive"</span> -exportPath <span class="string">"./build/"</span> -exportOptionsPlist ./build/<span class="built_in">export</span>OptionsPlist.plist</div><div class="line"></div><div class="line">ipa=$(<span class="built_in">pwd</span>)/$(ls ./build/*.ipa)</div></pre></td></tr></table></figure>
<h2 id="xcodebuild-–help"><a href="#xcodebuild-–help" class="headerlink" title="xcodebuild –help"></a>xcodebuild –help</h2><blockquote>
<p>Available keys for -exportOptionsPlist:</p>
<p>compileBitcode : Bool</p>
<p>For non-App Store exports, should Xcode re-compile the app from bitcode? Defaults to YES.</p>
<p>embedOnDemandResourcesAssetPacksInBundle : Bool</p>
<p>For non-App Store exports, if the app uses On Demand Resources and this is YES, asset packs are embedded in the app bundle so that the app can be tested without a server to host asset packs. Defaults to YES unless onDemandResourcesAssetPacksBaseURL is specified.</p>
<p>iCloudContainerEnvironment : String</p>
<p>If the app is using CloudKit, this configures the “com.apple.developer.icloud-container-environment” entitlement. Available options vary depending on the type of provisioning profile used, but may include: Development and Production.</p>
<p>installerSigningCertificate : String</p>
<p>For manual signing only. Provide a certificate name, SHA-1 hash, or automatic selector to use for signing. Automatic selectors allow Xcode to pick the newest installed certificate of a particular type. The available automatic selectors are “Mac Installer Distribution” and “Developer ID Installer”. Defaults to an automatic certificate selector matching the current distribution method.</p>
<p>manifest : Dictionary</p>
<p>For non-App Store exports, users can download your app over the web by opening your distribution manifest file in a web browser. To generate a distribution manifest, the value of this key should be a dictionary with three sub-keys: appURL, displayImageURL, fullSizeImageURL. The additional sub-key assetPackManifestURL is required when using on-demand resources.</p>
<p>method : String</p>
<p>Describes how Xcode should export the archive. Available options: app-store, package, ad-hoc, enterprise, development, developer-id, and mac-application. The list of options varies based on the type of archive. Defaults to development.</p>
<p>onDemandResourcesAssetPacksBaseURL : String</p>
<p>For non-App Store exports, if the app uses On Demand Resources and embedOnDemandResourcesAssetPacksInBundle isn’t YES, this should be a base URL specifying where asset packs are going to be hosted. This configures the app to download asset packs from the specified URL.</p>
<p>provisioningProfiles : Dictionary</p>
<p>For manual signing only. Specify the provisioning profile to use for each executable in your app. Keys in this dictionary are the bundle identifiers of executables; values are the provisioning profile name or UUID to use.</p>
<p>signingCertificate : String</p>
<p>For manual signing only. Provide a certificate name, SHA-1 hash, or automatic selector to use for signing. Automatic selectors allow Xcode to pick the newest installed certificate of a particular type. The available automatic selectors are “Mac App Distribution”, “iOS Developer”, “iOS Distribution”, “Developer ID Application”, and “Mac Developer”. Defaults to an automatic certificate selector matching the current distribution method.</p>
<p>signingStyle : String</p>
<p>The signing style to use when re-signing the app for distribution. Options are manual or automatic. Apps that were automatically signed when archived can be signed manually or automatically during distribution, and default to automatic. Apps that were manually signed when archived must be manually signed during distribtion, so the value of signingStyle is ignored.</p>
<p>stripSwiftSymbols : Bool</p>
<p>Should symbols be stripped from Swift libraries in your IPA? Defaults to YES.</p>
<p>teamID : String</p>
<p>The Developer Portal team to use for this export. Defaults to the team used to build the archive.</p>
<p>thinning : String</p>
<p>For non-App Store exports, should Xcode thin the package for one or more device variants? Available options: <none> (Xcode produces a non-thinned universal app), <thin-for-all-variants> (Xcode produces a universal app and all available thinned variants), or a model identifier for a specific device (e.g. “iPhone7,1”). Defaults to <none>.</none></thin-for-all-variants></none></p>
<p>uploadBitcode : Bool</p>
<p>For App Store exports, should the package include bitcode? Defaults to YES.</p>
<p>uploadSymbols : Bool</p>
<p>For App Store exports, should the package include symbols? Defaults to YES.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;错误输出&quot;&gt;&lt;a href=&quot;#错误输出&quot; class=&quot;headerlink&quot; title=&quot;错误输出&quot;&gt;&lt;/a&gt;错误输出&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;error: exportArchive: “Fangduoduo_ent.app” requires a provisioning profile with the Push Notifications and Associated Domains features.&lt;/p&gt;
&lt;p&gt;Error Domain=IDEProvisioningErrorDomain Code=9 “”Fangduoduo_ent.app” requires a provisioning profile with the Push Notifications and Associated Domains features.” UserInfo={NSLocalizedDescription=”Fangduoduo_ent.app” requires a provisioning profile with the Push Notifications and Associated Domains features., NSLocalizedRecoverySuggestion=Add a profile to the “provisioningProfiles” dictionary in your Export Options property list.}&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="构建" scheme="https://madordie.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
      <category term="DEBUG" scheme="https://madordie.github.io/tags/DEBUG/"/>
    
  </entry>
  
  <entry>
    <title>iOS自动化-Jenkins编译工程</title>
    <link href="https://madordie.github.io/post/ios-automation-jenkins-build/"/>
    <id>https://madordie.github.io/post/ios-automation-jenkins-build/</id>
    <published>2017-09-14T09:27:15.000Z</published>
    <updated>2017-10-10T06:05:41.268Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul>
<li><a href="../ios-automation-jenkins-configuration">iOS自动化-Jenkins环境搭建</a></li>
<li><a href="../ios-automation-jenkins-build">iOS自动化-Jenkins编译工程</a></li>
</ul>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Jenkins环境已搭建好，现在我们来开始愉快的为iOS打包吧～</p>
<p>从这个文章中你将要实现以下功能：</p>
<ul>
<li>在Jenkins创建工程</li>
<li>build出ipa</li>
<li>将ipa上传至fir</li>
<li>钉钉机器人群通知</li>
<li>将dsym上传至bugly</li>
</ul>
<a id="more"></a>
<h2 id="脚本环境安装"><a href="#脚本环境安装" class="headerlink" title="脚本环境安装"></a>脚本环境安装</h2><p>这里大多数操作都是用脚本来进行的，不为别的，就为自由和以后～</p>
<h3 id="fastlane"><a href="#fastlane" class="headerlink" title="fastlane"></a>fastlane</h3><p>此乃自动化神器。<a href="https://docs.fastlane.tools" target="_blank" rel="external">文档在此</a>。<a href="https://github.com/fastlane/fastlane" target="_blank" rel="external">开源哟～</a></p>
<p>此处主要用来编译、打包。</p>
<p>安装方法：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew cask install fastlane</div></pre></td></tr></table></figure>
<p>此神器除了上述功能，还提供很多很多很多很多功能，包括自定义神马的都支持。需要的可以去文档里面翻翻。</p>
<p>在Xcode9 我使用的版本2.14.1打包出问题了。。具体在这里详见<a href="../debug-xcode9-build-ipa">Xcode9编译失败</a>。于是呼采用了<code>xcodebuild</code>进行打包</p>
<h3 id="fir-im-cli"><a href="#fir-im-cli" class="headerlink" title="fir.im-cli"></a>fir.im-cli</h3><p><a href="https://fir.im" target="_blank" rel="external">fir.im</a>提供的应用内测托管工具。<a href="https://github.com/FIRHQ/fir-cli/blob/master/README.md" target="_blank" rel="external">开源官网</a>。</p>
<p>安装方法：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gem install fir-cli</div></pre></td></tr></table></figure>
<p>此工具也提供打包ipa、apk、上传符号表至BugHD、等功能。但是我们在这里选择了<code>fastlane gym</code></p>
<p>上传加速：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh -c <span class="string">"<span class="variable">$(curl -sSL https://gist.githubusercontent.com/trawor/5dda140dee86836b8e60/raw/turbo-qiniu.sh)</span>"</span></div></pre></td></tr></table></figure>
<p>上传加速代码已经<a href="http://blog.fir.im/turbo-qiniu/" target="_blank" rel="external">开源至此</a>。</p>
<p><a href="http://bughd.com" target="_blank" rel="external">BugHD</a>: 已停止线上免费服务，开始卖私有部署了。</p>
<p>另外，fir 也有<a href="http://blog.fir.im/jenkins/" target="_blank" rel="external">Jenkins插件</a>，但是这里选择脚本方式。</p>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>所有的插件可以在<code>系统管理 -&gt; 插件管理</code>中进行安装、卸载、降级、更新、等操作。</p>
<p>确保以下插件已经被安装：</p>
<ul>
<li>源代码管理：<a href="https://wiki.jenkins.io/display/JENKINS/Git+Plugin" target="_blank" rel="external">Git Plugin</a></li>
<li>编译脚本环境变量：<a href="http://wiki.hudson-ci.org/display/HUDSON/Tool+Environment+Plugin" target="_blank" rel="external">Tool Environment Plugin</a></li>
</ul>
<p>嗯，开始创建工程，然后配置打包吧！</p>
<h2 id="工程相关配置"><a href="#工程相关配置" class="headerlink" title="工程相关配置"></a>工程相关配置</h2><p>左侧的<code>新建(New Item)</code>我就不说了吧～，点击输入项目名字，然后选择第一个<code>构建一个自由风格的软件项目</code>就行啦～～</p>
<p>此处项目名字暂且成为<code>test</code>。这里只说一些比较重要的，没有活不成的那种配置。别的自己研究一下或者点击右侧❓就能看到介绍。</p>
<h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p>此处点击<code>Git</code>，展开之后输入<code>Repository URL</code>即可。</p>
<p><code>Repository URL</code>输入完毕之后点击别处，Jenkins的Git插件会自动校验该URL是否能够clone下来代码。出现红色就自己根据错误修改一下咯。。</p>
<p>另外此处支持<code>ssh</code> 的方式，大致样式为：<code>ssh://sunjigang@github.com:29418/projects/aaa</code>。</p>
<p><code>Branches to build</code> 写上你的构建分支～，根据自己需求来，<code>master</code>一般为仓库的默认分支。</p>
<h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><p>此处表示该项目的构建触发条件。（可选）</p>
<p>我们这里说一下<code>Poll SCM</code>：</p>
<p>定时检查源码变更。条件是 一定要配置<code>Git</code>这样的源码管理。</p>
<p>例子：</p>
<ul>
<li><code>H/15 * * * *</code>：每15分钟构建一次</li>
<li><code>0 2 * * *</code>： 每天2:00构建一次</li>
</ul>
<h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>此处为构建的核心😂。当然，我们为了自由，此处全部使用<code>shell</code>脚本。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 工程名</span></div><div class="line">workspace=<span class="string">'xxx.xcworkspace'</span></div><div class="line"><span class="comment"># 构建scheme</span></div><div class="line">scheme=<span class="string">'xxx'</span></div><div class="line"><span class="comment"># 打包类型：app-store, ad-hoc, package, enterprise, development, and developer-id.</span></div><div class="line">export_method=<span class="string">'enterprise'</span></div><div class="line"><span class="comment"># fir的token，在fir-&gt;用户-&gt;token 获取</span></div><div class="line">fir_token=<span class="string">'c5077e0368888b9750ae848b9fe00***'</span></div><div class="line"><span class="comment"># fir上传短链接，效果为 https://fir.im/xxx</span></div><div class="line">fir_url=<span class="string">'xxx'</span></div><div class="line"><span class="comment"># 钉钉机器人token</span></div><div class="line">dingtalk_token=<span class="string">'6d09e43ddc62e540be914ff2e901e28b921d55c5ad457f6f3571f9f881287***'</span></div><div class="line"><span class="comment"># 钉钉机器人发送的内容</span></div><div class="line">dingtalk_content=<span class="string">"iOSXXX已经上传至 http://fir.im/<span class="variable">$&#123;fir_url&#125;</span> ,吧啦吧啦吧啦～"</span></div><div class="line"></div><div class="line"><span class="comment"># 构建</span></div><div class="line">fastlane gym</div><div class="line">    --workspace <span class="variable">$workspace</span> \</div><div class="line">    --scheme <span class="variable">$scheme</span> \</div><div class="line">    --export_method <span class="variable">$export_method</span> \</div><div class="line">    clean</div><div class="line"></div><div class="line"><span class="comment"># fir</span></div><div class="line">ipa=$(<span class="built_in">pwd</span>)/$(ls *.ipa)</div><div class="line">git <span class="built_in">log</span> -10 &gt; git.log</div><div class="line">fir p <span class="variable">$ipa</span> -T <span class="variable">$fir_token</span> <span class="_">-s</span> <span class="variable">$fir_url</span> -c git.log</div><div class="line"></div><div class="line"><span class="comment"># 钉钉通知</span></div><div class="line">curl <span class="string">"https://oapi.dingtalk.com/robot/send?access_token=<span class="variable">$&#123;dingtalk_token&#125;</span>"</span> -H <span class="string">'Content-Type: application/json'</span>    <span class="_">-d</span> <span class="string">'</span></div><div class="line">    &#123;"msgtype": "text",</div><div class="line">        "text": &#123;</div><div class="line">            "content":$&#123;dingtalk_content&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;'</div></pre></td></tr></table></figure>
<p>至此 已经完成了打包、上传fir、钉钉机器人通知。</p>
<p>上述脚本只是配置的例子，可以根据自己需求，自己编写和配置。特别是</p>
<ul>
<li><code>.xcworkspace</code>的位置，要找清楚呀</li>
<li><code>scheme</code>无法找到是因为你在提交代码的时候没有将其设置为shared</li>
<li><code>fastlane gym</code> 支持很多参数，是对<code>xcodebuild</code>的封装，<a href="https://github.com/fastlane/fastlane/tree/master/gym" target="_blank" rel="external">源码及文档在此</a></li>
</ul>
<h3 id="上传dSYM至Bugly"><a href="#上传dSYM至Bugly" class="headerlink" title="上传dSYM至Bugly"></a>上传dSYM至Bugly</h3><p>这个还是有点点复杂的，因为bugly并未提供完整的cli工具链，需要手动跑jar包。不过都是可以完成的。</p>
<p>为了隔离开打包和上传，这里在Jenkins上新建一个项目用来上传dSYM</p>
<p>其中需要衔接的地方就是上面的输出要作为这个的输出。所以需要前后对应位置。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 路径主要用来提取Info.plist以及dsym文件</span></div><div class="line">path=<span class="string">'/Users/FDD/.jenkins/workspace/fdd-ios-app/fdd-app-ios/Fangduoduo'</span></div><div class="line"><span class="comment"># scheme name</span></div><div class="line">scheme=<span class="string">'Fangduoduo_ent'</span></div><div class="line"><span class="comment"># ipa bundleId</span></div><div class="line">package=<span class="string">'xx.xx.com'</span></div><div class="line"><span class="comment"># bugly id</span></div><div class="line">bugly_id=<span class="string">'9xxx'</span></div><div class="line"><span class="comment"># bugly key</span></div><div class="line">bugly_key=<span class="string">'wHzxcxxx'</span></div><div class="line"></div><div class="line">rm -rf *dSYM*</div><div class="line">cp <span class="variable">$&#123;path&#125;</span>/Fangduoduo/Fangduoduo_ent-Info.plist ./Info.plist</div><div class="line">cp -rf <span class="variable">$&#123;path&#125;</span>/build/*.xcarchive/dSYMs .</div><div class="line"></div><div class="line"><span class="comment"># ------------ post dsym ------------ #</span></div><div class="line"></div><div class="line">app_infoplist_path=<span class="string">'Info.plist'</span></div><div class="line">version=$(/usr/libexec/PlistBuddy -c <span class="string">"print CFBundleVersion"</span> <span class="variable">$&#123;app_infoplist_path&#125;</span>)</div><div class="line"></div><div class="line">java -jar ./bugly/buglySymboliOS.jar \</div><div class="line">	-i dSYMs/<span class="variable">$&#123;scheme&#125;</span>.app.dSYM \</div><div class="line">    -dsym \</div><div class="line">    -u \</div><div class="line">    -id <span class="variable">$&#123;bugly_id&#125;</span> \</div><div class="line">    -key <span class="variable">$&#123;bugly_key&#125;</span> \</div><div class="line">    -package <span class="variable">$&#123;package&#125;</span> \</div><div class="line">    -version <span class="variable">$&#123;version&#125;</span></div><div class="line">        </div><div class="line"><span class="comment"># @bugly jar执行的时候返回状态码有问题。已反馈，但是不见修改。。</span></div><div class="line">    </div><div class="line"><span class="comment"># ------------ UUID ------------ #</span></div><div class="line"></div><div class="line">unzip -o ./dSYMs/<span class="variable">$&#123;scheme&#125;</span>.app.dSYM.zip</div><div class="line">xcrun dwarfdump --uuid ./<span class="variable">$&#123;scheme&#125;</span> &gt;&gt; ./uuids-<span class="variable">$&#123;version&#125;</span>.txt</div></pre></td></tr></table></figure>
<p>值得说的是，如果上面的报错，那么检查一下是不是路径什么的写错了。。。</p>
<p>如果还有问题，可以在<a href="../../about">关于</a>中找到我。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../ios-automation-jenkins-configuration&quot;&gt;iOS自动化-Jenkins环境搭建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../ios-automation-jenkins-build&quot;&gt;iOS自动化-Jenkins编译工程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Jenkins环境已搭建好，现在我们来开始愉快的为iOS打包吧～&lt;/p&gt;
&lt;p&gt;从这个文章中你将要实现以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Jenkins创建工程&lt;/li&gt;
&lt;li&gt;build出ipa&lt;/li&gt;
&lt;li&gt;将ipa上传至fir&lt;/li&gt;
&lt;li&gt;钉钉机器人群通知&lt;/li&gt;
&lt;li&gt;将dsym上传至bugly&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="构建" scheme="https://madordie.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
      <category term="Jenkins" scheme="https://madordie.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>如何实现AppStore查看更多的方法</title>
    <link href="https://madordie.github.io/post/appstore-truncate/"/>
    <id>https://madordie.github.io/post/appstore-truncate/</id>
    <published>2017-09-14T03:46:18.000Z</published>
    <updated>2017-10-10T05:34:54.501Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="UITextView-More"><a href="#UITextView-More" class="headerlink" title="UITextView-More"></a><a href="https://github.com/madordie/UITextView-More" target="_blank" rel="external">UITextView-More</a></h2><p>使用UITextKit 实现“更多”的折叠效果</p>
<p><img src="https://github.com/madordie/UITextView-More/blob/master/Untitled.gif?raw=true" alt="预览"></p>
<a id="more"></a>
<h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><h3 id="获取最后一行Rect"><a href="#获取最后一行Rect" class="headerlink" title="获取最后一行Rect"></a>获取最后一行Rect</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lastRect = <span class="type">CGRect</span>.zero</div><div class="line">layoutManager.enumerateEnclosingRects(forGlyphRange: <span class="type">NSRange</span>(location: <span class="number">0</span>, length: textStorage.string.characters.<span class="built_in">count</span>), withinSelectedGlyphRange: <span class="type">NSRange</span>(location: <span class="type">NSNotFound</span>, length: <span class="number">0</span>), <span class="keyword">in</span>: textContainer, using: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (rect, isStop) <span class="keyword">in</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> _self = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line"><span class="keyword">var</span> newRect = rect</div><div class="line">newRect.origin.y += _self.textContainerInset.top</div><div class="line">lastRect = newRect</div><div class="line">&#125;)</div><div class="line"><span class="built_in">print</span>(lastRect)</div></pre></td></tr></table></figure>
<h3 id="增加-exclusionPaths"><a href="#增加-exclusionPaths" class="headerlink" title="增加 exclusionPaths"></a>增加 <code>exclusionPaths</code></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">textContainer.exclusionPaths = [<span class="type">UIBezierPath</span>.<span class="keyword">init</span>(rect: rect)]</div></pre></td></tr></table></figure>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul>
<li><code>UITextView</code>默认携带左右边距，通过<code>UITextView.textContainer.lineFragmentPadding</code>获取</li>
<li><code>UITextView</code>默认携带上下左右边距(<code>UITextView.textContainerInset</code>)，其中左右和<code>lineFragmentPadding</code>相加</li>
<li>此处并没有对<a href="https://github.com/madordie/UITextView-More/blob/master/TruncateTextView.swift" target="_blank" rel="external">TruncateTextView</a>进行过多的设置，主要是因为继承在UITextView下，<a href="https://github.com/madordie/UITextView-More/blob/master/Untitled.gif" target="_blank" rel="external">GIF</a>中的这部分设置放在了<a href="https://github.com/madordie/UITextView-More/blob/master/Demo-AppStore-More/ViewController.swift" target="_blank" rel="external">ViewController.swift</a>中</li>
<li>此处使用的是<code>frame</code>，可以在<code>UIView.sizeToFit()</code>之后获取到<code>UIView</code>的<code>Size</code>。约束也大抵如此</li>
</ul>
<hr>
<ul>
<li>感谢<a href="https://github.com/lexiaoyao20" target="_blank" rel="external">乐逍遥</a>提供的例子，才找到了<code>open func truncatedGlyphRange(inLineFragmentForGlyphAt glyphIndex: Int) -&gt; NSRange</code>方法😂</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;UITextView-More&quot;&gt;&lt;a href=&quot;#UITextView-More&quot; class=&quot;headerlink&quot; title=&quot;UITextView-More&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/madordie/UITextView-More&quot;&gt;UITextView-More&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用UITextKit 实现“更多”的折叠效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/madordie/UITextView-More/blob/master/Untitled.gif?raw=true&quot; alt=&quot;预览&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="效果" scheme="https://madordie.github.io/tags/%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>iOS自动化-Jenkins环境搭建</title>
    <link href="https://madordie.github.io/post/ios-automation-jenkins-configuration/"/>
    <id>https://madordie.github.io/post/ios-automation-jenkins-configuration/</id>
    <published>2017-09-10T01:49:32.000Z</published>
    <updated>2017-10-09T04:56:16.540Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul>
<li><a href="../ios-automation-jenkins-configuration">iOS自动化-Jenkins环境搭建</a></li>
<li><a href="../ios-automation-jenkins-build">iOS自动化-Jenkins编译工程</a></li>
</ul>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p> <strong>Jenkins</strong><br><em>Build great things at any scale</em><br>The leading open source automation server, Jenkins provides hundreds of plugins to support building, deploying and automating any project.</p>
</blockquote>
<p>如<a href="https://jenkins.io" target="_blank" rel="external">官网</a>所说<code>Build great things at any scale</code></p>
<p>从这篇文章中你将会实现：</p>
<ul>
<li>在Mac上多种方案安装并启动jenkins</li>
<li>在局域网中正常访问jenkins</li>
</ul>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>当然你首先需要一个macOS的系统，为后来的构建做基础。</p>
<p>Jenkins中可以使用<code>pkg</code>、<code>war</code>的方式运行，当然还有在<a href="https://jenkins.io/doc/book/getting-started/installing/" target="_blank" rel="external">Installing Jenkins</a>中提供一些安装方式：</p>
<blockquote>
<p> <strong>macOS</strong><br>To install from the website, using a package:</p>
<ul>
<li>Download the latest package</li>
<li>Open the package and follow the instructions</li>
</ul>
<p>Jenkins can also be installed using brew:</p>
<ul>
<li><p>Install the latest release version</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install jenkins</div></pre></td></tr></table></figure>
</li>
<li><p>Install the LTS version</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install jenkins-lts</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>这里使用<code>brew</code>，因为<strong>很方便</strong>：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装</span></div><div class="line">$ brew update &amp;&amp; brew install jenkins</div><div class="line"></div><div class="line"><span class="comment"># 更新</span></div><div class="line">$ brew update &amp; brew upgrade jenkins</div><div class="line"></div><div class="line"><span class="comment"># 后台运行 还支持`stop`、`restart`等 (这种方式还是有差别的，下面会说明)</span></div><div class="line">$ brew services start jenkins</div></pre></td></tr></table></figure></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>建议先来看一波<code>--help</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ jenkins --help</div></pre></td></tr></table></figure>
<p>下面是常用的几种方案，此处如果第一次安装，建议采用<code>方案一</code>或者<code>方案二</code>，暂时不建议新手使用后台运行的方案～～（会在打包的时候出现证书的问题）</p>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>直接运行<code>jenkins</code>命令，可以看到日志输出，但是不能退出命令。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ jenkins</div></pre></td></tr></table></figure>
<p>经过漫长的初始化，会将</p>
<ul>
<li><code>~/.jenkins</code>目录作为<code>JENKINS_HOME</code></li>
<li><code>localhost:8080</code>作为默认URL</li>
</ul>
<p>终端输出<code>Started initialization</code>一行之后就可以正常打开了。</p>
<p>在浏览器打开<a href="http://10.12.12.10:8080" target="_blank" rel="external">http://10.12.12.10:8080</a>就可以正常加载啦～</p>
<p>退出运行：<code>control + C</code> 组合键。</p>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>直接<code>open</code>，看不到日志输出，所对应的运行环境和方案一相同。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ open /usr/<span class="built_in">local</span>/opt/jenkins/libexec/jenkins.war</div></pre></td></tr></table></figure>
<p>命令结束，稍等片刻(初始化相关目录、环境)，在浏览器打开<a href="http://10.12.12.10:8080" target="_blank" rel="external">http://10.12.12.10:8080</a>就可以正常加载啦～</p>
<h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>使用<code>brew</code>直接挂在后台作为服务运行起来</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo brew services start jenkins</div></pre></td></tr></table></figure>
<p><code>brew</code>还提供其他的参数，比如说<code>restart</code>、<code>list</code>、<code>stop</code> 等等。</p>
<p>此方案和上面的运行环境是不一样的，会有些权限的差别。</p>
<h3 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h3><p>使用<code>launchctl</code>、<code>nohup</code> 等其他方案进行的后台运行，同方案三差不多。</p>
<p>需要说的是<code>launchctl</code>是macOS下系统提供的后台运行方案，<code>brew</code>等，均来自于此。</p>
<p>在<code>launchctl</code>后台中需要一个<code>plist</code>，但是<code>brew</code>已经做好了，放置在<code>~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</code>。需要说的是<code>launchctl</code>是macOS下系统提供的后台运行方案，<code>brew</code>等，均来自于此，具体的配置参数都和<code>launchctl</code>一样的，搜索一下很多。<code>brew</code>为我们已经准备好了一个，直接使用<code>方案三</code>就行。</p>
<p>具体操作可以Google一下，很多的～</p>
<h2 id="安装完成后的配置"><a href="#安装完成后的配置" class="headerlink" title="安装完成后的配置"></a>安装完成后的配置</h2><p>在Jenkins初始化完毕为了验证管理员身份，需要将Jenkins机器上的一个字符串输入到<a href="http://10.12.12.10:8080" target="_blank" rel="external">http://10.12.12.10:8080</a>中进行验证，具体文件目录在输入的界面就能看到，不要大惊小怪。</p>
<p>之后开始选择安装插件。这里可以选择推荐的～～，也可以自己勾选。为了方便，这里直接选择推荐的方案进行安装。</p>
<p>经过漫长的等待，终于将插件安装完毕，并启动了起来～～</p>
<p>Jenkins权限，嗯，这个很重要，可以去<code>系统管理 -&gt; Configure Global Security</code>  中进行设置。</p>
<p>接下来开始去配置工程吧！传送门：<a href="../ios-automation-jenkins-build">iOS自动化-Jenkins编译工程</a></p>
<h2 id="可能会碰到的错误"><a href="#可能会碰到的错误" class="headerlink" title="可能会碰到的错误"></a>可能会碰到的错误</h2><h3 id="Error-Permission-denied"><a href="#Error-Permission-denied" class="headerlink" title="Error: Permission denied - *"></a>Error: Permission denied - <em>*</em></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew services start jenkins</div><div class="line">Error: Permission denied - ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</div></pre></td></tr></table></figure>
<p>这种很明显<code>Permission denied</code>，在命令行前添加<code>sudo</code>，然后输入密码即可。如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo brew services start jenkins</div></pre></td></tr></table></figure>
<h3 id="方案二后的地址哪里来的？"><a href="#方案二后的地址哪里来的？" class="headerlink" title="方案二后的地址哪里来的？"></a><code>方案二</code>后的地址哪里来的？</h3><p>这里推荐的安装方案是<code>brew install jenkins</code></p>
<p>通过下面的方式找到<code>brew</code>安装的位置</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ brew services list</div><div class="line">Name       Status  User Plist</div><div class="line">beanstalkd stopped</div><div class="line">influxdb   stopped</div><div class="line">jenkins    started keith  ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</div><div class="line">nginx      stopped</div><div class="line">sonarqube  stopped</div><div class="line">FDDdeiMac:~ FDD$ cat ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</div><div class="line">...</div><div class="line">&lt;string&gt;/usr/<span class="built_in">local</span>/opt/jenkins/libexec/jenkins.war&lt;/string&gt;</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="给Jenkins绑定一个IP"><a href="#给Jenkins绑定一个IP" class="headerlink" title="给Jenkins绑定一个IP"></a>给Jenkins绑定一个IP</h3><p>讲道理这个不应该在这里聊的😂，不过还是说一下吧。。</p>
<p>一般局域网中都是直接自动获取IP信息的也就是DHCP，但是Jenkins总改IP也不好。。于是绑定一下吧。</p>
<p>在mac 中 <code>系统偏好设置 -&gt; 网络</code> 记录下来当前获取到的IP。</p>
<p>在<code>高级</code>中将<code>使用DHCP</code>修改为<code>使用DHCP(手动设定地址)</code>，然后将上面的地址填进去就好啦～</p>
<p>当然你也可以指定其他的地址，只要别人没有占用😂，你开心就好～</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../ios-automation-jenkins-configuration&quot;&gt;iOS自动化-Jenkins环境搭建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../ios-automation-jenkins-build&quot;&gt;iOS自动化-Jenkins编译工程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;Jenkins&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Build great things at any scale&lt;/em&gt;&lt;br&gt;The leading open source automation server, Jenkins provides hundreds of plugins to support building, deploying and automating any project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如&lt;a href=&quot;https://jenkins.io&quot;&gt;官网&lt;/a&gt;所说&lt;code&gt;Build great things at any scale&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从这篇文章中你将会实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Mac上多种方案安装并启动jenkins&lt;/li&gt;
&lt;li&gt;在局域网中正常访问jenkins&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="构建" scheme="https://madordie.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
      <category term="Jenkins" scheme="https://madordie.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>iOS逆向-monkeydev工具</title>
    <link href="https://madordie.github.io/post/reverse-ios-monkeydev/"/>
    <id>https://madordie.github.io/post/reverse-ios-monkeydev/</id>
    <published>2017-08-14T03:05:57.000Z</published>
    <updated>2018-01-02T10:39:33.212Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>MonkeyDev wiki<br>这是一个为越狱和非越狱开发人员准备的工具，主要包括四个模块:</p>
<p> Logos Tweak</p>
<p>使用theos提供的logify.pl工具将<em>.xm文件转成</em>.mm文件进行编译，集成了CydiaSubstrate，可以使用MSHookMessageEx和MSHookFunction来Hook OC函数和指定地址。</p>
<p>CaptainHook Tweak</p>
<p>使用CaptainHook提供的头文件进行OC 函数的Hook，以及属性的获取。</p>
<p>Command-line Tool</p>
<p>可以直接创建运行于越狱设备的命令行工具</p>
<p>MonkeyApp</p>
<p>这是自动给第三方应用集成Reveal、Cycript和注入dylib的模块，支持调试dylib和第三方应用，支持Pod给第三放应用集成SDK，只需要准备一个砸壳后的ipa或者app文件即可。</p>
</blockquote>
<a id="more"></a>
<hr>
<ul>
<li><a href="https://github.com/AloneMonkey/MonkeyDev/wiki" target="_blank" rel="external">MonkeyDev wiki</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MonkeyDev wiki&lt;br&gt;这是一个为越狱和非越狱开发人员准备的工具，主要包括四个模块:&lt;/p&gt;
&lt;p&gt; Logos Tweak&lt;/p&gt;
&lt;p&gt;使用theos提供的logify.pl工具将&lt;em&gt;.xm文件转成&lt;/em&gt;.mm文件进行编译，集成了CydiaSubstrate，可以使用MSHookMessageEx和MSHookFunction来Hook OC函数和指定地址。&lt;/p&gt;
&lt;p&gt;CaptainHook Tweak&lt;/p&gt;
&lt;p&gt;使用CaptainHook提供的头文件进行OC 函数的Hook，以及属性的获取。&lt;/p&gt;
&lt;p&gt;Command-line Tool&lt;/p&gt;
&lt;p&gt;可以直接创建运行于越狱设备的命令行工具&lt;/p&gt;
&lt;p&gt;MonkeyApp&lt;/p&gt;
&lt;p&gt;这是自动给第三方应用集成Reveal、Cycript和注入dylib的模块，支持调试dylib和第三方应用，支持Pod给第三放应用集成SDK，只需要准备一个砸壳后的ipa或者app文件即可。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="逆向" scheme="https://madordie.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS逆向-class-dump工具</title>
    <link href="https://madordie.github.io/post/reverse-ios-class-dump/"/>
    <id>https://madordie.github.io/post/reverse-ios-class-dump/</id>
    <published>2017-08-10T04:40:27.000Z</published>
    <updated>2017-10-09T04:57:22.748Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="安装class-dump"><a href="#安装class-dump" class="headerlink" title="安装class-dump"></a>安装class-dump</h2><p>去<a href="http://stevenygard.com/projects/class-dump/" target="_blank" rel="external">stevenygard.com</a>下载最新的包。</p>
<p>将包中的<code>class-dump</code>可执行文件复制到<code>/opt/class-dump</code>。(我的逆向相关工具均在这下面😂）</p>
<p>在<code>~/.base_profile</code>中添加<code>export PATH=/opt/class-dump:$PATH</code></p>
<p>运行<code>source ~/.base_profile</code></p>
<p>最后确认一下安装OK ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ class-dump --v</div><div class="line">class-dump 3.5 (64 bit) compiled Nov 16 2013 12:22:33</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>使用一个记录一个吧～</p>
<h3 id="用来导出ipa-decrypted头文件"><a href="#用来导出ipa-decrypted头文件" class="headerlink" title="用来导出ipa/.decrypted头文件"></a>用来导出<code>ipa</code>/<code>.decrypted</code>头文件</h3><p>此处只能导出未加密的<code>ipa</code>，或者砸过壳的。<a href="../reverse-ios-dump-decrypted/">具体砸壳过程传送门</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ls WeChat.decrypted</div><div class="line">WeChat.decrypted</div><div class="line">$ class-dump -H WeChat.decrypted -o ./Headers/</div><div class="line">$ ls Headers</div><div class="line">Headers</div></pre></td></tr></table></figure>
<p>即得头文件目录：<code>Headers</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装class-dump&quot;&gt;&lt;a href=&quot;#安装class-dump&quot; class=&quot;headerlink&quot; title=&quot;安装class-dump&quot;&gt;&lt;/a&gt;安装class-dump&lt;/h2&gt;&lt;p&gt;去&lt;a href=&quot;http://stevenygard.com/projects/class-dump/&quot;&gt;stevenygard.com&lt;/a&gt;下载最新的包。&lt;/p&gt;
&lt;p&gt;将包中的&lt;code&gt;class-dump&lt;/code&gt;可执行文件复制到&lt;code&gt;/opt/class-dump&lt;/code&gt;。(我的逆向相关工具均在这下面😂）&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;~/.base_profile&lt;/code&gt;中添加&lt;code&gt;export PATH=/opt/class-dump:$PATH&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;运行&lt;code&gt;source ~/.base_profile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后确认一下安装OK ：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ class-dump --v&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class-dump 3.5 (64 bit) compiled Nov 16 2013 12:22:33&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="逆向" scheme="https://madordie.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS逆向-砸壳(cycript/clutch)</title>
    <link href="https://madordie.github.io/post/reverse-ios-dump-decrypted/"/>
    <id>https://madordie.github.io/post/reverse-ios-dump-decrypted/</id>
    <published>2017-08-09T12:31:50.000Z</published>
    <updated>2017-10-09T04:57:30.933Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li>越狱设备</li>
</ul>
<p>目前有两种砸壳工具，并不肩并肩，一个不行就用另一个呗，俩都不行就Google吧～～</p>
<p>下面分别对<code>cycript</code>、<code>clutch</code>进行砸壳:</p>
<a id="more"></a>
<h1 id="使用cycript进行砸壳"><a href="#使用cycript进行砸壳" class="headerlink" title="使用cycript进行砸壳"></a>使用cycript进行砸壳</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li><code>Cydia</code>中搜索<code>cycript</code>并安装 </li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="制作并上传dumpdecrypted-dylib-（已经OK的可忽略"><a href="#制作并上传dumpdecrypted-dylib-（已经OK的可忽略" class="headerlink" title="制作并上传dumpdecrypted.dylib （已经OK的可忽略"></a>制作并上传<code>dumpdecrypted.dylib</code> （已经OK的可忽略</h3><h4 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h4><p>目前我制作目录暂时在<code>~/Desktop</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/stefanesser/dumpdecrypted.git ~/Desktop</div><div class="line">$ cd ～／Desktop/dumpdecrypted</div><div class="line">$ make</div><div class="line">$ ls dumpdecrypted.dylib</div></pre></td></tr></table></figure>
<p>没什么错误的话，即得<code>dumpdecrypted.dylib</code>。</p>
<h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p>将<code>dumpdecrypted.dylib</code>放在越狱设备的<code>/var/root/</code>下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ls dumpdecrypted.dylib</div><div class="line">$ scp dumpdecrypted.dylib root@10.12.14.16:/var/root/</div><div class="line">root@10.12.14.16&apos;s password:</div><div class="line">dumpdecrypted.dylib                           100%  193KB   3.0MB/s   00:00</div><div class="line">$</div></pre></td></tr></table></figure>
<h3 id="登录进越狱设备"><a href="#登录进越狱设备" class="headerlink" title="登录进越狱设备"></a>登录进越狱设备</h3><p>可以使用<code>ssh root@IP</code>进行登录。</p>
<p>当然也可以使用<code>ssh ipad</code>，这样免密登录登录。 <a href="../reverse-ios-ssh/">配置传送门</a></p>
<h3 id="找到可执行文件路径"><a href="#找到可执行文件路径" class="headerlink" title="找到可执行文件路径"></a>找到可执行文件路径</h3><p>这里以<code>WeChat</code>为例子啦～</p>
<p>记得先打开呀～～～</p>
<p><code>ps -e</code>： 显示所有程序<br><code>grep</code>: 这里是过滤一下。。具体用法Google。所有的程序有点多，我知道名字，所以直接过滤一下。也可忽略</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ps -e | grep WeChat</div><div class="line">705 ??         0:02.20 /var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat</div><div class="line">707 ttys000    0:00.01 grep WeChat</div><div class="line">$ cycript -p 705</div><div class="line">$ cycript -p 705</div><div class="line">cy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]</div><div class="line">#&quot;file:///var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/&quot;</div><div class="line">cy# exit(0)</div><div class="line">MS:Error: _krncall(mach_vm_read_overwrite(task, data, sizeof(*baton), reinterpret_cast&lt;mach_vm_address_t&gt;(baton), &amp;error)) =4</div><div class="line">*** _assert(status == 0):../Inject.cpp(143):InjectLibrary</div><div class="line">$</div></pre></td></tr></table></figure>
<p>此处获得两个目录：</p>
<ul>
<li><code>/var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat</code></li>
<li><code>/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/</code></li>
</ul>
<h3 id="开砸"><a href="#开砸" class="headerlink" title="开砸"></a>开砸</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">$ cd ~</div><div class="line">$ cp dumpdecrypted.dylib /var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/</div><div class="line">$ cd /var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/</div><div class="line">$ DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat</div><div class="line">mach-o decryption dumper</div><div class="line"></div><div class="line">DISCLAIMER: This tool is only meant for security research purposes, not for application crackers.</div><div class="line"></div><div class="line">[+] detected 64bit ARM binary in memory.</div><div class="line">[+] offset to cryptid found: @0x1000c0ca8(from 0x1000c0000) = ca8</div><div class="line">[+] Found encrypted data at address 00004000 of length 51200000 bytes - type 1.</div><div class="line">[+] Opening /private/var/mobile/Containers/Bundle/Application/3AE519BF-2FD2-43FC-A14B-2893190B8E1E/WeChat.app/WeChat for reading.</div><div class="line">[+] Reading header</div><div class="line">[+] Detecting header type</div><div class="line">[+] Executable is a plain MACH-O image</div><div class="line">[+] Opening WeChat.decrypted for writing.</div><div class="line">[+] Copying the not encrypted start of the file</div><div class="line">[+] Dumping the decrypted data into the file</div><div class="line">[+] Copying the not encrypted remainder of the file</div><div class="line">[+] Setting the LC_ENCRYPTION_INFO-&gt;cryptid to 0 at offset ca8</div><div class="line">[+] Closing original file</div><div class="line">[+] Closing dump file</div><div class="line">$ ls WeChat.decrypted</div><div class="line">WeChat.decrypted</div><div class="line">$ pwd</div><div class="line">/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents</div></pre></td></tr></table></figure>
<p>最后得到文件:</p>
<ul>
<li><code>/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/WeChat.decrypted</code></li>
</ul>
<h3 id="将-decrypted拷贝出来"><a href="#将-decrypted拷贝出来" class="headerlink" title="将*.decrypted拷贝出来"></a>将<code>*.decrypted</code>拷贝出来</h3><p>我这里直接使用<code>scp</code>吧～。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ cd /Users/Madordie/Desktop/Madordie/iOS/xxx</div><div class="line">$ scp root@10.12.14.16:/var/mobile/Containers/Data/Application/54EF9A70-8E3A-4B6D-B7F4-554AB256C48B/Documents/WeChat.decrypted .</div><div class="line">root@10.12.14.16&apos;s password:</div><div class="line">WeChat.decrypted                              100%   61MB   4.7MB/s   00:12</div><div class="line">$ ls WeChat.decrypted</div><div class="line">WeChat.decrypted</div></pre></td></tr></table></figure>
<p>至此在主机上得到：</p>
<ul>
<li><code>/Users/Madordie/Desktop/Madordie/iOS/xxx/WeChat.decrypted</code></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>为什么将<code>dumpdecrypted.dylib</code>  <code>copy</code> 至<code>*/Documents/</code>下？<br>  ：别的目录没有权限～～（<code>dumpdecrypted.dylib: stat() failed with errno=1</code> ）</li>
</ul>
<h1 id="使用clutch进行砸壳"><a href="#使用clutch进行砸壳" class="headerlink" title="使用clutch进行砸壳"></a>使用clutch进行砸壳</h1><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><h3 id="下载上传clutch-无须重复做"><a href="#下载上传clutch-无须重复做" class="headerlink" title="下载上传clutch(无须重复做)"></a>下载上传clutch(无须重复做)</h3><p><code>clutch</code>可以从<a href="https://github.com/KJCracks/Clutch" target="_blank" rel="external">https://github.com/KJCracks/Clutch</a>下载编译。</p>
<p>当然也可以从<a href="https://github.com/KJCracks/Clutch/releases" target="_blank" rel="external">https://github.com/KJCracks/Clutch/releases</a>直接下载。</p>
<p>目前下载到目录<code>~/Clutch-2.0.4</code></p>
<p>上传到设备：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cd ~</div><div class="line">$ scp Clutch-2.0.4 root@10.12.14.16:/usr/bin/</div><div class="line">root@10.12.14.16&apos;s password:</div><div class="line">Clutch-2.0.4                                  100% 1204KB   4.7MB/s   00:00</div></pre></td></tr></table></figure>
<h3 id="登录进越狱设备-1"><a href="#登录进越狱设备-1" class="headerlink" title="登录进越狱设备"></a>登录进越狱设备</h3><p>可以使用<code>ssh root@IP</code>进行登录。</p>
<p>当然也可以使用<code>ssh ipad</code>，这样免密登录登录。 <a href="../reverse-ios-ssh/">配置传送门</a></p>
<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cd ~</div><div class="line">$ cd /usr/bin</div><div class="line">$ mv Clutch-2.0.4 clutch</div><div class="line">$ chmod +x clutch</div></pre></td></tr></table></figure>
<h3 id="砸壳"><a href="#砸壳" class="headerlink" title="砸壳"></a>砸壳</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ clutch -i</div><div class="line">Installed apps:</div><div class="line">1:   钉钉 &lt;com.laiwang.DingTalk&gt;</div><div class="line">2:   韩剧TV-最新热门韩剧大全 &lt;com.baoyun.hanju&gt;</div><div class="line">3:   PG Client - a better client for dribbble &lt;com.az.azdribbble&gt;</div><div class="line">4:   窝牛－设计装修我们的家 &lt;com.lingduohome.acorn&gt;</div><div class="line">$ clutch -d 1</div><div class="line">com.laiwang.DingTalk contains watchOS 2 compatible application. It&apos;s not possible to dump watchOS 2 apps with Clutch 2.0.4 at this moment.</div><div class="line">Zipping DingTalk.app</div><div class="line">ASLR slide: 0x10001c000</div><div class="line">Dumping &lt;DingTalk&gt; (arm64)</div><div class="line">Patched cryptid (64bit segment)</div><div class="line">Writing new checksum</div><div class="line">DONE: /private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa</div><div class="line">Finished dumping com.laiwang.DingTalk in 40.6 seconds</div><div class="line">$</div></pre></td></tr></table></figure>
<p>生成最终路径:</p>
<ul>
<li><code>/private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa</code></li>
</ul>
<h3 id="传至本地"><a href="#传至本地" class="headerlink" title="传至本地"></a>传至本地</h3><p>注意路径中有<code>()</code>这样的字符，需要转义一下。如下：</p>
<p>在本地终端中使用<code>scp</code>拉取：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ scp root@10.12.14.16:&apos;/private/var/mobile/Documents/Dumped/com.laiwang.DingTalk-iOS7.0-\(Clutch-2.0.4\).ipa&apos; .</div><div class="line">root@10.12.14.16&apos;s password:</div><div class="line">com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ip 100%   48MB   3.6MB/s   00:13</div><div class="line">$ ls com.laiwang.DingTalk-iOS7.0-\(Clutch-2.0.4\).ipa</div><div class="line">com.laiwang.DingTalk-iOS7.0-(Clutch-2.0.4).ipa</div><div class="line">$ pwd</div><div class="line">/Users/Madordie/Desktop/Madordie/ios-reverse</div></pre></td></tr></table></figure>
<p>至此在主机上得到：</p>
<ul>
<li><code>/Users/Madordie/Desktop/Madordie/ios-reverse/com.laiwang.DingTalk-iOS7.0-\(Clutch-2.0.4\).ipa</code></li>
</ul>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul>
<li>并不是每一个都可以支持这种工具砸壳，失败了用第一种试试。。。</li>
</ul>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>目前发现这两种砸壳工具。但是并不是每一个APP都可以使用2种工具。有的只有一个有效，有的两个都有效，还有一种两个都失败的😂</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;越狱设备&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前有两种砸壳工具，并不肩并肩，一个不行就用另一个呗，俩都不行就Google吧～～&lt;/p&gt;
&lt;p&gt;下面分别对&lt;code&gt;cycript&lt;/code&gt;、&lt;code&gt;clutch&lt;/code&gt;进行砸壳:&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="逆向" scheme="https://madordie.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS逆向-设备ssh免密登录</title>
    <link href="https://madordie.github.io/post/reverse-ios-ssh/"/>
    <id>https://madordie.github.io/post/reverse-ios-ssh/</id>
    <published>2017-08-09T07:31:30.000Z</published>
    <updated>2017-10-09T04:57:48.373Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul>
<li>已越狱设备</li>
<li>越狱设备安装OpenSSH(⚠️记得修改默认的’alpine’登录密码)</li>
<li>电脑和设备同局域网。（我这里设备IP：10.11.12.13，并且设置成静态IP了😂）</li>
</ul>
<a id="more"></a>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="生成RSA证书"><a href="#生成RSA证书" class="headerlink" title="生成RSA证书"></a>生成RSA证书</h3><p>我这里生成的证书为:<code>ipad</code>，可自己需要定义。（注意如果直接回车会覆盖<code>~/.ssh/id_rsa</code>）</p>
<p>执行命令<code>ssh-keygen</code>，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$ cd ~/.ssh/</div><div class="line">$ ssh-keygen</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/Users/Madordie/.ssh/id_rsa): ipad</div><div class="line">Enter passphrase (empty for no passphrase):</div><div class="line">Enter same passphrase again:</div><div class="line">Your identification has been saved in ipad.</div><div class="line">Your public key has been saved in ipad.pub.</div><div class="line">The key fingerprint is:</div><div class="line">SHA256:GpQBeAf+oqUzWlUhtItDcVyVFz2wd0EcIgD+BZLPK8U Madordie@Bingo.local</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+---[RSA 2048]----+</div><div class="line">|  .+*+*++o++.o+. |</div><div class="line">|  .+o+o=...oo... |</div><div class="line">|  ..o.=+ .o ...  |</div><div class="line">| . . = .E. . .   |</div><div class="line">|  o = o.S.       |</div><div class="line">|   * ..o.        |</div><div class="line">|  *   ..         |</div><div class="line">| o o             |</div><div class="line">|.                |</div><div class="line">+----[SHA256]-----+</div><div class="line"></div><div class="line">$ ls ~/.ssh/ipad*</div><div class="line">/Users/Madordie/.ssh/ipad     /Users/Madordie/.ssh/ipad.pub</div></pre></td></tr></table></figure></p>
<h3 id="将公钥推送至越狱设备"><a href="#将公钥推送至越狱设备" class="headerlink" title="将公钥推送至越狱设备"></a>将公钥推送至越狱设备</h3><p>默认是没有<code>~/.ssh</code>目录的，暂时放置在<code>/var/root</code>下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp ~/.ssh/ipad.pub root@10.11.12.13:/var/root</div></pre></td></tr></table></figure>
<p><code>scp</code> 默认端口为<code>22</code> 如果需要自定义端口可以在路径前添加<code>-P 端口号</code>参数。</p>
<h3 id="配置本机-ssh-config文件"><a href="#配置本机-ssh-config文件" class="headerlink" title="配置本机~/.ssh/config文件"></a>配置本机<code>~/.ssh/config</code>文件</h3><p>使用顺手的工具编辑<code>~/.ssh/config</code>文件。（没有就新建一个啦～</p>
<p>按照如下格式填写。默认<code>ssh</code>登录端口为<code>22</code>可以不写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Host ipad</div><div class="line">    Hostname 10.11.12.13</div><div class="line">    User root</div><div class="line">    Port 22</div><div class="line">    PreferredAuthentications publickey</div><div class="line">    IdentityFile ~/.ssh/ipad</div></pre></td></tr></table></figure></p>
<h3 id="配置越狱设备"><a href="#配置越狱设备" class="headerlink" title="配置越狱设备"></a>配置越狱设备</h3><p>先用<code>ssh root@10.11.12.13</code>登录进设备。刚才我们将<code>ipad.pub</code>通过<code>scp</code>放在了<code>/var/root</code>下。</p>
<p>一般情况下<code>/var/root/.ssh</code>是不存在的，使用命令<code>mkdir -p /var/root/.ssh</code>即可创建。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat ipad.pub &gt;&gt; /var/root/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<p>然后强迫症的可以使用<code>rm -rf ipad.pub</code>删除啦～</p>
<p>对了，退出<code>ssh</code>登录的设备使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ exit</div><div class="line">logout</div><div class="line">Connection to 10.11.12.13 closed.</div></pre></td></tr></table></figure>
<h3 id="赶紧测试一下远程登录效果"><a href="#赶紧测试一下远程登录效果" class="headerlink" title="赶紧测试一下远程登录效果"></a>赶紧测试一下远程登录效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh ipad</div></pre></td></tr></table></figure>
<p>然后你会发现你已经完成了免密码登录越狱设备。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实这并不是只有越狱iOS设备才能使用的免登录，而是<code>ssh</code>所支持的。用途也很方便～</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;已越狱设备&lt;/li&gt;
&lt;li&gt;越狱设备安装OpenSSH(⚠️记得修改默认的’alpine’登录密码)&lt;/li&gt;
&lt;li&gt;电脑和设备同局域网。（我这里设备IP：10.11.12.13，并且设置成静态IP了😂）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="逆向" scheme="https://madordie.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>自定义数据填充Sketch插件</title>
    <link href="https://madordie.github.io/post/format-sketchplugin/"/>
    <id>https://madordie.github.io/post/format-sketchplugin/</id>
    <published>2017-07-17T06:45:12.000Z</published>
    <updated>2017-10-09T04:59:31.525Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="先来个README-md"><a href="#先来个README-md" class="headerlink" title="先来个README.md"></a>先来个README.md</h2><blockquote>
<h2 id="format-sketchplugin"><a href="#format-sketchplugin" class="headerlink" title="format-sketchplugin"></a><a href="https://github.com/madordie/format-sketchplugin" target="_blank" rel="external">format-sketchplugin</a></h2><p>为Sketch自动生成自定义填充数据源插件。</p>
<p><img src="https://github.com/madordie/format-sketchplugin/blob/master/Images/Untitled.gif?raw=true" alt="预览"></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul>
<li>下载<a href="https://github.com/madordie/format-sketchplugin/releases" target="_blank" rel="external">Release</a>上的包，并双击打开</li>
<li>选择要随机填充的文本数据(支持多选，文本数据按照回车进行随机，会默认删除空数据)</li>
<li>选择随机填充的图片文件夹(只支持单选文件夹，选中文件夹内的<code>.png</code>、 <code>.PNG</code>、 <code>.jpg</code>、 <code>.JPG</code>、 <code>.jpeg</code>、 <code>.JPEG</code>、 <code>.gif</code>、 <code>.GIF</code>文件将会被识别并作为数据源)</li>
<li>将插件生成目录拖拽至窗口即完成设置</li>
<li>文本、图片文件夹 可在保存前重复多次选择</li>
<li>点击<code>制作</code>，即可在生成目录看到插件生成</li>
</ul>
<h2 id="生成说明"><a href="#生成说明" class="headerlink" title="生成说明"></a>生成说明</h2><ul>
<li>文本数据按照文本文件名作为标示</li>
<li>图片文件夹按照图片文件夹名作为标示</li>
<li>保存时，文本数据会读取至插件内</li>
<li>保存时，图片文件夹会复制至插件内(不识别子目录，并只拷贝可识别的素材)</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;先来个README-md&quot;&gt;&lt;a href=&quot;#先来个README
    
    </summary>
    
      <category term="工具" scheme="https://madordie.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Sketchplugin" scheme="https://madordie.github.io/tags/Sketchplugin/"/>
    
  </entry>
  
  <entry>
    <title>iOS11-beta</title>
    <link href="https://madordie.github.io/post/ios11-beta/"/>
    <id>https://madordie.github.io/post/ios11-beta/</id>
    <published>2017-06-12T09:20:58.000Z</published>
    <updated>2017-11-22T06:03:26.443Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>iOS11 预览版安装体验笔记。</p>
<a id="more"></a>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>毕竟beta版，升级需谨慎。目前来看体验上还是有点卡的～～😂</p>
<p>卡顿让我实在无法忍受，并与6.15号重置回iOS10.3.2 。。。</p>
<p>9.13 GM出来了，再安装～～</p>
<p>适配有先后，iOS11马上就要发了，而iPhoneX还需要等一小段时间。所以iOS11的适配比iPhoneX有更高的优先级～</p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="失效的automaticallyAdjustsScrollViewInsets"><a href="#失效的automaticallyAdjustsScrollViewInsets" class="headerlink" title="失效的automaticallyAdjustsScrollViewInsets"></a><a name="automaticallyAdjustsScrollViewInsets">失效的<code>automaticallyAdjustsScrollViewInsets</code></a></h3><p>iOS11 版本中 <strong>立即失效</strong>。</p>
<p>最容易出问题的就是无导航的顶部刷新会莫名其妙的缩不进去～～</p>
<p><img src="/images/ios11-beta-1.jpg" alt="效果图"></p>
<p>还有就是如果没有使用这个<code>automaticallyAdjustsScrollViewInsets</code>，为了达到那种戳进去的代码直接设置<code>frame.y = 0</code>。这种操作不但会出现导航栏莫名其妙的戳出来，还有<code>UITableView.section.header</code>莫名错位的问题。</p>
<p><img src="/images/ios11-beta-2.gif" alt="效果图"></p>
<p>API 声明：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">2.0</span>, *)</div><div class="line">open <span class="class"><span class="keyword">class</span> <span class="title">UIViewController</span> : <span class="title">UIResponder</span>, ... </span>&#123;</div><div class="line">	...</div><div class="line">	<span class="meta">@available</span>(iOS, introduced: <span class="number">7.0</span>, deprecated: <span class="number">11.0</span>)</div><div class="line">	open <span class="keyword">var</span> automaticallyAdjustsScrollViewInsets: <span class="type">Bool</span> <span class="comment">// Defaults to YES</span></div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相应的的替换方案：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">2.0</span>, *)</div><div class="line">open <span class="class"><span class="keyword">class</span> <span class="title">UIScrollView</span> : <span class="title">UIView</span>, ... </span>&#123;</div><div class="line">	...</div><div class="line">    <span class="comment">/* Configure the behavior of adjustedContentInset.</span></div><div class="line">     Default is UIScrollViewContentInsetAdjustmentAutomatic.</div><div class="line">     */</div><div class="line">    <span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</div><div class="line">    open <span class="keyword">var</span> contentInsetAdjustmentBehavior: <span class="type">UIScrollViewContentInsetAdjustmentBehavior</span></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="decisionHandler-allow-was-called-more-than-once"><a href="#decisionHandler-allow-was-called-more-than-once" class="headerlink" title="decisionHandler(.allow) was called more than once"></a><a name="decisionHandler"><code>decisionHandler(.allow)</code> was called more than once</a></h3><p>崩溃信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#0 Thread</div><div class="line">NSInternalInconsistencyException</div><div class="line">Completion handler passed to -[WKWebViewJavascriptBridge webView:decidePolicyForNavigationAction:decisionHandler:] was called more than once</div></pre></td></tr></table></figure>
<p>这是<a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="external">WebViewJavascriptBridge</a>在iOS11上的一个<a href="https://github.com/marcuswestin/WebViewJavascriptBridge/issues/302" target="_blank" rel="external">Issues#302</a>。</p>
<p>据同事说可以通过如下代码解决：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="type">WebViewJavascriptBridgeBase</span>().isWebViewJavascriptBridgeURL(url) &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">decisionHandler(.allow)</div></pre></td></tr></table></figure></p>
<p>测试了一下确实不崩溃了，但是具体的解决方案还要看作者的在<a href="https://github.com/marcuswestin/WebViewJavascriptBridge/issues/302" target="_blank" rel="external">Issues#302</a>中的回复。</p>
<h3 id="照片存储时候某些设备必crash"><a href="#照片存储时候某些设备必crash" class="headerlink" title="照片存储时候某些设备必crash"></a><a name="savePhoto">照片存储时候某些设备必crash</a></h3><p>崩溃信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2017-09-29 11:36:17.338816+0800 Demo-iOS11-crash-save-photo[636:139456]</div><div class="line"> [access] This app has crashed because it attempted to access privacy-sensitive data without a usage description. </div><div class="line"> The app&apos;s Info.plist must contain an NSPhotoLibraryAddUsageDescription key with a string value explaining to the user how the app uses this data.</div></pre></td></tr></table></figure>
<p>是的，这个<a href="https://github.com/madordie/Demo-iOS11-crash-save-photo" target="_blank" rel="external">Demo</a>还有一个crash的提示。但是在大工程中，我并没有看到这样的玩意输出出来。。我做的复现操作较简单：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> img = <span class="type">UIImage</span>(named: <span class="string">"278.jpg"</span>)</div><div class="line"><span class="keyword">let</span> library = <span class="type">ALAssetsLibrary</span>()</div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> orientation = <span class="type">ALAssetOrientation</span>(rawValue: img?.imageOrientation.rawValue ?? <span class="number">0</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">library.writeImage(toSavedPhotosAlbum: img?.cgImage, orientation: orientation) &#123; (url, error) <span class="keyword">in</span></div><div class="line">    <span class="keyword">guard</span> error != <span class="literal">nil</span> <span class="keyword">else</span> &#123; <span class="built_in">print</span>(<span class="string">"no crash"</span>); <span class="keyword">return</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就这么多代码，不管是打没打<code>Swift Error</code>、<code>All Exceptions</code>都无法定位到上面代码块，这才是最坑的。</p>
<p>上面代码漏了一句关键的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="type">ALAssetsLibrary</span>.authorizationStatus() == .authorized <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div></pre></td></tr></table></figure>
<p>需要注意的是上面代码之判断了是否有权限，但是在iOS11上并不会弹出什么授权提示。就算在<code>Info.plist</code>中添加<code>NSPhotoLibraryUsageDescription</code>依旧无济于事。</p>
<p>目前来看，iOS11中<strong>只有</strong>添加<code>NSPhotoLibraryAddUsageDescription</code>才可以。</p>
<h3 id="navigationItem-titleView-点击区域偏移"><a href="#navigationItem-titleView-点击区域偏移" class="headerlink" title="navigationItem.titleView 点击区域偏移"></a>navigationItem.titleView 点击区域偏移</h3><p>所设置的View需要实现：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@implementation <span class="type">DNImageFoldTitleView</span></div><div class="line">- (<span class="type">CGSize</span>)intrinsicContentSize &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">UILayoutFittingExpandedSize</span>;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS11 预览版安装体验笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>「转」Unowned 还是 Weak？生命周期和性能对比</title>
    <link href="https://madordie.github.io/post/swiftgg-unowned-or-weak-lifetime-and-performance/"/>
    <id>https://madordie.github.io/post/swiftgg-unowned-or-weak-lifetime-and-performance/</id>
    <published>2017-05-18T12:55:17.000Z</published>
    <updated>2017-10-09T04:58:36.437Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>作者：Umberto Raimondi，原文链接，原文日期：2016-10-27<br>译者：shanks；校对：Crystal Sun；定稿：CMB</p>
</blockquote>
<p>每当处理循环引用（retain cycles）时，需要考量对象生命周期来选择unowned或者weak标识符，这已经成为了一个共识。但是有时仍然会心存疑问，在具体的使用中应该选择哪一个，或者退一步讲，保守的只使用 weak 是不是一个好的选择呢？</p>
<p>本文首先对循环引用的基础知识做一个简要介绍，然后会分析 Swift 源代码的一些片段，讲解 unowned 和 weak 在生命周期和性能上的差异点，希望看完本文以后，在的使用场景中，能使用正确的弱引用类型。</p>
<a id="more"></a>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录:"></a>目录:</h2><ul>
<li>基础知识</li>
<li>问题来了: unowened 还是 weak?</li>
<li>性能：深度探索</li>
<li>捕获列表处理解析</li>
<li>结论</li>
<li>脚注</li>
</ul>
<blockquote>
<p>从 GitHub 或者 zipped 获取本文相关的 Playground 代码。然后从这里获取闭包案例和 SIL，SILGen 以及 LLVM IR 的输出。</p>
</blockquote>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>众所周知，Swift 利用古老并且有效的自动引用计数（ARC, Automatic Reference Counting）来管理内存，带来的后果和在 Objective-C 中使用的情况类似，需要手动使用弱引用来解决循环引用问题。</p>
<p>如果对 ARC 不了解，只需要知道的是，每一个引用类型实例都有一个引用计数与之关联，这个引用计数用来记录这个对象实例正在被变量或常量引用的总次数。当引用计数变为 0 时，实例将会被析构，实例占有的内存和资源都将变得重新可用。</p>
<p>当有两个实例通过某种形式互相引用时，就会形成循环引用（比如：两个类实例都有一个属性指向对方的类实例；双向链表中两个相邻的节点实例等…）, 由于两个实例的引用计数都一直大于 0， 循环引用将会阻止这些实例的析构。</p>
<p>为了解决这个问题，和其他一些有类似问题的语言一样， 在 Swift 中，弱引用 的概念被提了出来，弱引用不会被 ARC 计算，也就是说，当一个弱引用指向一个引用类型实例时，引用计数不会增加。</p>
<p>弱引用不会阻止实例的析构, 只需要记住的是，在任何情况下，弱引用都不会拥有它指向的对象。在正式的场景中不是什么大问题，但是在我们处理这类引用的时候，需要意识到这一点。</p>
<p>在 Swift 中有 2 种 弱 引用形式，unowned 和 weak。</p>
<p>虽然它们的作用类似，但与它们相关实例生命周期的假设会略有不同，并且具有不同的性能特征。</p>
<p>为了举例说明循环引用，这里不使用大家期望看到的类之间的循环引用，而使用闭包的上下文案例，这在 Objective-C 日常开发中处理循环引用时经常会遇到的情况。和类的循环引用类似，通过创建一个强引用指向外部实例，或捕获它，阻止它析构。</p>
<p>在 Objective-C ，按照标准的做法，定义一个弱引用指向闭包外部的实例，然后在闭包内部定义强引用指向这个实例，在闭包执行期间使用它。当然，有必要在使用前检查引用的有效性。</p>
<p>为了更方便的处理循环引用，Swift 引入了一个新的概念，用于简化和更加明显地表达在闭包内部外部变量的捕获：捕获列表（capture list）。使用捕获列表，可以在函数的头部定义和指定那些需要用在内部的外部变量，并且指定引用类型(译者注：这里是指 unowned 和 weak）。</p>
<p>接下来举一些例子，在各种情况下捕获变量的表现。</p>
<p>当不使用捕获列表时，闭包将会创建一个外部变量的强引用：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i1 = <span class="number">1</span>, i2 = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> fStrong = &#123;</div><div class="line">    i1 += <span class="number">1</span></div><div class="line">    i2 += <span class="number">2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">fStrong()</div><div class="line"><span class="built_in">print</span>(i1,i2) <span class="comment">//Prints 2 and 3</span></div></pre></td></tr></table></figure>
<p>闭包内部对变量的修改将会改变外部原始变量的值，这与预期是一致的。</p>
<p>使用捕获列表，闭包内部会创建一个新的可用常量。如果没有指定常量修饰符，闭包将会简单地拷贝原始值到新的变量中，对于值类型和引用类型都是一样的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fCopy = &#123; [i1] <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(i1,i2)</div><div class="line">&#125;</div><div class="line"></div><div class="line">fStrong()</div><div class="line"><span class="built_in">print</span>(i1,i2) <span class="comment">//打印结果是 2 和 3  </span></div><div class="line"></div><div class="line">fCopy()  <span class="comment">//打印结果是 1 和 3</span></div></pre></td></tr></table></figure>
<p>在上面的例子中，在调用 fStrong 之前定义函数 fCopy ,在该函数定义的时候，私有常量已经被创建了。正如你所看到的，当调用第二个函数时候，仍然打印 i1 的原始值。</p>
<p>对于外部引用类型的变量，在捕获列表中指定 weak 或 unowned，这个常量将会被初始化为一个弱引用，指向原始值，这种指定的捕获方式就是用来处理循环引用的方式。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">aClass</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> value = <span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c1 = aClass()</div><div class="line"><span class="keyword">var</span> c2 = aClass()</div><div class="line"></div><div class="line"><span class="keyword">var</span> fSpec = &#123; [<span class="keyword">unowned</span> c1, <span class="keyword">weak</span> c2] <span class="keyword">in</span></div><div class="line">    c1.value += <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> c2 = c2 &#123;</div><div class="line">        c2.value += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fSpec()</div><div class="line"><span class="built_in">print</span>(c1.value,c2.value) <span class="comment">//Prints 2 and 2</span></div></pre></td></tr></table></figure>
<p>两个 aClass 捕获实例的不同的定义方式，决定了它们在闭包中不同的使用方式。</p>
<p>unowned 引用使用的场景是，原始实例永远不会为 nil，闭包可以直接使用它，并且直接定义为显式解包可选值。当原始实例被析构后，在闭包中使用这个捕获值将导致崩溃。</p>
<p>如果捕获原始实例在使用过程中可能为 nil ，必须将引用声明为 weak， 并且在使用之前验证这个引用的有效性。</p>
<h2 id="问题来了-unowened-还是-weak"><a href="#问题来了-unowened-还是-weak" class="headerlink" title="问题来了: unowened 还是 weak?"></a>问题来了: unowened 还是 weak?</h2><p>在实际使用中如何选择这两种弱引用类型呢？</p>
<p>这个问题的答案可以简单由原始对象和引用它的闭包的生命周期来解释。</p>
<p><img src="/images/unownedbig.png" alt="unownedbig"></p>
<p>有两个可能出现的场景：</p>
<ul>
<li><p>闭包和捕获对象的生命周期相同，所以对象可以被访问，也就意味着闭包也可以被访问。外部对象和闭包有相同的生命周期(比如：对象和它的父对象的简单返回引用）。在这种情况下，你应该把引用定义为 unowned。</p>
<p>  一个经典的案例是: [unowned self], 主要用在闭包中，这种闭包主要在他们的父节点上下文中做一些事情，没有在其他地方被引用或传递，不能作用在父节点之外。</p>
</li>
<li><p>闭包的生命周期和捕获对象的生命周期相互独立，当对象不能再使用时，闭包依然能够被引用。这种情况下，你应该把引用定义为 weak，并且在使用它之前验证一下它是否为 nil（请不要对它进行强制解包).</p>
<p>  一个经典的案例是: [weak delegate = self.delegate!]，可以在某些使用闭包的场景中看到，闭包使用的是完全无关（生命周期独立）的代理对象。</p>
</li>
</ul>
<p>当无法确认两个对象之间生命周期的关系时，是否不应该去冒险选择一个无效 unowned 引用？而是保守选择 weak 引用是一个更好的选择？<br>答案是否定的，不仅仅是因为对象生命周期了解是一件必要的事情，而且这两个修饰符在性能特性上也有很大的不同。</p>
<p>弱引用最常见的实现是，每次一个新的引用生成时，都会把每个弱引用和它指向的对象信息存储到一个附加表中。</p>
<p>当没有任何强引用指向一个对象时，Swift 运行时会启动析构过程，但是在这之前，运行时会把所有相关的弱引用置为 nil 。弱引用的这种实现方式我们称之为”零和弱引用”。</p>
<p>这种实现有实际的开销，考虑到需要额外实现的数据结构，需要确保在并发访问情况下，对这个全局引用结构所有操作的正确性。一旦析构过程开始了，在任何环境中，都不允许访问弱引用所指向的对象了。</p>
<p>弱引用（包括 unowned 和一些变体的 weak)在 Swift 使用了更简单和快速的实现机制。</p>
<p>Swift 中的每个对象保持了两个引用计数器，一个是强引用计数器，用来决定 ARC 什么时候可以安全地析构这个对象，另外一个附加的弱引用计数器，用来计算创建了多少个指向这个对象的 unowned 或者 weak 引用，当这个计数器为零时，这个对象将被 析构 。</p>
<p>需要重点理解的是，只有等到所有 unowned 引用被释放后，这个对象才会被真正地析构，然后对象将会保持未解析可访问状态，当析构发生后，对象的内容才会被回收。</p>
<p>每当 unowned 引用被定义时，对应的 unowned 引用计数会进行原子级别地增加(使用原子gcc/llvm操作，进行一系列快速且线程安全的基本操作，例如：增加，减少，比较，交换等)，以保证线程安全。在增加计数之前，会检查强引用计数以确保对象是有效的。</p>
<p>试图访问一个无效的对象，将会导致错误的断言，你的应用在运行时中会报错(这就是为什么这里的 unownd 实现方式叫做 unowned(safe) 实现)<br>为了更好的优化，应用编译时带有 -OFast，unowned 引用不会去验证引用对象的有效性，unowned 引用的行为就会像 Objective-C 中的 __unsafe_unretained 一样。如果引用对象无效，unowned 引用将会指向已经释放垃圾内存（这种实现称之 unowned(unsafe)）。</p>
<p>当一个 unowned 引用被释放后，如果这时没有其他强引用或 unowned 引用指向这个对象，那么最终这个对象将被析构。这就是为什么一个引用对象不能在强引用计数器等于零的情况下，被析构的原因，所有的引用计数器必须能够被访问用来验证 unowned 引用和强引用数量。</p>
<p>Swift 的 weak 引用添加了附加层，间接地把 unowned 引用包裹到了一个可选容器里面，在指向的对象析构之后变成空的情况下，这样处理会更加的清晰。但是需要付出的代价是，附加的机制需要正确地处理可选值。</p>
<p>考虑到以上因素，在对象关系生命周期允许的情况下，优先选择使用 unowned 引用。但是这不是此故事的结局，接下来比较一下两者性能1上的差别。</p>
<h2 id="性能：深度探索"><a href="#性能：深度探索" class="headerlink" title="性能：深度探索"></a>性能：深度探索</h2><p>在查看 Swift 项目源码验证之前，需要理解 ARC 如何管理这两种引用类型，并且还需要解释 swiftc，LLVM 和 SIL 的相关知识。</p>
<p>接下来试着简要介绍本文所需要的必备知识点，如果想了解更多，将在最后的脚注中找到一些有用的链接。</p>
<p>使用一个图来解释 swiftc 整个编译过程的包含的模块：</p>
<p><img src="/images/swiftc.png" alt="swiftc"></p>
<p>Swiftc 和 clang 一样构建在 LLVM 上，遵循 clang 编译器相似的编译流程。</p>
<p>在编译过程的第一部分，使用一个特定语言前端进行管理，swift 源代码被解释生成一个抽象语法树(AST)表达2，然后抽象语法树的结果从语义角度进行分析，找出语义错误。</p>
<p>在这个点上，对于其他的基于 LLVM 的编译器来讲，在通过一个附加步骤对源代码进行静态分析后（必要时可以显示错误和警告），接着 IRGen 模块 会把 AST 的内容会转换成一个轻量的和底层的机器无关的表示，我们称之为 LLVM IR(LLVM 中间表示)。</p>
<p>尽管两个模块都需要做一些相同检查，但是这两个模块是区分开的，在两个模块之间也存在许多重复的代码。</p>
<p>IR 是一种静态单赋值形式（SSA-form）一致语言，可以看做注入了 LLVM 的虚拟机下的 RISC 类型汇编语言。基于 SSA 将简化接下来的编译过程，从语言前端提供的中间表达会在 IR 进行多重优化。</p>
<p>需要重点注意的是，IR 其中一个特点是，它具有三种不同的形式：内存表达（内部使用），序列化位代码形式（你已经知道的位代码形式）和可读形式。</p>
<p>最后一种形式非常有用，用来验证 IR 代码的最终结构，这个结构将会传入到整个过程中的最后一步，将会从机器独立的 IR 代码转换成平台相关的表达(比如：x86，ARM 等等)。最后一步将被 LLVM 平台后端执行。</p>
<p>那么 swiftc 和其他基于 LLVM 的编译器有什么不同呢？<br>swiftc 和其他编译器从结构形式上的差别主要体现在一个附加组件，这个附加组件是 SILGen ，在 IRGen 之前，执行代码的监测和优化，生成一个高级的中间表达，我们称之为 SIL （Swift Intermediate Language，Swift 中间语言），最后 SIL 将会转换成 LLVM IR。这一步加强了在单个软件模块上所有具体语言的检查，并且简化了 IRGen。</p>
<p>从 AST 到 IR 的转换分为两个步骤。SILGen 把 AST 源代码转换为原始 SIL ，然后编译器进行 Swift 语法检查（需要时打印错误或者警告信息），优化有效的原始 SIL ，通过一些步骤最后生成标准化 SIL 。如上面的示意图显示那样，标准化 SIL 的最后转化为 LLVM IR。</p>
<p>再次强调，SIL 是一个 SSA 类型语言，使用附加的结构扩展了 Swift 的语法。它依赖 Swift 的类型系统，并且能理解 Swift 的定义，但是需要重点记住的是，当编译一个手写的 SIL 源码（是的，可以手动写 SIL 然后编译它）时，高阶的 Swift 代码或者函数内容将被编译器忽略。</p>
<p>在接下来的章节，我们将分析一个标准化 SIL 的案例，来理解 unowned 和 weak 引用如何被编译器处理。一个包含捕获列表的基本闭包的例子，查看这个例子生成的 SIL 代码，可以看到被编译器添加的所有 ARC 相关的函数调用。</p>
<blockquote>
<p>从 GitHub 或者 zipped 获取本文相关的 Playground 代码。然后从这里获取闭包案例和 SIL ，SILGen 以及 LLVM IR 的输出。</p>
</blockquote>
<h2 id="捕获列表处理解析"><a href="#捕获列表处理解析" class="headerlink" title="捕获列表处理解析"></a>捕获列表处理解析</h2><p>接下来看看一个简单的 Swift 的例子，定义两个类变量，然后在一个闭包中对他们进行弱引用的捕获：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">aClass</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> value = <span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c1 = aClass()</div><div class="line"><span class="keyword">var</span> c2 = aClass()</div><div class="line"></div><div class="line"><span class="keyword">var</span> fSpec = &#123; </div><div class="line">    [<span class="keyword">unowned</span> c1, <span class="keyword">weak</span> c2] <span class="keyword">in</span></div><div class="line">    c1.value = <span class="number">42</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> c2o = c2 &#123;</div><div class="line">        c2o.value = <span class="number">42</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fSpec()</div></pre></td></tr></table></figure>
<p>通过 xcrun swiftc -emit-sil sample.swift 编译 swift 源代码，生成标准化 SIL 代码。原始SIL 可以使用 -emit-silgen 选项来生成。</p>
<p>运行以上命令以后，会发现 swiftc 产生了许多代码。通过查看 swiftc 输出代码的片段，学习一下基本的 SIL 指令，理解整个结构。</p>
<p>在下面代码中需要的地方添加了一些多行注释（编译器也生成了一些单行注释），希望这些注释已经足够说清楚发生了什么：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">  此文件包含典型 SIL 代码</div><div class="line">*/</div><div class="line">sil_stage canonical             </div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line">  只有在 SIL 内部使用的特殊的导入</div><div class="line">*/</div><div class="line"><span class="keyword">import</span> Builtin                  </div><div class="line"><span class="keyword">import</span> Swift</div><div class="line"><span class="keyword">import</span> SwiftShims</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">	三个全局变量的定义，包括 c1，c2 和 闭包 fSpec。</div><div class="line">  	@_Tv4clos2c1CS_6aClass是变量的符号，$aClass 是它的类型（类型前缀为$)。</div><div class="line">  	变量名在这里看起来很乱，但是在后面的代码中将变得更加可读。</div><div class="line">*/</div><div class="line"><span class="comment">// c1</span></div><div class="line">sil_global hidden @_Tv4sample2c1CS_6aClass : $aClass</div><div class="line"></div><div class="line"><span class="comment">// c2</span></div><div class="line">sil_global hidden @_Tv4sample2c2CS_6aClass : $aClass</div><div class="line"></div><div class="line"><span class="comment">// fSpec</span></div><div class="line">sil_global hidden @_Tv4sample5fSpecFT_T_ : $@callee_owned () -&gt; ()</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">  层次作用域定义表示原始代码的位置。</div><div class="line">  每个 SIL 指示将会指向它生成的 `sil_scope`。</div><div class="line">*/</div><div class="line">sil_scope <span class="number">1</span> &#123;  parent @main : $<span class="meta">@convention</span>(<span class="built_in">c</span>) (<span class="type">Int32</span>, <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Optional</span>&lt;<span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int8</span>&gt;&gt;&gt;) -&gt; <span class="type">Int32</span> &#125;</div><div class="line">sil_scope <span class="number">2</span> &#123; loc <span class="string">"sample.swift"</span>:<span class="number">14</span>:<span class="number">1</span> parent <span class="number">1</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">	自动生成的 @main 函数包含了我们原始全部作用域的代码。</div><div class="line"> 	这里沿用了熟悉的 c main() 函数结构，接收参数个数和参数数组两个输入，这个函数遵循 c 调用约定。</div><div class="line">  	这个函数包含了需要调用闭包的指令。</div><div class="line">*/</div><div class="line"><span class="comment">// main</span></div><div class="line">sil @main : $<span class="meta">@convention</span>(<span class="built_in">c</span>) (<span class="type">Int32</span>, <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Optional</span>&lt;<span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int8</span>&gt;&gt;&gt;) -&gt; <span class="type">Int32</span> &#123;</div><div class="line"><span class="comment">/*</span></div><div class="line">  入口定义头部为 % 符号，后面跟随一个数字 id。</div><div class="line">  每当一个新的入口定义时（或者函数开头定义函数参数），编译器在入口行尾根据它的值（叫做 users）添加一个注释。</div><div class="line">  对于其他指令，需要提供 id 号。</div><div class="line">  在这里，入口 0 将被用来计算入口 4 的内容，入口 1 将被用来创建入口 10 的值。</div><div class="line">*/</div><div class="line"><span class="comment">// %0                                             // user: %4</span></div><div class="line"><span class="comment">// %1                                             // user: %10</span></div><div class="line"><span class="comment">/*</span></div><div class="line">  每一个函数被分解成一系列的基本指令块，每一个指令块结束于一个终止指令（一个分支或者一个返回）。</div><div class="line">  这一系列的指令块表示函数所有可能的执行路径。</div><div class="line">*/</div><div class="line">bb0(%<span class="number">0</span> : $<span class="type">Int32</span>, %<span class="number">1</span> : $<span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Optional</span>&lt;<span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int8</span>&gt;&gt;&gt;):</div><div class="line">...</div><div class="line">  <span class="comment">/*</span></div><div class="line">    每一个 SIL 指令都包含一个引用，指向源代码的位置，包括指令具体从源代码中哪个地方来，属于哪一个作用域。</div><div class="line">    在后面分析具体的方法会看到这些内容。</div><div class="line">  */</div><div class="line">  unowned_retain %<span class="number">27</span> : $@sil_unowned aClass, loc <span class="string">"sample.swift"</span>:<span class="number">9</span>:<span class="number">14</span>, scope <span class="number">2</span> <span class="comment">// id: %28</span></div><div class="line">  store %<span class="number">27</span> to %<span class="number">2</span> : $*@sil_unowned aClass, loc <span class="string">"sample.swift"</span>:<span class="number">9</span>:<span class="number">14</span>, scope <span class="number">2</span> <span class="comment">// id: %29</span></div><div class="line">  %<span class="number">30</span> = alloc_box $@sil_weak <span class="type">Optional</span>&lt;aClass&gt;, <span class="keyword">var</span>, name <span class="string">"c2"</span>, loc <span class="string">"sample.swift"</span>:<span class="number">9</span>:<span class="number">23</span>, scope <span class="number">2</span> <span class="comment">// users: %46, %44, %43, %31</span></div><div class="line">  %<span class="number">31</span> = project_box %<span class="number">30</span> : $@box @sil_weak <span class="type">Optional</span>&lt;aClass&gt;, loc <span class="string">"sample.swift"</span>:<span class="number">9</span>:<span class="number">23</span>, scope <span class="number">2</span> <span class="comment">// user: %35</span></div><div class="line">  %<span class="number">32</span> = load %<span class="number">19</span> : $*aClass, loc <span class="string">"sample.swift"</span>:<span class="number">9</span>:<span class="number">23</span>, scope <span class="number">2</span> <span class="comment">// users: %34, %33</span></div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line">  下面是一系列自动生成的`aClass`的方法，包括： init/deinit, setter/getter 和其他一些工具方法。</div><div class="line">  每个方法前的注释是编译器添加的，用来说明代码的具体作用。</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">  隐藏方法只在它们模块中可见。</div><div class="line">  @convention(方法名)是 Swift 中方法调用默认的约定，在尾部有一个附加的参数指向它自己。</div><div class="line">*/</div><div class="line"><span class="comment">// aClass.__deallocating_deinit</span></div><div class="line">sil hidden @_TFC4clos6aClassD : $<span class="meta">@convention</span>(method) (@owned aClass) -&gt; () &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">  @guaranteed 参数表示保证在整个周期内调用此方法都有效。</div><div class="line">*/</div><div class="line"><span class="comment">// aClass.deinit</span></div><div class="line">sil hidden @_TFC4clos6aClassd : $<span class="meta">@convention</span>(method) (@guaranteed aClass) -&gt; @owned <span class="type">Builtin</span>.<span class="type">NativeObject</span> &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">  [transparent] 修饰的方法是内联的小方法</div><div class="line">*/</div><div class="line"><span class="comment">// aClass.value.getter</span></div><div class="line">sil hidden [transparent] @_TFC4clos6aClassg5valueSi : $<span class="meta">@convention</span>(method) (@guaranteed aClass) -&gt; <span class="type">Int</span> &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// aClass.value.setter</span></div><div class="line">sil hidden [transparent] @_TFC4clos6aClasss5valueSi : $<span class="meta">@convention</span>(method) (<span class="type">Int</span>, @guaranteed aClass) -&gt; () &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="comment">// aClass.value.materializeForSet</span></div><div class="line">sil hidden [transparent] @_TFC4clos6aClassm5valueSi : $<span class="meta">@convention</span>(method) (<span class="type">Builtin</span>.<span class="type">RawPointer</span>, @<span class="keyword">inout</span> <span class="type">Builtin</span>.<span class="type">UnsafeValueBuffer</span>, @guaranteed aClass) -&gt; (<span class="type">Builtin</span>.<span class="type">RawPointer</span>, <span class="type">Optional</span>&lt;<span class="type">Builtin</span>.<span class="type">RawPointer</span>&gt;) &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">  @owned 修饰符表示这个对象将被调用者拥有。</div><div class="line">*/</div><div class="line"><span class="comment">// aClass.init() -&gt; aClass</span></div><div class="line">sil hidden @_TFC4clos6aClasscfT_S0_ : $<span class="meta">@convention</span>(method) (@owned aClass) -&gt; @owned aClass &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// aClass.__allocating_init() -&gt; aClass</span></div><div class="line">sil hidden @_TFC4clos6aClassCfT_S0_ : $<span class="meta">@convention</span>(method) (@thick aClass.<span class="type">Type</span>) -&gt; @owned aClass &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line">  接下面是闭包代码段</div><div class="line">*/</div><div class="line"><span class="comment">// (closure #1)</span></div><div class="line">sil shared @_TF4closU_FT_T_ : $<span class="meta">@convention</span>(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak <span class="type">Optional</span>&lt;aClass&gt;) -&gt; () &#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">/* 关于闭包的 SIL 代码， 见下文 */</span></div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"><span class="comment">/* </span></div><div class="line">  sil_vtable 定义所有关于 aClass 类的虚函数表。</div><div class="line">  sil_vtable 包含了期望的所有自动生成的方法。</div><div class="line">*/</div><div class="line">sil_vtable aClass &#123;</div><div class="line">  #aClass.<span class="keyword">deinit</span>!deallocator: _TFC4clos6aClassD	<span class="comment">// aClass.__deallocating_deinit</span></div><div class="line">  #aClass.value!getter.<span class="number">1</span>: _TFC4clos6aClassg5valueSi	<span class="comment">// aClass.value.getter</span></div><div class="line">  #aClass.value!setter.<span class="number">1</span>: _TFC4clos6aClasss5valueSi	<span class="comment">// aClass.value.setter</span></div><div class="line">  #aClass.value!materializeForSet.<span class="number">1</span>: _TFC4clos6aClassm5valueSi	<span class="comment">// aClass.value.materializeForSet</span></div><div class="line">  #aClass.<span class="keyword">init</span>!initializer.<span class="number">1</span>: _TFC4clos6aClasscfT_S0_	<span class="comment">// aClass.init() -&gt; aClass</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在回到主函数，看看两个类实例如何被获取到，并如何传递给调用他们的闭包。</p>
<p>在这里，所有标识都被重新整理，使得代码片段更加可读。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main</span></div><div class="line">sil @main : $<span class="meta">@convention</span>(<span class="built_in">c</span>) (<span class="type">Int32</span>, <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Optional</span>&lt;<span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int8</span>&gt;&gt;&gt;) -&gt; <span class="type">Int32</span> &#123;</div><div class="line"><span class="comment">// %0                                             // user: %4</span></div><div class="line"><span class="comment">// %1                                             // user: %10</span></div><div class="line">bb0(%<span class="number">0</span> : $<span class="type">Int32</span>, %<span class="number">1</span> : $<span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Optional</span>&lt;<span class="type">UnsafeMutablePointer</span>&lt;<span class="type">Int8</span>&gt;&gt;&gt;):</div><div class="line">  ...</div><div class="line">  <span class="comment">/*</span></div><div class="line">    全局变量的引用使用三个入口来放置。</div><div class="line">  */</div><div class="line">  %<span class="number">13</span> = global_addr @clos.c1 : $*aClass, loc <span class="string">"sample.swift"</span>:<span class="number">5</span>:<span class="number">5</span>, scope <span class="number">1</span> <span class="comment">// users: %26, %17</span></div><div class="line">  ...</div><div class="line">  %<span class="number">19</span> = global_addr @clos.c2 : $*aClass, loc <span class="string">"sample.swift"</span>:<span class="number">6</span>:<span class="number">5</span>, scope <span class="number">1</span> <span class="comment">// users: %32, %23</span></div><div class="line">  ...</div><div class="line">  %<span class="number">25</span> = global_addr @clos.fSpec : $*@callee_owned () -&gt; (), loc <span class="string">"sample.swift"</span>:<span class="number">8</span>:<span class="number">5</span>, scope <span class="number">1</span> <span class="comment">// users: %48, %45</span></div><div class="line">  <span class="comment">/*</span></div><div class="line">    c1 是 unowned_retained 的。</div><div class="line">    下面的指令增加变量的 unowned 引用计数。</div><div class="line">  */</div><div class="line">  %<span class="number">26</span> = load %<span class="number">13</span> : $*aClass, loc <span class="string">"sample.swift"</span>:<span class="number">9</span>:<span class="number">14</span>, scope <span class="number">2</span> <span class="comment">// user: %27</span></div><div class="line">  %<span class="number">27</span> = ref_to_unowned %<span class="number">26</span> : $aClass to $@sil_unowned aClass, loc <span class="string">"sample.swift"</span>:<span class="number">9</span>:<span class="number">14</span>, scope <span class="number">2</span> <span class="comment">// users: %47, %38, %39, %29, %28</span></div><div class="line">  unowned_retain %<span class="number">27</span> : $@sil_unowned aClass, loc <span class="string">"sample.swift"</span>:<span class="number">9</span>:<span class="number">14</span>, scope <span class="number">2</span> <span class="comment">// id: %28</span></div><div class="line">  store %<span class="number">27</span> to %<span class="number">2</span> : $*@sil_unowned aClass, loc <span class="string">"sample.swift"</span>:<span class="number">9</span>:<span class="number">14</span>, scope <span class="number">2</span> <span class="comment">// id: %29</span></div><div class="line">  <span class="comment">/*</span></div><div class="line">    对 c2 的处理会更加复杂一些。</div><div class="line">	alloc_box 创建了一个这个变量的引用数容器，变量将会存在这个容器的堆中。</div><div class="line">    容器创建以后，将会创建一个可选变量，指向 c2，并且可选变量会存储在容器里。容器会增加所包含值的技术，正如下面看到的一样，一旦容器被迁移，可选值就会被释放。</div><div class="line">    在这里，c2 的值将被存储在这个可选值中，对象将暂时strong_retained 然后释放。</div><div class="line">  */</div><div class="line">  %<span class="number">30</span> = alloc_box $@sil_weak <span class="type">Optional</span>&lt;aClass&gt;, <span class="keyword">var</span>, name <span class="string">"c2"</span>, loc <span class="string">"sample.swift"</span>:<span class="number">9</span>:<span class="number">23</span>, scope <span class="number">2</span> <span class="comment">// users: %46, %44, %43, %31</span></div><div class="line">  %<span class="number">31</span> = project_box %<span class="number">30</span> : $@box @sil_weak <span class="type">Optional</span>&lt;aClass&gt;, loc <span class="string">"sample.swift"</span>:<span class="number">9</span>:<span class="number">23</span>, scope <span class="number">2</span> <span class="comment">// user: %35</span></div><div class="line">  %<span class="number">32</span> = load %<span class="number">19</span> : $*aClass, loc <span class="string">"sample.swift"</span>:<span class="number">9</span>:<span class="number">23</span>, scope <span class="number">2</span> <span class="comment">// users: %34, %33</span></div><div class="line">  strong_retain %<span class="number">32</span> : $aClass, loc <span class="string">"sample.swift"</span>:<span class="number">9</span>:<span class="number">23</span>, scope <span class="number">2</span> <span class="comment">// id: %33</span></div><div class="line">  %<span class="number">34</span> = <span class="class"><span class="keyword">enum</span> <span class="title">$Optional</span>&lt;<span class="title">aClass</span>&gt;, #<span class="title">Optional</span>.<span class="title">some</span>!<span class="title">enumelt</span>.1, %32 : <span class="title">$aClass</span>, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":9:23, <span class="title">scope</span> 2 // <span class="title">users</span>: %36, %35</span></div><div class="line">  <span class="title">store_weak</span> %34 <span class="title">to</span> [<span class="title">initialization</span>] %31 : <span class="title">$</span>*@<span class="title">sil_weak</span> <span class="title">Optional</span>&lt;<span class="title">aClass</span>&gt;, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":9:23, <span class="title">scope</span> 2 // <span class="title">id</span>: %35</div><div class="line">  <span class="title">release_value</span> %34 : <span class="title">$Optional</span>&lt;<span class="title">aClass</span>&gt;, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":9:23, <span class="title">scope</span> 2 // <span class="title">id</span>: %36</div><div class="line">  /*</div><div class="line">    获取到闭包的引用。</div><div class="line">  */</div><div class="line">  // <span class="title">function_ref</span> (<span class="title">closure</span> #1)</div><div class="line">  %37 = <span class="title">function_ref</span> @<span class="title">sample</span>.(<span class="title">closure</span> #1) : <span class="title">$</span>@<span class="title">convention</span>(<span class="title">thin</span>) (@<span class="title">owned</span> @<span class="title">sil_unowned</span> <span class="title">aClass</span>, @<span class="title">owned</span> @<span class="title">box</span> @<span class="title">sil_weak</span> <span class="title">Optional</span>&lt;<span class="title">aClass</span>&gt;) -&gt; (), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":8:13, <span class="title">scope</span> 2 // <span class="title">user</span>: %44</div><div class="line">  /*</div><div class="line">    <span class="title">c1</span> 将被标记为 <span class="title">tagged</span>，并且变量变为 <span class="title">unowned_retained</span>。</div><div class="line">  */</div><div class="line">  <span class="title">strong_retain_unowned</span> %27 : <span class="title">$</span>@<span class="title">sil_unowned</span> <span class="title">aClass</span>, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":8:13, <span class="title">scope</span> 2 // <span class="title">id</span>: %38</div><div class="line">  %39 = <span class="title">unowned_to_ref</span> %27 : <span class="title">$</span>@<span class="title">sil_unowned</span> <span class="title">aClass</span> <span class="title">to</span> <span class="title">$aClass</span>, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":8:13, <span class="title">scope</span> 2 // <span class="title">users</span>: %42, %40</div><div class="line">  %40 = <span class="title">ref_to_unowned</span> %39 : <span class="title">$aClass</span> <span class="title">to</span> <span class="title">$</span>@<span class="title">sil_unowned</span> <span class="title">aClass</span>, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":8:13, <span class="title">scope</span> 2 // <span class="title">users</span>: %44, %41</div><div class="line">  <span class="title">unowned_retain</span> %40 : <span class="title">$</span>@<span class="title">sil_unowned</span> <span class="title">aClass</span>, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":8:13, <span class="title">scope</span> 2 // <span class="title">id</span>: %41</div><div class="line">  <span class="title">strong_release</span> %39 : <span class="title">$aClass</span>, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":8:13, <span class="title">scope</span> 2 // <span class="title">id</span>: %42</div><div class="line">  /*</div><div class="line">    包含 <span class="title">c2</span> 的可选值容器是 <span class="title">strong_retained</span> 的。</div><div class="line">  */</div><div class="line">  <span class="title">strong_retain</span> %30 : <span class="title">$</span>@<span class="title">box</span> @<span class="title">sil_weak</span> <span class="title">Optional</span>&lt;<span class="title">aClass</span>&gt;, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":8:13, <span class="title">scope</span> 2 // <span class="title">id</span>: %43</div><div class="line">  /*</div><div class="line">    创建一个闭包对象，绑定方法到参数中。</div><div class="line">  */</div><div class="line">  %44 = <span class="title">partial_apply</span> %37(%40, %30) : <span class="title">$</span>@<span class="title">convention</span>(<span class="title">thin</span>) (@<span class="title">owned</span> @<span class="title">sil_unowned</span> <span class="title">aClass</span>, @<span class="title">owned</span> @<span class="title">box</span> @<span class="title">sil_weak</span> <span class="title">Optional</span>&lt;<span class="title">aClass</span>&gt;) -&gt; (), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":8:13, <span class="title">scope</span> 2 // <span class="title">user</span>: %45</div><div class="line">  <span class="title">store</span> %44 <span class="title">to</span> %25 : <span class="title">$</span>*@<span class="title">callee_owned</span> () -&gt; (), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":8:13, <span class="title">scope</span> 2 // <span class="title">id</span>: %45</div><div class="line">  /*</div><div class="line">    </div><div class="line">    对 <span class="title">c1</span> 和 <span class="title">c2</span> 的容器变量进行释放（使用 对应匹配的 *<span class="title">_release</span> 方法）。</div><div class="line">  */</div><div class="line">  <span class="title">strong_release</span> %30 : <span class="title">$</span>@<span class="title">box</span> @<span class="title">sil_weak</span> <span class="title">Optional</span>&lt;<span class="title">aClass</span>&gt;, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":14:1, <span class="title">scope</span> 2 // <span class="title">id</span>: %46</div><div class="line">  <span class="title">unowned_release</span> %27 : <span class="title">$</span>@<span class="title">sil_unowned</span> <span class="title">aClass</span>, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":9:14, <span class="title">scope</span> 2 // <span class="title">id</span>: %47</div><div class="line">  /*</div><div class="line">     加载原先存储的闭包对象，增加强引用然后调用它。</div><div class="line">  */</div><div class="line">   %48 = <span class="title">load</span> %25 : <span class="title">$</span>*@<span class="title">callee_owned</span> () -&gt; (), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":17:1, <span class="title">scope</span> 2 // <span class="title">users</span>: %50, %49</div><div class="line">  <span class="title">strong_retain</span> %48 : <span class="title">$</span>@<span class="title">callee_owned</span> () -&gt; (), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":17:1, <span class="title">scope</span> 2 // <span class="title">id</span>: %49</div><div class="line">  %50 = <span class="title">apply</span> %48() : <span class="title">$</span>@<span class="title">callee_owned</span> () -&gt; (), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":17:7, <span class="title">scope</span> 2</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>闭包有一个更加复杂的结构：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">  闭包参数被标记为 @sil, 指定参数如何被计数，有一个 unowned 的 aClass 类变量 c2, 和另外一个包含 c2 的可选值容器。</div><div class="line">*/</div><div class="line"><span class="comment">// (closure #1)</span></div><div class="line">sil shared @clos.fSpec: $<span class="meta">@convention</span>(thin) (@owned @sil_unowned aClass, @owned @box @sil_weak <span class="type">Optional</span>&lt;aClass&gt;) -&gt; () &#123;</div><div class="line"><span class="comment">// %0                                             // users: %24, %6, %5, %2</span></div><div class="line"><span class="comment">// %1                                             // users: %23, %3</span></div><div class="line"><span class="comment">/*</span></div><div class="line">  下面的函数包含三块，后面两块的执行依赖可选值 c2 具体的值。</div><div class="line">*/</div><div class="line">bb0(%<span class="number">0</span> : $@sil_unowned aClass, %<span class="number">1</span> : $@box @sil_weak <span class="type">Optional</span>&lt;aClass&gt;):</div><div class="line">...</div><div class="line">  <span class="comment">/*</span></div><div class="line">    c1 被强计数。</div><div class="line">  */</div><div class="line">  strong_retain_unowned %<span class="number">0</span> : $@sil_unowned aClass, loc <span class="string">"sample.swift"</span>:<span class="number">10</span>:<span class="number">5</span>, scope <span class="number">17</span> <span class="comment">// id: %5</span></div><div class="line">  %<span class="number">6</span> = unowned_to_ref %<span class="number">0</span> : $@sil_unowned aClass to $aClass, loc <span class="string">"sample.swift"</span>:<span class="number">10</span>:<span class="number">5</span>, scope <span class="number">17</span> <span class="comment">// users: %11, %10, %9</span></div><div class="line">  <span class="comment">/*</span></div><div class="line">    使用内部自带包，传入一个整型字面量到整型结构中，初始化了一个值为 42 的整型值。</div><div class="line">    这个值将被设置为 c1 的新值，完成以后这个变量将会被释放。</div><div class="line">    在这里，我们第一次看到 class_method 指令，用于获取 vtable 中的函数引用。</div><div class="line">  */</div><div class="line">  %<span class="number">7</span> = integer_literal $<span class="type">Builtin</span>.<span class="type">Int64</span>, <span class="number">42</span>, loc <span class="string">"sample.swift"</span>:<span class="number">10</span>:<span class="number">16</span>, scope <span class="number">17</span> <span class="comment">// user: %8</span></div><div class="line">  %<span class="number">8</span> = <span class="class"><span class="keyword">struct</span> <span class="title">$Int</span> (%7 : <span class="title">$Builtin</span>.<span class="title">Int64</span>), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":10:16, <span class="title">scope</span> 17 // <span class="title">user</span>: %10</span></div><div class="line">  %9 = <span class="title">class_method</span> %6 : <span class="title">$aClass</span>, #<span class="title">aClass</span>.<span class="title">value</span>!<span class="title">setter</span>.1 : (<span class="title">aClass</span>) -&gt; (<span class="title">Int</span>) -&gt; () , <span class="title">$</span>@<span class="title">convention</span>(<span class="title">method</span>) (<span class="title">Int</span>, @<span class="title">guaranteed</span> <span class="title">aClass</span>) -&gt; (), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":10:14, <span class="title">scope</span> 17 // <span class="title">user</span>: %10</div><div class="line">  %10 = <span class="title">apply</span> %9(%8, %6) : <span class="title">$</span>@<span class="title">convention</span>(<span class="title">method</span>) (<span class="title">Int</span>, @<span class="title">guaranteed</span> <span class="title">aClass</span>) -&gt; (), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":10:14, <span class="title">scope</span> 17</div><div class="line">  <span class="title">strong_release</span> %6 : <span class="title">$aClass</span>, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":10:16, <span class="title">scope</span> 17 // <span class="title">id</span>: %11</div><div class="line">  /*</div><div class="line">    接下来讨论 <span class="title">c2</span>。</div><div class="line">    获取可选值，然后根据它的内容执行接下来的分支语句。</div><div class="line"></div><div class="line">    <span class="title">If</span> <span class="title">the</span> <span class="title">optional</span> <span class="title">has</span> <span class="title">a</span> <span class="title">value</span> <span class="title">the</span> <span class="title">bb2</span> <span class="title">block</span> <span class="title">will</span> <span class="title">be</span> <span class="title">executed</span> <span class="title">before</span> <span class="title">jumping</span> </div><div class="line">    <span class="title">to</span> <span class="title">bb3</span>, <span class="title">if</span> <span class="title">it</span> <span class="title">doesn</span>'<span class="title">t</span> <span class="title">after</span> <span class="title">a</span> <span class="title">brief</span> <span class="title">jump</span> <span class="title">to</span> <span class="title">bb1</span>, <span class="title">the</span> <span class="title">function</span> <span class="title">will</span> <span class="title">proceed</span> <span class="title">to</span> <span class="title">bb3</span> <span class="title">releasing</span></div><div class="line">    <span class="title">the</span> <span class="title">retained</span> <span class="title">parameters</span>.</div><div class="line">    </div><div class="line">  */</div><div class="line">  %12 = <span class="title">load_weak</span> %3 : <span class="title">$</span>*@<span class="title">sil_weak</span> <span class="title">Optional</span>&lt;<span class="title">aClass</span>&gt;, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":11:18, <span class="title">scope</span> 18 // <span class="title">user</span>: %13</div><div class="line">  <span class="title">switch_enum</span> %12 : <span class="title">$Optional</span>&lt;<span class="title">aClass</span>&gt;, <span class="title">case</span> #<span class="title">Optional</span>.<span class="title">some</span>!<span class="title">enumelt</span>.1: <span class="title">bb2</span>, <span class="title">default</span> <span class="title">bb1</span>, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":11:18, <span class="title">scope</span> 18 // <span class="title">id</span>: %13</div><div class="line">  <span class="title">bb1</span>:                                              // <span class="title">Preds</span>: <span class="title">bb0</span></div><div class="line">  /*</div><div class="line">    跳转到闭包的结尾。</div><div class="line">  */</div><div class="line">  <span class="title">br</span> <span class="title">bb3</span>, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":11:18, <span class="title">scope</span> 16        // <span class="title">id</span>: %14</div><div class="line"></div><div class="line">// %15                                            // <span class="title">users</span>: %21, %20, %19, %16</div><div class="line"><span class="title">bb2</span>(%15 : <span class="title">$aClass</span>):                               // <span class="title">Preds</span>: <span class="title">bb0</span></div><div class="line">  /*</div><div class="line">    调用 <span class="title">aClass</span> 的 <span class="title">setter</span>，设置它的值为 42.</div><div class="line">  */</div><div class="line">  ...</div><div class="line">  %17 = <span class="title">integer_literal</span> <span class="title">$Builtin</span>.<span class="title">Int64</span>, 42, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":12:21, <span class="title">scope</span> 19 // <span class="title">user</span>: %18</div><div class="line">  %18 = <span class="title">struct</span> <span class="title">$Int</span> (%17 : <span class="title">$Builtin</span>.<span class="title">Int64</span>), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":12:21, <span class="title">scope</span> 19 // <span class="title">user</span>: %20</div><div class="line">  %19 = <span class="title">class_method</span> %15 : <span class="title">$aClass</span>, #<span class="title">aClass</span>.<span class="title">value</span>!<span class="title">setter</span>.1 : (<span class="title">aClass</span>) -&gt; (<span class="title">Int</span>) -&gt; () , <span class="title">$</span>@<span class="title">convention</span>(<span class="title">method</span>) (<span class="title">Int</span>, @<span class="title">guaranteed</span> <span class="title">aClass</span>) -&gt; (), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":12:19, <span class="title">scope</span> 19 // <span class="title">user</span>: %20</div><div class="line">  %20 = <span class="title">apply</span> %19(%18, %15) : <span class="title">$</span>@<span class="title">convention</span>(<span class="title">method</span>) (<span class="title">Int</span>, @<span class="title">guaranteed</span> <span class="title">aClass</span>) -&gt; (), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":12:19, <span class="title">scope</span> 19</div><div class="line">  <span class="title">strong_release</span> %15 : <span class="title">$aClass</span>, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":13:5, <span class="title">scope</span> 18 // <span class="title">id</span>: %21</div><div class="line">  <span class="title">br</span> <span class="title">bb3</span>, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":13:5, <span class="title">scope</span> 18         // <span class="title">id</span>: %22</div><div class="line"></div><div class="line"><span class="title">bb3</span>:                                              // <span class="title">Preds</span>: <span class="title">bb1</span> <span class="title">bb2</span></div><div class="line">  /*</div><div class="line">    释放所有获取的变量然后返回。</div><div class="line">  */</div><div class="line">  <span class="title">strong_release</span> %1 : <span class="title">$</span>@<span class="title">box</span> @<span class="title">sil_weak</span> <span class="title">Optional</span>&lt;<span class="title">aClass</span>&gt;, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":14:1, <span class="title">scope</span> 17 // <span class="title">id</span>: %23</div><div class="line">  <span class="title">unowned_release</span> %0 : <span class="title">$</span>@<span class="title">sil_unowned</span> <span class="title">aClass</span>, <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":14:1, <span class="title">scope</span> 17 // <span class="title">id</span>: %24</div><div class="line">  %25 = <span class="title">tuple</span> (), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":14:1, <span class="title">scope</span> 17 // <span class="title">user</span>: %26</div><div class="line">  <span class="title">return</span> %25 : <span class="title">$</span>(), <span class="title">loc</span> "<span class="title">sample</span>.<span class="title">swift</span>":14:1, <span class="title">scope</span> 17 // <span class="title">id</span>: %26</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里，忽略掉不同的 ARC 指令带来的性能的差异点，对不同阶段每种类型的捕获变量做一个快速的对比：</p>
<table>
<thead>
<tr>
<th>动作</th>
<th>Unowned</th>
<th>Weak</th>
</tr>
</thead>
<tbody>
<tr>
<td>预先调用 #1</td>
<td>对象进行 unowned_retain</td>
<td>创建一个容器，并且对象进行 strong_retain 操作。创建一个可选值，存入到容器中，然后释放可选值</td>
</tr>
<tr>
<td>预先调用 #2</td>
<td>strong_retain_unowned，unowned_retain 和 strong_release</td>
<td>strong_retain</td>
</tr>
<tr>
<td>闭包执行</td>
<td>strong_retain_unowned，unowned_release</td>
<td>load_weak, 打开可选值, strong_release</td>
</tr>
<tr>
<td>调用之后</td>
<td>unowned_release</td>
<td>strong_release</td>
</tr>
</tbody>
</table>
<p>正如上面看到的 SIL 代码段那样，处理 weak 引用会涉及到更多的工作，因为需要处理引用需要的可选值。</p>
<p>参照官方文档的描述，这里对涉及到的所有 ARC 指令做一个简要的解释：</p>
<ul>
<li>unowned_retain：增加堆对象中的 unowned 引用计数。</li>
<li>strong_retain_unowned ：断言对象的强引用计数大于 0，然后增加这个引用计数。</li>
<li>strong_retain：增加对象的强引用计数。</li>
<li>load_weak：不是真正的 ARC 调用，但是它将增加可选值指向对象的强引用计数。</li>
<li>strong_release：减少对象的强引用计数。如果释放操作把对象强引用计数变为0，对象将被销毁，然后弱引用将被清除。当整个强引用计数和 unowned 引用计数都为0时，对象的内存才会被释放。</li>
<li>unowned_release：减少对象的 unowned 引用计数。当整个强引用计数和 unowned 引用计数都为 0 时，对象的内存才会被释放。</li>
</ul>
<p>接下来深入到 Swift 运行时看看，这些指令都是如何被实现的，相关的代码文件有：HeapObject.cpp，HeapObject.h，RefCount.h 和 Heap.cpp、 SwiftObject.mm 中的少量定义。容器实现可以在 MetadataImpl.h 找到，但是本文不展开讨论。</p>
<p>这些文件中定义大多数的 ARC 方法都有三种变体，一种是对 Swift 对象的基础实现，另外两种实现是针对非原生 Swift 对象的：桥接对象和未知对象。后面两种变体这里不予讨论。</p>
<p>第一个讨论指令集和 unowned 引用相关。</p>
<p>在 HeapObject.cpp 文件中间可以看到对 unowned_retain 和 unowned_release 的实现方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="type">SWIFT_RT_ENTRY_VISIBILITY</span></div><div class="line">void swift::swift_unownedRetain(<span class="type">HeapObject</span> *object)</div><div class="line">    <span class="type">SWIFT_CC</span>(<span class="type">RegisterPreservingCC_IMPL</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (!object)</div><div class="line">    <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  object-&gt;weakRefCount.increment();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">SWIFT_RT_ENTRY_VISIBILITY</span></div><div class="line">void swift::swift_unownedRelease(<span class="type">HeapObject</span> *object)</div><div class="line">    <span class="type">SWIFT_CC</span>(<span class="type">RegisterPreservingCC_IMPL</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (!object)</div><div class="line">    <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (object-&gt;weakRefCount.decrementShouldDeallocate()) &#123;</div><div class="line">    <span class="comment">// Only class objects can be weak-retained and weak-released.</span></div><div class="line">    auto metadata = object-&gt;metadata;</div><div class="line">    <span class="built_in">assert</span>(metadata-&gt;isClassObject());</div><div class="line">    auto classMetadata = static_cast&lt;const <span class="type">ClassMetadata</span>*&gt;(metadata);</div><div class="line">    <span class="built_in">assert</span>(classMetadata-&gt;isTypeMetadata());</div><div class="line">    <span class="type">SWIFT_RT_ENTRY_CALL</span>(swift_slowDealloc)</div><div class="line">        (object, classMetadata-&gt;getInstanceSize(),</div><div class="line">         classMetadata-&gt;getInstanceAlignMask());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>swift_unownedRetain 是 unowned_retain 的具体实现，简单地进行 unowned 引用计数的原子增加操作（这里定义为weakRefCount），swift_unownedRelease 更加复杂，原因之前也描述过，当没有其他 unowned 引用存在时，它需要执行对象的析构操作。</p>
<p>但是整体来讲都不复杂，在这里可以看到 doDecrementShouldDeallocate 方法，这个方法在上面代码中被一个命名类似的方法调用了。这个方法没有做太多，swift_slowDealloc 只是释放给定的指针。</p>
<p>到此已经有了一个对象的 unowned 引用，另外一个指令，strong_retain_unowned 用来创建一个强引用：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="type">SWIFT_RT_ENTRY_VISIBILITY</span></div><div class="line">void swift::swift_unownedRetainStrong(<span class="type">HeapObject</span> *object)</div><div class="line">    <span class="type">SWIFT_CC</span>(<span class="type">RegisterPreservingCC_IMPL</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (!object)</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  <span class="built_in">assert</span>(object-&gt;weakRefCount.getCount() &amp;&amp;</div><div class="line">         <span class="string">"object is not currently weakly retained"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (! object-&gt;refCount.tryIncrement())</div><div class="line">    _swift_abortRetainUnowned(object);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为弱引用应该指向了这个对象，要使用断言来验证对象是否被弱引用，一旦断言通过，将尝试进行增加强引用计数的操作。一旦对象在进程中已经被释放，尝试将会失败。</p>
<p>所有类似于 tryIncrement 通过某种形式修改引用计数的方法都放到 RefCount.h 中，需要使用原子操作进行这些任务。</p>
<p>接下来讨论下 weak 引用的的实现，正如之前看到的那样，swift_weakLoadStrong 用来获取容器中可选值中强引用的对象。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="type">HeapObject</span> *swift::swift_weakLoadStrong(<span class="type">WeakReference</span> *ref) &#123;</div><div class="line">  <span class="keyword">if</span> (ref-&gt;<span class="type">Value</span> == (uintptr_t)nullptr) &#123;</div><div class="line">    <span class="keyword">return</span> nullptr;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// ref 可能被其他线程访问</span></div><div class="line">  auto ptr = __atomic_fetch_or(&amp;ref-&gt;<span class="type">Value</span>, <span class="type">WR_READING</span>, __ATOMIC_RELAXED);</div><div class="line">  <span class="keyword">while</span> (ptr &amp; <span class="type">WR_READING</span>) &#123;</div><div class="line">    short <span class="built_in">c</span> = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (__atomic_load_n(&amp;ref-&gt;<span class="type">Value</span>, __ATOMIC_RELAXED) &amp; <span class="type">WR_READING</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (++<span class="built_in">c</span> == <span class="type">WR_SPINLIMIT</span>) &#123;</div><div class="line">        std::this_thread::yield();</div><div class="line">        <span class="built_in">c</span> -= <span class="number">1</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    ptr = __atomic_fetch_or(&amp;ref-&gt;<span class="type">Value</span>, <span class="type">WR_READING</span>, __ATOMIC_RELAXED);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  auto object = (<span class="type">HeapObject</span>*)(ptr &amp; ~<span class="type">WR_NATIVE</span>);</div><div class="line">  <span class="keyword">if</span> (object == nullptr) &#123;</div><div class="line">    __atomic_store_n(&amp;ref-&gt;<span class="type">Value</span>, (uintptr_t)nullptr, __ATOMIC_RELAXED);</div><div class="line">    <span class="keyword">return</span> nullptr;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (object-&gt;refCount.isDeallocating()) &#123;</div><div class="line">    __atomic_store_n(&amp;ref-&gt;<span class="type">Value</span>, (uintptr_t)nullptr, __ATOMIC_RELAXED);</div><div class="line">    <span class="type">SWIFT_RT_ENTRY_CALL</span>(swift_unownedRelease)(object);</div><div class="line">    <span class="keyword">return</span> nullptr;</div><div class="line">  &#125;</div><div class="line">  auto result = swift_tryRetain(object);</div><div class="line">  __atomic_store_n(&amp;ref-&gt;<span class="type">Value</span>, ptr, __ATOMIC_RELAXED);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个实现中，获取一个强引用需要更多复杂同步操作，在多线程竞争严重的情况下，会带来性能损耗。</p>
<p>在这里第一次出现的 WeakReference 对象，是一个简单的结构体，包含一个整型值字段指向目标对象，目标对象是使用 HeapObject 类来承载的每一个运行时的 Swift 对象。</p>
<p>在 weak 引用询问当前线程设置的 WR_READING 标识之后，从 WeakReference 容器中获取 Swift 对象，如果对象不再有效，或者在等待获取资源时，它变成可以进行析构，当前的引用会被设置为 null。</p>
<p>如果对象依然有效，获取对象的尝试将会成功。</p>
<p>因此，从这个角度来讲，对 weak 引用的常规操作性能比 unowned 引用的更低（但是主要的问题还是在可选值操作上面）。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>保守的使用 weak 引用是否明智呢？答案是否定的，无论是从性能的角度还是代码清晰的角度而言。</p>
<p>使用正确的捕获修饰符类型，明确的表明代码中的生命周期特性，当其他人或者你自己在读你的代码时不容易误解。</p>
<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>1、苹果第一次讨论 weak/unowned 争议可以查看这里，之后在 twitter 上 Joe Groff 对此也进行了讨论，并且被 Michael Tsai 总结成文。<br>这篇文章从意图角度出发，提供了完整并且可操作的解释。</p>
<p>2、从维基百科中可以找到关于 AST 的解释，还可以从 Slava Pestov 的这篇文章中看到关于 Swift 编译器中如何实现 AST 的一些细节。</p>
<p>3、关于 SIL 的更多信息，请查看详尽的官方 SIL 指南，还有 2015 LLVM 开发者会议的视频。Lex Chou 写的 SIL 快速指南可以点击这里查看。</p>
<p>4、查看在 Swift 中如何进行名称粉碎（name mangling）的细节，请查看 Lex Chou 的这篇文章。</p>
<p>5、Mike Ash 在他的 Friday Q&amp;A 中的一篇文章中讨论了如何实现 weak 引用的一种实践方法，这种方法与目前 Swift 的方法对比起来有一些过时，但是其中的解释依然值得参考。</p>
<blockquote>
<p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg。" target="_blank" rel="external">http://swift.gg。</a></p>
</blockquote>
<hr>
<p>文章转自 <a href="http://swift.gg/2017/05/16/unowned-or-weak-lifetime-and-performance/" target="_blank" rel="external">SwiftGG</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作者：Umberto Raimondi，原文链接，原文日期：2016-10-27&lt;br&gt;译者：shanks；校对：Crystal Sun；定稿：CMB&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每当处理循环引用（retain cycles）时，需要考量对象生命周期来选择unowned或者weak标识符，这已经成为了一个共识。但是有时仍然会心存疑问，在具体的使用中应该选择哪一个，或者退一步讲，保守的只使用 weak 是不是一个好的选择呢？&lt;/p&gt;
&lt;p&gt;本文首先对循环引用的基础知识做一个简要介绍，然后会分析 Swift 源代码的一些片段，讲解 unowned 和 weak 在生命周期和性能上的差异点，希望看完本文以后，在的使用场景中，能使用正确的弱引用类型。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="Unowned与Weak" scheme="https://madordie.github.io/tags/Unowned%E4%B8%8EWeak/"/>
    
  </entry>
  
  <entry>
    <title>侧滑导航栏消失问题笔记</title>
    <link href="https://madordie.github.io/post/push-pop-navigation-bar-hidden/"/>
    <id>https://madordie.github.io/post/push-pop-navigation-bar-hidden/</id>
    <published>2017-05-16T04:16:47.000Z</published>
    <updated>2017-10-11T03:37:32.533Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>如果前页面和后页面不同，则会出现轻微侧滑时导航栏莫名其妙没了😂</p>
<p><a href="https://github.com/madordie/Demo-PushAndPop" target="_blank" rel="external">Demo-PushAndPop</a></p>
<a id="more"></a>
<h2 id="Demo-PushAndPop"><a href="#Demo-PushAndPop" class="headerlink" title="Demo-PushAndPop"></a>Demo-PushAndPop</h2><p>[已解决] 隐藏导航栏+改变状态栏样式时出现导航栏莫名其妙没了</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="https://github.com/madordie/Demo-PushAndPop/blob/master/Untitled.gif?raw=true" alt="snapshot"></p>
<p>当<code>ViewController.swift</code>实现<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="keyword">var</span> preferredStatusBarStyle: <span class="type">UIStatusBarStyle</span> &#123;</div><div class="line">    <span class="keyword">return</span> .lightContent</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>时，两个<code>ViewController</code>对应的<code>UIStatusBarStyle</code>不同，则会出现如上图。<code>UIStatusBarStyle</code>一致则正常。</p>
<h2 id="解决关键"><a href="#解决关键" class="headerlink" title="解决关键"></a>解决关键</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavigationController</span>: <span class="title">UINavigationController</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> childViewControllerForStatusBarStyle: <span class="type">UIViewController</span>? &#123;</div><div class="line">        <span class="keyword">return</span> topViewController</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只需要将<code>childViewControllerForStatusBarStyle</code>设置为<code>UINavigationController.topViewController</code>即可。</p>
<h2 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h2><p>附上<code>BViewController</code>中相关代码。在切换的两个<code>UIViewController</code>的<code>preferredStatusBarStyle</code>一样时，不需要设置<code>UINavigationController.childViewControllerForStatusBarStyle</code>。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> navigationBarHidden = <span class="literal">false</span></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewWillAppear(animated)</div><div class="line"></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> navigationController = navigationController  <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> navigationController.isNavigationBarHidden != navigationBarHidden &#123;</div><div class="line">            navigationController.setNavigationBarHidden(navigationBarHidden, animated: animated)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewWillDisappear(animated)</div><div class="line"></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> navigationController = navigationController  <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> last = navigationController.viewControllers.last <span class="keyword">as</span>? <span class="type">BViewController</span> <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> last.navigationBarHidden != navigationBarHidden &#123;</div><div class="line">            navigationController.setNavigationBarHidden(last.navigationBarHidden, animated: animated)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><ul>
<li>@木头 <code>viewWillAppear</code>更换为<code>viewDidAppear</code>然后调试，在Demo中测试也可以曲线救国。</li>
<li>@Harry 提供的终极大法～</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果前页面和后页面不同，则会出现轻微侧滑时导航栏莫名其妙没了😂&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/madordie/Demo-PushAndPop&quot;&gt;Demo-PushAndPop&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="DEBUG" scheme="https://madordie.github.io/tags/DEBUG/"/>
    
  </entry>
  
  <entry>
    <title>「转」iOS图片加载速度极限优化—FastImageCache解析</title>
    <link href="https://madordie.github.io/post/bang-fastimagecache/"/>
    <id>https://madordie.github.io/post/bang-fastimagecache/</id>
    <published>2017-05-16T02:55:00.000Z</published>
    <updated>2017-10-10T05:34:24.597Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>原文：<a href="http://blog.cnbang.net/tech/2578/" target="_blank" rel="external">iOS图片加载速度极限优化—FastImageCache解析</a></p>
<p><a href="https://github.com/path/FastImageCache" target="_blank" rel="external">FastImageCache</a>是Path团队开发的一个开源库，用于提升图片的加载和渲染速度，让基于图片的列表滑动起来更顺畅，来看看它是怎么做的。</p>
<a id="more"></a>
<h2 id="优化点"><a href="#优化点" class="headerlink" title="优化点"></a>优化点</h2><p>iOS从磁盘加载一张图片，使用UIImageVIew显示在屏幕上，需要经过以下步骤：</p>
<ol>
<li>从磁盘拷贝数据到内核缓冲区</li>
<li>从内核缓冲区复制数据到用户空间</li>
<li>生成UIImageView，把图像数据赋值给UIImageView</li>
<li>如果图像数据为未解码的PNG/JPG，解码为位图数据</li>
<li>CATransaction捕获到UIImageView layer树的变化</li>
<li>主线程Runloop提交CATransaction，开始进行图像渲染<br> 6.1 如果数据没有字节对齐，Core Animation会再拷贝一份数据，进行字节对齐。<br> 6.2 GPU处理位图数据，进行渲染。</li>
</ol>
<p>FastImageCache分别优化了2,4,6.1三个步骤：</p>
<ol>
<li>使用mmap内存映射，省去了上述第2步数据从内核空间拷贝到用户空间的操作。</li>
<li>缓存解码后的位图数据到磁盘，下次从磁盘读取时省去第4步解码的操作。</li>
<li>生成字节对齐的数据，防止上述第6.1步CoreAnimation在渲染时再拷贝一份数据。</li>
</ol>
<p>接下来具体介绍这三个优化点以及它的实现。</p>
<h3 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h3><p>平常我们读取磁盘上的一个文件，上层API调用到最后会使用系统方法read()读取数据，内核把磁盘数据读入内核缓冲区，用户再从内核缓冲区读取数据复制到用户内存空间，这里有一次内存拷贝的时间消耗，并且读取后整个文件数据就已经存在于用户内存中，占用了进程的内存空间。</p>
<p>FastImageCache采用了另一种读写文件的方法，就是用mmap把文件映射到用户空间里的虚拟内存，文件中的位置在虚拟内存中有了对应的地址，可以像操作内存一样操作这个文件，相当于已经把整个文件放入内存，但在真正使用到这些数据前却不会消耗物理内存，也不会有读写磁盘的操作，只有真正使用这些数据时，也就是图像准备渲染在屏幕上时，虚拟内存管理系统VMS才根据缺页加载的机制从磁盘加载对应的数据块到物理内存，再进行渲染。这样的文件读写文件方式少了数据从内核缓存到用户空间的拷贝，效率很高。</p>
<h3 id="解码图像"><a href="#解码图像" class="headerlink" title="解码图像"></a>解码图像</h3><p>一般我们使用的图像是JPG/PNG，这些图像数据不是位图，而是是经过编码压缩后的数据，使用它渲染到屏幕之前需要进行解码转成位图数据，这个解码操作是比较耗时的，并且没有GPU硬解码，只能通过CPU，iOS默认会在主线程对图像进行解码。很多库都解决了图像解码的问题，不过由于解码后的图像太大，一般不会缓存到磁盘，SDWebImage的做法是把解码操作从主线程移到子线程，让耗时的解码操作不占用主线程的时间。</p>
<p>FastImageCache也是在子线程解码图像，不同的是它会缓存解码后的图像到磁盘。因为解码后的图像体积很大，FastImageCache对这些图像数据做了系列缓存管理，详见下文实现部分。另外缓存的图像体积大也是使用内存映射读取文件的原因，小文件使用内存映射无优势，内存拷贝的量少，拷贝后占用用户内存也不高，文件越大内存映射优势越大。</p>
<h3 id="字节对齐"><a href="#字节对齐" class="headerlink" title="字节对齐"></a>字节对齐</h3><p>Core Animation在图像数据非字节对齐的情况下渲染前会先拷贝一份图像数据，官方文档没有对这次拷贝行为作说明，模拟器和Instrument里有高亮显示“copied images”的功能，但似乎它有bug，即使某张图片没有被高亮显示出渲染时被copy，从调用堆栈上也还是能看到调用了CA::Render::copy_image方法：</p>
<p><img src="/images/fastImageCache1.png" alt="fastImageCache1"></p>
<p>那什么是字节对齐呢，按我的理解，为了性能，底层渲染图像时不是一个像素一个像素渲染，而是一块一块渲染，数据是一块块地取，就可能遇到这一块连续的内存数据里结尾的数据不是图像的内容，是内存里其他的数据，可能越界读取导致一些奇怪的东西混入，所以在渲染之前CoreAnimation要把数据拷贝一份进行处理，确保每一块都是图像数据，对于不足一块的数据置空。大致图示：(pixel是图像像素数据，data是内存里其他数据)</p>
<p><img src="/images/fastImageCache2.png" alt="fastImageCache2"></p>
<p>块的大小应该是跟CPU cache line有关，ARMv7是32byte，A9是64byte，在A9下CoreAnimation应该是按64byte作为一块数据去读取和渲染，让图像数据对齐64byte就可以避免CoreAnimation再拷贝一份数据进行修补。FastImageCache做的字节对齐就是这个事情。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>FastImageCache把同个类型和尺寸的图像都放在一个文件里，根据文件偏移取单张图片，类似web的css雪碧图，这里称为ImageTable。这样做主要是为了方便统一管理图片缓存，控制缓存的大小，整个FastImageCache就是在管理一个个ImageTable的数据。整体实现的数据结构如图：</p>
<p><img src="/images/fastImageCache3.png" alt="fastImageCache3"></p>
<p>一些补充和说明：</p>
<h3 id="ImageTable"><a href="#ImageTable" class="headerlink" title="ImageTable"></a>ImageTable</h3><ol>
<li>一个ImageFormat对应一个ImageTable，ImageFormat指定了ImageTable里图像渲染格式/大小等信息，ImageTable里的图像数据都由ImageFormat规定了统一的尺寸，每张图像大小都是一样的。</li>
<li>一个ImageTable一个实体文件，并有另一个文件保存这个ImageTable的meta信息。</li>
<li>图像使用entityUUID作为唯一标示符，由用户定义，通常是图像url的hash值。ImageTable Meta的indexMap记录了entityUUID-&gt;entryIndex的映射，通过indexMap就可以用图像的entityUUID找到缓存数据在ImageTable对应的位置。</li>
</ol>
<h3 id="ImageTableEntry"><a href="#ImageTableEntry" class="headerlink" title="ImageTableEntry"></a>ImageTableEntry</h3><ol>
<li>ImageTable的实体数据是ImageTableEntry，每个entry有两部分数据，一部分是对齐后的图像数据，另一部分是meta信息，meta保存这张图像的UUID和原图UUID，用于校验图像数据的正确性。</li>
<li>Entry数据是按内存分页大小对齐的，数据大小是内存分页大小的整数倍，这样可以保证虚拟内存缺页加载时使用最少的内存页加载一张图像。</li>
<li>图像数据做了字节对齐处理，CoreAnimation使用时无需再处理拷贝。具体做法是CGBitmapContextCreate创建位图画布时bytesPerRow参数传64倍数。</li>
</ol>
<h3 id="Chunk"><a href="#Chunk" class="headerlink" title="Chunk"></a>Chunk</h3><ul>
<li>ImageTable和实体数据Entry间多了层Chunk，Chunk是逻辑上的数据划分，N个Entry作为一个Chunk，内存映射mmap操作是以chunk为单位的，每一个chunk执行一次mmap把这个chunk的内容映射到虚拟内存。为什么要多一层chunk呢，按我的理解，这样做是为了灵活控制mmap的大小和调用次数，若对整个ImageTable执行mmap，载入虚拟内存的文件过大，若对每个Entry做mmap，调用次数会太多。</li>
</ul>
<h3 id="缓存管理"><a href="#缓存管理" class="headerlink" title="缓存管理"></a>缓存管理</h3><ul>
<li>用户可以定义整个ImageTable里最大缓存的图像数量，在有新图像需要缓存时，如果缓存没有超过限制，会以chunk为单位扩展文件大小，顺序写下去。如果已超过最大缓存限制，会把最少使用的缓存替换掉，实现方法是每次使用图像都会把UUID插入到MRUEntries数组的开头，MRUEntries按最近使用顺序排列了图像UUID，数组里最后一个图像就是最少使用的。被替换掉的图片下次需要再使用时，再走一次取原图—解压—存储的流程。</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>FastImageCache适合用于tableView里缓存每个cell上同样规格的图像，优点是能极大加快第一次从磁盘加载这些图像的速度。但它有两个明显的缺点：一是占空间大。因为缓存了解码后的位图到磁盘，位图是很大的，宽高100<em>100的图像在2x的高清屏设备下就需要200</em>200*4byte/pixel=156KB，这也是为什么FastImageCache要大费周章限制缓存大小。二是接口不友好，需预定义好缓存的图像尺寸。FastImageCache无法像SDWebImage那样无缝接入UIImageView，使用它需要配置ImageTable，定义好尺寸，手动提供的原图，每种实体图像要定义一个FICEntity模型，使逻辑变复杂。</p>
<p>FastImageCache已经属于极限优化，做图像加载/渲染优化时应该优先考虑一些低代价高回报的优化点，例如CALayer代替UIImageVIew，减少GPU计算（去透明/像素对齐），图像子线程解码，避免Offscreen-Render等。在其他优化都做到位，图像的渲染还是有性能问题的前提下才考虑使用FastImageCache进一步提升首次加载的性能，不过字节对齐的优化倒是可以脱离FastImageCache直接运用在项目上，只需要在解码图像时bitmap画布的bytesPerRow设为64的倍数即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://blog.cnbang.net/tech/2578/&quot;&gt;iOS图片加载速度极限优化—FastImageCache解析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/path/FastImageCache&quot;&gt;FastImageCache&lt;/a&gt;是Path团队开发的一个开源库，用于提升图片的加载和渲染速度，让基于图片的列表滑动起来更顺畅，来看看它是怎么做的。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="FastImageCache" scheme="https://madordie.github.io/tags/FastImageCache/"/>
    
  </entry>
  
  <entry>
    <title>debug-_SwiftValue-unsignedIntegerValue</title>
    <link href="https://madordie.github.io/post/debug-SwiftValue-unsignedIntegerValue/"/>
    <id>https://madordie.github.io/post/debug-SwiftValue-unsignedIntegerValue/</id>
    <published>2017-04-17T06:05:09.000Z</published>
    <updated>2017-10-11T03:37:40.489Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>crash:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let attr = try? NSMutableAttributedString(data: data,</div><div class="line">                                          options: [NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType,</div><div class="line">                                                    NSCharacterEncodingDocumentAttribute: String.Encoding.utf8],</div><div class="line">                                          documentAttributes:nil)</div><div class="line">// log:</div><div class="line">2017-04-17 14:04:38.140 [41275:463875] -[_SwiftValue unsignedIntegerValue]: unrecognized selector sent to instance 0x608000256620</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>WTF! 这个方法启动时不能直接调用，要异步？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;crash:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let attr = try? NSMutableAttributedString(data: data,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                          options: [NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                    NSCharacterEncodingDocumentAttribute: String.Encoding.utf8],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                          documentAttributes:nil)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// log:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017-04-17 14:04:38.140 [41275:463875] -[_SwiftValue unsignedIntegerValue]: unrecognized selector sent to instance 0x608000256620&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="DEBUG" scheme="https://madordie.github.io/tags/DEBUG/"/>
    
  </entry>
  
</feed>
