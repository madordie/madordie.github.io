<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>继刚的博客</title>
  
  <subtitle>不疯魔,不成活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://madordie.github.io/"/>
  <updated>2020-07-22T03:42:22.381Z</updated>
  <id>https://madordie.github.io/</id>
  
  <author>
    <name>继刚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何快速查找ipa内的符号引用</title>
    <link href="https://madordie.github.io/post/how-to-quickly-find-symbol-references-in-ipa/"/>
    <id>https://madordie.github.io/post/how-to-quickly-find-symbol-references-in-ipa/</id>
    <published>2020-07-21T16:00:00.000Z</published>
    <updated>2020-07-22T03:42:22.381Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>ITMS-90809: Deprecated API Usage - Apple will stop accepting submissions of apps that use UIWebView APIs . See <a href="https://developer.apple.com/documentation/uikit/uiwebview" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uiwebview</a> for more information.</p></blockquote><p>熟悉不?</p><a id="more"></a><h2 id="源码级别引用"><a href="#源码级别引用" class="headerlink" title="源码级别引用"></a>源码级别引用</h2><p>有些时候, 我们需要查找我们的<code>.ipa</code>里面什么地方使用了某个API, 而常规操作是在Xcode的<code>Navigation -&gt; Find</code>里面直接search一下就可以查到源码上哪些地方直接调用了该API.</p><p>而往往这种情况下可以解决问题的话就不会跑去<code>Google</code>了.</p><h2 id="二进制级别引用"><a href="#二进制级别引用" class="headerlink" title="二进制级别引用"></a>二进制级别引用</h2><p>APP总会通过各种手段集成些别人的第三方库, 而此库究竟干了什么我们一般并不能十分了解(如果能了解大概人家就开源了吧). 这个时候要如何查找这些库有没有使用某API该咋办呢?</p><h3 id="定位究竟有谁在包含"><a href="#定位究竟有谁在包含" class="headerlink" title="定位究竟有谁在包含"></a>定位究竟有谁在包含</h3><p>我们提交<code>App Store</code>都是打包成<code>.ipa</code>提交,所以我们先将<code>.ipa</code>重命名<code>.zip</code>并解压. 然后假设我们需要找的是<code>UIWebView</code>, <code>Terminal</code>搞开,到解压后的目录.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╭─Bingo@madordie xxx.app</span><br><span class="line">╰─&gt;$ find . -print0 | xargs -0 grep -s <span class="string">'UIWebView'</span></span><br></pre></td></tr></table></figure><p>便得到<code>xxx.app</code>内所有包含<code>UIWebView</code>字符的文件(包括Mach-O). 这个时候输出的行<code>Binary file ./XXXX/YYYY matches</code>即为匹配到了.</p><p>此时定位到<code>XXXX/YYYY</code>内含有<code>UIWebView</code>.</p><p>另外: 上述命令在项目主目录执行也可以搜索到, 只不过除了<code>Navigation -&gt; Find</code>里search的还有其他的, 内容如果多的话可以再用<code>grep</code>过滤一次.</p><p>比如只关心<code>Binary file</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╭─Bingo@madordie project-main-path</span><br><span class="line">╰─&gt;$ find . -print0 | xargs -0 grep -s <span class="string">'UIWebView'</span> | grep <span class="string">'^Binary'</span></span><br></pre></td></tr></table></figure><h3 id="这个API在Mach-O中是什么"><a href="#这个API在Mach-O中是什么" class="headerlink" title="这个API在Mach-O中是什么"></a>这个API在Mach-O中是什么</h3><h4 id="有字符串吗"><a href="#有字符串吗" class="headerlink" title="有字符串吗"></a>有字符串吗</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─Bingo@madordie xxx.app</span><br><span class="line">╰─&gt;$ strings ./XXXX/YYYY | grep <span class="string">'UIWebView'</span></span><br><span class="line">T@<span class="string">"UIWebView"</span>,R,N,V_webView</span><br><span class="line">UIWebViewDelegate</span><br><span class="line">B40@0:8@<span class="string">"UIWebView"</span>16@<span class="string">"NSURLRequest"</span>24q32</span><br><span class="line">v24@0:8@<span class="string">"UIWebView"</span>16</span><br><span class="line">v32@0:8@<span class="string">"UIWebView"</span>16@<span class="string">"NSError"</span>24</span><br><span class="line">@<span class="string">"UIWebView"</span></span><br></pre></td></tr></table></figure><h4 id="有symbol吗"><a href="#有symbol吗" class="headerlink" title="有symbol吗"></a>有symbol吗</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─Bingo@madordie xxx.app</span><br><span class="line">╰─&gt;$ nm ./XXXX/YYYY | grep <span class="string">'UIWebView'</span></span><br><span class="line">                 U _OBJC_CLASS_<span class="variable">$_UIWebView</span></span><br></pre></td></tr></table></figure><h3 id="值得说一下"><a href="#值得说一下" class="headerlink" title="值得说一下"></a>值得说一下</h3><p>通过上面的操作基本上可以检索出来App Store查到的API, 但是说其他的字符串拼接/加密的方案去绕过的话,那么就问问作者吧…</p><p>真不行使用逆向分析工具去分析也可以. 但是个人觉得稍微有点大材小用 :)</p><p>上面使用的命令的文档均可通过<code>man xxx</code>、<code>xxx --help</code>、Google等方式查询就不啰嗦了.</p><h3 id="UIWebView的废弃通告"><a href="#UIWebView的废弃通告" class="headerlink" title="UIWebView的废弃通告"></a>UIWebView的废弃通告</h3><p><a href="https://developer.apple.com/cn/news/?id=12232019b" target="_blank" rel="noopener">更新使用网页视图的 App</a></p><blockquote><p>更新使用网页视图的 App<br>2019 年 12 月 23 日</p><p>如果您的 app 仍在使用已弃用的 UIWebView API 嵌入网络内容，我们强烈建议您尽快更新为 WKWebView 以提升安全性和稳定性。WKWebView 可将网页处理限制在 app 的网页视图中，从而确保不安全的网站内容不会影响到 app 的其他部分。此外，iOS、macOS 和 Mac Catalyst 均支持 WKWebView。</p><p>2020 年 4 月起 App Store 将不再接受使用 UIWebView 的新 app，2020 年 12 月起将不再接受使用 UIWebView 的 app 更新。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ITMS-90809: Deprecated API Usage - Apple will stop accepting submissions of apps that use UIWebView APIs . See &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiwebview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.apple.com/documentation/uikit/uiwebview&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;熟悉不?&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
      <category term="macOS" scheme="https://madordie.github.io/categories/iOS/macOS/"/>
    
    
      <category term="DEBUG" scheme="https://madordie.github.io/tags/DEBUG/"/>
    
      <category term="tool" scheme="https://madordie.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>class的class-static-func使用Self作为返回值</title>
    <link href="https://madordie.github.io/post/class-static-func-return-self/"/>
    <id>https://madordie.github.io/post/class-static-func-return-self/</id>
    <published>2020-05-17T16:00:00.000Z</published>
    <updated>2020-05-18T06:59:35.356Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h1><ul><li>Xcode: Version 11.4.1 (11E503a)</li><li>swift: Swift 5</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MDButton</span>: <span class="title">UIButton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 为了更清楚展示问题,代码经过精简</span></span><br><span class="line">    <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">make</span>() -&gt; <span class="title">Self</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">MDButton</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码无法编译:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ViewController.swift: error: cannot convert return expression of type &#39;MDButton&#39; to return type &#39;Self&#39;</span><br><span class="line">        return MDButton()</span><br><span class="line">               ^~~~~~~~~~</span><br><span class="line">                          as! Self</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="查找关于Self的新特性"><a href="#查找关于Self的新特性" class="headerlink" title="查找关于Self的新特性"></a>查找关于<code>Self</code>的新特性</h1><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md" target="_blank" rel="noopener">Proposal: SE-0068</a>这里有说到关于这个<code>Self</code>的问题.</p><p>其目的是为了解决:</p><blockquote><ul><li><code>dynamicType</code> remains an exception to Swift’s lowercased keywords rule. This change eliminates a special case that’s out of step with Swift’s new standards.</li><li><code>Self</code> is shorter and clearer in its intent. It mirrors <code>self</code>, which refers to the current instance.</li><li>It provides an easier way to access static members. As type names grow large, readability suffers. <code>MyExtremelyLargeTypeName.staticMember</code> is unwieldy to type and read.</li><li>Code using hardwired type names is less portable than code that automatically knows its type.</li><li>Renaming a type means updating any <code>TypeName</code> references in code.</li><li>Using <code>self.dynamicType</code> fights against Swift’s goals of concision and clarity in that it is both noisy and esoteric.</li></ul></blockquote><p>所以说该问题在<code>struct</code>中并不存在,也就是下面的代码完全没有问题:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xxx</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">make</span><span class="params">()</span></span> -&gt; <span class="type">Self</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> xxx()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="究竟如何修改"><a href="#究竟如何修改" class="headerlink" title="究竟如何修改"></a>究竟如何修改</h1><p>好吧,上面测试过这几个关键字之后,尝试修改函数内的返回对象吧.此时既然<code>Self</code>是<code>dynamicType</code>,那么可以使用<code>self</code>去调用初始化方法就行了吧, 于是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MDButton2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">make</span>() -&gt; <span class="title">Self</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 或 return self.init()</span></span><br><span class="line">        <span class="keyword">return</span> <span class="type">Self</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="一点看法"><a href="#一点看法" class="headerlink" title="一点看法"></a>一点看法</h1><p>首先, 整个过程(包括Xcode的提示)不使用<code>as!</code>的解决方案, 对,我就是那个坚决不使用<code>as!</code>的人(刷题除外).</p><p>然后, 可以翻一下这个<code>Self</code>的实现<a href="https://github.com/apple/swift/pull/22863" target="_blank" rel="noopener">apple/swift#22863</a>,内容比较多.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一个问题&quot;&gt;&lt;a href=&quot;#一个问题&quot; class=&quot;headerlink&quot; title=&quot;一个问题&quot;&gt;&lt;/a&gt;一个问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Xcode: Version 11.4.1 (11E503a)&lt;/li&gt;
&lt;li&gt;swift: Swift 5&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; UIKit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MDButton&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UIButton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 为了更清楚展示问题,代码经过精简&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;make&lt;/span&gt;() -&amp;gt; &lt;span class=&quot;title&quot;&gt;Self&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MDButton&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的代码无法编译:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ViewController.swift: error: cannot convert return expression of type &amp;#39;MDButton&amp;#39; to return type &amp;#39;Self&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return MDButton()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               ^~~~~~~~~~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          as! Self&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="DEBUG" scheme="https://madordie.github.io/tags/DEBUG/"/>
    
      <category term="Swift" scheme="https://madordie.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu使用SakuraFrp实现内网穿透</title>
    <link href="https://madordie.github.io/post/ubuntu-sakura-frp/"/>
    <id>https://madordie.github.io/post/ubuntu-sakura-frp/</id>
    <published>2019-07-08T16:00:00.000Z</published>
    <updated>2019-08-29T10:24:09.319Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>记录将一台吃灰的笔记本改装成服务器，并暴露在公网下的过程。</p><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>一个 ubuntu-18.04.2-desktop-amd64.iso</li><li>一台陈旧的Gateway笔记本</li><li>一台主战MBP</li></ul><p>iso: 如果从<a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener">官网</a>下载速度比较慢，可以考虑上<code>wget</code>、迅雷。我这里使用了<code>wget</code>并且使用了<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cdimage/ubuntu/releases/" target="_blank" rel="noopener">清华的镜像</a></p><p>Gateway: 还是个win10，于是乎顺手就把<code>ubuntu-18.04.2-desktop-amd64.iso</code>制作成了U盘，此处我就不说了，反正能引导进去就行啊哈哈哈</p><p>MBP: 主要工作在这里。比如远程win桌面用的是<a href="https://apps.apple.com/us/app/microsoft-remote-desktop/id1295203466?mt=12" target="_blank" rel="noopener">Microsoft Remote Desktop</a></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>注意，Ubuntu会将硬盘 <strong>所有分区全部格式化</strong> ，请先妥善备份。</p><p>经过安装提示以及笔记本的疯狂发热很快就安装完事了。</p><h2 id="设置Ubuntu软件源"><a href="#设置Ubuntu软件源" class="headerlink" title="设置Ubuntu软件源"></a>设置Ubuntu软件源</h2><p>这里还是用清华大学的镜像，其<a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">Ubuntu 镜像使用帮助</a>也是相当的详细：</p><blockquote><p>Ubuntu 的软件源配置文件是 /etc/apt/sources.list。将系统自带的该文件做个备份，将该文件替换为下面内容，即可使用 TUNA 的软件源镜像。</p><p>选择你的ubuntu版本: 18.04 LTS</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p><code>apt</code>已经相当完善，此处不再赘述。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt dist-upgrade</span><br></pre></td></tr></table></figure><p>当然，别忘了安装<code>wget</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install wget</span><br></pre></td></tr></table></figure><p>此处如果按照上面的步骤已经设置了清华大学的镜像源，那速度将会很快。要不然就很慢慢慢。。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>此步骤并非必须，只是记录一下一些很坑的事情，啊哈哈哈哈</p><h3 id="没有Wi-Fi选项"><a href="#没有Wi-Fi选项" class="headerlink" title="没有Wi-Fi选项"></a>没有Wi-Fi选项</h3><p>安装Wi-Fi驱动，记得重启哦：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bcmwl-kernel-source</span><br></pre></td></tr></table></figure><h3 id="未知的显示器（Unknown-Display）"><a href="#未知的显示器（Unknown-Display）" class="headerlink" title="未知的显示器（Unknown Display）"></a>未知的显示器（Unknown Display）</h3><p>如果是很快的意识到是<code>设置</code>里面有一个<code>未知的显示器</code>，并且以<code>拼接</code>的方式使用，那你就直接根据<a href="https://bugs.launchpad.net/ubuntu/+source/ubuntu-drivers-common/+bug/1296020" target="_blank" rel="noopener">Non-existent display detected in both intel driver and nvidia driver (Optimus Laptop)</a>所示，只需安装Bumblebee并重启即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bumblebee-nvidia</span><br></pre></td></tr></table></figure><p>该问题貌似是由于集成显卡和独显共存的问题，所以当你并没有连接外接显示器但是却出现以下双显示器才有的功能时候记得用这个方案。</p><ul><li>APP打开了却看不到界面，只看到页面嗖的一下飞出了屏幕</li><li>左上角有时候会出现一个黑框框，里面有一个数字1</li><li>鼠标放至屏幕上下左右，有一个边会进去</li><li>右键窗口会有一个类似<code>移至显示器右侧</code>的按钮，点了就看不见了</li><li><code>xrandr --listmonitors</code> 有两个</li></ul><h3 id="切换Intel和Nvidia显卡"><a href="#切换Intel和Nvidia显卡" class="headerlink" title="切换Intel和Nvidia显卡"></a>切换Intel和Nvidia显卡</h3><p><strong>no zuo no die no life, 听我一句劝别玩这个。。。</strong>。如果G了去看下<a href="https://www.qingsword.com/qing/ubuntu-remove-nvidia.html" target="_blank" rel="noopener">解决Ubuntu18.04安装Nvidia驱动开机卡死</a></p><p><a href="https://www.linuxbabe.com/desktop-linux/switch-intel-nvidia-graphics-card-ubuntu" target="_blank" rel="noopener">How To Switch Between Intel and Nvidia Graphics Card on Ubuntu</a>遇到卡在<code>Started bpfilter</code>之后需要编辑/etc/gdm3/custom.conf，将下面这一行放开：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＃WaylandEnable = FALSE</span><br></pre></td></tr></table></figure><h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>将<code>内网穿透</code>放在Google里面搜索一下会有很多方案，我的VPS被邻居连累之后就没有再买，所以我没有域名、公网IP。。。其中搜索结果的大部分都不适合我。</p><p>其中大部分提到一个<code>DDNS</code>的概念：<a href="https://zh.wikipedia.org/wiki/%E5%8B%95%E6%85%8BDNS" target="_blank" rel="noopener">维基百科:动态DNS</a></p><blockquote><p>动态DNS（英语：Dynamic DNS，简称DDNS）是域名系统（DNS）中的一种自动更新名称服务器（Name server）内容的技术。根据互联网的域名订立规则，域名必须跟从固定的IP地址。但动态DNS系统为动态网域提供一个固定的名称服务器（Name server），透过即时更新，使外界用户能够连上动态用户的网址。</p></blockquote><p>了解玩这个之后就可以搜索并选择DDMS方案了。</p><p>再明确一下目标：在外网ssh进内网我们刚建好的Ubuntu。</p><h2 id="fatedier-frp"><a href="#fatedier-frp" class="headerlink" title="fatedier/frp"></a>fatedier/frp</h2><p>首推这种方案：<a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">fatedier/frp</a>, 文档有中文并且比较详细。</p><p>还有少数派的一个文章也不错：<a href="https://sspai.com/post/52523" target="_blank" rel="noopener">使用frp进行内网穿透</a></p><h2 id="TPDDNS"><a href="#TPDDNS" class="headerlink" title="TPDDNS"></a>TPDDNS</h2><p>不过我家里的路由是<a href="https://www.tp-link.com.cn/" target="_blank" rel="noopener">TP-LINK</a>的，TP-LINK是可以参考<a href="https://service.tp-link.com.cn/detail_article_2978.html" target="_blank" rel="noopener">TPDDNS的使用方法介绍</a>可以直接使用的。</p><p>不过坑比的事情是[TPDDNS]支持的硬件版本是4.0。参考<a href="https://service.tp-link.com.cn/detail_article_1420.html" target="_blank" rel="noopener">如何查看产品型号与硬件版本？</a>，也就是其<code>ver 4.0</code>之上是可以的。</p><p>最好是问一下<code>TP-LINK 在线客服</code>，一般 某猫、某狗上面的客服是不懂这个的。</p><p>很显然我家里的路由是V3.0 啊哈哈哈 此方案我这里不适用。不过看上面的教程已经很详尽了，应该比较好搞。</p><h2 id="Sakura-Frp"><a href="#Sakura-Frp" class="headerlink" title="Sakura Frp"></a>Sakura Frp</h2><p>这个据<a href="https://www.natfrp.org/" target="_blank" rel="noopener">官网</a>介绍是这样的：</p><blockquote><p>简单方便<br>客户端基于 Fatedier Frp 修改，免去了配置文件，改为从网络读取配置，您只需要在网站上简单操作即可添加映射。</p><p>完全免费<br>您不必再为了内网穿透多花一分钱，Sakura Frp 是永远免费的，我们只为了让更多人能体验到免费、好用的内网穿透。</p><p>自由使用<br>我们非常欢迎您将 Sakura Frp 集成到自己的软件中，并且我们提供了多种 API 接口以供使用，完全没有使用限制。</p></blockquote><p>好了，适合我这种不愿意花钱的穷屌丝，来<a href="https://openid.natfrp.org/?action=register&src=www.natfrp.com" target="_blank" rel="noopener">注册</a>吧。。</p><p>登录进去才发现，好多文字。没有明显的新手教程，对我这种不是很懂<code>FRP</code>的人来说简直一脸懵逼。</p><h2 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h2><p><a href="https://www.natfrp.com/page/panel/" target="_blank" rel="noopener">映射列表</a>中的<code>示例映射 - Linux SSH</code>正合我意，然后只需要再点一下<code>随机端口</code>就可以不用输入直接点添加了。</p><p><img src="/images/2019-07-09-13-43-31.png" alt="Linux SSH 并随机端口"></p><p><img src="/images/2019-07-09-13-44-25.png" alt="已添加的隧道列表"></p><p>至此第一个映射已经创建了，然后需要去Ubuntu上开启代理吧</p><h2 id="开启代理"><a href="#开启代理" class="headerlink" title="开启代理"></a>开启代理</h2><p>在<a href="https://www.natfrp.com/page/panel/" target="_blank" rel="noopener">客户软件</a>中找到适合自己的<code>Linux x64 (64位操作系统)</code>包并下载至Ubuntu:</p><p>此处将包下载至<code>/opt/natfrp</code>(该路径将在后面的配置中使用)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /opt/natfrp &amp;&amp; <span class="built_in">cd</span> /opt/natfrp</span><br><span class="line">sudo wget https://cdn.tcotp.cn:4443/client/Sakura_frpc_linux_amd64.tar.gz</span><br><span class="line">sudo tar zxvf Sakura_frpc_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>解压完成后，就会得到一个可执行文件<code>Sakura_frpc_linux_amd64</code>(该文件名将在后面的配置中使用)</p><p>根据<a href="https://www.zerobbs.net/?s=viewpost&tid=5" target="_blank" rel="noopener">Linux 将 Sakura Frp 设置为服务，开机自动启动</a>的教程操作如下：</p><h3 id="创建service"><a href="#创建service" class="headerlink" title="创建service"></a>创建service</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/systemd/system/sakurafrp.service</span><br></pre></td></tr></table></figure><h3 id="根据自己的配置写入service"><a href="#根据自己的配置写入service" class="headerlink" title="根据自己的配置写入service"></a>根据自己的配置写入service</h3><p><code>/opt/natfrp/</code>: Sakura_frpc_linux_amd64的全路径<br><code>/opt/natfrp/Sakura_frpc_linux_amd64</code>: 解压之后的Sakura_frpc_linux_amd64全路径<br><code>--sid=</code>: 服务器列表中左侧的数字</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Sakura Frp Client</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">WorkingDirectory=/opt/natfrp/</span><br><span class="line">LimitNOFILE=4096</span><br><span class="line">PIDFile=/var/run/sakurafrp/client.pid</span><br><span class="line">ExecStart=/opt/natfrp/Sakura_frpc_linux_amd64 --su=你的账号 --sp=你的密码 --sid=你要选择的服务器的ID(就是服务器列表左侧的数字)</span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitInterval=600</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>sid信息[2019.7.9:14:10]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">| ID名称状态介绍</span><br><span class="line">|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">| 1宁波电信√ 在线高防线路，适合搭 Minecraft 服务器，使用人数较多 (官方服务器)</span><br><span class="line">| 2宁波联通√ 在线联通线路，防御 20G，适合部分移动联通&#x2F;用户使用 (官方服务器)</span><br><span class="line">| 3徐州电信√ 在线徐州高防电信，适合开服，月流量固定 500G，请合理使用 (官方服务器)</span><br><span class="line">| 4贵州电信× 离线贵州电信节点，无防御，适合小流量传输服务[超流量停机] (官方服务器)</span><br><span class="line">| 6罗马尼亚× 离线罗马尼亚不限内容无视 DMCA 版权服务器，免备案 (官方服务器)</span><br><span class="line">| 7日本千兆√ 在线日本千兆服务器，适合建站，免备案 (官方服务器)</span><br><span class="line">| 8台湾百兆√ 在线台湾谷歌云 100M 服务器，适合建站，延迟较低，免备案 (官方服务器)</span><br><span class="line">| 9香港线路1 √ 在线香港 StarryDNS 100M 服务器，适合建站 (官方服务器)</span><br><span class="line">| 10江苏镇江√ 在线江苏镇江 100M 服务器，BGP 全国优化线路，适合开服 (官方服务器)</span><br><span class="line">| 12河南电信√ 在线河南电信线路服务器，适合开服以及小流量服务 (官方服务器)</span><br><span class="line">| 13香港线路2 √ 在线香港谷歌云 100M 服务器，适合建站，免备案 (官方服务器)</span><br><span class="line">| 30洛杉矶01√ 在线美国洛杉矶千兆服务器，适合建站，免备案 线路 1 (官方服务器)</span><br><span class="line">| 31洛杉矶02√ 在线美国洛杉矶千兆服务器，适合建站，免备案 线路 2 (官方服务器)</span><br><span class="line">| 32洛杉矶03√ 在线美国洛杉矶千兆服务器，适合建站，免备案 线路 3 (官方服务器)</span><br><span class="line">| 33洛杉矶04√ 在线美国洛杉矶千兆服务器，适合建站，免备案 线路 4 (官方服务器)</span><br><span class="line">| 34洛杉矶05√ 在线美国洛杉矶千兆服务器，适合建站，免备案 线路 5 (官方服务器)</span><br><span class="line">| 38新加坡01× 离线新加坡阿里云 30M 服务器，适合建站，免备案 (官方服务器)</span><br><span class="line">| 39蒙特利尔√ 在线加拿大蒙特利尔谷歌云 100M 服务器，适合建站，免备案 (官方服务器)</span><br><span class="line">| 43香港移动× 离线香港 UOvZ 100M 移动服务器，适合建站，免备案[机房断网维护中] (官方服务器)</span><br><span class="line">| 45美国纽约1 √ 在线美国纽约百兆服务器，适合建站，免备案 线路1 (官方服务器)</span><br><span class="line">| 46美国纽约2 √ 在线美国纽约百兆服务器，适合建站，免备案 线路2 (官方服务器)</span><br><span class="line">| 47日本长野× 离线日本长野百兆服务器，适合建站，免备案 (官方服务器)</span><br><span class="line">|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h3 id="启动service"><a href="#启动service" class="headerlink" title="启动service"></a>启动service</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>服务就创建成功了，接下来启动服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start sakurafrp</span><br></pre></td></tr></table></figure><p>将服务设置为开机启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> sakurafrp</span><br></pre></td></tr></table></figure><p>如果要停止运行客户端，只需要输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop sakurafrp</span><br></pre></td></tr></table></figure><p>如果要禁止开机启动，输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> sakurafrp</span><br></pre></td></tr></table></figure><p>至此，来让我们看一下当前的状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">╰─&gt;$ sudo systemctl status sakurafrp</span><br><span class="line">● sakurafrp.service - Sakura Frp Client</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/sakurafrp.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Tue 2019-07-09 11:07:19 CST; 3h 13min ago</span><br><span class="line"> Main PID: 3301 (Sakura_frpc_lin)</span><br><span class="line">    Tasks: 10 (<span class="built_in">limit</span>: 4915)</span><br><span class="line">   Memory: 5.9M</span><br><span class="line">   CGroup: /system.slice/sakurafrp.service</span><br><span class="line">           └─3301 /opt/natfrp/Sakura_frpc_linux_amd64 --su=xxxxxxxx --sp=xxxxxxxx --sid=xxx</span><br><span class="line"></span><br><span class="line">7月 09 11:07:20 madordie-NV47H Sakura_frpc_linux_amd64[3301]: &gt;配置文件载入成功</span><br><span class="line">7月 09 11:07:20 madordie-NV47H Sakura_frpc_linux_amd64[3301]: 2019/07/09 11:07:20 [I] [proxy_manager.go:322] 增加代理: [xxx.natfrp.org:22941        29795-87248]</span><br><span class="line">7月 09 11:07:20 madordie-NV47H Sakura_frpc_linux_amd64[3301]: 2019/07/09 11:07:20 [I] [control.go:242] [d54792913cdac17d] 登录成功, 获取到运行ID [d54792913cdac17d], server udp port [7001]</span><br><span class="line">7月 09 11:07:20 madordie-NV47H Sakura_frpc_linux_amd64[3301]: 2019/07/09 11:07:20 [I] [control.go:167] [d54792913cdac17d] [xxx.natfrp.org:22941        29795-87248] 启动代理成功</span><br></pre></td></tr></table></figure><p>可以看到<code>[xxx.natfrp.org:22941        29795-87248] 启动代理成功</code></p><p>需要注意的是选用的sid不一样其代理的域名也不一样。这个是很显然的，但是是容易忽略的。</p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>在MBP上验证一下<code>xxx.natfrp.org:22941</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╰─&gt;$ ssh -p 22941 madordie@xxx.natfrp.org</span><br><span class="line">Welcome to Ubuntu 19.04 (GNU/Linux 4.18.0-15-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">12 updates can be installed immediately.</span><br><span class="line">6 of these updates are security updates.</span><br><span class="line"></span><br><span class="line">Last login: Tue Jul  9 14:19:33 2019 from 127.0.0.1</span><br></pre></td></tr></table></figure><p><code>Sakura Frp</code>已通，愉快的玩耍吧！</p><p>括弧：一旦其暴露出去别忘了考虑安全，比如你的这个SSH账号、密码是否足够复杂，或者是否关闭了账号密码登陆。</p><h1 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h1><p>还有一些其他的方案可以选择，比如：</p><ul><li><a href="https://hsk.oray.com/" target="_blank" rel="noopener">花生壳</a></li><li><a href="https://www.noip.com/" target="_blank" rel="noopener">no-ip</a></li><li><a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">开源的frp</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录将一台吃灰的笔记本改装成服务器，并暴露在公网下的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://madordie.github.io/categories/Linux/"/>
    
    
      <category term="内网穿透" scheme="https://madordie.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>实时显示日志logio</title>
    <link href="https://madordie.github.io/post/logio-brief-zh-cn/"/>
    <id>https://madordie.github.io/post/logio-brief-zh-cn/</id>
    <published>2019-05-21T16:00:00.000Z</published>
    <updated>2019-07-15T02:36:55.358Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="log-io"><a href="#log-io" class="headerlink" title="log.io"></a>log.io</h1><p><a href="https://madordie.github.io/post/logio-brief/">English</a></p><p>一个能在浏览器上实时显示日志的工具。</p><a id="more"></a><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>以下摘自<a href="http://logio.org/" target="_blank" rel="noopener">logio.org</a>，我觉得已经非常的详细了，这里就不啰嗦了。</p><blockquote><p>Harvesters watch log files for changes, send new log messages to the server, which broadcasts to web clients. Log messages are tagged with stream, node, and log level information based on user configuration.</p><p>Log.io has no persistence layer. Harvesters are informed of file changes via inotify, and log messages hop from harvester to server to web client via TCP and socket.io, respectively.</p><p><img src="/images/2019-05-17-10-03-13.png" alt="work io"><br><img src="/images/2019-05-17-10-12-25.png" alt="Activate streams &amp; nodes to watch log messages"></p></blockquote><h2 id="通信使用的TCP接口"><a href="#通信使用的TCP接口" class="headerlink" title="通信使用的TCP接口"></a><a name="Simple TCP interface">通信使用的TCP接口</a></h2><blockquote><p>Log.io uses a stateless TCP API to receive log messages.</p><p>Writing a third party harvester is easy. Open a TCP connection to the &gt; server and begin writing properly formatted messages to the socket.</p><p>Read the <a href="https://github.com/NarrativeScience/Log.io" target="_blank" rel="noopener">API documentation</a>.</p></blockquote><h3 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+log|my_stream|my_node|info|this is log message\r\n</span><br></pre></td></tr></table></figure><h3 id="注册一个新的node和stream"><a href="#注册一个新的node和stream" class="headerlink" title="注册一个新的node和stream"></a>注册一个新的node和stream</h3><p>如果原来已经存在，那么还是原来的那个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+node|my_node|my_stream1,my_stream2\r\n</span><br></pre></td></tr></table></figure><h3 id="删除node"><a href="#删除node" class="headerlink" title="删除node"></a>删除node</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-node|my_node\r\n</span><br></pre></td></tr></table></figure><h1 id="安装Log-io服务端"><a href="#安装Log-io服务端" class="headerlink" title="安装Log.io服务端"></a>安装Log.io服务端</h1><p>这个年久失修的原始项目<a href="https://github.com/NarrativeScience/Log.io" target="_blank" rel="noopener">NarrativeScience/Log.io</a>已经没办法正常工作了。。</p><p>幸运的是，docker版本的<a href="https://github.com/blacklabelops-legacy/logio" target="_blank" rel="noopener">blacklabelops-legacy/logio</a>还可以用，所以我们就用这个吧。</p><h2 id="安装并开启docker"><a href="#安装并开启docker" class="headerlink" title="安装并开启docker"></a>安装并开启docker</h2><p>docker的文档<a href="https://docs.docker.com/install/" target="_blank" rel="noopener">docs.docker.com</a>依旧非常详细，不再赘述。</p><p>值得一提的是支持的平台有很多，比如：<a href="https://docs.docker.com/install/" target="_blank" rel="noopener">Cloud</a>、 <a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="noopener">MacOS</a> 、<a href="https://docs.docker.com/install/" target="_blank" rel="noopener">Linux</a> 、 <a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener">Windows</a></p><h2 id="pull-镜像"><a href="#pull-镜像" class="headerlink" title="pull 镜像"></a>pull 镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull blacklabelops/logio</span><br></pre></td></tr></table></figure><h2 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">    -p 28778:28778 \</span><br><span class="line">    -p 28777:28777 \</span><br><span class="line">    --name logio \</span><br><span class="line">    blacklabelops/logio</span><br></pre></td></tr></table></figure><p>值得一提的是，原文档<a href="https://github.com/blacklabelops-legacy/logio" target="_blank" rel="noopener">blacklabelops-legacy/logio</a>中是没有<code>-p 28777:28777</code>参数的，会导致其28777端口无响应，应该是一个手误或者特殊需要？反正这里打开就好了。</p><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><p>其他配置在<a href="https://github.com/blacklabelops-legacy/logio" target="_blank" rel="noopener">blacklabelops-legacy/logio</a>中也很详细😂，需要的请自取。比如说日志、https、等</p><h2 id="最终效果图"><a href="#最终效果图" class="headerlink" title="最终效果图"></a>最终效果图</h2><p>在浏览器上打开<a href="http://localhost:28778/%E5%8D%B3%E5%8F%AF%E3%80%82%EF%BC%88localhost" target="_blank" rel="noopener">http://localhost:28778/即可。（localhost</a> 是安装server的IP）<br><img src="/images/2019-05-17-10-40-18.png" alt="log.io server"></p><p>于是乎，我们就可以向localhost:28778疯狂的写日志了. 🎉🎉🎉</p><h1 id="支持的插件"><a href="#支持的插件" class="headerlink" title="支持的插件"></a>支持的插件</h1><p>这个日志服务<a href="#Simple TCP interface">对外接口</a>比较简单，所以理论上来讲，只需要可以进行TCP通信的包均可以支持，包括但不限于安卓、iOS。</p><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><p><a href="https://github.com/madordie/logio" target="_blank" rel="noopener">iOS版本</a>基于<a href="https://cocoapods.org/" target="_blank" rel="noopener">CocoaPods</a>的项目只需要在Podfile中添加：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'LogIO'</span>, <span class="symbol">:git</span> =&gt; <span class="string">'https://github.com/madordie/logio.git'</span></span><br></pre></td></tr></table></figure><p>其iOS版本已经放在了这里：<a href="https://github.com/madordie/logio" target="_blank" rel="noopener">madordie/logio</a></p><p>iOS上之前有一个类似的<a href="https://github.com/s4nchez/LogIO-CocoaLumberjack" target="_blank" rel="noopener">LogIO-CocoaLumberjack</a>, 我这里做了简单的更新，目的是不绑定<a href="https://github.com/robbiehanson/CocoaAsyncSocket" target="_blank" rel="noopener">CocoaAsyncSocket</a>。</p><hr><ul><li><a href="http://logio.org/" target="_blank" rel="noopener">logio.org</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;log-io&quot;&gt;&lt;a href=&quot;#log-io&quot; class=&quot;headerlink&quot; title=&quot;log.io&quot;&gt;&lt;/a&gt;log.io&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://madordie.github.io/post/logio-brief/&quot;&gt;English&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个能在浏览器上实时显示日志的工具。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://madordie.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="tool" scheme="https://madordie.github.io/tags/tool/"/>
    
      <category term="logio" scheme="https://madordie.github.io/tags/logio/"/>
    
  </entry>
  
  <entry>
    <title>logio</title>
    <link href="https://madordie.github.io/post/logio-brief/"/>
    <id>https://madordie.github.io/post/logio-brief/</id>
    <published>2019-05-16T16:00:00.000Z</published>
    <updated>2019-07-10T03:24:19.041Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="log-io"><a href="#log-io" class="headerlink" title="log.io"></a>log.io</h1><p><a href="https://madordie.github.io/post/logio-brief-zh-cn/">中文</a></p><p>Real-time log monitoring in your browser.</p><a id="more"></a><h1 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work"></a>How does it work</h1><blockquote><p>Harvesters watch log files for changes, send new log messages to the server, which broadcasts to web clients. Log messages are tagged with stream, node, and log level information based on user configuration.</p><p>Log.io has no persistence layer. Harvesters are informed of file changes via inotify, and log messages hop from harvester to server to web client via TCP and socket.io, respectively.</p><p><img src="/images/2019-05-17-10-03-13.png" alt="work io"></p></blockquote><h2 id="Activate-streams-amp-nodes-to-watch-log-messages"><a href="#Activate-streams-amp-nodes-to-watch-log-messages" class="headerlink" title="Activate streams &amp; nodes to watch log messages"></a>Activate streams &amp; nodes to watch log messages</h2><blockquote><p><img src="/images/2019-05-17-10-12-25.png" alt="Activate streams &amp; nodes to watch log messages"></p></blockquote><h2 id="Simple-TCP-interface"><a href="#Simple-TCP-interface" class="headerlink" title="Simple TCP interface"></a><a name="Simple TCP interface">Simple TCP interface</a></h2><blockquote><p>Log.io uses a stateless TCP API to receive log messages.</p><p>Writing a third party harvester is easy. Open a TCP connection to the &gt; server and begin writing properly formatted messages to the socket.</p><p>Read the <a href="https://github.com/NarrativeScience/Log.io" target="_blank" rel="noopener">API documentation</a>.</p></blockquote><h3 id="Send-a-log-message"><a href="#Send-a-log-message" class="headerlink" title="Send a log message"></a>Send a log message</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+log|my_stream|my_node|info|this is log message\r\n</span><br></pre></td></tr></table></figure><h3 id="Register-a-new-node-with-stream-associations"><a href="#Register-a-new-node-with-stream-associations" class="headerlink" title="Register a new node, with stream associations"></a>Register a new node, with stream associations</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+node|my_node|my_stream1,my_stream2\r\n</span><br></pre></td></tr></table></figure><h3 id="Remove-a-node"><a href="#Remove-a-node" class="headerlink" title="Remove a node"></a>Remove a node</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-node|my_node\r\n</span><br></pre></td></tr></table></figure><h1 id="Install-Log-io"><a href="#Install-Log-io" class="headerlink" title="Install Log.io"></a>Install Log.io</h1><p>The original project <a href="https://github.com/NarrativeScience/Log.io" target="_blank" rel="noopener">NarrativeScience/Log.io</a> has been unavailable due to lack of maintenance for a long time.</p><p>Fortunately, the <a href="https://github.com/blacklabelops-legacy/logio" target="_blank" rel="noopener">blacklabelops-legacy/logio</a> can also be used.</p><p>So we can install the project like this：</p><h2 id="Install-and-start-docker"><a href="#Install-and-start-docker" class="headerlink" title="Install and start docker"></a>Install and start docker</h2><p>The <a href="https://docs.docker.com/install/" target="_blank" rel="noopener">docs.docker.com</a> is very detailed.</p><p>Support <a href="https://docs.docker.com/install/" target="_blank" rel="noopener">Cloud</a>、 <a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="noopener">MacOS</a> 、<a href="https://docs.docker.com/install/" target="_blank" rel="noopener">Linux</a> 、 <a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener">Windows</a></p><h2 id="Pull-image"><a href="#Pull-image" class="headerlink" title="Pull image"></a>Pull image</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull blacklabelops/logio</span><br></pre></td></tr></table></figure><h2 id="Start-the-server"><a href="#Start-the-server" class="headerlink" title="Start the server"></a>Start the server</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">    -p 28778:28778 \</span><br><span class="line">    -p 28777:28777 \</span><br><span class="line">    --name logio \</span><br><span class="line">    blacklabelops/logio</span><br></pre></td></tr></table></figure><h2 id="Other-configure"><a href="#Other-configure" class="headerlink" title="Other configure"></a>Other configure</h2><p><a href="https://github.com/blacklabelops-legacy/logio" target="_blank" rel="noopener">blacklabelops-legacy/logio</a>.</p><h2 id="Complete"><a href="#Complete" class="headerlink" title="Complete"></a>Complete</h2><p>Browser: <a href="http://localhost:28778/" target="_blank" rel="noopener">http://localhost:28778/</a><br><img src="/images/2019-05-17-10-40-18.png" alt="log.io server"></p><p>Now we can write logs to port 28777. 🎉🎉🎉</p><h1 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h1><p>We only need to perform TCP communication according to the rules <a href="#Simple TCP interface">Simple TCP interface</a>, and the log can be displayed on the browser.</p><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><p><a href="https://github.com/madordie/logio" target="_blank" rel="noopener">logio for iOS</a></p><hr><ul><li><a href="http://logio.org/" target="_blank" rel="noopener">logio.org</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;log-io&quot;&gt;&lt;a href=&quot;#log-io&quot; class=&quot;headerlink&quot; title=&quot;log.io&quot;&gt;&lt;/a&gt;log.io&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://madordie.github.io/post/logio-brief-zh-cn/&quot;&gt;中文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Real-time log monitoring in your browser.&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://madordie.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="tool" scheme="https://madordie.github.io/tags/tool/"/>
    
      <category term="logio" scheme="https://madordie.github.io/tags/logio/"/>
    
  </entry>
  
  <entry>
    <title>Gitment/Gitalk自动初始化</title>
    <link href="https://madordie.github.io/post/blog-gitment-auto-setup/"/>
    <id>https://madordie.github.io/post/blog-gitment-auto-setup/</id>
    <published>2018-08-29T08:58:47.000Z</published>
    <updated>2020-07-23T03:50:48.617Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>一个ruby脚本解放你双手啪啪啪的敲键盘三分钟～</p><p>PS.</p><ul><li>ruby新手，轻拍。。</li><li>三是虚指。。</li></ul><a id="more"></a><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>之前看到人家的私站都是用的<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>做的评论系统。。很想要，但是人家没有用<a href="https://pages.github.com/" target="_blank" rel="noopener">pages</a>这样的玩意。。</p><p>今天看到<a href="http://awhisper.github.io/" target="_blank" rel="noopener">味精</a>大佬的RSS跪了，然后看到人家用的是GitHub的评论。。顿时觉得想要，23333</p><p>然后看了一哈 是这个：<a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">gitment</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>这个我就不说了，作者有写中文文档，看一眼就明白了。</p><p>列一下我的使用<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT主题</a>的配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitment</span></span><br><span class="line"><span class="comment"># Introduction: https://imsun.net/posts/gitment-introduction/</span></span><br><span class="line"><span class="attr">gitment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mint:</span> <span class="literal">true</span> <span class="comment"># RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Show comments count in post meta area</span></span><br><span class="line">  <span class="attr">lazy:</span> <span class="literal">false</span> <span class="comment"># Comments lazy loading with a button</span></span><br><span class="line">  <span class="attr">cleanly:</span> <span class="literal">false</span> <span class="comment"># Hide 'Powered by ...' on footer, and more</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Force language, or auto switch by theme</span></span><br><span class="line">  <span class="attr">github_user:</span> <span class="string">xxxxxx</span> <span class="comment"># MUST HAVE, Your Github ID</span></span><br><span class="line">  <span class="attr">github_repo:</span> <span class="string">xxxxxx</span> <span class="comment"># MUST HAVE, The repo you use to store Gitment comments</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">xxxxxx</span> <span class="comment"># MUST HAVE, Github client id for the Gitment</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">xxxxxx</span> <span class="comment"># EITHER this or proxy_gateway, Github access secret token for the Gitment</span></span><br><span class="line">  <span class="attr">proxy_gateway:</span> <span class="comment"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line">  <span class="attr">redirect_protocol:</span> <span class="comment"># Protocol of redirect_uri with force_redirect_protocol when mint enabled</span></span><br></pre></td></tr></table></figure><h2 id="Gitment"><a href="#Gitment" class="headerlink" title="Gitment"></a>Gitment</h2><p>关于作者的<a href="https://github.com/imsun/gitment/issues/8" target="_blank" rel="noopener">初始化评论框方案讨论</a>还在讨论中。。。</p><p>但是我要用。。等是不可能等的了。</p><p>看到<a href="https://draveness.me/git-comments-initialize" target="_blank" rel="noopener">自动初始化 Gitalk 和 Gitment 评论</a>的脚本想着刚好我的也是自动发布、备份，这不是刚好嘛。。</p><p>但是存在多次执行就会多次创建的问题。这不是我想要的。</p><h3 id="第一版：支持多次执行"><a href="#第一版：支持多次执行" class="headerlink" title="第一版：支持多次执行"></a>第一版：支持多次执行</h3><p>GitHub提供较为完善的API，用我这水水的rb水平，大致可以完善如下：</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from : https://madordie.github.io/post/blog-gitment-auto-setup</span></span><br><span class="line"><span class="comment"># 另外，token已放在.git-token文件下，防止泄漏。。</span></span><br><span class="line"></span><br><span class="line">username = <span class="string">"madordie"</span> <span class="comment"># GitHub 用户名</span></span><br><span class="line">token = <span class="string">`cat .git-token`</span>  <span class="comment"># GitHub Token</span></span><br><span class="line">repo_name = <span class="string">"madordie.github.io"</span> <span class="comment"># 存放 issues</span></span><br><span class="line">sitemap_url = <span class="string">"https://raw.githubusercontent.com/madordie/madordie.github.io/master/sitemap.xml"</span> <span class="comment"># sitemap 此处由于github.io不是立马生效，但是仓库是立马生效的，所以此处应该更换为仓库的raw</span></span><br><span class="line">kind = <span class="string">"gitment"</span> <span class="comment"># "Gitalk" or "gitment"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'open-uri'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'faraday'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'active_support'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'active_support/core_ext'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sitemap-parser'</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"正在检索URL"</span></span><br><span class="line"></span><br><span class="line">sitemap = SitemapParser.new sitemap_url</span><br><span class="line">urls = sitemap.to_a</span><br><span class="line"></span><br><span class="line">puts <span class="string">"检索到文章共<span class="subst">#&#123;urls.count&#125;</span>个"</span></span><br><span class="line"></span><br><span class="line">conn = Faraday.new(<span class="symbol">:url</span> =&gt; <span class="string">"https://api.github.com"</span>) <span class="keyword">do</span> <span class="params">|conn|</span></span><br><span class="line">  conn.basic_auth(username, token)</span><br><span class="line">  conn.headers[<span class="string">'Accept'</span>] = <span class="string">"application/vnd.github.symmetra-preview+json"</span></span><br><span class="line">  conn.adapter  Faraday.default_adapter</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">commenteds = Array.new</span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">  if [ ! -f .commenteds ]; then</span></span><br><span class="line"><span class="string">    touch .commenteds</span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">File.open(<span class="string">".commenteds"</span>, <span class="string">"r"</span>) <span class="keyword">do</span> <span class="params">|file|</span></span><br><span class="line">  file.each_line <span class="keyword">do</span> <span class="params">|line|</span></span><br><span class="line">    commenteds.push line</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">urls.each_with_index <span class="keyword">do</span> <span class="params">|url, index|</span></span><br><span class="line">  url = url.gsub(<span class="regexp">/index.html$/</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> commenteds.<span class="keyword">include</span>?(<span class="string">"<span class="subst">#&#123;url&#125;</span>\n"</span>) == <span class="literal">false</span></span><br><span class="line">    url_key = Digest::MD5.hexdigest(URI.parse(url).path)</span><br><span class="line">    response = conn.get <span class="string">"/search/issues?q=label:<span class="subst">#&#123;url_key&#125;</span>+state:open+repo:<span class="subst">#&#123;username&#125;</span>/<span class="subst">#&#123;repo_name&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    puts <span class="string">"正在创建: <span class="subst">#&#123;url&#125;</span>"</span></span><br><span class="line">    <span class="keyword">if</span> JSON.parse(response.body)[<span class="string">'total_count'</span>] &gt; <span class="number">0</span></span><br><span class="line">      puts <span class="string">"\t↳ 已存在"</span></span><br><span class="line">      <span class="string">`echo <span class="subst">#&#123;url&#125;</span> &gt;&gt; .commenteds`</span></span><br><span class="line">      title = open(url).read.scan(<span class="regexp">/&lt;title&gt;(.*?)&lt;\/title&gt;/</span>).first.first.force_encoding(<span class="string">'UTF-8'</span>)</span><br><span class="line"></span><br><span class="line">      response = conn.post(<span class="string">"/repos/<span class="subst">#&#123;username&#125;</span>/<span class="subst">#&#123;repo_name&#125;</span>/issues"</span>) <span class="keyword">do</span> <span class="params">|req|</span></span><br><span class="line">        req.body = &#123; <span class="symbol">body:</span> url, <span class="symbol">labels:</span> [kind, url], <span class="symbol">title:</span> title &#125;.to_json</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">if</span> JSON.parse(response.body)[<span class="string">'number'</span>] &gt; <span class="number">0</span></span><br><span class="line">        <span class="string">`echo <span class="subst">#&#123;url&#125;</span> &gt;&gt; .commenteds`</span></span><br><span class="line">        puts <span class="string">"\t↳ 已创建成功"</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        puts <span class="string">"\t↳ <span class="subst">#&#123;response.body&#125;</span>"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>脚本OK，还需要安装一些库用这个就行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install faraday activesupport sitemap-parser</span><br></pre></td></tr></table></figure><p>正常情况都会安装成功，那么跑一下脚本吧：</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby comment.rb</span><br></pre></td></tr></table></figure><p>第一次运行请求多，稍微等一会。表急。。</p><p>跑完之后如果你的链接总长度都是 <code>&lt;= 50</code> 字符，那么真嗨，这就行了。</p><p>但是如果以后有可能 <code>&gt; 50</code>，或者不确定以后会不会写一个链接贼长的文章，那么你可能还要往下再看一下。。</p><h3 id="第二版：兼容文章链接很长长长"><a href="#第二版：兼容文章链接很长长长" class="headerlink" title="第二版：兼容文章链接很长长长"></a>第二版：兼容文章链接很长长长</h3><p>关于这个的讨论很多，在issues中搜一下大约这样：<a href="https://github.com/imsun/gitment/issues?utf8=%E2%9C%93&q=is%253Aissue+validation+Failed" target="_blank" rel="noopener">Error: Validation Failed</a>。</p><p>这个<code>Error: Validation Failed</code>就是label太长。</p><p>关于这个问题在<a href="https://developer.github.com/v3/issues/labels/#create-a-label" target="_blank" rel="noopener">API: Create a label</a>并未提及。</p><p>但是在任何一个仓库下，按照<code>Issues -&gt; New label</code>的时候，输入的<code>Label name</code>是有限制的，输入超过<code>50</code>个自符之后便无法再接收输入。就酱，没找到什么文档。。</p><p>看了这个<a href="https://github.com/imsun/gitment/issues/116" target="_blank" rel="noopener">Validation Failed ID长度问题建议</a>之后觉得，MD5一下吧那就。。</p><p>为了选择一个KEY去MD5，顺便解决一下<a href="https://github.com/imsun/gitment/issues/168" target="_blank" rel="noopener">同一个页面，带锚点#more会初始化一条新的issue</a>这个问题，</p><p>所以KEY使用<a href="https://github.com/imsun/gitment/issues/68" target="_blank" rel="noopener">关于hexo博客单篇文章初始化两次的问题</a>中提出的<code>window.location.pathname</code>吧，但是关于<code>/</code>的讨论，我这里貌似并没有看到，我的都是有的😂。。如果看到的话再更，或者保险期间，先按照这种方案更新一下。</p><p>将上面的做完，现在的rb应该长这个样子:</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from : https://madordie.github.io/post/blog-gitment-auto-setup</span></span><br><span class="line"><span class="comment"># 另外，token已放在.git-token文件下,并被.gitignore标记，防止泄漏。。</span></span><br><span class="line"></span><br><span class="line">username = <span class="string">"madordie"</span> <span class="comment"># GitHub 用户名</span></span><br><span class="line">token = <span class="string">`cat .git-token`</span>  <span class="comment"># GitHub Token</span></span><br><span class="line">repo_name = <span class="string">"madordie.github.io"</span> <span class="comment"># 存放 issues</span></span><br><span class="line">sitemap_url = <span class="string">"https://madordie.github.io/sitemap.xml"</span> <span class="comment"># sitemap</span></span><br><span class="line">kind = <span class="string">"gitment"</span> <span class="comment"># "Gitalk" or "gitment"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'open-uri'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'faraday'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'active_support'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'active_support/core_ext'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sitemap-parser'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'digest'</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"正在检索URL"</span></span><br><span class="line"></span><br><span class="line">sitemap = SitemapParser.new sitemap_url</span><br><span class="line">urls = sitemap.to_a</span><br><span class="line"></span><br><span class="line">puts <span class="string">"检索到文章共<span class="subst">#&#123;urls.count&#125;</span>个"</span></span><br><span class="line"></span><br><span class="line">conn = Faraday.new(<span class="symbol">:url</span> =&gt; <span class="string">"https://api.github.com"</span>) <span class="keyword">do</span> <span class="params">|conn|</span></span><br><span class="line">  conn.basic_auth(username, token)</span><br><span class="line">  conn.headers[<span class="string">'Accept'</span>] = <span class="string">"application/vnd.github.symmetra-preview+json"</span></span><br><span class="line">  conn.adapter  Faraday.default_adapter</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">commenteds = Array.new</span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">  if [ ! -f .commenteds ]; then</span></span><br><span class="line"><span class="string">    touch .commenteds</span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">File.open(<span class="string">".commenteds"</span>, <span class="string">"r"</span>) <span class="keyword">do</span> <span class="params">|file|</span></span><br><span class="line">  file.each_line <span class="keyword">do</span> <span class="params">|line|</span></span><br><span class="line">      commenteds.push line</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">urls.each_with_index <span class="keyword">do</span> <span class="params">|url, index|</span></span><br><span class="line">  url.gsub!(<span class="regexp">/index.html$/</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> commenteds.<span class="keyword">include</span>?(<span class="string">"<span class="subst">#&#123;url&#125;</span>\n"</span>) == <span class="literal">false</span></span><br><span class="line">    url_key = Digest::MD5.hexdigest(URI.parse(url).path)</span><br><span class="line">    response = conn.get <span class="string">"/search/issues?q=label:<span class="subst">#&#123;url_key&#125;</span>+state:open+repo:<span class="subst">#&#123;username&#125;</span>/<span class="subst">#&#123;repo_name&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> JSON.parse(response.body)[<span class="string">'total_count'</span>] &gt; <span class="number">0</span></span><br><span class="line">      <span class="string">`echo <span class="subst">#&#123;url&#125;</span> &gt;&gt; .commenteds`</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      puts <span class="string">"正在创建: <span class="subst">#&#123;url&#125;</span>"</span></span><br><span class="line">      title = open(url).read.scan(<span class="regexp">/&lt;title&gt;(.*?)&lt;\/title&gt;/</span>).first.first.force_encoding(<span class="string">'UTF-8'</span>)</span><br><span class="line">      response = conn.post(<span class="string">"/repos/<span class="subst">#&#123;username&#125;</span>/<span class="subst">#&#123;repo_name&#125;</span>/issues"</span>) <span class="keyword">do</span> <span class="params">|req|</span></span><br><span class="line">        req.body = &#123; <span class="symbol">body:</span> url, <span class="symbol">labels:</span> [kind, url_key], <span class="symbol">title:</span> title &#125;.to_json</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">if</span> JSON.parse(response.body)[<span class="string">'number'</span>] &gt; <span class="number">0</span></span><br><span class="line">        <span class="string">`echo <span class="subst">#&#123;url&#125;</span> &gt;&gt; .commenteds`</span></span><br><span class="line">        puts <span class="string">"\t↳ 已创建成功"</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        puts <span class="string">"\t↳ <span class="subst">#&#123;response.body&#125;</span>"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>同时别忘了修改对应的网页。。我这里使用的是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT.Pisces v5.1.4</a></p><p>需要修改<code>/themes/next/layout/_third-party/comments/gitment.swig</code>文件，由于JS不支持MD5,所以还需要引入一个JS，于是乎大约这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    &#123;% if theme.gitment.mint %&#125;</span><br><span class="line">        &#123;% set CommentsClass &#x3D; &quot;Gitmint&quot; %&#125;</span><br><span class="line">        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;aimingoo.github.io&#x2F;gitmint&#x2F;style&#x2F;default.css&quot;&gt;</span><br><span class="line">        &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;aimingoo.github.io&#x2F;gitmint&#x2F;dist&#x2F;gitmint.browser.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">+       &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;blueimp-md5&#x2F;2.10.0&#x2F;js&#x2F;md5.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        &#123;% set CommentsClass &#x3D; &quot;Gitment&quot; %&#125;</span><br><span class="line">        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;style&#x2F;default.css&quot;&gt;</span><br><span class="line">        &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;dist&#x2F;gitment.browser.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">+       &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;blueimp-md5&#x2F;2.10.0&#x2F;js&#x2F;md5.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">...</span><br><span class="line">        var gitment &#x3D; new &#123;&#123;CommentsClass&#125;&#125;(&#123;</span><br><span class="line">-           id: document.location.href,</span><br><span class="line">+           id: md5(window.location.pathname.replace(&#x2F;index.html&#x2F;, &quot;&quot;)),</span><br><span class="line">            owner: &#39;&#123;&#123; theme.gitment.github_user &#125;&#125;&#39;,</span><br><span class="line">            repo: &#39;&#123;&#123; theme.gitment.github_repo &#125;&#125;&#39;,</span><br></pre></td></tr></table></figure><p>至于这个MD5的引入，我是随便搜的一个。。这个<code>if theme.gitment.mint</code>我并不知道在哪里配置的，所以俩都加上吧。</p><p>执行一下脚本吧，应该齐活了。</p><h2 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h2><p>好气啊, <a href="https://github.com/next-theme/hexo-theme-next" target="_blank" rel="noopener">Next主题</a>升级之后不支持Gitment了, 大概是因为上面种种问题吧, 所以,被迫来到了<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">Gitalk</a></p><p>真香警告.</p><p>回归本心,诉求就一个: 从<code>gitment</code>兼容至<code>gitalk</code>.</p><p>脚本需要配置项:</p><ul><li>.git-token = 放置token 切记注意添加<code>.gitignore</code></li><li>username = “madordie” # GitHub 用户名</li><li>token = <code>cat .git-token</code>  # GitHub Token</li><li>repo_name = “madordie.github.io” # 存放 issues</li><li>sitemap_url = “<a href="https://raw.githubusercontent.com/madordie/madordie.github.io/master/sitemap.xml&quot;" target="_blank" rel="noopener">https://raw.githubusercontent.com/madordie/madordie.github.io/master/sitemap.xml&quot;</a> # sitemap</li><li>kind = “Gitalk” # “Gitalk” or “gitment”</li></ul><p>然后, 脚本会识别<code>kind</code>是否已经添加, 如果没有添加会追一个<code>label</code>, 以确保能正常执行</p><figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from : https://madordie.github.io/post/blog-gitment-auto-setup</span></span><br><span class="line"><span class="comment"># 另外，token已放在.git-token文件下，防止泄漏。。</span></span><br><span class="line"></span><br><span class="line">username = <span class="string">"madordie"</span> <span class="comment"># GitHub 用户名</span></span><br><span class="line">token = <span class="string">`cat .git-token`</span>  <span class="comment"># GitHub Token</span></span><br><span class="line">repo_name = <span class="string">"madordie.github.io"</span> <span class="comment"># 存放 issues</span></span><br><span class="line">sitemap_url = <span class="string">"https://raw.githubusercontent.com/madordie/madordie.github.io/master/sitemap.xml"</span> <span class="comment"># sitemap</span></span><br><span class="line">kind = <span class="string">"Gitalk"</span> <span class="comment"># "Gitalk" or "gitment"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'open-uri'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'faraday'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'active_support'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'active_support/core_ext'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sitemap-parser'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'digest'</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"正在检索URL"</span></span><br><span class="line"></span><br><span class="line">sitemap = SitemapParser.new sitemap_url</span><br><span class="line">urls = sitemap.to_a</span><br><span class="line"></span><br><span class="line">puts <span class="string">"检索到文章共<span class="subst">#&#123;urls.count&#125;</span>个"</span></span><br><span class="line"></span><br><span class="line">conn = Faraday.new(<span class="symbol">:url</span> =&gt; <span class="string">"https://api.github.com/"</span>) <span class="keyword">do</span> <span class="params">|conn|</span></span><br><span class="line">  conn.basic_auth(username, token)</span><br><span class="line">  conn.headers[<span class="string">'Accept'</span>] = <span class="string">"application/vnd.github.symmetra-preview+json"</span></span><br><span class="line">  conn.adapter  Faraday.default_adapter</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">commenteds = Array.new</span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">  if [ ! -f .commenteds ]; then</span></span><br><span class="line"><span class="string">    touch .commenteds</span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">File.open(<span class="string">".commenteds"</span>, <span class="string">"r"</span>) <span class="keyword">do</span> <span class="params">|file|</span></span><br><span class="line">  file.each_line <span class="keyword">do</span> <span class="params">|line|</span></span><br><span class="line">      commenteds.push line</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">urls.each_with_index <span class="keyword">do</span> <span class="params">|url, index|</span></span><br><span class="line">  url = url.gsub(<span class="regexp">/index.html$/</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> commenteds.<span class="keyword">include</span>?(<span class="string">"<span class="subst">#&#123;url&#125;</span>\n"</span>) == <span class="literal">false</span></span><br><span class="line">    url_key = Digest::MD5.hexdigest(URI.parse(url).path)</span><br><span class="line">    response = conn.get <span class="string">"/search/issues?q=label:<span class="subst">#&#123;url_key&#125;</span>+state:open+repo:<span class="subst">#&#123;username&#125;</span>/<span class="subst">#&#123;repo_name&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    puts <span class="string">"正在创建: <span class="subst">#&#123;url&#125;</span> -&gt; [<span class="subst">#&#123;url_key&#125;</span>, <span class="subst">#&#123;kind&#125;</span>]"</span></span><br><span class="line">    labels = JSON.parse(response.body)[<span class="string">"items"</span>]</span><br><span class="line">      .map &#123; <span class="params">|item|</span></span><br><span class="line">        item[<span class="string">"labels"</span>].map &#123; <span class="params">|label|</span> label[<span class="string">"name"</span>] &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .flatten</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> labels.<span class="keyword">include</span>?(url_key)</span><br><span class="line">      <span class="keyword">if</span> labels.<span class="keyword">include</span>?(kind)</span><br><span class="line">        puts <span class="string">"\t↳ 已存在"</span></span><br><span class="line">        <span class="string">`echo <span class="subst">#&#123;url&#125;</span> &gt;&gt; .commenteds`</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        issue_id = JSON.parse(response.body)[<span class="string">"items"</span>]</span><br><span class="line">          .map &#123; <span class="params">|item|</span> item[<span class="string">"number"</span>] &#125;</span><br><span class="line">          .first</span><br><span class="line"></span><br><span class="line">        puts <span class="string">"\t↳ 正在为评论(<span class="subst">#&#123;issue_id&#125;</span>)增加`<span class="subst">#&#123;kind&#125;</span>`标签"</span></span><br><span class="line">        response = conn.post(<span class="string">"/repos/<span class="subst">#&#123;username&#125;</span>/<span class="subst">#&#123;repo_name&#125;</span>/issues/<span class="subst">#&#123;issue_id&#125;</span>/labels"</span>) <span class="keyword">do</span> <span class="params">|req|</span></span><br><span class="line">          req.body = &#123; <span class="symbol">labels:</span> [kind] &#125;.to_json</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> response.status == <span class="number">200</span></span><br><span class="line">          <span class="string">`echo <span class="subst">#&#123;url&#125;</span> &gt;&gt; .commenteds`</span></span><br><span class="line">          puts <span class="string">"\t\t↳ 已增加成功"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          puts <span class="string">"\t↳ <span class="subst">#&#123;response.body&#125;</span>"</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      title = open(url).read.scan(<span class="regexp">/&lt;title&gt;(.*?)&lt;\/title&gt;/</span>).first.first.force_encoding(<span class="string">'UTF-8'</span>)</span><br><span class="line">      response = conn.post(<span class="string">"/repos/<span class="subst">#&#123;username&#125;</span>/<span class="subst">#&#123;repo_name&#125;</span>/issues"</span>) <span class="keyword">do</span> <span class="params">|req|</span></span><br><span class="line">        req.body = &#123; <span class="symbol">body:</span> url, <span class="symbol">labels:</span> [kind, url_key], <span class="symbol">title:</span> title &#125;.to_json</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">if</span> JSON.parse(response.body)[<span class="string">'number'</span>] &gt; <span class="number">0</span></span><br><span class="line">        <span class="string">`echo <span class="subst">#&#123;url&#125;</span> &gt;&gt; .commenteds`</span></span><br><span class="line">        puts <span class="string">"\t↳ 已创建成功"</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        puts <span class="string">"\t↳ <span class="subst">#&#123;response.body&#125;</span>"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul><li>文中提到的关于链接<code>/</code>飘忽不定的事情我没碰到，我是直接取的<a href="https://madordie.github.io/sitemap.xml">sitemap</a>，貌似每个文章都带了<code>/</code></li><li>文中的引用啥的我都标记了链接，如有漏掉、不明白，麻烦告诉我一哈，我去补一下</li><li>我只是个小小的iOS，对ruby、js懂得不多，rb写的不好的地方轻拍</li><li>哦对了，这脚本全部在这里：<a href="https://github.com/madordie/madordie.github.io/blob/master/comment.rb" target="_blank" rel="noopener">comment.rb</a>。同时，这个脚本我又放在了自动发布的shell脚本里面，同样shell写的很水。。放在了这里：<a href="https://github.com/madordie/madordie.github.io/blob/master/deploy.sh" target="_blank" rel="noopener">deploy.sh</a>，而且是很早之前就写了的。。</li><li>如果还有什么问题，可以拉出来讨论一哈 ;)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个ruby脚本解放你双手啪啪啪的敲键盘三分钟～&lt;/p&gt;
&lt;p&gt;PS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ruby新手，轻拍。。&lt;/li&gt;
&lt;li&gt;三是虚指。。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具" scheme="https://madordie.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="blog" scheme="https://madordie.github.io/tags/blog/"/>
    
      <category term="gitment" scheme="https://madordie.github.io/tags/gitment/"/>
    
      <category term="gitalk" scheme="https://madordie.github.io/tags/gitalk/"/>
    
  </entry>
  
  <entry>
    <title>UIFont字体信息</title>
    <link href="https://madordie.github.io/post/uifont-infos/"/>
    <id>https://madordie.github.io/post/uifont-infos/</id>
    <published>2018-08-16T10:43:20.000Z</published>
    <updated>2018-08-23T03:17:26.448Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>iOS系统下字体信息。</p><a id="more"></a><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ul><li>iOS12.0(16A5357b)</li><li>iPhone6</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> label = <span class="type">UILabel</span>()</span><br><span class="line">label.text = <span class="string">"这是啥"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> format: (<span class="type">UIFont</span>) -&gt; [<span class="type">String</span>: <span class="type">Any</span>] = &#123; (font) <span class="keyword">in</span></span><br><span class="line">    label.font = font</span><br><span class="line">    label.sizeToFit()</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">"font.familyName"</span>: font.familyName,</span><br><span class="line">            <span class="string">"font.fontName"</span>: font.fontName,</span><br><span class="line">            <span class="string">"font.pointSize"</span>: font.pointSize,</span><br><span class="line">            <span class="string">"font.ascender"</span>: font.ascender,</span><br><span class="line">            <span class="string">"font.descender"</span>: font.descender,</span><br><span class="line">            <span class="string">"font.capHeight"</span>: font.capHeight,</span><br><span class="line">            <span class="string">"font.xHeight"</span>: font.xHeight,</span><br><span class="line">            <span class="string">"font.lineHeight"</span>: font.lineHeight,</span><br><span class="line">            <span class="string">"font.leading"</span>: font.leading,</span><br><span class="line">            <span class="string">"label.sizeToFit"</span>: label.frame.height]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json: [<span class="type">String</span>: [[<span class="type">String</span>: <span class="type">Any</span>]]] = [:]</span><br><span class="line"><span class="keyword">for</span> family <span class="keyword">in</span> <span class="type">UIFont</span>.familyNames &#123;</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> <span class="type">UIFont</span>.fontNames(forFamilyName: family) &#123;</span><br><span class="line">        <span class="keyword">var</span> list: [[<span class="type">String</span>: <span class="type">Any</span>]] = []</span><br><span class="line">        <span class="keyword">for</span> size <span class="keyword">in</span> <span class="number">5</span>...<span class="number">60</span> &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> font = <span class="type">UIFont</span>.<span class="keyword">init</span>(name: name, size: <span class="type">CGFloat</span>(size)) <span class="keyword">else</span> &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">            list.append(format(font))</span><br><span class="line">        &#125;</span><br><span class="line">        json[<span class="string">"\(family) -&gt; \(name)"</span>] = list</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="type">String</span>(data:(<span class="keyword">try</span>? <span class="type">JSONSerialization</span>.data(withJSONObject: json, options: .prettyPrinted)) ?? <span class="type">Data</span>(), encoding: .utf8)!)</span><br></pre></td></tr></table></figure><h2 id="长长的数据"><a href="#长长的数据" class="headerlink" title="长长的数据"></a>长长的数据</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然而数据太多加载不出来。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS系统下字体信息。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="UIFont" scheme="https://madordie.github.io/tags/UIFont/"/>
    
  </entry>
  
  <entry>
    <title>从一个常见的崩溃开始</title>
    <link href="https://madordie.github.io/post/debug-sth-from-crash/"/>
    <id>https://madordie.github.io/post/debug-sth-from-crash/</id>
    <published>2018-07-25T02:38:04.000Z</published>
    <updated>2018-07-25T10:06:59.566Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>昨天下班时候一朋友碰到一个下面的崩溃，但是全局断点却无法断到指定位置。鉴于不信邪的态度，决定尝试一番。然后将此事记录如下文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;-[__NSCFConstantString hasPrefix:]: nil argument&#39;</span><br><span class="line">*** First throw call stack:</span><br><span class="line">(0x18521ed8c .....)</span><br><span class="line">libc++abi.dylib: terminating with uncaught exception of type NSException</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="崩溃表现"><a href="#崩溃表现" class="headerlink" title="崩溃表现"></a>崩溃表现</h2><p>那老哥说他的APP运行之后，什么都不做，等待10s之后就会闪退，闪退的最重要信息是上面，栈结构上没有函数信息，只有地址。</p><p>打开全局断点，也无法直接断到指定的函数，这个信息我留了一张图，大致如下：(已脱敏)</p><p><img src="/images/2018-07-25-10-52-38.png" alt="崩溃截图"></p><h2 id="先简单的分析一下"><a href="#先简单的分析一下" class="headerlink" title="先简单的分析一下"></a>先简单的分析一下</h2><ul><li>崩溃原因很明确:<code>-[__NSCFConstantString hasPrefix:]: nil argument</code>。</li><li><code>__NSCFConstantString</code>为<code>NSString</code>类簇里面的一个类，常见的类似的还有很多。</li><li><code>- (BOOL)hasPrefix:(NSString *)str;</code>中<code>nil argument</code>，也就是<code>str</code>为<code>nil</code>。</li><li><code>First throw call stack</code>下方均为地址，说明此函数应该在一个<code>.a/.framework</code>中。</li><li><code>APP运行之后，什么都不做，等待10s之后就会闪退</code>说明此崩溃为异步调用，至于是不是定时调用，这个真不好说。</li><li>由于我技术有限，别的好像提炼不出有用信息了。。</li></ul><h2 id="复现一下崩溃"><a href="#复现一下崩溃" class="headerlink" title="复现一下崩溃"></a>复现一下崩溃</h2><p>先来个简单的代码，验证一下 ** <code>- (BOOL)hasPrefix:(NSString *)str;</code>中<code>nil argument</code>，也就是<code>str</code>为<code>nil</code>。 **</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, @([<span class="string">@""</span> hasPrefix:<span class="literal">nil</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下，结果很意料之中，得出如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Untitled.m:<span class="number">4</span>:<span class="number">29</span>: warning: null passed to a callee that requires a non-null argument [-Wnonnull]</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, @([<span class="string">@""</span> hasPrefix:<span class="literal">nil</span>]));</span><br><span class="line">                            ^         ~~~</span><br><span class="line"><span class="number">1</span> warning generated.</span><br><span class="line">Terminated due to signal: ABORT TRAP (<span class="number">6</span>)</span><br><span class="line"><span class="number">2018</span><span class="number">-07</span><span class="number">-25</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">50.569</span> Untitled[<span class="number">53770</span>:<span class="number">899141</span>] *** Terminating app due to uncaught exception <span class="string">'NSInvalidArgumentException'</span>, reason: <span class="string">'-[__NSCFConstantString hasPrefix:]: nil argument'</span></span><br><span class="line">*** First throw call stack:</span><br><span class="line">(</span><br><span class="line"><span class="number">0</span>   CoreFoundation                      <span class="number">0x00007fff30aae2db</span> __exceptionPreprocess + <span class="number">171</span></span><br><span class="line"><span class="number">1</span>   libobjc.A.dylib                     <span class="number">0x00007fff57c58c76</span> objc_exception_throw + <span class="number">48</span></span><br><span class="line"><span class="number">2</span>   CoreFoundation                      <span class="number">0x00007fff30b3fd7d</span> +[<span class="built_in">NSException</span> raise:format:] + <span class="number">205</span></span><br><span class="line"><span class="number">3</span>   CoreFoundation                      <span class="number">0x00007fff30a01840</span> -[__NSCFString hasPrefix:] + <span class="number">96</span></span><br><span class="line"><span class="number">4</span>   Untitled                            <span class="number">0x000000010787fd60</span> main + <span class="number">64</span></span><br><span class="line"><span class="number">5</span>   libdyld.dylib                       <span class="number">0x00007fff58872015</span> start + <span class="number">1</span></span><br><span class="line">)</span><br><span class="line">libc++abi.dylib: terminating with uncaught exception of type <span class="built_in">NSException</span></span><br></pre></td></tr></table></figure><p>经过<code>1 warning generated</code>之后，果断崩溃了，还有明确的崩溃时候栈结构。</p><p>好，问题确定了就是这个<code>1 warning generated</code>造成的。改下就完事咯～～</p><h2 id="寻找问题"><a href="#寻找问题" class="headerlink" title="寻找问题"></a>寻找问题</h2><h3 id="尝试解除warning"><a href="#尝试解除warning" class="headerlink" title="尝试解除warning"></a>尝试解除warning</h3><p>远程进去之后我震惊了，<code>warning: 999+</code>。先快速找到问题，要什么自行车。。</p><p>Xcode中全局搜索<code>hasPrefix</code>关键字，带变量的全部加上断点。</p><p>run一下，问题依旧如此。。正如上面说的一样：</p><blockquote><p><code>First throw call stack</code>下方均为地址，说明此函数应该在一个<code>.a/.framework</code>中。</p></blockquote><p>GO DIE…</p><p>PS.</p><ul><li>关于<code>hasPrefix</code>函数的<a href="https://developer.apple.com/documentation/foundation/nsstring/1410309-hasprefix?language=objc" target="_blank" rel="noopener">OC声明</a>、<a href="https://developer.apple.com/documentation/foundation/nsstring/1410309-hasprefix" target="_blank" rel="noopener">swift声明</a>均为完整字符串，所以安心全局搜索就能找到代码中已存在的<code>hasPrefix</code>函数</li><li>顺便搜了一下该项目不包含第三方<code>.a</code>, 但是<code>.framework</code>不少。。有<a href="https://cocoapods.org/" target="_blank" rel="noopener">CocoaPods</a>集成有直接拖进来的。。</li></ul><h3 id="尝试Method-Swizzling一下"><a href="#尝试Method-Swizzling一下" class="headerlink" title="尝试Method Swizzling一下"></a>尝试Method Swizzling一下</h3><p>这玩意既然在别人的framework中，那就更新一下咯，但是全部更新并不可取。。</p><p>framework的更新可能导致一些不可预估的可变因素。比如说API修改、内部逻辑变更导致外部使用不兼容、某些开发者喜欢直接修改framework、等。</p><p>所以先确定是哪个framework。</p><p>Method Swizzling。将其<code>-[__NSCFConstantString hasPrefix:]: nil argument</code>直接过滤<code>nil</code>，岂不美滋滋～～</p><p>好了先测试一下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MySafeString</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MySafeString</span></span></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    Class originalClass = <span class="built_in">NSClassFromString</span>(<span class="string">@"__NSCFConstantString"</span>);</span><br><span class="line">    Class swizzledClass = [<span class="keyword">self</span> <span class="keyword">class</span>];</span><br><span class="line">    SEL originalSelector = <span class="keyword">@selector</span>(hasPrefix:);</span><br><span class="line">    SEL swizzledSelector = <span class="keyword">@selector</span>(safe_hasPrefix:);</span><br><span class="line">    Method originalMethod = class_getInstanceMethod(originalClass, originalSelector);</span><br><span class="line">    Method swizzledMethod = class_getInstanceMethod(swizzledClass, swizzledSelector);</span><br><span class="line">    </span><br><span class="line">    IMP originalIMP = method_getImplementation(originalMethod);</span><br><span class="line">    IMP swizzledIMP = method_getImplementation(swizzledMethod);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *originalType = method_getTypeEncoding(originalMethod);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *swizzledType = method_getTypeEncoding(swizzledMethod);</span><br><span class="line">    </span><br><span class="line">    class_replaceMethod(originalClass,swizzledSelector,originalIMP,originalType);</span><br><span class="line">    class_replaceMethod(originalClass,originalSelector,swizzledIMP,swizzledType);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">BOOL</span>)safe_hasPrefix:(<span class="built_in">NSString</span> *)str &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> [<span class="keyword">self</span> safe_hasPrefix:str];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, @([<span class="string">@""</span> hasPrefix:<span class="literal">nil</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Untitled.m:<span class="number">33</span>:<span class="number">29</span>: warning: null passed to a callee that requires a non-null argument [-Wnonnull]</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, @([<span class="string">@""</span> hasPrefix:<span class="literal">nil</span>]));</span><br><span class="line">                            ^         ~~~</span><br><span class="line"><span class="number">1</span> warnings generated.</span><br><span class="line"><span class="number">2018</span><span class="number">-07</span><span class="number">-25</span> <span class="number">11</span>:<span class="number">32</span>:<span class="number">20.634</span> Untitled[<span class="number">54520</span>:<span class="number">926937</span>] <span class="number">1</span></span><br></pre></td></tr></table></figure><p>不崩溃了，赶紧粘过去，并在<code>- (BOOL)safe_hasPrefix:(NSString *)str</code>中的<code>return YES;</code>打上断点。</p><p>内心得到了极大的满足～ 美滋滋～～～</p><p>2分钟后。</p><p>断点停了，向<code>- (BOOL)safe_hasPrefix:(NSString *)str</code>的<code>str</code>传nil的调用者是<code>[MOBFErrorReportService writeHTTPErrorMsg:error:]</code>。</p><p>将<code>MOBFErrorReportService</code>放入<a href="https://www.google.com/" target="_blank" rel="noopener">Google</a>看到第二个就是这个<a href="http://bbs.mob.com/thread-23618-1-1.html" target="_blank" rel="noopener">[MOBFDevice duid] - BUG提交- Mob官方论坛</a>。文中指出<code>SDK 版本: ShareSDKVersion-3.5.1</code>。</p><p>好了看一下<code>ShareSDK</code>这个库。emmm 这个库是拖拽进去的。老哥说这项目接手之后没更新过这个库。</p><p>事已至此，确定是<code>ShareSDK</code>的问题。</p><p>更新之，问题解决～  真心的美滋滋～～</p><p>PS.</p><ul><li>上文中关于类簇的 Method Swizzling，详见<a href="http://www.tanhao.me/code/160723.html/" target="_blank" rel="noopener">Method Swizzling的各种姿势</a>。</li></ul><h2 id="寻找的过程部分特写"><a href="#寻找的过程部分特写" class="headerlink" title="寻找的过程部分特写"></a>寻找的过程部分特写</h2><p>上面的逻辑并不是一气呵成，而是由于粗心也走了部分弯路，特列出来引以为戒。</p><h3 id="看到全局断点真的走不到时"><a href="#看到全局断点真的走不到时" class="headerlink" title="看到全局断点真的走不到时"></a>看到全局断点真的走不到时</h3><p>由于代码是公司代码，也没有demo,所以布吉岛为啥确实断点不会走。。。</p><p>MMP 看到了<code>First throw call stack</code>之后第一反应是，这些地址应该可以还原到对应的位置。</p><p>然后想到了逆向里面的骚操作。顿时想逆向分析一下。。。</p><p>但由于看了一下<code>.app</code>中的可执行文件有 ** 40M ** ,算了算了，IDA载入的有点慢，这要好久才能分析完。。</p><p>想了想天要下雨，媳妇和娃都在外面。果断放弃分析一波的冲动，来<code>Method Swizzling</code>会更快。</p><h3 id="看走眼的-Method-Swizzling"><a href="#看走眼的-Method-Swizzling" class="headerlink" title="看走眼的 Method Swizzling"></a>看走眼的 Method Swizzling</h3><p>之前看过这个<a href="http://www.tanhao.me/code/160723.html/" target="_blank" rel="noopener">Method Swizzling的各种姿势</a>文章，印象深刻。</p><p>由于 ** Method Swizzling ** 风险不那么容易控制，所以并没用类簇相关的。</p><p>一顿<code>cmd c / cmd v</code>之后改了类名就扔了过去。当时大约这个样子：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)safe_hasPrefix:(<span class="built_in">NSString</span> *)str &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 此处会发生循环调用，是错误的示例</span></span><br><span class="line">        <span class="keyword">return</span> [(<span class="built_in">NSString</span> *)<span class="keyword">self</span> hasPrefix:str];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如我刚在上面的备注一样。</p><p>脑袋一热，这类簇会不会有别的坑，然后过分的自信忽略了<code>safe_</code>前缀，并写了个C的前缀比较：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)safe_hasPrefix:(<span class="built_in">NSString</span> *)str &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (((<span class="built_in">NSString</span> *)<span class="keyword">self</span>).length &lt; str.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 此处逻辑并未经过很多的测试用例测试，只是临时修补。实际方案应该直接调用safe_hasPrefix</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *str1 = [str cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *str2 = [(<span class="built_in">NSString</span> *)<span class="keyword">self</span> cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSInteger</span> idx = str.length; idx &gt;= <span class="number">0</span>; idx--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1[idx] != str2[idx]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一番梭哈之后，定位到了问题。</p><p>但是今天复盘的时候想到这个类簇的IMP正常的操作也不可能出现循环调用。。。。</p><p>然后发现昨天的一番梭哈真的是弱智。。惭愧惭愧。。。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><ul><li>解决问题的方案在于知识面的宽度。（一直为我没有通过<code>First throw call stack</code>直接定位而害羞）</li><li>着急下班的时候别写太多逻辑，容易漏。要么别着急，要么万分小心。</li><li>集成第三方SDK别瞎胡闹，使用代码直接集成(除非万不得已)。尽量使用<a href="https://cocoapods.org/" target="_blank" rel="noopener">CocoaPods</a>这样的工具。</li><li>代码中的 ** warning ** 记得消一下。成天<code>999+</code> 容易漏掉关键信息。</li><li>开发的第三方SDK一定要注意测试覆盖率。</li><li>swift大法好。swift不用<code>!</code>绝对不会有机会出现<code>func hasPrefix(_ str: String) -&gt; Bool</code>中参数<code>str</code>传空的可能 :)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天下班时候一朋友碰到一个下面的崩溃，但是全局断点却无法断到指定位置。鉴于不信邪的态度，决定尝试一番。然后将此事记录如下文。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;*** Terminating app due to uncaught exception &amp;#39;NSInvalidArgumentException&amp;#39;, reason: &amp;#39;-[__NSCFConstantString hasPrefix:]: nil argument&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*** First throw call stack:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(0x18521ed8c .....)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;libc++abi.dylib: terminating with uncaught exception of type NSException&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="DEBUG" scheme="https://madordie.github.io/tags/DEBUG/"/>
    
  </entry>
  
  <entry>
    <title>sketech模块同步插件</title>
    <link href="https://madordie.github.io/post/sync-sketchplugin/"/>
    <id>https://madordie.github.io/post/sync-sketchplugin/</id>
    <published>2018-06-21T10:33:47.000Z</published>
    <updated>2018-06-22T02:27:56.050Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Sketch-模块同步插件"><a href="#Sketch-模块同步插件" class="headerlink" title="Sketch 模块同步插件"></a>Sketch 模块同步插件</h2><p>通过该插件可以将sketch中的画板转换为data然后上传至服务器，并能通过插件将服务器的data下载至本地还原为之前的画板。</p><p><img src="https://github.com/madordie/sync-sketch-plugin/blob/master/Untitled.gif?raw=true" alt="预览"></p><a id="more"></a><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><p>功能的实现都是通过<a href="https://www.sketchapp.com/" target="_blank" rel="noopener">Sketch.app</a>的API实现</p><p>其核心功能就俩：</p><ul><li>将画板编码</li><li>解码为画板</li></ul><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><p>由于功能并不复杂，但是sketch并没有完整的API文档，所以只能摸索着来，最后总结一下用到的API，只有下面的几个重要函数。</p><p>但是要找到这些API并不是随手一个Google可以得到，现将其列出，方便你能随手Google一下就得到：）</p><p>另外，下面几部分的代码都通过<a href="https://github.com/ccgus/CocoaScript" target="_blank" rel="noopener">CocoaScript</a>的语法，所以可以直接应用到插件中。</p><p>为了能更好的理解和使用相关API，我尽量详细。</p><h3 id="将画板编码"><a href="#将画板编码" class="headerlink" title="将画板编码"></a>将画板编码</h3><p>本节会将所有已经选中的层所对应的画板转换为json字符串。</p><p>ps.</p><ul><li><code>层</code>包含sketch能够呈现的所有组件，包括但不限于：文本、矩形、图片、画板。</li><li>如果选中的层没有画板，将会被忽略。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selection = context.selection,</span><br><span class="line">    artboards = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; selection.count(); i++) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 取出选中的所有画板</span></span><br><span class="line">        <span class="keyword">var</span> artboard = selection[i].parentArtboard();</span><br><span class="line">        <span class="keyword">if</span> (artboards.indexOf(artboard) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// 过滤重复的画板</span></span><br><span class="line">            artboards.push(artboard);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (artboards.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 并无选中的任何画板</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时 artboards 数组， 即为当前选中的所有画板</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> selectionStrings = [];</span><br><span class="line">artboards.forEach(<span class="function"><span class="params">artboard</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 将画板转为JSON字符串，并保存在 selectionStrings 数组中</span></span><br><span class="line">        selectionStrings.push(MSJSONDataArchiver.archiveStringWithRootObject_error_(artboard.immutableModelObject(), nil));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将selectionStrings数组转为数组JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> selectionsString = <span class="string">'['</span> + selectionStrings.join(<span class="string">','</span>) + <span class="string">']'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时selectionsString字符串即为当前选中的所有画板的json数组字符串形式。</span></span><br></pre></td></tr></table></figure><h3 id="解码为画板"><a href="#解码为画板" class="headerlink" title="解码为画板"></a>解码为画板</h3><p>接上一节的<code>selectionsString</code>。</p><p>先将<code>selectionsString</code>转为<code>page</code>的json数据，然后解析为一个新的<code>page</code>，并居中展示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> selectionsString = res.layers,</span><br><span class="line">    pageUUID = NSUUID.UUID().UUIDString(),</span><br><span class="line">    <span class="comment">// 用page的JSON包裹selectionsString，同时生成一个新的UUID</span></span><br><span class="line">    pageString = <span class="string">'&#123;"_class":"page","do_objectID":"'</span> + pageUUID + <span class="string">'","layers":'</span> + selectionsString + <span class="string">'&#125;'</span>,</span><br><span class="line">    data = NSString.alloc().initWithString(pageString).dataUsingEncoding_(<span class="number">4</span>),</span><br><span class="line">    <span class="comment">// 将JSON解码</span></span><br><span class="line">    unarchive = MSJSONDataUnarchiver.unarchiveObjectWithData(data),</span><br><span class="line">    <span class="comment">// 生成新的page</span></span><br><span class="line">    newPage = MSPage.alloc().initWithImmutableModelObject(unarchive),</span><br><span class="line">    <span class="comment">// 插入一个新的page</span></span><br><span class="line">    page = MSDocument.currentDocument().addBlankPage();</span><br><span class="line"><span class="comment">// 将生成的page所有的layers转移到新的page里面</span></span><br><span class="line">page.addLayers(newPage.layers());</span><br><span class="line"><span class="comment">// 为page设置哥名字</span></span><br><span class="line">page.setName(res.project);</span><br><span class="line"><span class="comment">// page剧中</span></span><br><span class="line">MSDocument.currentDocument().contentDrawView().centerLayersInCanvas();</span><br><span class="line">MSDocument.currentDocument().pageTreeLayoutDidChange();</span><br></pre></td></tr></table></figure><h3 id="其他代码"><a href="#其他代码" class="headerlink" title="其他代码"></a>其他代码</h3><p>关于别的后端操作啊 什么的我认为并不是核心代码。那代码谁都会写。。毕竟我写这个的时候只有2周的摸索经验😂，还是不聊这个了。</p><ul><li><code>sync-npm</code> 插件相关的目录，采用<a href="https://github.com/skpm/skpm" target="_blank" rel="noopener">skpm</a>构建</li><li><code>sync-server</code> 插件对应的服务端代码，采用<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node-js</a>构建</li></ul><h2 id="目前还存在的问题"><a href="#目前还存在的问题" class="headerlink" title="目前还存在的问题"></a>目前还存在的问题</h2><ul><li>如果是带图片的画板，并且较多的时候，<code>selectionsString</code>会很大，传输速度有点慢。。</li><li>UI交互有点吃藕。。最好开发一套macOS的UI，但是我还是只菜鸡。。</li><li>项目的代码我只是简简单单的连学带写2周做出来的。。写的不是一般的渣，见谅。。</li></ul><h2 id="你可能需要的参考资料"><a href="#你可能需要的参考资料" class="headerlink" title="你可能需要的参考资料"></a>你可能需要的参考资料</h2><ul><li>Sketch的头文件：<a href="https://github.com/abynim/Sketch-Headers" target="_blank" rel="noopener">Sketch-Headers</a>，可以省去自己<a href="http://stevenygard.com/projects/class-dump/" target="_blank" rel="noopener">class-dump</a>的麻烦.</li><li>插件开发神器：<a href="https://github.com/skpm/skpm" target="_blank" rel="noopener">skpm</a></li><li>用来调试很不错：<a href="https://github.com/skpm/sketch-dev-tools" target="_blank" rel="noopener">Sketch DevTools</a></li><li>官方开发文档：<a href="https://developer.sketchapp.com/" target="_blank" rel="noopener">Sketch Developer</a></li><li>插件开发社区：<a href="https://sketchplugins.com/" target="_blank" rel="noopener">Sketch Developers</a></li><li>插件使用的语言：<a href="https://github.com/ccgus/CocoaScript" target="_blank" rel="noopener">CocoaScript</a>，但是并不仅限这一种哟</li><li>推荐搜索引擎: <a href="https://www.google.com/" target="_blank" rel="noopener">Google</a>，别问我为什么用Google不用百度，我是不会告诉你sketch插件开发本来资料就少，国内更少的。。</li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>老规矩：<a href="https://github.com/madordie/sync-sketch-plugin" target="_blank" rel="noopener">madordie/sync-sketch-plugin</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sketch-模块同步插件&quot;&gt;&lt;a href=&quot;#Sketch-模块同步插件&quot; class=&quot;headerlink&quot; title=&quot;Sketch 模块同步插件&quot;&gt;&lt;/a&gt;Sketch 模块同步插件&lt;/h2&gt;&lt;p&gt;通过该插件可以将sketch中的画板转换为data然后上传至服务器，并能通过插件将服务器的data下载至本地还原为之前的画板。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/madordie/sync-sketch-plugin/blob/master/Untitled.gif?raw=true&quot; alt=&quot;预览&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://madordie.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Sketchplugin" scheme="https://madordie.github.io/tags/Sketchplugin/"/>
    
  </entry>
  
  <entry>
    <title>关于日志打印和过滤的那点破事</title>
    <link href="https://madordie.github.io/post/reverse-ios-socat-watch-filter/"/>
    <id>https://madordie.github.io/post/reverse-ios-socat-watch-filter/</id>
    <published>2018-06-14T16:00:00.000Z</published>
    <updated>2018-07-02T11:05:37.344Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>前两天，重启电脑突然发现我的<code>iOS8</code>设备无法连接到<code>MacOS</code>了。。</p><p>MMP，也就是说没有办法使用Xcode调试、之前使用的日志查看也没有办法继续。。</p><p>具体报错如下：<br><code>Xcode&lt;Version 9.4 (9F1027a)&gt;</code>报错如下: (我安装过<code>Xcode10 beta1</code>)<br><img src="/images/2018-06-15-10-13-16.png" alt="Xcode报错"></p><p><code>iTunes</code>报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iTunes 无法连接 iPhone “iPhone”，因为收到来自此设备的无效响应。</span><br></pre></td></tr></table></figure><p><img src="/images/2018-06-15-10-06-16.png" alt="iTunes报错"></p><p><code>Apple Configurator2</code>报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已收到设备上的意外响应。</span><br></pre></td></tr></table></figure><p><img src="/images/2018-06-15-10-09-33.png" alt="Apple Configurator2报错"></p><a id="more"></a><p>还是 先来聊一下日志打印的几种方案吧。</p><h2 id="手机可以连接到MacOS"><a href="#手机可以连接到MacOS" class="headerlink" title="手机可以连接到MacOS"></a>手机可以连接到MacOS</h2><p>这种情况是最常见的，就是能在Xcode下Debug….</p><h3 id="方案一：Console-app-控制台"><a href="#方案一：Console-app-控制台" class="headerlink" title="方案一：Console.app(控制台)"></a>方案一：Console.app(控制台)</h3><p>这是MacOS自带的日志神器～ 效果顶呱呱👍👍👍，截图如下：<br><img src="/images/2018-06-15-10-23-02.png" alt="Console.app"></p><p>具体用法我就不说了。。。毕竟都是中文😂</p><h3 id="方案二：LogGuru"><a href="#方案二：LogGuru" class="headerlink" title="方案二：LogGuru"></a>方案二：LogGuru</h3><p><a href="https://github.com/madordie/LogGuru" target="_blank" rel="noopener">madordie/LogGuru</a> 也不错，很久之前fork自<a href="https://github.com/FIRHQ/LogGuru" target="_blank" rel="noopener">FIRHQ/LogGuru</a>，增加了直接过滤的功能，要不然速度真的很慢。。</p><p>只要插入USB，即可显示日志，还是不错滴。。</p><p><img src="/images/2018-06-15-10-29-07.png" alt="原来的截图"></p><h3 id="方案三-其他的"><a href="#方案三-其他的" class="headerlink" title="方案三: 其他的"></a>方案三: 其他的</h3><p>还有很多方案，比如说命令行啊、其他的工具啊，我就不说了，我觉得 <strong>Console.app(控制台)</strong> 就够了😂</p><h2 id="手机无法链接进MacOS"><a href="#手机无法链接进MacOS" class="headerlink" title="手机无法链接进MacOS"></a>手机无法链接进MacOS</h2><p>也就是最开始说的报错的情况下，可以连接进MacOS的方案均无法使用。苦逼，只能让iOS打印日志了。。</p><p>下面都是 <strong>越狱环境</strong> 下的。。不越狱还有人用iOS8么😂</p><p>先来看个文档：<a href="https://www.theiphonewiki.com/wiki/System_Log" target="_blank" rel="noopener">The iPhone Wiki/System Log</a>,这里提供了很多方案，也非常全面，值得一试。</p><p>苦逼的事情是我手上的iOS8.4.1无法使用<code>syslogd to /var/log/syslog</code>插件，尝试使用<a href="https://www.theiphonewiki.com/wiki/System_Log#On-device_with_saving_to_a_file_via_a_Python_script" target="_blank" rel="noopener">On-device with saving to a file via a Python script</a>的方案去解决也并不如意。。</p><p>开始用<a href="https://www.theiphonewiki.com/wiki/System_Log#On-device_with_socat" target="_blank" rel="noopener">On-device with socat</a>（ 在<a href="http://bbs.iosre.com/" target="_blank" rel="noopener">iosre</a>中也有一个类似的文章：<a href="http://bbs.iosre.com/t/ios-socat/139" target="_blank" rel="noopener">iOS查看日志利器 —— socat</a>），说的都是相当的详细。</p><h3 id="socat的坑"><a href="#socat的坑" class="headerlink" title="socat的坑"></a>socat的坑</h3><h4 id="stop没有用"><a href="#stop没有用" class="headerlink" title="stop没有用"></a>stop没有用</h4><p>如<a href="http://bbs.iosre.com/t/ios-socat/139" target="_blank" rel="noopener">iOS查看日志利器 —— socat</a>所说：</p><blockquote><p>输入watch查看，输入stop停止（不过停止貌似没用，也不知道为啥，知道的请告诉我）</p></blockquote><p>这个真的是没有用，所以<code>watch</code>功能就很鸡肋。。</p><h4 id="没有办法实时过滤"><a href="#没有办法实时过滤" class="headerlink" title="没有办法实时过滤"></a>没有办法实时过滤</h4><p>文中提到了很多过滤条件，但是一旦开启过滤，就没有办法显示实时日志。。也就是说无法和<code>watch</code>共存。。。</p><h3 id="换个姿势使用socat"><a href="#换个姿势使用socat" class="headerlink" title="换个姿势使用socat"></a>换个姿势使用socat</h3><p><code>socat</code>的日志都在终端上，不着色不说还有上面的两个很影响使用的问题。。。于是乎，为了增加过滤功能，需要通过管道将输出接入另外的命令如：<code>grep</code>等。</p><p><code>socat</code>命令需要手动输入<code>watch</code>才能显示出实时命令，这个让管道并不能直接使用。这里需要借助<code>expect</code>命令。</p><p>好了所有的点都通了，大致步骤如下：</p><h4 id="在mac上安装expect"><a href="#在mac上安装expect" class="headerlink" title="在mac上安装expect"></a>在mac上安装expect</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install expect</span><br></pre></td></tr></table></figure><h4 id="在mac的～-bash-profile配置"><a href="#在mac的～-bash-profile配置" class="headerlink" title="在mac的～/.bash_profile配置"></a>在mac的～/.bash_profile配置</h4><p>此处假设你的设备已经按照<a href="../reverse-ios-ssh">iOS逆向-设备ssh免密登录</a>配置好了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> ios-<span class="function"><span class="title">socat</span></span>() &#123;</span><br><span class="line">    expect -c <span class="string">"</span></span><br><span class="line"><span class="string">        spawn ssh i5s \"socat - UNIX-CONNECT:/var/run/lockdown/syslog.sock\"</span></span><br><span class="line"><span class="string">        expect &#123;</span></span><br><span class="line"><span class="string">            \"&gt; \" &#123;send \"watch\n\";&#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    interact"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ios-socat</code> 函数名，在命令行可以直接输入函数名调用该函数</li><li><code>i5s</code> 在<code>~/.ssh/config</code>中配置的名字</li></ul><p>如果没有配置ssh免密呢需要这样：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> ios-<span class="function"><span class="title">socat</span></span>() &#123;</span><br><span class="line">    expect -c <span class="string">"</span></span><br><span class="line"><span class="string">        spawn ssh -p22 root@ios's_ip \"socat - UNIX-CONNECT:/var/run/lockdown/syslog.sock\"</span></span><br><span class="line"><span class="string">        expect &#123;</span></span><br><span class="line"><span class="string">            \"*password: \" &#123;send \"mypassword\n\";&#125;</span></span><br><span class="line"><span class="string">            \"&gt; \" &#123;send \"watch\n\";&#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    interact"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>-p22</code> 端口号，22是默认不用写，但是其他的需要写。</li><li><code>ios&#39;s_ip</code> iOS设备的ip。</li><li><code>mypassword</code> iOS设备密码</li><li>这个我没测。。大致如此，我对<code>expect</code>的语法也不是很熟</li></ul><p>最后别忘了让<code>~/.bash_profile</code>生效：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>然后只需要在命令行输入<code>ios-socat</code>就可以看到蹭蹭蹭的日志打印咯。。至于用什么管道啊都不是问题。</p><p>比如：<br>只显示包含<code>iosre</code>关键字的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ios-socat | grep iosre</span><br></pre></td></tr></table></figure><h4 id="晋级用法"><a href="#晋级用法" class="headerlink" title="晋级用法"></a>晋级用法</h4><ul><li><p>我的iOS设备通过<code>iproxy</code>来进行端口映射。具体用法移步<a href="https://www.google.com/search?q=iproxy&oq=iproxy" target="_blank" rel="noopener">Google</a></p></li><li><p>通过<code>ios-socat &gt; ~/Desktop/ios.log</code> 然后下载<a href="https://itunes.apple.com/cn/app/logtail/id1073404370?mt=12" target="_blank" rel="noopener">LogTail</a>，剩下的摸索一下咯</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2></li></ul><p>我还不清楚究竟什么原因导致了<code>收到来自此设备的无效响应</code>错误，布吉岛系统修改了什么。我尝试重新安装iTunes、Xcode都无效（据说陌陌的开发为这个无法调试直接将系统降级是可以的😂）。。有老铁懂得指点下～～</p><p>目前虽然上面都可以用，但是看个日志并不能满足我的野心，最后在移动硬盘里做了一个10.12的系统😂，用了Console.app…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天，重启电脑突然发现我的&lt;code&gt;iOS8&lt;/code&gt;设备无法连接到&lt;code&gt;MacOS&lt;/code&gt;了。。&lt;/p&gt;
&lt;p&gt;MMP，也就是说没有办法使用Xcode调试、之前使用的日志查看也没有办法继续。。&lt;/p&gt;
&lt;p&gt;具体报错如下：&lt;br&gt;&lt;code&gt;Xcode&amp;lt;Version 9.4 (9F1027a)&amp;gt;&lt;/code&gt;报错如下: (我安装过&lt;code&gt;Xcode10 beta1&lt;/code&gt;)&lt;br&gt;&lt;img src=&quot;/images/2018-06-15-10-13-16.png&quot; alt=&quot;Xcode报错&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iTunes&lt;/code&gt;报错如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iTunes 无法连接 iPhone “iPhone”，因为收到来自此设备的无效响应。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-06-15-10-06-16.png&quot; alt=&quot;iTunes报错&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Apple Configurator2&lt;/code&gt;报错如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;已收到设备上的意外响应。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-06-15-10-09-33.png&quot; alt=&quot;Apple Configurator2报错&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="逆向" scheme="https://madordie.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS逆向-创建Cydia源</title>
    <link href="https://madordie.github.io/post/reverse-ios-creat-cydia-sources/"/>
    <id>https://madordie.github.io/post/reverse-ios-creat-cydia-sources/</id>
    <published>2018-01-01T16:00:00.000Z</published>
    <updated>2018-06-21T10:31:28.035Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>搭建自己的cydia源。</p><a id="more"></a><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Ubuntu 16.04 LTS</li></ul><h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><h4 id="dpkg-dev"><a href="#dpkg-dev" class="headerlink" title="dpkg-dev"></a>dpkg-dev</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install dpkg-dev</span><br><span class="line">$ dpkg-scanpackages --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><h3 id="开工"><a href="#开工" class="headerlink" title="开工"></a>开工</h3><h4 id="准备deb"><a href="#准备deb" class="headerlink" title="准备deb"></a>准备deb</h4><p>此处目录为<code>/opt/cydia/debs</code>，可以为别的，但是建议你也这样做:)。</p><h4 id="生成依赖"><a href="#生成依赖" class="headerlink" title="生成依赖"></a>生成依赖</h4><p>更新插件需要重新执行哟。。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt/cydia</span><br><span class="line">$ dpkg-scanpackages -m ./debs /dev/null &gt; Packages</span><br><span class="line">$ bzip2 Packages</span><br></pre></td></tr></table></figure><h4 id="添加sources-list"><a href="#添加sources-list" class="headerlink" title="添加sources.list"></a>添加sources.list</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"deb file:///opt/cydia ./debs/"</span> &gt;&gt; /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>ps. 注意路径信息</p><h4 id="更新一下"><a href="#更新一下" class="headerlink" title="更新一下"></a>更新一下</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get update</span><br></pre></td></tr></table></figure><h4 id="扔出去"><a href="#扔出去" class="headerlink" title="扔出去"></a>扔出去</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var/www/html</span><br><span class="line">$ ln -s /opt/cydia cydia</span><br><span class="line">$ /etc/init.d/nginx start</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.saurik.com/id/7" target="_blank" rel="noopener">http://www.saurik.com/id/7</a></li><li><a href="https://bbs.feng.com/read-htm-tid-8052646.html" target="_blank" rel="noopener">https://bbs.feng.com/read-htm-tid-8052646.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建自己的cydia源。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="逆向" scheme="https://madordie.github.io/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>描述文件获取UDID</title>
    <link href="https://madordie.github.io/post/ios-tool-configurator-get-udid/"/>
    <id>https://madordie.github.io/post/ios-tool-configurator-get-udid/</id>
    <published>2017-12-06T16:00:00.000Z</published>
    <updated>2018-08-13T02:19:58.647Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="UDID"><a href="#UDID" class="headerlink" title="UDID"></a>UDID</h3><p>对，就是在iTunes等工具上看到的UDID..</p><a id="more"></a><h3 id="工具及文档"><a href="#工具及文档" class="headerlink" title="工具及文档"></a>工具及文档</h3><p>嗯，Apple出的为数不多的mac app:<a href="https://itunes.apple.com/cn/app/apple-configurator-2/id1037126344?mt=12" target="_blank" rel="noopener">Apple Configurator 2</a></p><p>这个工具是有中文文档的：<a href="http://help.apple.com/configurator/mac/2.3/" target="_blank" rel="noopener">Apple Configurator 2 官方文档</a></p><p>当然还有比较暴力的直接写xml: <a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/iPhoneOTAConfiguration/ConfigurationProfileExamples/ConfigurationProfileExamples.html" target="_blank" rel="noopener">Apple的相关文档</a></p><hr><ul><li><a href="http://www.skyfox.org/safari-ios-device-udid.html" target="_blank" rel="noopener">通过Safari浏览器获取iOS设备UDID(设备唯一标识符)</a></li><li><a href="http://www.skyfox.org/ios-mobileconfig-sign.html" target="_blank" rel="noopener">为iOS的mobileconfig文件进行签名</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;UDID&quot;&gt;&lt;a href=&quot;#UDID&quot; class=&quot;headerlink&quot; title=&quot;UDID&quot;&gt;&lt;/a&gt;UDID&lt;/h3&gt;&lt;p&gt;对，就是在iTunes等工具上看到的UDID..&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="tool" scheme="https://madordie.github.io/tags/tool/"/>
    
      <category term="UDID" scheme="https://madordie.github.io/tags/UDID/"/>
    
  </entry>
  
  <entry>
    <title>「转」一张思维导图，让正则表达式不再难懂</title>
    <link href="https://madordie.github.io/post/reprinted-regular-mind-map/"/>
    <id>https://madordie.github.io/post/reprinted-regular-mind-map/</id>
    <published>2017-10-15T16:00:00.000Z</published>
    <updated>2017-10-16T02:26:02.834Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="/images/bruch-up-regular-expressions-1.png" alt="思维导图"></p><a id="more"></a><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><ul><li><p>普通字符：字母、数字、汉字、下划线，匹配与之相同的一个字符</p></li><li><p>简单转义字符：\n（换行）,\t（制表）,\（\本身）和 ^…（^等有特殊作用的符号如要匹配自己的话要用转义）</p></li><li><p>标准字符集合<br>注意区分大小写，大写是相反的意思，匹配相反是不匹配</p><ul><li>\d<br>  任意一个数字，0~9</li><li>\w<br>  任意一个字母、数字、汉字或下划线，A<del>Z、a</del>z、0~9、_和任意一个汉字</li><li>\s<br>  任意空白符，包括空格、制表符、换行符</li><li>.<br>  小数点可以匹配任意一个字符，换行除外（如果要匹配包括”\n”在内的所有字符，一般用[\s\S]）</li></ul></li><li><p>自定义字符集合<br>[ ]方括号匹配方式，能够匹配方括号中的任意一个字符,^表示取反</p><ul><li>[ab5@]<br>  匹配”a”或”b”或”5”或”@”</li><li>[^abc]<br>  匹配a、b、c之外的任意字符</li><li>[f-k]<br>  匹配“f”到”k”之间的字符</li><li>[^A-F0-3]<br>  匹配“A”-“F”,”0”-“3”之外的任意一个字符</li></ul></li></ul><h2 id="量词-Quantifier"><a href="#量词-Quantifier" class="headerlink" title="量词(Quantifier)"></a>量词(Quantifier)</h2><p>修饰前面的一个表达式，如果要修饰多个表达式，就用( )把表达式包起来</p><ul><li>{n}<br>  表达式重复n次​</li><li>{m,n}<br>  表达式至少重复m次，最多重复n次<ul><li>贪婪模式 （默认）<br>匹配符合的最长的字符串</li><li>非贪婪模式 （在量词后面加 ? 例：{m,n}? )<br>  匹配符合的最短的字符串</li></ul></li><li>{m,}<br>  表达式至少重复m次</li><li>？<br>  匹配表达式0或1次，相当于{0,1}</li><li>+<br>  表达式至少出现一次，相当于{1,}</li><li>*<br>  表达式不出现或出现任意次，相当于{0,}</li></ul><h2 id="字符边界"><a href="#字符边界" class="headerlink" title="字符边界"></a>字符边界</h2><pre><code>零宽：匹配的不是字符而是位置，符合某种条件的位置</code></pre><ul><li>^<br>  与字符串开始的地方匹配</li><li>$<br>  与字符串结束的地方匹配</li><li>\b<br>  匹配一个单词的边界，当前位置前面的字符和后面的字符不全是\w</li></ul><h2 id="预搜索（零宽断言、环视）"><a href="#预搜索（零宽断言、环视）" class="headerlink" title="预搜索（零宽断言、环视）"></a>预搜索（零宽断言、环视）</h2><p>零宽：匹配的不是字符而是位置，符合某种条件的位置</p><ul><li>(?=exp)<br>  断言自身出现的位置的后面能匹配表达式exp</li><li>(?!exp)<br>  断言自身出现的位置的后面不能匹配表达式exp</li><li>(?&lt;=exp)<br>  断言自身出现的位置的前面能匹配表达式exp</li><li>(?&lt;!exp)<br>  断言自身出现的位置的前面不能匹配表达式exp</li></ul><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><p>对文本的处理方式</p><ul><li>IGNORECASE 忽略大小写模式<br>  匹配时忽略大小写<br>  默认是区分大小写的</li><li>SINGLELINE 单行模式<br>  整个文本看作一个字符串，只有一个开头一个结尾<br>  使小数点”.”可以匹配包含换行符(\n)在内的任意字符</li><li>MULTILINE 多行模式<br>  每行都是一个字符串<br>  在多行模式下，如果需要仅匹配字符串开始和结束位置，可以使用\A和\Z</li></ul><h2 id="选择符和分组"><a href="#选择符和分组" class="headerlink" title="选择符和分组"></a>选择符和分组</h2><p>分支结构、捕获组合非捕获组</p><ul><li>| 分支结构​<br>  左右表达式之间“或”关系，匹配左边或右边</li><li>( ) 捕获组<br>  （1）、在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰<br>  （2）、取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到<br>  （3）、每一对括号会分配一个编号，使用（）的捕获根据左括号的顺序从1开始自动编号。捕获编号为零的第一个捕获是整个正则表达式模式匹配的文本<br>   反向引用：通过反向引用，可以对分组已捕获的字符串进行引用。</li><li>(?:Expression) 非捕获组<br>  一些表达式中，不得不使用（），但又不需要保存（）中子表达式匹配的内容，这时可以用非捕获组来抵消（）带来的副作用。</li></ul><hr><p>原文：<a href="https://my.oschina.net/u/3080373/blog/1550653" target="_blank" rel="noopener">一张思维导图，让正则表达式不再难懂</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/bruch-up-regular-expressions-1.png&quot; alt=&quot;思维导图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://madordie.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="正则表达式" scheme="https://madordie.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>用CollectionView简化代码，专注于业务和UI</title>
    <link href="https://madordie.github.io/post/ios-tool-collectionview-simplify-business/"/>
    <id>https://madordie.github.io/post/ios-tool-collectionview-simplify-business/</id>
    <published>2017-10-11T16:00:00.000Z</published>
    <updated>2020-05-18T02:46:39.005Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><code>UITableView</code>作为高级控件被开发者广泛使用，同样的，<code>UICollectionView</code>由于其NB的布局也被广泛使用。但是后者在使用的时候大多数都属于自定义的比较多，前者则相对普通，list基本上都用。</p><p>在业务需求中，常规布局，大多数都是采用<code>UITableView</code>进行的，但是有痛点：</p><ul><li>当使在APP内用过一次瀑布流之后，设计师会突然的让你在正常的list中底部追加瀑布流。。虽然是在底部追加，但是要从<code>UITableView</code>迁移到<code>UICollectionView</code></li><li><code>UITableViewDelegate</code>、<code>UITableViewDataSource</code> 恐怕每处使用都要写繁琐的相同的代码吧～</li><li>很多人也会对其进行高度缓存啊神马的优化策略</li><li>不知不觉这些代码堆在一起已经将<code>UIViewController</code>堆的相当的高</li></ul><p>然后呢，我们现在使用一个<code>CollectionView</code>将这些操作包装一下，达到这样一个流程:</p><ol><li><p>自定义Cell、CellModel</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LabelCell</span>: <span class="title">UICollectionViewCell</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> info = <span class="type">UILabel</span>()</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">sizeThatFits</span><span class="params">(<span class="number">_</span> size: CGSize)</span></span> -&gt; <span class="type">CGSize</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGSize</span>(width: size.width, height: info.frame.maxY + info.frame.minY)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LabelCell</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Model</span>: <span class="title">ListItemDefaultProtocol</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> info: <span class="type">String?</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">fillModel</span><span class="params">(view: LabelCell)</span></span> &#123;</span><br><span class="line">            view.info.text = info</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>请求、处理数据格式化为<code>LabelCell.Model</code>这样的类</p></li><li><p>处理好的数据交给<code>CollectionView</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.sections = model.format(...)</span><br></pre></td></tr></table></figure></li><li><p>休息一会，完工了～</p></li></ol><p>然后，来看看<code>Collection</code>里面都做了什么操作</p><a id="more"></a><h3 id="CollectionView"><a href="#CollectionView" class="headerlink" title="CollectionView"></a>CollectionView</h3><p>为了达到上面效果中的第三步，我们需要自定义一个<code>CollectionView</code>来处理刷新数据、设置代理、设置数据源、注册cell、等操作。</p><p>需要说明的是，此处使用<a href="https://github.com/chiahsien/CHTCollectionViewWaterfallLayout" target="_blank" rel="noopener"><code>CHTCollectionViewWaterfallLayout</code></a>来处理瀑布流。</p><p>创建一个<code>CollectionViewSection</code>的类/结构体来保存section信息。比如说：<code>sectionInset</code>、<code>minimumColumnSpacing</code>、<code>minimumInteritemSpacing</code>、<code>columnCount</code>、等</p><p>在<code>CollectionView</code>中设置一个<code>var sections = [KTJCollectionViewSection]()</code>用于保存sections</p><p>实现<code>UICollectionViewDataSource</code>、 <code>UICollectionViewDelegate</code>。此处省略约1千字…</p><h3 id="ListItemDefaultProtocol：绑定Cell和Model"><a href="#ListItemDefaultProtocol：绑定Cell和Model" class="headerlink" title="ListItemDefaultProtocol：绑定Cell和Model"></a>ListItemDefaultProtocol：绑定Cell和Model</h3><p>上面<code>省略约1千字</code>中有一个并没有说：<code>CollectionViewSection</code>的<code>header</code>、<code>items</code>、<code>footer</code>如何实现。😂</p><p>好了，此处这三个均采用协议<code>ListItemDefaultProtocol</code>来实现。（PS：大家都喜欢用父类，但父类只有一个，为了兼容和冲突，这里协议是最好不过的～，特别是swift中的协议）</p><p>协议需要给出这么几个信息：</p><ul><li><code>reuseIdentifier</code> 用来复用的重用标识符</li><li><code>cellClass</code> 用来注册用的类名</li><li><code>func fillModel(item: AnyObject)</code> 用来给cell填充model的方法</li></ul><p>那么这个协议就出来了：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">KTJListItemProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> identifa: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> registClass: <span class="type">AnyClass</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fillModel</span><span class="params">(item: AnyObject)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<strong>swift</strong>协议支持默认实现，于是乎，就可以再写一个:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ListItemDefaultProtocol</span>: <span class="title">KTJListItemProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">ItemType</span>: <span class="type">UIView</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fillModel</span><span class="params">(view: ItemType)</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ListItemDefaultProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> identifa: <span class="type">String</span> &#123; <span class="keyword">return</span>  <span class="type">NSStringFromClass</span>(<span class="type">ItemType</span>.<span class="keyword">self</span>)&#125;</span><br><span class="line">    <span class="keyword">var</span> registClass: <span class="type">AnyClass</span> &#123; <span class="keyword">return</span> <span class="type">ItemType</span>.<span class="keyword">self</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fillModel</span><span class="params">(item: AnyObject)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> reusableView = item <span class="keyword">as</span>? <span class="type">ItemType</span> &#123;</span><br><span class="line">            fillModel(view: reusableView)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，就可以愉快的玩耍了～～</p><p>最后Cell中的的代码效果就是<a href="https://github.com/madordie/collectionview-simplify-business/blob/master/CollectionView-simplify-business/LabelCell.swift" target="_blank" rel="noopener">这个样子</a>。<br>再加上<a href="https://github.com/madordie/collectionview-simplify-business/blob/master/CollectionView-simplify-business/ViewController.swift" target="_blank" rel="noopener">数据填充</a>是不是很简单了呢～～</p><h3 id="以后如何开发"><a href="#以后如何开发" class="headerlink" title="以后如何开发"></a>以后如何开发</h3><p>真的如同前面的例子一样，只需要这么几步绕不过去的：</p><ol><li>处理接口吐出来的数据。</li><li>创建新的UI样式，并做好接口数据中间件。</li><li>点击事件在处理数据的时候预先埋好，所有的数据、逻辑和UI数据一起被传递，不需要多次类型判断。</li></ol><p>统一使用<code>CollectionView</code>还有一个好处：不管前面谁写的一个UI，都能拉过来用。不用做中间层去从<code>TableViewCell</code>转<code>CollectionViewCell</code>。</p><p>开发只需要关心业务，业务。安安心心做一个写业务的程序员吧～</p><h3 id="关于Cell的跳转处理"><a href="#关于Cell的跳转处理" class="headerlink" title="关于Cell的跳转处理"></a>关于Cell的跳转处理</h3><p>乍一看，完美了。不过还有一个巨烦的跳转处理。。。不过，<strong>莫怕</strong></p><p>跳转，有这么几种：</p><ul><li>支持路由的URL跳转，这个是最简单的，也是最爽的</li><li>只能复杂的进行创建类、赋值、push啊神马的</li></ul><p>由于我们将数据全部处理好后扔给了<code>cellmodel</code>，而跳转、打点所需要的参数均在此处为最全的，我们可以将回调作为数据一起传递。。</p><p>嗯, 事件需要传递的对象大约这个样子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Jmp</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// 支持URL跳转的URL</span></span><br><span class="line">    <span class="keyword">let</span> url: <span class="type">String?</span></span><br><span class="line">    <span class="comment">/// 打点事件名</span></span><br><span class="line">    <span class="keyword">let</span> event: <span class="type">String?</span></span><br><span class="line">    <span class="comment">/// 打点参数</span></span><br><span class="line">    <span class="keyword">let</span> attr: [<span class="type">AnyHashable</span>: <span class="type">Any</span>]?</span><br><span class="line">    <span class="comment">/// 不支持URL的直接回调</span></span><br><span class="line">    <span class="keyword">let</span> eventCallback: (() -&gt; <span class="type">Void</span>)?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后cell对应的另一个类是这样的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KTJJmp</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> info: <span class="type">Jmp?</span></span><br><span class="line">    <span class="keyword">let</span> action = #selector(topVCJmp)</span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">topVCJmp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ... <span class="comment">// 打点</span></span><br><span class="line">        <span class="type">KTJURLJump</span>.jumpToViewOnTopVC(jmp: info)</span><br><span class="line">        info?.eventCallback?()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tap</span><span class="params">()</span></span> -&gt; <span class="type">UITapGestureRecognizer</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(topVCJmp))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个类共同作用就是：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JmpCell</span>: <span class="title">UICollectionViewCell</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> jmp = <span class="type">JmpCellModel</span>()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        jmpBtn.addTarget(jmp, action: jmp.action, <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JmpCellModel</span>: <span class="title">ListItemDefaultProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> jmp: <span class="type">Jmp?</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fillModel</span><span class="params">(view: JmpCell)</span></span> &#123;</span><br><span class="line">        view.jmp.info = jmp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于这个<code>JmpCellModel.jmp</code>怎么生成，这里就不说了。</p><h3 id="关于算高那点事"><a href="#关于算高那点事" class="headerlink" title="关于算高那点事"></a>关于算高那点事</h3><h4 id="算高位置的选择"><a href="#算高位置的选择" class="headerlink" title="算高位置的选择"></a>算高位置的选择</h4><p>我也曾纠结过frame的代码应该写在哪里。。有写在初始化的，有单独写一个方法的，还有写在<code>func sizeThatFits(:) -&gt; CGSize</code></p><p>由于当年对<a href="https://github.com/forkingdog/UITableView-FDTemplateLayoutCell" target="_blank" rel="noopener">UITableView-FDTemplateLayoutCell</a>中毒较深，所以沿用了最后一种方案。</p><h4 id="算高使用的view的选择"><a href="#算高使用的view的选择" class="headerlink" title="算高使用的view的选择"></a>算高使用的view的选择</h4><p>在算高的时候，首先需要明确的是：<strong>高度是数据和当前最大宽度共同决定的</strong>，所以在算高的时候需要拿着数据、view然后才能去算高（PS：至于那些拿着数据硬算出一个高度的代码，此处不发表看法😂，早晚会后悔的）</p><p>然后就是<code>UITableView</code>、<code>UICollectionView</code>的算高是通过一个单独的代理去获取的，并不提供view去计算。。这就是矛盾的地方。</p><p>虽然<code>UITableView</code>、<code>UICollectionView</code>在算高的地方不提供View,但是有一个<code>dequeueReusableCell....</code>的方法可以获取到缓存池中的<code>Cell</code>呀</p><p>如果你这样做了，那么你将会付出惨重的代码。这个方案我在<a href="http://www.cnblogs.com/madordie" target="_blank" rel="noopener">博客园</a>2015.03.17的<a href="http://www.cnblogs.com/madordie/p/4344209.html" target="_blank" rel="noopener">“iOS 优化性能之TableView”</a>中已经说了：</p><blockquote><p>dequeueReusableCellWithIdentifier:此函数的调用要注意以下几点：<br>    i.此函数的返回值是做为tableView:cellForRowAtIndexPath:的返回值的。这样保证拿出来的完整还给TableView。<br>    ii.如果此函数的返回值不是为了给tableView:cellForRowAtIndexPath:做返回值，那么你要注意这是在一个拿取别人稀缺资源的操作，需要注意珍惜这个返回值，能不浪费就不要浪费。<br>    iii.对于AL自动适应的TableView取Cell时候要注意保存。个人建议封装TableView，然后用来计算高度的Cell保存在TableView中。对于多种类型的Cell，则可以使用复用标识符作为Key的字典来存储。这样能够有效节约dequeueReusableCellWithIdentifier:调用次数。</p></blockquote><p><code>UICollectionView</code>也是如此。所以使用<code>dequeueReusableCell....</code>方法是<strong>很不靠谱的</strong>。</p><p>在<a href="https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/912b3ce4a61198c0b79a3d85b977f8fdacd153ea/Classes/UITableView%2BFDTemplateLayoutCell.m#L134-#L155" target="_blank" rel="noopener">UITableView-FDTemplateLayoutCell</a>中使用了字典保存缓存算高的View，也是比较赞的。</p><p>但是现在有了<code>CollectionView</code>，我们可以不用OC的<code>objc_setAssociatedObject(,,,)</code>去处理而直接使用了<code>NSCache</code>去处理就行了～</p><p>如果看了<a href="https://github.com/madordie/collectionview-simplify-business/blob/master/CollectionView.swift" target="_blank" rel="noopener"><code>CollectionView</code></a>就会发现，<code>ListItemProtocol</code>还有一个get方法<code>var newItem: AnyObject { get }</code>这个是用来算高的。</p><p>在<a href="https://github.com/madordie/collectionview-simplify-business/blob/master/CollectionView.swift" target="_blank" rel="noopener">CollectionView.swift</a>关于高度的代理设置中可以看到相关获取和设置。</p><h4 id="算高的时候变局的控制"><a href="#算高的时候变局的控制" class="headerlink" title="算高的时候变局的控制"></a>算高的时候变局的控制</h4><p>高度的计算现在已经可以正常计算，但是对于<code>columnCount &gt; 1</code>的时候，牵扯到间隙的计算需要注意一次啊。毕竟<code>CHTCollectionViewWaterfallLayout</code>功能更强大。</p><p>相关代码在<a href="https://github.com/madordie/collectionview-simplify-business/blob/master/CollectionView.swift" target="_blank" rel="noopener">CollectionView.swift</a>的<code>func collectionView(:,layout:,sizeForItemAt:) -&gt; CGSize</code>函数中。</p><h3 id="关于代理那点事"><a href="#关于代理那点事" class="headerlink" title="关于代理那点事"></a>关于代理那点事</h3><p>丫的，需求总是比想的多，但是办法也比问题多。</p><p>对于<code>CollectionView</code>来说，代理都设置成了self，这样会导致有时候需要<code>UIScrollViewDelegate</code>干些事情的时候总是不那么自由。。。实乃新痛点，不过有办法。</p><p>下面是几种方案：</p><h4 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h4><p>直接KVO到<code>self.contentOffset</code>，这样一了百了。写什么代理，要什么自行车！（PS：swift提供闭包的代理，也是很好用的）</p><p>如果不会，请自行<a href="https://www.google.com/" target="_blank" rel="noopener">Google</a>。<a href="https://objccn.io/issue-7-3/" target="_blank" rel="noopener">ObjC-中国：KVC 和 KVO</a>，我只能帮你到这里</p><h4 id="Rx系"><a href="#Rx系" class="headerlink" title="Rx系"></a>Rx系</h4><p>很抱歉，你不能用<code>self.rx.contentOffset</code>。原因是<a href="https://github.com/chiahsien/CHTCollectionViewWaterfallLayout" target="_blank" rel="noopener"><code>CHTCollectionViewWaterfallLayout</code></a>中有这么一行断言：</p><blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSAssert</span>([<span class="keyword">self</span>.delegate conformsToProtocol:@<span class="class"><span class="keyword">protocol</span>(<span class="title">CHTCollectionViewDelegateWaterfallLayout</span>)], @"<span class="title">UICollectionView</span>'<span class="title">s</span> <span class="title">delegate</span> <span class="title">should</span> <span class="title">conform</span> <span class="title">to</span> <span class="title">CHTCollectionViewDelegateWaterfallLayout</span> <span class="title">protocol</span>"); </span></span><br></pre></td></tr></table></figure></blockquote><p><strong>但是</strong>，你可以使用Rx里面的KVO呀～也是贼方便</p><h4 id="RAC系"><a href="#RAC系" class="headerlink" title="RAC系"></a>RAC系</h4><p>抱歉，我不会。原因在此<a href="../reactivecocoa-ready-to-use">准备食用RAC(ReactiveCocoa)的顾虑</a></p><h4 id="代理传递"><a href="#代理传递" class="headerlink" title="代理传递"></a>代理传递</h4><p>当然也可以使用代理进行传递出去。大致这个样子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CollectionViewDelegate</span>: <span class="title">NSObjectProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> allDelegate: <span class="type">CollectionViewDelegate?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)</span></span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.allDelegate?.collectionView(<span class="keyword">self</span>, didSelectItemAt: indexPath)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这方案没啥聊的。。</p><h3 id="OC咋办？"><a href="#OC咋办？" class="headerlink" title="OC咋办？"></a>OC咋办？</h3><p>这个OC也能用，只不过需要一些手段，比如说：继承、扩展、等</p><p><code>ListItemProtocol</code>就是为了给OC使用留的，还有就是<code>CollectionViewSection</code>使用了类，而不是结构体。</p><p>不过具体没有例子，不想写OC代码，太麻烦了。。主要是这种思路:)</p><h3 id="填充Cell的数据为什么会在CellModel中？"><a href="#填充Cell的数据为什么会在CellModel中？" class="headerlink" title="填充Cell的数据为什么会在CellModel中？"></a>填充Cell的数据为什么会在CellModel中？</h3><p>对于Cell来说，Cell是干净的，没有任何继承、协议来限制Cell如何处理。那么Cell就可以接受来自任何模块的各种风格的Cell，这是我想要的减少侵入。</p><p>cellModel中定义了Cell所对应的填充数据格式，在第一次写的时候难免会按照业务逻辑起一些业务逻辑的名字，在复用的时候又不能改名字，会对维护和开发加了一定量的复杂度，这不是我想要的。。</p><p>于是乎每个CellModel根据自己的需要绑定需要绑定的Cell，去填充Cell所对应的数据就好。只需要侵入cellModel即可。代价最小，受益最大。</p><p>PS.对于同一个List，需要注意cell的复用和多个cellModel同时绑定一个cell时，属性的设置。</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><a href="https://github.com/madordie/collectionview-simplify-business" target="_blank" rel="noopener">Demo</a>部分没有写跳转相关内容，但是别的都有了😂</p><h3 id="别的"><a href="#别的" class="headerlink" title="别的"></a>别的</h3><p>好像没了吧～，想起来了再补充咯</p><h3 id="偶然看到一个类似的文章"><a href="#偶然看到一个类似的文章" class="headerlink" title="偶然看到一个类似的文章"></a>偶然看到一个类似的文章</h3><blockquote><p><a href="https://www.appcoda.com.tw/tableview-mvvm/" target="_blank" rel="noopener">Table View 太複雜？利用 MVVM 和 Protocol 就可以為它重構瘦身！</a></p></blockquote><p>昨天(2018.7.24)翻文章的时候看到这个文章，然后将文章和代码捋了一下，发现这才是MVVM吧。觉得不错，贴出来～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;UITableView&lt;/code&gt;作为高级控件被开发者广泛使用，同样的，&lt;code&gt;UICollectionView&lt;/code&gt;由于其NB的布局也被广泛使用。但是后者在使用的时候大多数都属于自定义的比较多，前者则相对普通，list基本上都用。&lt;/p&gt;
&lt;p&gt;在业务需求中，常规布局，大多数都是采用&lt;code&gt;UITableView&lt;/code&gt;进行的，但是有痛点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当使在APP内用过一次瀑布流之后，设计师会突然的让你在正常的list中底部追加瀑布流。。虽然是在底部追加，但是要从&lt;code&gt;UITableView&lt;/code&gt;迁移到&lt;code&gt;UICollectionView&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UITableViewDelegate&lt;/code&gt;、&lt;code&gt;UITableViewDataSource&lt;/code&gt; 恐怕每处使用都要写繁琐的相同的代码吧～&lt;/li&gt;
&lt;li&gt;很多人也会对其进行高度缓存啊神马的优化策略&lt;/li&gt;
&lt;li&gt;不知不觉这些代码堆在一起已经将&lt;code&gt;UIViewController&lt;/code&gt;堆的相当的高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后呢，我们现在使用一个&lt;code&gt;CollectionView&lt;/code&gt;将这些操作包装一下，达到这样一个流程:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;自定义Cell、CellModel&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LabelCell&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UICollectionViewCell&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; info = &lt;span class=&quot;type&quot;&gt;UILabel&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sizeThatFits&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; size: CGSize)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;CGSize&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CGSize&lt;/span&gt;(width: size.width, height: info.frame.maxY + info.frame.minY)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LabelCell&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Model&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;ListItemDefaultProtocol&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; info: &lt;span class=&quot;type&quot;&gt;String?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fillModel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(view: LabelCell)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            view.info.text = info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请求、处理数据格式化为&lt;code&gt;LabelCell.Model&lt;/code&gt;这样的类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理好的数据交给&lt;code&gt;CollectionView&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;list.sections = model.format(...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;休息一会，完工了～&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后，来看看&lt;code&gt;Collection&lt;/code&gt;里面都做了什么操作&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="tool" scheme="https://madordie.github.io/tags/tool/"/>
    
      <category term="UICollectionView" scheme="https://madordie.github.io/tags/UICollectionView/"/>
    
  </entry>
  
  <entry>
    <title>mac10.13 pods 命令错误</title>
    <link href="https://madordie.github.io/post/macos-high-sierra-cocoapods/"/>
    <id>https://madordie.github.io/post/macos-high-sierra-cocoapods/</id>
    <published>2017-09-29T06:03:58.000Z</published>
    <updated>2017-10-10T06:08:43.665Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>每逢升级大版本总要过搞点事情。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pod env</span><br><span class="line">-bash: /usr/<span class="built_in">local</span>/bin/pod: /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby: bad interpreter: No such file or directory</span><br></pre></td></tr></table></figure><p>不论是<code>pod env</code>、<code>pod update</code> 等等均报上面的错误。</p><p>如果Google发现：</p><ul><li><a href="https://stackoverflow.com/questions/44396215/cocoapods-not-working-in-macos-high-sierra" target="_blank" rel="noopener">ruby - CocoaPods not working in macOS High Sierra - Stack Overflow</a></li><li><a href="https://github.com/CocoaPods/CocoaPods/issues/6778" target="_blank" rel="noopener">CocoaPods CLI fails in High Sierra due to change of Ruby version #6778</a></li><li><a href="https://github.com/CocoaPods/CocoaPods/issues/6898#issuecomment-332060096" target="_blank" rel="noopener">High Sierra: bad interpreter #6898</a></li></ul><p>事情的缘由就是这样。</p><p><a href="https://github.com/CocoaPods/CocoaPods/issues/6898#issuecomment-332060096" target="_blank" rel="noopener">#6898</a>中道出了简单直接的解决方案：</p><blockquote><p>for all others:</p></blockquote><blockquote><p><code>gem install -n /usr/local/bin cocoapods</code></p></blockquote><blockquote><p>fixes it</p></blockquote><p><strong>综合起来</strong>解决这个问题是这样的：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gem update --system</span><br><span class="line">$ gem uninstall cocoapods</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'gem: --bindir /usr/local/bin'</span> &gt;&gt; ~/.gemrc</span><br><span class="line">$ sudo gem install cocoapods</span><br></pre></td></tr></table></figure><p>愉快的使用cocoapods吧～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;每逢升级大版本总要过搞点事情。&lt;/p&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="macOS" scheme="https://madordie.github.io/categories/macOS/"/>
    
    
      <category term="cocoapods" scheme="https://madordie.github.io/tags/cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>mac10.13依旧让Xcode支持打开终端</title>
    <link href="https://madordie.github.io/post/mac-high-sierra-open-with-external/"/>
    <id>https://madordie.github.io/post/mac-high-sierra-open-with-external/</id>
    <published>2017-09-28T11:06:47.000Z</published>
    <updated>2017-10-09T04:59:40.198Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在macOS10.13以前是支持Xcode中直接打开终端的，步骤呢就是下面这样子：</p><p><img src="/images/mac-high-sierra-open-with-external-1.gif" alt="效果图"></p><ol><li>右击工程</li><li>Open With External Editor</li><li>终端弹出来了。。</li></ol><p>如果没有生效，就是你的电脑上装了什么可以打开<code>xx.xcodeproj</code>的应用程序，也就是在<code>Finder</code>下右击可以看到如下样式：</p><p><img src="/images/mac-high-sierra-open-with-external-2.jpg" alt="效果图"></p><p>呐～ Xcode为默认，备忘录为默认下面的第一个～～</p><p>对，如果这样的话，那么按照上面3步，得到的结果是：这个文件被莫名其妙的保存在了备忘录～～  </p><p>这不是我们要的🤷‍♂️，下面我们通过修改<code>备忘录.app</code>的配置文件来达到我们的效果。</p><a id="more"></a><h3 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h3><p>macSO10.13加强了备忘录，嗯的确变强了，可是并没有Xcode和终端常用。</p><p>备忘录增加了导入的功能，支持了一些文件的打开(只是导入而已。。)，但是并不适合我。于是改一下吧～～</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol><li>在<code>应用程序</code>中找到<code>备忘录</code></li><li>显示包内容</li><li>找到 我们要修改的plist文件： <code>Contents/Info.plist</code></li><li>做一下备份：复制一下。。</li><li>确保 &lt;4&gt; 已完成</li><li>直接修改<code>Info.plist</code>会提示没有权限，使用<code>sudo vim Info.plist</code>修改</li><li>不管你用什么方法，删除下面的这些代码<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleTypeName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>General files and folders<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleTypeRole<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>Viewer<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>LSItemContentTypes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>public.data<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>public.directory<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>:wq</code></li><li>重启一下 （目的：重建索引）</li></ol><h3 id="至于我做了什么"><a href="#至于我做了什么" class="headerlink" title="至于我做了什么"></a>至于我做了什么</h3><p>讲道理，用Xcode的都知道吧？这个是注册的app支持的文件类型。 删除之后就可以了，就这么多😂</p><h3 id="注意一下"><a href="#注意一下" class="headerlink" title="注意一下"></a>注意一下</h3><p><code>操作</code>中的<code>步骤9</code>可以有脚本，但是还是老实重启一下吧，有的脚本会使部分图标失效，巨烦。。还是重启一下比较靠谱。毕竟不着急</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在macOS10.13以前是支持Xcode中直接打开终端的，步骤呢就是下面这样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/mac-high-sierra-open-with-external-1.gif&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右击工程&lt;/li&gt;
&lt;li&gt;Open With External Editor&lt;/li&gt;
&lt;li&gt;终端弹出来了。。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果没有生效，就是你的电脑上装了什么可以打开&lt;code&gt;xx.xcodeproj&lt;/code&gt;的应用程序，也就是在&lt;code&gt;Finder&lt;/code&gt;下右击可以看到如下样式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/mac-high-sierra-open-with-external-2.jpg&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
&lt;p&gt;呐～ Xcode为默认，备忘录为默认下面的第一个～～&lt;/p&gt;
&lt;p&gt;对，如果这样的话，那么按照上面3步，得到的结果是：这个文件被莫名其妙的保存在了备忘录～～  &lt;/p&gt;
&lt;p&gt;这不是我们要的🤷‍♂️，下面我们通过修改&lt;code&gt;备忘录.app&lt;/code&gt;的配置文件来达到我们的效果。&lt;/p&gt;
    
    </summary>
    
      <category term="macOS" scheme="https://madordie.github.io/categories/macOS/"/>
    
    
      <category term="Xcode" scheme="https://madordie.github.io/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Xcode9编译失败</title>
    <link href="https://madordie.github.io/post/debug-xcode9-build-ipa/"/>
    <id>https://madordie.github.io/post/debug-xcode9-build-ipa/</id>
    <published>2017-09-26T06:16:32.000Z</published>
    <updated>2017-10-11T03:37:39.832Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="错误输出"><a href="#错误输出" class="headerlink" title="错误输出"></a>错误输出</h2><blockquote><p>error: exportArchive: “Fangduoduo_ent.app” requires a provisioning profile with the Push Notifications and Associated Domains features.</p></blockquote><blockquote><p>Error Domain=IDEProvisioningErrorDomain Code=9 “”Fangduoduo_ent.app” requires a provisioning profile with the Push Notifications and Associated Domains features.” UserInfo={NSLocalizedDescription=”Fangduoduo_ent.app” requires a provisioning profile with the Push Notifications and Associated Domains features., NSLocalizedRecoverySuggestion=Add a profile to the “provisioningProfiles” dictionary in your Export Options property list.}</p></blockquote><a id="more"></a><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>在升级Xcode9正式版之后，Jenkins也就升级了，于是乎用原来的套路打包之后就是上面的错误 5555…</p><p>如果使用<code>xcodebuild</code>进行处理，那么这个会发生在选择证书的步骤，错误大致就是这样。</p><p><code>$xcodebuild --help</code> 可以看到一些信息，而且在最后还特意提出了一个“-exportOptionsPlist”参数。具体内容见<code>xcodebuild --help</code></p><h2 id="解决问题才是关键"><a href="#解决问题才是关键" class="headerlink" title="解决问题才是关键"></a>解决问题才是关键</h2><ol><li><p>使用xcode9进行一次<code>archive</code></p></li><li><p>选择相关证书啊神马的，保持<code>thinning</code>不变就好</p></li><li><p>导出</p></li><li><p>导出目录有一个<code>ExportOptionsPlist.plist</code>，这个就是打包时候需要的plist</p></li></ol><h2 id="脚本构建"><a href="#脚本构建" class="headerlink" title="脚本构建"></a>脚本构建</h2><p><code>ipa</code>即为目标变量，具体的参看<a href="../build-ipa-sh">打包脚本</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ./build/*</span><br><span class="line">cat &lt;&lt; EOF &gt; ./build/exportOptionsPlist.plist</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC <span class="string">"-//Apple//DTD PLIST 1.0//EN"</span> <span class="string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span>&gt;</span><br><span class="line">&lt;plist version=<span class="string">"1.0"</span>&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">    &lt;key&gt;compileBitcode&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;method&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;enterprise&lt;/string&gt;</span><br><span class="line">    &lt;key&gt;provisioningProfiles&lt;/key&gt;</span><br><span class="line">    &lt;dict&gt;</span><br><span class="line">        &lt;key&gt;ershoufanglzg.fangdd.com&lt;/key&gt;</span><br><span class="line">        &lt;string&gt;ershoufanglzg_dis&lt;/string&gt;</span><br><span class="line">    &lt;/dict&gt;</span><br><span class="line">    &lt;key&gt;signingCertificate&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;iPhone Distribution&lt;/string&gt;</span><br><span class="line">    &lt;key&gt;signingStyle&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;manual&lt;/string&gt;</span><br><span class="line">    &lt;key&gt;stripSwiftSymbols&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;teamID&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;J3B467DURT&lt;/string&gt;</span><br><span class="line">    &lt;key&gt;thinning&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;&amp;lt;none&amp;gt;&lt;/string&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">xcodebuild -archivePath <span class="string">"./build/xxx.xcarchive"</span> -workspace Fangduoduo.xcworkspace -sdk iphoneos -scheme <span class="string">"Fangduoduo_ent"</span> -configuration <span class="string">"Release Inhouse"</span> archive</span><br><span class="line">xcodebuild -exportArchive -archivePath <span class="string">"./build/xxx.xcarchive"</span> -exportPath <span class="string">"./build/"</span> -exportOptionsPlist ./build/exportOptionsPlist.plist</span><br><span class="line"></span><br><span class="line">ipa=$(<span class="built_in">pwd</span>)/$(ls ./build/*.ipa)</span><br></pre></td></tr></table></figure><h2 id="xcodebuild-–help"><a href="#xcodebuild-–help" class="headerlink" title="xcodebuild –help"></a>xcodebuild –help</h2><blockquote><p>Available keys for -exportOptionsPlist:</p></blockquote><blockquote><p>compileBitcode : Bool</p></blockquote><blockquote><p>For non-App Store exports, should Xcode re-compile the app from bitcode? Defaults to YES.</p></blockquote><blockquote><p>embedOnDemandResourcesAssetPacksInBundle : Bool</p></blockquote><blockquote><p>For non-App Store exports, if the app uses On Demand Resources and this is YES, asset packs are embedded in the app bundle so that the app can be tested without a server to host asset packs. Defaults to YES unless onDemandResourcesAssetPacksBaseURL is specified.</p></blockquote><blockquote><p>iCloudContainerEnvironment : String</p></blockquote><blockquote><p>If the app is using CloudKit, this configures the “com.apple.developer.icloud-container-environment” entitlement. Available options vary depending on the type of provisioning profile used, but may include: Development and Production.</p></blockquote><blockquote><p>installerSigningCertificate : String</p></blockquote><blockquote><p>For manual signing only. Provide a certificate name, SHA-1 hash, or automatic selector to use for signing. Automatic selectors allow Xcode to pick the newest installed certificate of a particular type. The available automatic selectors are “Mac Installer Distribution” and “Developer ID Installer”. Defaults to an automatic certificate selector matching the current distribution method.</p></blockquote><blockquote><p>manifest : Dictionary</p></blockquote><blockquote><p>For non-App Store exports, users can download your app over the web by opening your distribution manifest file in a web browser. To generate a distribution manifest, the value of this key should be a dictionary with three sub-keys: appURL, displayImageURL, fullSizeImageURL. The additional sub-key assetPackManifestURL is required when using on-demand resources.</p></blockquote><blockquote><p>method : String</p></blockquote><blockquote><p>Describes how Xcode should export the archive. Available options: app-store, package, ad-hoc, enterprise, development, developer-id, and mac-application. The list of options varies based on the type of archive. Defaults to development.</p></blockquote><blockquote><p>onDemandResourcesAssetPacksBaseURL : String</p></blockquote><blockquote><p>For non-App Store exports, if the app uses On Demand Resources and embedOnDemandResourcesAssetPacksInBundle isn’t YES, this should be a base URL specifying where asset packs are going to be hosted. This configures the app to download asset packs from the specified URL.</p></blockquote><blockquote><p>provisioningProfiles : Dictionary</p></blockquote><blockquote><p>For manual signing only. Specify the provisioning profile to use for each executable in your app. Keys in this dictionary are the bundle identifiers of executables; values are the provisioning profile name or UUID to use.</p></blockquote><blockquote><p>signingCertificate : String</p></blockquote><blockquote><p>For manual signing only. Provide a certificate name, SHA-1 hash, or automatic selector to use for signing. Automatic selectors allow Xcode to pick the newest installed certificate of a particular type. The available automatic selectors are “Mac App Distribution”, “iOS Developer”, “iOS Distribution”, “Developer ID Application”, and “Mac Developer”. Defaults to an automatic certificate selector matching the current distribution method.</p></blockquote><blockquote><p>signingStyle : String</p></blockquote><blockquote><p>The signing style to use when re-signing the app for distribution. Options are manual or automatic. Apps that were automatically signed when archived can be signed manually or automatically during distribution, and default to automatic. Apps that were manually signed when archived must be manually signed during distribtion, so the value of signingStyle is ignored.</p></blockquote><blockquote><p>stripSwiftSymbols : Bool</p></blockquote><blockquote><p>Should symbols be stripped from Swift libraries in your IPA? Defaults to YES.</p></blockquote><blockquote><p>teamID : String</p></blockquote><blockquote><p>The Developer Portal team to use for this export. Defaults to the team used to build the archive.</p></blockquote><blockquote><p>thinning : String</p></blockquote><blockquote><p>For non-App Store exports, should Xcode thin the package for one or more device variants? Available options: <none> (Xcode produces a non-thinned universal app), <thin-for-all-variants> (Xcode produces a universal app and all available thinned variants), or a model identifier for a specific device (e.g. “iPhone7,1”). Defaults to <none>.</p></blockquote><blockquote><p>uploadBitcode : Bool</p></blockquote><blockquote><p>For App Store exports, should the package include bitcode? Defaults to YES.</p></blockquote><blockquote><p>uploadSymbols : Bool</p></blockquote><blockquote><p>For App Store exports, should the package include symbols? Defaults to YES.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;错误输出&quot;&gt;&lt;a href=&quot;#错误输出&quot; class=&quot;headerlink&quot; title=&quot;错误输出&quot;&gt;&lt;/a&gt;错误输出&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;error: exportArchive: “Fangduoduo_ent.app” requires a provisioning profile with the Push Notifications and Associated Domains features.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Error Domain=IDEProvisioningErrorDomain Code=9 “”Fangduoduo_ent.app” requires a provisioning profile with the Push Notifications and Associated Domains features.” UserInfo={NSLocalizedDescription=”Fangduoduo_ent.app” requires a provisioning profile with the Push Notifications and Associated Domains features., NSLocalizedRecoverySuggestion=Add a profile to the “provisioningProfiles” dictionary in your Export Options property list.}&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="构建" scheme="https://madordie.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
      <category term="DEBUG" scheme="https://madordie.github.io/tags/DEBUG/"/>
    
  </entry>
  
  <entry>
    <title>iOS自动化-Jenkins编译工程</title>
    <link href="https://madordie.github.io/post/ios-automation-jenkins-build/"/>
    <id>https://madordie.github.io/post/ios-automation-jenkins-build/</id>
    <published>2017-09-14T09:27:15.000Z</published>
    <updated>2017-10-10T06:05:41.268Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li><a href="../ios-automation-jenkins-configuration">iOS自动化-Jenkins环境搭建</a></li><li><a href="../ios-automation-jenkins-build">iOS自动化-Jenkins编译工程</a></li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Jenkins环境已搭建好，现在我们来开始愉快的为iOS打包吧～</p><p>从这个文章中你将要实现以下功能：</p><ul><li>在Jenkins创建工程</li><li>build出ipa</li><li>将ipa上传至fir</li><li>钉钉机器人群通知</li><li>将dsym上传至bugly</li></ul><a id="more"></a><h2 id="脚本环境安装"><a href="#脚本环境安装" class="headerlink" title="脚本环境安装"></a>脚本环境安装</h2><p>这里大多数操作都是用脚本来进行的，不为别的，就为自由和以后～</p><h3 id="fastlane"><a href="#fastlane" class="headerlink" title="fastlane"></a>fastlane</h3><p>此乃自动化神器。<a href="https://docs.fastlane.tools/" target="_blank" rel="noopener">文档在此</a>。<a href="https://github.com/fastlane/fastlane" target="_blank" rel="noopener">开源哟～</a></p><p>此处主要用来编译、打包。</p><p>安装方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install fastlane</span><br></pre></td></tr></table></figure><p>此神器除了上述功能，还提供很多很多很多很多功能，包括自定义神马的都支持。需要的可以去文档里面翻翻。</p><p>在Xcode9 我使用的版本2.14.1打包出问题了。。具体在这里详见<a href="../debug-xcode9-build-ipa">Xcode9编译失败</a>。于是呼采用了<code>xcodebuild</code>进行打包</p><h3 id="fir-im-cli"><a href="#fir-im-cli" class="headerlink" title="fir.im-cli"></a>fir.im-cli</h3><p><a href="https://fir.im/" target="_blank" rel="noopener">fir.im</a>提供的应用内测托管工具。<a href="https://github.com/FIRHQ/fir-cli/blob/master/README.md" target="_blank" rel="noopener">开源官网</a>。</p><p>安装方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install fir-cli</span><br></pre></td></tr></table></figure><p>此工具也提供打包ipa、apk、上传符号表至BugHD、等功能。但是我们在这里选择了<code>fastlane gym</code></p><p>上传加速：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh -c <span class="string">"<span class="variable">$(curl -sSL https://gist.githubusercontent.com/trawor/5dda140dee86836b8e60/raw/turbo-qiniu.sh)</span>"</span></span><br></pre></td></tr></table></figure><p>上传加速代码已经<a href="http://blog.fir.im/turbo-qiniu/" target="_blank" rel="noopener">开源至此</a>。</p><p><a href="http://bughd.com/" target="_blank" rel="noopener">BugHD</a>: 已停止线上免费服务，开始卖私有部署了。</p><p>另外，fir 也有<a href="http://blog.fir.im/jenkins/" target="_blank" rel="noopener">Jenkins插件</a>，但是这里选择脚本方式。</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>所有的插件可以在<code>系统管理 -&gt; 插件管理</code>中进行安装、卸载、降级、更新、等操作。</p><p>确保以下插件已经被安装：</p><ul><li>源代码管理：<a href="https://wiki.jenkins.io/display/JENKINS/Git+Plugin" target="_blank" rel="noopener">Git Plugin</a></li><li>编译脚本环境变量：<a href="http://wiki.hudson-ci.org/display/HUDSON/Tool+Environment+Plugin" target="_blank" rel="noopener">Tool Environment Plugin</a></li></ul><p>嗯，开始创建工程，然后配置打包吧！</p><h2 id="工程相关配置"><a href="#工程相关配置" class="headerlink" title="工程相关配置"></a>工程相关配置</h2><p>左侧的<code>新建(New Item)</code>我就不说了吧～，点击输入项目名字，然后选择第一个<code>构建一个自由风格的软件项目</code>就行啦～～</p><p>此处项目名字暂且成为<code>test</code>。这里只说一些比较重要的，没有活不成的那种配置。别的自己研究一下或者点击右侧❓就能看到介绍。</p><h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p>此处点击<code>Git</code>，展开之后输入<code>Repository URL</code>即可。</p><p><code>Repository URL</code>输入完毕之后点击别处，Jenkins的Git插件会自动校验该URL是否能够clone下来代码。出现红色就自己根据错误修改一下咯。。</p><p>另外此处支持<code>ssh</code> 的方式，大致样式为：<code>ssh://sunjigang@github.com:29418/projects/aaa</code>。</p><p><code>Branches to build</code> 写上你的构建分支～，根据自己需求来，<code>master</code>一般为仓库的默认分支。</p><h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><p>此处表示该项目的构建触发条件。（可选）</p><p>我们这里说一下<code>Poll SCM</code>：</p><p>定时检查源码变更。条件是 一定要配置<code>Git</code>这样的源码管理。</p><p>例子：</p><ul><li><code>H/15 * * * *</code>：每15分钟构建一次</li><li><code>0 2 * * *</code>： 每天2:00构建一次</li></ul><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>此处为构建的核心😂。当然，我们为了自由，此处全部使用<code>shell</code>脚本。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工程名</span></span><br><span class="line">workspace=<span class="string">'xxx.xcworkspace'</span></span><br><span class="line"><span class="comment"># 构建scheme</span></span><br><span class="line">scheme=<span class="string">'xxx'</span></span><br><span class="line"><span class="comment"># 打包类型：app-store, ad-hoc, package, enterprise, development, and developer-id.</span></span><br><span class="line">export_method=<span class="string">'enterprise'</span></span><br><span class="line"><span class="comment"># fir的token，在fir-&gt;用户-&gt;token 获取</span></span><br><span class="line">fir_token=<span class="string">'c5077e0368888b9750ae848b9fe00***'</span></span><br><span class="line"><span class="comment"># fir上传短链接，效果为 https://fir.im/xxx</span></span><br><span class="line">fir_url=<span class="string">'xxx'</span></span><br><span class="line"><span class="comment"># 钉钉机器人token</span></span><br><span class="line">dingtalk_token=<span class="string">'6d09e43ddc62e540be914ff2e901e28b921d55c5ad457f6f3571f9f881287***'</span></span><br><span class="line"><span class="comment"># 钉钉机器人发送的内容</span></span><br><span class="line">dingtalk_content=<span class="string">"iOSXXX已经上传至 http://fir.im/<span class="variable">$&#123;fir_url&#125;</span> ,吧啦吧啦吧啦～"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建</span></span><br><span class="line">fastlane gym</span><br><span class="line">    --workspace <span class="variable">$workspace</span> \</span><br><span class="line">    --scheme <span class="variable">$scheme</span> \</span><br><span class="line">    --export_method <span class="variable">$export_method</span> \</span><br><span class="line">    clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># fir</span></span><br><span class="line">ipa=$(<span class="built_in">pwd</span>)/$(ls *.ipa)</span><br><span class="line">git <span class="built_in">log</span> -10 &gt; git.log</span><br><span class="line">fir p <span class="variable">$ipa</span> -T <span class="variable">$fir_token</span> -s <span class="variable">$fir_url</span> -c git.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 钉钉通知</span></span><br><span class="line">curl <span class="string">"https://oapi.dingtalk.com/robot/send?access_token=<span class="variable">$&#123;dingtalk_token&#125;</span>"</span> -H <span class="string">'Content-Type: application/json'</span>    -d <span class="string">'</span></span><br><span class="line"><span class="string">    &#123;"msgtype": "text",</span></span><br><span class="line"><span class="string">        "text": &#123;</span></span><br><span class="line"><span class="string">            "content":$&#123;dingtalk_content&#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;'</span></span><br></pre></td></tr></table></figure><p>至此 已经完成了打包、上传fir、钉钉机器人通知。</p><p>上述脚本只是配置的例子，可以根据自己需求，自己编写和配置。特别是</p><ul><li><code>.xcworkspace</code>的位置，要找清楚呀</li><li><code>scheme</code>无法找到是因为你在提交代码的时候没有将其设置为shared</li><li><code>fastlane gym</code> 支持很多参数，是对<code>xcodebuild</code>的封装，<a href="https://github.com/fastlane/fastlane/tree/master/gym" target="_blank" rel="noopener">源码及文档在此</a></li></ul><h3 id="上传dSYM至Bugly"><a href="#上传dSYM至Bugly" class="headerlink" title="上传dSYM至Bugly"></a>上传dSYM至Bugly</h3><p>这个还是有点点复杂的，因为bugly并未提供完整的cli工具链，需要手动跑jar包。不过都是可以完成的。</p><p>为了隔离开打包和上传，这里在Jenkins上新建一个项目用来上传dSYM</p><p>其中需要衔接的地方就是上面的输出要作为这个的输出。所以需要前后对应位置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路径主要用来提取Info.plist以及dsym文件</span></span><br><span class="line">path=<span class="string">'/Users/FDD/.jenkins/workspace/fdd-ios-app/fdd-app-ios/Fangduoduo'</span></span><br><span class="line"><span class="comment"># scheme name</span></span><br><span class="line">scheme=<span class="string">'Fangduoduo_ent'</span></span><br><span class="line"><span class="comment"># ipa bundleId</span></span><br><span class="line">package=<span class="string">'xx.xx.com'</span></span><br><span class="line"><span class="comment"># bugly id</span></span><br><span class="line">bugly_id=<span class="string">'9xxx'</span></span><br><span class="line"><span class="comment"># bugly key</span></span><br><span class="line">bugly_key=<span class="string">'wHzxcxxx'</span></span><br><span class="line"></span><br><span class="line">rm -rf *dSYM*</span><br><span class="line">cp <span class="variable">$&#123;path&#125;</span>/Fangduoduo/Fangduoduo_ent-Info.plist ./Info.plist</span><br><span class="line">cp -rf <span class="variable">$&#123;path&#125;</span>/build/*.xcarchive/dSYMs .</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------ post dsym ------------ #</span></span><br><span class="line"></span><br><span class="line">app_infoplist_path=<span class="string">'Info.plist'</span></span><br><span class="line">version=$(/usr/libexec/PlistBuddy -c <span class="string">"print CFBundleVersion"</span> <span class="variable">$&#123;app_infoplist_path&#125;</span>)</span><br><span class="line"></span><br><span class="line">java -jar ./bugly/buglySymboliOS.jar \</span><br><span class="line">-i dSYMs/<span class="variable">$&#123;scheme&#125;</span>.app.dSYM \</span><br><span class="line">    -dsym \</span><br><span class="line">    -u \</span><br><span class="line">    -id <span class="variable">$&#123;bugly_id&#125;</span> \</span><br><span class="line">    -key <span class="variable">$&#123;bugly_key&#125;</span> \</span><br><span class="line">    -package <span class="variable">$&#123;package&#125;</span> \</span><br><span class="line">    -version <span class="variable">$&#123;version&#125;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># @bugly jar执行的时候返回状态码有问题。已反馈，但是不见修改。。</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># ------------ UUID ------------ #</span></span><br><span class="line"></span><br><span class="line">unzip -o ./dSYMs/<span class="variable">$&#123;scheme&#125;</span>.app.dSYM.zip</span><br><span class="line">xcrun dwarfdump --uuid ./<span class="variable">$&#123;scheme&#125;</span> &gt;&gt; ./uuids-<span class="variable">$&#123;version&#125;</span>.txt</span><br></pre></td></tr></table></figure><p>值得说的是，如果上面的报错，那么检查一下是不是路径什么的写错了。。。</p><p>如果还有问题，可以在<a href="../../about">关于</a>中找到我。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../ios-automation-jenkins-configuration&quot;&gt;iOS自动化-Jenkins环境搭建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../ios-automation-jenkins-build&quot;&gt;iOS自动化-Jenkins编译工程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Jenkins环境已搭建好，现在我们来开始愉快的为iOS打包吧～&lt;/p&gt;
&lt;p&gt;从这个文章中你将要实现以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Jenkins创建工程&lt;/li&gt;
&lt;li&gt;build出ipa&lt;/li&gt;
&lt;li&gt;将ipa上传至fir&lt;/li&gt;
&lt;li&gt;钉钉机器人群通知&lt;/li&gt;
&lt;li&gt;将dsym上传至bugly&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="构建" scheme="https://madordie.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
      <category term="Jenkins" scheme="https://madordie.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>如何实现AppStore查看更多的方法</title>
    <link href="https://madordie.github.io/post/appstore-truncate/"/>
    <id>https://madordie.github.io/post/appstore-truncate/</id>
    <published>2017-09-14T03:46:18.000Z</published>
    <updated>2017-10-10T05:34:54.502Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="UITextView-More"><a href="#UITextView-More" class="headerlink" title="UITextView-More"></a><a href="https://github.com/madordie/UITextView-More" target="_blank" rel="noopener">UITextView-More</a></h2><p>使用UITextKit 实现“更多”的折叠效果</p><p><img src="https://github.com/madordie/UITextView-More/blob/master/Untitled.gif?raw=true" alt="预览"></p><a id="more"></a><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><h3 id="获取最后一行Rect"><a href="#获取最后一行Rect" class="headerlink" title="获取最后一行Rect"></a>获取最后一行Rect</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lastRect = <span class="type">CGRect</span>.zero</span><br><span class="line">layoutManager.enumerateEnclosingRects(forGlyphRange: <span class="type">NSRange</span>(location: <span class="number">0</span>, length: textStorage.string.characters.<span class="built_in">count</span>), withinSelectedGlyphRange: <span class="type">NSRange</span>(location: <span class="type">NSNotFound</span>, length: <span class="number">0</span>), <span class="keyword">in</span>: textContainer, using: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (rect, isStop) <span class="keyword">in</span></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> _self = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="keyword">var</span> newRect = rect</span><br><span class="line">newRect.origin.y += _self.textContainerInset.top</span><br><span class="line">lastRect = newRect</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(lastRect)</span><br></pre></td></tr></table></figure><h3 id="增加-exclusionPaths"><a href="#增加-exclusionPaths" class="headerlink" title="增加 exclusionPaths"></a>增加 <code>exclusionPaths</code></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textContainer.exclusionPaths = [<span class="type">UIBezierPath</span>.<span class="keyword">init</span>(rect: rect)]</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul><li><code>UITextView</code>默认携带左右边距，通过<code>UITextView.textContainer.lineFragmentPadding</code>获取</li><li><code>UITextView</code>默认携带上下左右边距(<code>UITextView.textContainerInset</code>)，其中左右和<code>lineFragmentPadding</code>相加</li><li>此处并没有对<a href="https://github.com/madordie/UITextView-More/blob/master/TruncateTextView.swift" target="_blank" rel="noopener">TruncateTextView</a>进行过多的设置，主要是因为继承在UITextView下，<a href="https://github.com/madordie/UITextView-More/blob/master/Untitled.gif" target="_blank" rel="noopener">GIF</a>中的这部分设置放在了<a href="https://github.com/madordie/UITextView-More/blob/master/Demo-AppStore-More/ViewController.swift" target="_blank" rel="noopener">ViewController.swift</a>中</li><li>此处使用的是<code>frame</code>，可以在<code>UIView.sizeToFit()</code>之后获取到<code>UIView</code>的<code>Size</code>。约束也大抵如此</li></ul><hr><ul><li>感谢<a href="https://github.com/lexiaoyao20" target="_blank" rel="noopener">乐逍遥</a>提供的例子，才找到了<code>open func truncatedGlyphRange(inLineFragmentForGlyphAt glyphIndex: Int) -&gt; NSRange</code>方法😂</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;UITextView-More&quot;&gt;&lt;a href=&quot;#UITextView-More&quot; class=&quot;headerlink&quot; title=&quot;UITextView-More&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/madordie/UITextView-More&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UITextView-More&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用UITextKit 实现“更多”的折叠效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/madordie/UITextView-More/blob/master/Untitled.gif?raw=true&quot; alt=&quot;预览&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="效果" scheme="https://madordie.github.io/tags/%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>iOS自动化-Jenkins环境搭建</title>
    <link href="https://madordie.github.io/post/ios-automation-jenkins-configuration/"/>
    <id>https://madordie.github.io/post/ios-automation-jenkins-configuration/</id>
    <published>2017-09-10T01:49:32.000Z</published>
    <updated>2018-09-30T03:21:41.241Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li><a href="../ios-automation-jenkins-configuration">iOS自动化-Jenkins环境搭建</a></li><li><a href="../ios-automation-jenkins-build">iOS自动化-Jenkins编译工程</a></li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p> <strong>Jenkins</strong><br><em>Build great things at any scale</em><br>The leading open source automation server, Jenkins provides hundreds of plugins to support building, deploying and automating any project.</p></blockquote><p>如<a href="https://jenkins.io/" target="_blank" rel="noopener">官网</a>所说<code>Build great things at any scale</code></p><p>从这篇文章中你将会实现：</p><ul><li>在Mac上多种方案安装并启动jenkins</li><li>在局域网中正常访问jenkins</li></ul><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>当然你首先需要一个macOS的系统，为后来的构建做基础。</p><p>Jenkins中可以使用<code>pkg</code>、<code>war</code>的方式运行，当然还有在<a href="https://jenkins.io/doc/book/getting-started/installing/" target="_blank" rel="noopener">Installing Jenkins</a>中提供一些安装方式：</p><blockquote><p> <strong>macOS</strong><br>To install from the website, using a package:</p></blockquote><blockquote><ul><li>Download the latest package</li><li>Open the package and follow the instructions</li></ul></blockquote><blockquote><p>Jenkins can also be installed using brew:</p></blockquote><blockquote><ul><li>Install the latest release version<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install jenkins </span><br></pre></td></tr></table></figure></li><li>Install the LTS version<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install jenkins-lts </span><br></pre></td></tr></table></figure></li></ul></blockquote><p>这里使用<code>brew</code>，因为<strong>很方便</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ brew update &amp;&amp; brew install jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">$ brew update &amp; brew upgrade jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台运行 还支持`stop`、`restart`等 (这种方式还是有差别的，下面会说明)</span></span><br><span class="line">$ brew services start jenkins</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>建议先来看一波<code>--help</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenkins --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>直接运行<code>jenkins</code>命令，可以看到日志输出，但是不能退出命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenkins</span><br></pre></td></tr></table></figure><p>经过漫长的初始化，会将</p><ul><li><code>~/.jenkins</code>目录作为<code>JENKINS_HOME</code></li><li><code>localhost:8080</code>作为默认URL</li></ul><p>终端输出<code>Started initialization</code>一行之后就可以正常打开了。</p><p>在浏览器打开<a href="http://10.12.12.10:8080/" target="_blank" rel="noopener">http://10.12.12.10:8080</a>就可以正常加载啦～</p><p>退出运行：<code>control + C</code> 组合键。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>直接<code>open</code>，看不到日志输出，所对应的运行环境和方案一相同。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open /usr/<span class="built_in">local</span>/opt/jenkins/libexec/jenkins.war</span><br></pre></td></tr></table></figure><p>命令结束，稍等片刻(初始化相关目录、环境)，在浏览器打开<a href="http://10.12.12.10:8080/" target="_blank" rel="noopener">http://10.12.12.10:8080</a>就可以正常加载啦～</p><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>使用<code>brew</code>直接挂在后台作为服务运行起来</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brew services start jenkins</span><br></pre></td></tr></table></figure><p><code>brew</code>还提供其他的参数，比如说<code>restart</code>、<code>list</code>、<code>stop</code> 等等。</p><p>此方案和上面的运行环境是不一样的，会有些权限的差别。</p><h3 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h3><p>使用<code>launchctl</code>、<code>nohup</code> 等其他方案进行的后台运行，同方案三差不多。</p><p>需要说的是<code>launchctl</code>是macOS下系统提供的后台运行方案，<code>brew</code>等，均来自于此。</p><p>在<code>launchctl</code>后台中需要一个<code>plist</code>，但是<code>brew</code>已经做好了，放置在<code>~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</code>。需要说的是<code>launchctl</code>是macOS下系统提供的后台运行方案，<code>brew</code>等，均来自于此，具体的配置参数都和<code>launchctl</code>一样的，搜索一下很多。<code>brew</code>为我们已经准备好了一个，直接使用<code>方案三</code>就行。</p><p>具体操作可以Google一下，很多的～</p><h2 id="安装完成后的配置"><a href="#安装完成后的配置" class="headerlink" title="安装完成后的配置"></a>安装完成后的配置</h2><p>在Jenkins初始化完毕为了验证管理员身份，需要将Jenkins机器上的一个字符串输入到<a href="http://10.12.12.10:8080/" target="_blank" rel="noopener">http://10.12.12.10:8080</a>中进行验证，具体文件目录在输入的界面就能看到，不要大惊小怪。</p><p>之后开始选择安装插件。这里可以选择推荐的～～，也可以自己勾选。为了方便，这里直接选择推荐的方案进行安装。</p><p>经过漫长的等待，终于将插件安装完毕，并启动了起来～～</p><p>Jenkins权限，嗯，这个很重要，可以去<code>系统管理 -&gt; Configure Global Security</code>  中进行设置。</p><p>接下来开始去配置工程吧！传送门：<a href="../ios-automation-jenkins-build">iOS自动化-Jenkins编译工程</a></p><h2 id="可能会碰到的错误"><a href="#可能会碰到的错误" class="headerlink" title="可能会碰到的错误"></a>可能会碰到的错误</h2><h3 id="Error-Permission-denied"><a href="#Error-Permission-denied" class="headerlink" title="Error: Permission denied - ***"></a>Error: Permission denied - ***</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew services start jenkins</span><br><span class="line">Error: Permission denied - ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</span><br></pre></td></tr></table></figure><p>这种很明显<code>Permission denied</code>，在命令行前添加<code>sudo</code>，然后输入密码即可。如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brew services start jenkins</span><br></pre></td></tr></table></figure><h3 id="方案二后的地址哪里来的？"><a href="#方案二后的地址哪里来的？" class="headerlink" title="方案二后的地址哪里来的？"></a><code>方案二</code>后的地址哪里来的？</h3><p>这里推荐的安装方案是<code>brew install jenkins</code></p><p>通过下面的方式找到<code>brew</code>安装的位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ brew services list</span><br><span class="line">Name       Status  User Plist</span><br><span class="line">beanstalkd stopped</span><br><span class="line">influxdb   stopped</span><br><span class="line">jenkins    started keith  ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</span><br><span class="line">nginx      stopped</span><br><span class="line">sonarqube  stopped</span><br><span class="line">FDDdeiMac:~ FDD$ cat ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</span><br><span class="line">...</span><br><span class="line">&lt;string&gt;/usr/<span class="built_in">local</span>/opt/jenkins/libexec/jenkins.war&lt;/string&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="给Jenkins绑定一个IP"><a href="#给Jenkins绑定一个IP" class="headerlink" title="给Jenkins绑定一个IP"></a>给Jenkins绑定一个IP</h3><p>讲道理这个不应该在这里聊的😂，不过还是说一下吧。。</p><p>一般局域网中都是直接自动获取IP信息的也就是DHCP，但是Jenkins总改IP也不好。。于是绑定一下吧。</p><p>在mac 中 <code>系统偏好设置 -&gt; 网络</code> 记录下来当前获取到的IP。</p><p>在<code>高级</code>中将<code>使用DHCP</code>修改为<code>使用DHCP(手动设定地址)</code>，然后将上面的地址填进去就好啦～</p><p>当然你也可以指定其他的地址，只要别人没有占用😂，你开心就好～</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../ios-automation-jenkins-configuration&quot;&gt;iOS自动化-Jenkins环境搭建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../ios-automation-jenkins-build&quot;&gt;iOS自动化-Jenkins编译工程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;Jenkins&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Build great things at any scale&lt;/em&gt;&lt;br&gt;The leading open source automation server, Jenkins provides hundreds of plugins to support building, deploying and automating any project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如&lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;所说&lt;code&gt;Build great things at any scale&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从这篇文章中你将会实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Mac上多种方案安装并启动jenkins&lt;/li&gt;
&lt;li&gt;在局域网中正常访问jenkins&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://madordie.github.io/categories/iOS/"/>
    
    
      <category term="构建" scheme="https://madordie.github.io/tags/%E6%9E%84%E5%BB%BA/"/>
    
      <category term="Jenkins" scheme="https://madordie.github.io/tags/Jenkins/"/>
    
  </entry>
  
</feed>
